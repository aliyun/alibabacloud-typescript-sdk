// This file is auto-generated, don't edit it
/**
 */
import Util, * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import OpenApiUtil from '@alicloud/openapi-util';
import EndpointUtil from '@alicloud/endpoint-util';
import * as $tea from '@alicloud/tea-typescript';

export class KeywordSuggestInfo extends $tea.Model {
  address?: string;
  businessAreaWithCity?: KeywordSuggestInfo;
  /**
   * @example
   * 300100
   */
  cityCode?: number;
  /**
   * @example
   * 杭州
   */
  cityName?: string;
  /**
   * @example
   * 杭州东站
   */
  displayName?: string;
  /**
   * @example
   * 53853318
   */
  hotelId?: string;
  icon?: string;
  /**
   * @example
   * 4.8分
   */
  point?: string;
  /**
   * @example
   * 524
   */
  price?: string;
  /**
   * @example
   * 0
   */
  region?: number;
  type?: number;
  /**
   * @example
   * 景点
   */
  typeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      businessAreaWithCity: 'business_area_with_city',
      cityCode: 'city_code',
      cityName: 'city_name',
      displayName: 'display_name',
      hotelId: 'hotel_id',
      icon: 'icon',
      point: 'point',
      price: 'price',
      region: 'region',
      type: 'type',
      typeDesc: 'type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      businessAreaWithCity: KeywordSuggestInfo,
      cityCode: 'number',
      cityName: 'string',
      displayName: 'string',
      hotelId: 'string',
      icon: 'string',
      point: 'string',
      price: 'string',
      region: 'number',
      type: 'number',
      typeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemFlightRuleInfosValue extends $tea.Model {
  refundChangeRuleDesc?: string;
  baggageDesc?: string;
  static names(): { [key: string]: string } {
    return {
      refundChangeRuleDesc: 'refund_change_rule_desc',
      baggageDesc: 'baggage_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      refundChangeRuleDesc: 'string',
      baggageDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValue extends $tea.Model {
  cabinQuantityList?: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityList[];
  searchPrice?: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice;
  segmentPriceList?: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceList[];
  /**
   * @remarks
   * id
   * 
   * @example
   * ADT07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  id?: string;
  cabinQuantity?: { [key: string]: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue };
  segmentPrice?: { [key: string]: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue };
  static names(): { [key: string]: string } {
    return {
      cabinQuantityList: 'cabin_quantity_list',
      searchPrice: 'search_price',
      segmentPriceList: 'segment_price_list',
      id: 'id',
      cabinQuantity: 'cabin_quantity',
      segmentPrice: 'segment_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinQuantityList: { 'type': 'array', 'itemType': ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityList },
      searchPrice: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice,
      segmentPriceList: { 'type': 'array', 'itemType': ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceList },
      id: 'string',
      cabinQuantity: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue },
      segmentPrice: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemSubItemPositionMapValue extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue extends $tea.Model {
  /**
   * @remarks
   * id
   * 
   * @example
   * ADT07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  id?: string;
  cabinQuantity?: { [key: string]: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue };
  searchPrice?: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice;
  segmentPrice?: { [key: string]: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue };
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      cabinQuantity: 'cabin_quantity',
      searchPrice: 'search_price',
      segmentPrice: 'segment_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      cabinQuantity: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue },
      searchPrice: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice,
      segmentPrice: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListFlightRuleInfosValue extends $tea.Model {
  refundChangeRuleDesc?: string;
  baggageDesc?: string;
  static names(): { [key: string]: string } {
    return {
      refundChangeRuleDesc: 'refund_change_rule_desc',
      baggageDesc: 'baggage_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      refundChangeRuleDesc: 'string',
      baggageDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListShoppingItemMapValue extends $tea.Model {
  /**
   * @remarks
   * id
   * 
   * @example
   * ADT07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  id?: string;
  cabinQuantity?: { [key: string]: ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue };
  searchPrice?: ModuleFlightItemListItemListShoppingItemMapValueSearchPrice;
  segmentPrice?: { [key: string]: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue };
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      cabinQuantity: 'cabin_quantity',
      searchPrice: 'search_price',
      segmentPrice: 'segment_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      cabinQuantity: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue },
      searchPrice: ModuleFlightItemListItemListShoppingItemMapValueSearchPrice,
      segmentPrice: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListSubItemPositionMapValue extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListSubItemsShoppingItemMapValue extends $tea.Model {
  /**
   * @remarks
   * id
   * 
   * @example
   * ADT07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  id?: string;
  cabinQuantity?: { [key: string]: ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue };
  searchPrice?: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice;
  segmentPrice?: { [key: string]: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue };
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      cabinQuantity: 'cabin_quantity',
      searchPrice: 'search_price',
      segmentPrice: 'segment_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      cabinQuantity: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue },
      searchPrice: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice,
      segmentPrice: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleAgentInfosAttributeShowInfoMapValue extends $tea.Model {
  code?: string;
  name?: string;
  text?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      name: 'name',
      text: 'text',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      name: 'string',
      text: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleAgentInfoAttributeShowInfoMapValue extends $tea.Model {
  /**
   * @example
   * FIRST_BAGGAGE
   */
  code?: string;
  name?: string;
  text?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      name: 'name',
      text: 'text',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      name: 'string',
      text: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListFlightRuleInfosValue extends $tea.Model {
  refundChangeRuleDesc?: string;
  baggageDesc?: string;
  static names(): { [key: string]: string } {
    return {
      refundChangeRuleDesc: 'refund_change_rule_desc',
      baggageDesc: 'baggage_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      refundChangeRuleDesc: 'string',
      baggageDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValue extends $tea.Model {
  cabinQuantityList?: ModuleItemListShoppingItemMapValueCabinQuantityList[];
  searchPrice?: ModuleItemListShoppingItemMapValueSearchPrice;
  segmentPriceList?: ModuleItemListShoppingItemMapValueSegmentPriceList[];
  /**
   * @remarks
   * id
   * 
   * @example
   * ADT07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  id?: string;
  cabinQuantity?: { [key: string]: ModuleItemListShoppingItemMapValueCabinQuantityValue };
  segmentPrice?: { [key: string]: ModuleItemListShoppingItemMapValueSegmentPriceValue };
  static names(): { [key: string]: string } {
    return {
      cabinQuantityList: 'cabin_quantity_list',
      searchPrice: 'search_price',
      segmentPriceList: 'segment_price_list',
      id: 'id',
      cabinQuantity: 'cabin_quantity',
      segmentPrice: 'segment_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinQuantityList: { 'type': 'array', 'itemType': ModuleItemListShoppingItemMapValueCabinQuantityList },
      searchPrice: ModuleItemListShoppingItemMapValueSearchPrice,
      segmentPriceList: { 'type': 'array', 'itemType': ModuleItemListShoppingItemMapValueSegmentPriceList },
      id: 'string',
      cabinQuantity: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListShoppingItemMapValueCabinQuantityValue },
      segmentPrice: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListShoppingItemMapValueSegmentPriceValue },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemPositionMapValue extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsShoppingItemMapValue extends $tea.Model {
  searchPrice?: ModuleItemListSubItemsShoppingItemMapValueSearchPrice;
  /**
   * @remarks
   * id
   * 
   * @example
   * ADT07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  id?: string;
  cabinQuantity?: { [key: string]: ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue };
  segmentPrice?: { [key: string]: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue };
  static names(): { [key: string]: string } {
    return {
      searchPrice: 'search_price',
      id: 'id',
      cabinQuantity: 'cabin_quantity',
      segmentPrice: 'segment_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      searchPrice: ModuleItemListSubItemsShoppingItemMapValueSearchPrice,
      id: 'string',
      cabinQuantity: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue },
      segmentPrice: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleOrderItemListBaggageRuleBaggageInfoMapValue extends $tea.Model {
  /**
   * @example
   * 1
   */
  carryFreepc?: number;
  /**
   * @example
   * 10
   */
  carryBagWeight?: number;
  /**
   * @example
   * 10
   */
  carryBagSize?: string;
  /**
   * @example
   * false
   */
  isAllCarryBagWeight?: boolean;
  /**
   * @example
   * CZ
   */
  airline?: string;
  /**
   * @example
   * PKX
   */
  startAirport?: string;
  /**
   * @example
   * CAN
   */
  endAirport?: string;
  /**
   * @example
   * BJS
   */
  startCityCode?: string;
  /**
   * @example
   * CAN
   */
  endCityCode?: string;
  /**
   * @example
   * 1
   */
  freePcs?: number;
  /**
   * @example
   * 10
   */
  baggageWeight?: number;
  /**
   * @example
   * kg
   */
  baggageUnit?: string;
  /**
   * @example
   * 10
   */
  baggageSize?: string;
  /**
   * @example
   * false
   */
  allWeight?: boolean;
  /**
   * @example
   * 1
   */
  totalPcs?: number;
  /**
   * @example
   * 10
   */
  totalWeight?: number;
  static names(): { [key: string]: string } {
    return {
      carryFreepc: 'carry_freepc',
      carryBagWeight: 'carry_bag_weight',
      carryBagSize: 'carry_bag_size',
      isAllCarryBagWeight: 'is_all_carry_bag_weight',
      airline: 'airline',
      startAirport: 'start_airport',
      endAirport: 'end_airport',
      startCityCode: 'start_city_code',
      endCityCode: 'end_city_code',
      freePcs: 'free_pcs',
      baggageWeight: 'baggage_weight',
      baggageUnit: 'baggage_unit',
      baggageSize: 'baggage_size',
      allWeight: 'all_weight',
      totalPcs: 'total_pcs',
      totalWeight: 'total_weight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      carryFreepc: 'number',
      carryBagWeight: 'number',
      carryBagSize: 'string',
      isAllCarryBagWeight: 'boolean',
      airline: 'string',
      startAirport: 'string',
      endAirport: 'string',
      startCityCode: 'string',
      endCityCode: 'string',
      freePcs: 'number',
      baggageWeight: 'number',
      baggageUnit: 'string',
      baggageSize: 'string',
      allWeight: 'boolean',
      totalPcs: 'number',
      totalWeight: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue extends $tea.Model {
  /**
   * @example
   * true
   */
  struct?: boolean;
  /**
   * @example
   * true
   */
  cancelFeeInd?: boolean;
  /**
   * @example
   * false
   */
  changeFeeInd?: boolean;
  /**
   * @example
   * false
   */
  upgradeFeeInd?: boolean;
  /**
   * @example
   * false
   */
  reissueInd?: boolean;
  /**
   * @example
   * 0
   */
  penaltyTypeCode?: number;
  /**
   * @example
   * 1
   */
  penaltyApplyRangeCode?: number;
  /**
   * @example
   * 0
   */
  penaltyChargeTypeCode?: number;
  /**
   * @example
   * 1
   */
  fee?: number;
  /**
   * @example
   * CNY
   */
  currency?: string;
  /**
   * @example
   * 0
   */
  penaltyPercent?: number;
  /**
   * @example
   * 1
   */
  startTime?: number;
  /**
   * @example
   * 10
   */
  endTime?: number;
  /**
   * @example
   * 0
   */
  timeUnitCode?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      struct: 'struct',
      cancelFeeInd: 'cancel_fee_ind',
      changeFeeInd: 'change_fee_ind',
      upgradeFeeInd: 'upgrade_fee_ind',
      reissueInd: 'reissue_ind',
      penaltyTypeCode: 'penalty_type_code',
      penaltyApplyRangeCode: 'penalty_apply_range_code',
      penaltyChargeTypeCode: 'penalty_charge_type_code',
      fee: 'fee',
      currency: 'currency',
      penaltyPercent: 'penalty_percent',
      startTime: 'start_time',
      endTime: 'end_time',
      timeUnitCode: 'time_unit_code',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      struct: 'boolean',
      cancelFeeInd: 'boolean',
      changeFeeInd: 'boolean',
      upgradeFeeInd: 'boolean',
      reissueInd: 'boolean',
      penaltyTypeCode: 'number',
      penaltyApplyRangeCode: 'number',
      penaltyChargeTypeCode: 'number',
      fee: 'number',
      currency: 'string',
      penaltyPercent: 'number',
      startTime: 'number',
      endTime: 'number',
      timeUnitCode: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValue extends $tea.Model {
  cabinQuantityList?: ModuleGroupItemShoppingItemMapValueCabinQuantityList[];
  searchPrice?: ModuleGroupItemShoppingItemMapValueSearchPrice;
  segmentPriceList?: ModuleGroupItemShoppingItemMapValueSegmentPriceList[];
  static names(): { [key: string]: string } {
    return {
      cabinQuantityList: 'cabin_quantity_list',
      searchPrice: 'search_price',
      segmentPriceList: 'segment_price_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinQuantityList: { 'type': 'array', 'itemType': ModuleGroupItemShoppingItemMapValueCabinQuantityList },
      searchPrice: ModuleGroupItemShoppingItemMapValueSearchPrice,
      segmentPriceList: { 'type': 'array', 'itemType': ModuleGroupItemShoppingItemMapValueSegmentPriceList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemSubItemPositionMapValue extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue extends $tea.Model {
  /**
   * @example
   * 1
   */
  carryFreepc?: number;
  /**
   * @example
   * 10
   */
  carryBagWeight?: number;
  /**
   * @example
   * 20*20
   */
  carryBagSize?: string;
  /**
   * @example
   * false
   */
  isAllCarryBagWeight?: boolean;
  /**
   * @example
   * CA
   */
  airline?: string;
  /**
   * @example
   * BJS
   */
  startAirport?: string;
  /**
   * @example
   * HGH
   */
  endAirport?: string;
  /**
   * @example
   * BJS
   */
  startCityCode?: string;
  /**
   * @example
   * HGH
   */
  endCityCode?: string;
  /**
   * @example
   * 1
   */
  freePcs?: number;
  /**
   * @example
   * 30
   */
  baggageWeight?: number;
  /**
   * @example
   * KG
   */
  baggageUnit?: string;
  /**
   * @example
   * 40*50
   */
  baggageSize?: string;
  /**
   * @example
   * false
   */
  allWeight?: boolean;
  static names(): { [key: string]: string } {
    return {
      carryFreepc: 'carry_freepc',
      carryBagWeight: 'carry_bag_weight',
      carryBagSize: 'carry_bag_size',
      isAllCarryBagWeight: 'is_all_carry_bag_weight',
      airline: 'airline',
      startAirport: 'start_airport',
      endAirport: 'end_airport',
      startCityCode: 'start_city_code',
      endCityCode: 'end_city_code',
      freePcs: 'free_pcs',
      baggageWeight: 'baggage_weight',
      baggageUnit: 'baggage_unit',
      baggageSize: 'baggage_size',
      allWeight: 'all_weight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      carryFreepc: 'number',
      carryBagWeight: 'number',
      carryBagSize: 'string',
      isAllCarryBagWeight: 'boolean',
      airline: 'string',
      startAirport: 'string',
      endAirport: 'string',
      startCityCode: 'string',
      endCityCode: 'string',
      freePcs: 'number',
      baggageWeight: 'number',
      baggageUnit: 'string',
      baggageSize: 'string',
      allWeight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue extends $tea.Model {
  /**
   * @example
   * true
   */
  struct?: boolean;
  /**
   * @example
   * true
   */
  cancelFeeInd?: boolean;
  /**
   * @example
   * true
   */
  changeFeeInd?: boolean;
  /**
   * @example
   * true
   */
  upgradeFeeInd?: boolean;
  /**
   * @example
   * true
   */
  reissueInd?: boolean;
  /**
   * @example
   * 1
   */
  penaltyTypeCode?: number;
  /**
   * @example
   * 0
   */
  penaltyApplyRangeCode?: number;
  /**
   * @example
   * 1
   */
  penaltyChargeTypeCode?: number;
  /**
   * @example
   * 300
   */
  fee?: number;
  /**
   * @example
   * CNY
   */
  currency?: string;
  /**
   * @example
   * 30
   */
  penaltyPercent?: number;
  /**
   * @example
   * 48
   */
  startTime?: number;
  /**
   * @example
   * 0
   */
  endTime?: number;
  /**
   * @example
   * 0
   */
  timeUnitCode?: number;
  static names(): { [key: string]: string } {
    return {
      struct: 'struct',
      cancelFeeInd: 'cancel_fee_ind',
      changeFeeInd: 'change_fee_ind',
      upgradeFeeInd: 'upgrade_fee_ind',
      reissueInd: 'reissue_ind',
      penaltyTypeCode: 'penalty_type_code',
      penaltyApplyRangeCode: 'penalty_apply_range_code',
      penaltyChargeTypeCode: 'penalty_charge_type_code',
      fee: 'fee',
      currency: 'currency',
      penaltyPercent: 'penalty_percent',
      startTime: 'start_time',
      endTime: 'end_time',
      timeUnitCode: 'time_unit_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      struct: 'boolean',
      cancelFeeInd: 'boolean',
      changeFeeInd: 'boolean',
      upgradeFeeInd: 'boolean',
      reissueInd: 'boolean',
      penaltyTypeCode: 'number',
      penaltyApplyRangeCode: 'number',
      penaltyChargeTypeCode: 'number',
      fee: 'number',
      currency: 'string',
      penaltyPercent: 'number',
      startTime: 'number',
      endTime: 'number',
      timeUnitCode: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemSubItemsShoppingItemMapValue extends $tea.Model {
  searchPrice?: ModuleGroupItemSubItemsShoppingItemMapValueSearchPrice;
  static names(): { [key: string]: string } {
    return {
      searchPrice: 'search_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      searchPrice: ModuleGroupItemSubItemsShoppingItemMapValueSearchPrice,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue extends $tea.Model {
  /**
   * @example
   * 1
   */
  carryFreepc?: number;
  /**
   * @example
   * 10
   */
  carryBagWeight?: number;
  /**
   * @example
   * 20*20
   */
  carryBagSize?: string;
  /**
   * @example
   * false
   */
  isAllCarryBagWeight?: boolean;
  /**
   * @example
   * CA
   */
  airline?: string;
  /**
   * @example
   * BJS
   */
  startAirport?: string;
  /**
   * @example
   * HGH
   */
  endAirport?: string;
  /**
   * @example
   * BJS
   */
  startCityCode?: string;
  /**
   * @example
   * HGH
   */
  endCityCode?: string;
  /**
   * @example
   * 1
   */
  freePcs?: number;
  /**
   * @example
   * 30
   */
  baggageWeight?: number;
  /**
   * @example
   * KG
   */
  baggageUnit?: string;
  /**
   * @example
   * 40*50
   */
  baggageSize?: string;
  /**
   * @example
   * false
   */
  allWeight?: boolean;
  static names(): { [key: string]: string } {
    return {
      carryFreepc: 'carry_freepc',
      carryBagWeight: 'carry_bag_weight',
      carryBagSize: 'carry_bag_size',
      isAllCarryBagWeight: 'is_all_carry_bag_weight',
      airline: 'airline',
      startAirport: 'start_airport',
      endAirport: 'end_airport',
      startCityCode: 'start_city_code',
      endCityCode: 'end_city_code',
      freePcs: 'free_pcs',
      baggageWeight: 'baggage_weight',
      baggageUnit: 'baggage_unit',
      baggageSize: 'baggage_size',
      allWeight: 'all_weight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      carryFreepc: 'number',
      carryBagWeight: 'number',
      carryBagSize: 'string',
      isAllCarryBagWeight: 'boolean',
      airline: 'string',
      startAirport: 'string',
      endAirport: 'string',
      startCityCode: 'string',
      endCityCode: 'string',
      freePcs: 'number',
      baggageWeight: 'number',
      baggageUnit: 'string',
      baggageSize: 'string',
      allWeight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue extends $tea.Model {
  /**
   * @example
   * true
   */
  struct?: boolean;
  /**
   * @example
   * true
   */
  cancelFeeInd?: boolean;
  /**
   * @example
   * true
   */
  changeFeeInd?: boolean;
  /**
   * @example
   * true
   */
  upgradeFeeInd?: boolean;
  /**
   * @example
   * false
   */
  reissueInd?: boolean;
  /**
   * @example
   * 0
   */
  penaltyTypeCode?: number;
  /**
   * @example
   * 1
   */
  penaltyApplyRangeCode?: number;
  /**
   * @example
   * 0
   */
  penaltyChargeTypeCode?: number;
  /**
   * @example
   * 300
   */
  fee?: number;
  /**
   * @example
   * CNY
   */
  currency?: string;
  /**
   * @example
   * 30
   */
  penaltyPercent?: number;
  /**
   * @example
   * 48
   */
  startTime?: number;
  /**
   * @example
   * 0
   */
  endTime?: number;
  /**
   * @example
   * 0
   */
  timeUnitCode?: number;
  static names(): { [key: string]: string } {
    return {
      struct: 'struct',
      cancelFeeInd: 'cancel_fee_ind',
      changeFeeInd: 'change_fee_ind',
      upgradeFeeInd: 'upgrade_fee_ind',
      reissueInd: 'reissue_ind',
      penaltyTypeCode: 'penalty_type_code',
      penaltyApplyRangeCode: 'penalty_apply_range_code',
      penaltyChargeTypeCode: 'penalty_charge_type_code',
      fee: 'fee',
      currency: 'currency',
      penaltyPercent: 'penalty_percent',
      startTime: 'start_time',
      endTime: 'end_time',
      timeUnitCode: 'time_unit_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      struct: 'boolean',
      cancelFeeInd: 'boolean',
      changeFeeInd: 'boolean',
      upgradeFeeInd: 'boolean',
      reissueInd: 'boolean',
      penaltyTypeCode: 'number',
      penaltyApplyRangeCode: 'number',
      penaltyChargeTypeCode: 'number',
      fee: 'number',
      currency: 'string',
      penaltyPercent: 'number',
      startTime: 'number',
      endTime: 'number',
      timeUnitCode: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue extends $tea.Model {
  /**
   * @example
   * R
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  cabinClassMemo?: string;
  specification?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  linkCabins?: string[];
  /**
   * @example
   * false
   */
  reshopChangeCabin?: boolean;
  childCabinType?: number;
  infantBasicCabin?: string;
  /**
   * @example
   * 2
   */
  innerCabinClass?: number;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinClassMemo: 'cabin_class_memo',
      specification: 'specification',
      quantity: 'quantity',
      linkCabins: 'link_cabins',
      reshopChangeCabin: 'reshop_change_cabin',
      childCabinType: 'child_cabin_type',
      infantBasicCabin: 'infant_basic_cabin',
      innerCabinClass: 'inner_cabin_class',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinClassMemo: 'string',
      specification: 'string',
      quantity: 'string',
      linkCabins: { 'type': 'array', 'itemType': 'string' },
      reshopChangeCabin: 'boolean',
      childCabinType: 'number',
      infantBasicCabin: 'string',
      innerCabinClass: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue extends $tea.Model {
  /**
   * @example
   * R
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  cabinClassMemo?: string;
  specification?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  linkCabins?: string[];
  /**
   * @example
   * false
   */
  reshopChangeCabin?: boolean;
  childCabinType?: number;
  infantBasicCabin?: string;
  /**
   * @example
   * 2
   */
  innerCabinClass?: number;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinClassMemo: 'cabin_class_memo',
      specification: 'specification',
      quantity: 'quantity',
      linkCabins: 'link_cabins',
      reshopChangeCabin: 'reshop_change_cabin',
      childCabinType: 'child_cabin_type',
      infantBasicCabin: 'infant_basic_cabin',
      innerCabinClass: 'inner_cabin_class',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinClassMemo: 'string',
      specification: 'string',
      quantity: 'string',
      linkCabins: { 'type': 'array', 'itemType': 'string' },
      reshopChangeCabin: 'boolean',
      childCabinType: 'number',
      infantBasicCabin: 'string',
      innerCabinClass: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue extends $tea.Model {
  /**
   * @example
   * R
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  cabinClassMemo?: string;
  specification?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  linkCabins?: string[];
  /**
   * @example
   * false
   */
  reshopChangeCabin?: boolean;
  childCabinType?: number;
  infantBasicCabin?: string;
  /**
   * @example
   * 2
   */
  innerCabinClass?: number;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinClassMemo: 'cabin_class_memo',
      specification: 'specification',
      quantity: 'quantity',
      linkCabins: 'link_cabins',
      reshopChangeCabin: 'reshop_change_cabin',
      childCabinType: 'child_cabin_type',
      infantBasicCabin: 'infant_basic_cabin',
      innerCabinClass: 'inner_cabin_class',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinClassMemo: 'string',
      specification: 'string',
      quantity: 'string',
      linkCabins: { 'type': 'array', 'itemType': 'string' },
      reshopChangeCabin: 'boolean',
      childCabinType: 'number',
      infantBasicCabin: 'string',
      innerCabinClass: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue extends $tea.Model {
  /**
   * @example
   * R
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  cabinClassMemo?: string;
  specification?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  linkCabins?: string[];
  /**
   * @example
   * false
   */
  reshopChangeCabin?: boolean;
  childCabinType?: number;
  infantBasicCabin?: string;
  /**
   * @example
   * 2
   */
  innerCabinClass?: number;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinClassMemo: 'cabin_class_memo',
      specification: 'specification',
      quantity: 'quantity',
      linkCabins: 'link_cabins',
      reshopChangeCabin: 'reshop_change_cabin',
      childCabinType: 'child_cabin_type',
      infantBasicCabin: 'infant_basic_cabin',
      innerCabinClass: 'inner_cabin_class',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinClassMemo: 'string',
      specification: 'string',
      quantity: 'string',
      linkCabins: { 'type': 'array', 'itemType': 'string' },
      reshopChangeCabin: 'boolean',
      childCabinType: 'number',
      infantBasicCabin: 'string',
      innerCabinClass: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueCabinQuantityValue extends $tea.Model {
  /**
   * @example
   * R
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  cabinClassMemo?: string;
  specification?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  linkCabins?: string[];
  /**
   * @example
   * false
   */
  reshopChangeCabin?: boolean;
  childCabinType?: number;
  infantBasicCabin?: string;
  /**
   * @example
   * 2
   */
  innerCabinClass?: number;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinClassMemo: 'cabin_class_memo',
      specification: 'specification',
      quantity: 'quantity',
      linkCabins: 'link_cabins',
      reshopChangeCabin: 'reshop_change_cabin',
      childCabinType: 'child_cabin_type',
      infantBasicCabin: 'infant_basic_cabin',
      innerCabinClass: 'inner_cabin_class',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinClassMemo: 'string',
      specification: 'string',
      quantity: 'string',
      linkCabins: { 'type': 'array', 'itemType': 'string' },
      reshopChangeCabin: 'boolean',
      childCabinType: 'number',
      infantBasicCabin: 'string',
      innerCabinClass: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueSegmentPriceValue extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue extends $tea.Model {
  /**
   * @example
   * R
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  cabinClassMemo?: string;
  specification?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  linkCabins?: string[];
  /**
   * @example
   * false
   */
  reshopChangeCabin?: boolean;
  childCabinType?: number;
  infantBasicCabin?: string;
  /**
   * @example
   * 2
   */
  innerCabinClass?: number;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinClassMemo: 'cabin_class_memo',
      specification: 'specification',
      quantity: 'quantity',
      linkCabins: 'link_cabins',
      reshopChangeCabin: 'reshop_change_cabin',
      childCabinType: 'child_cabin_type',
      infantBasicCabin: 'infant_basic_cabin',
      innerCabinClass: 'inner_cabin_class',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinClassMemo: 'string',
      specification: 'string',
      quantity: 'string',
      linkCabins: { 'type': 'array', 'itemType': 'string' },
      reshopChangeCabin: 'boolean',
      childCabinType: 'number',
      infantBasicCabin: 'string',
      innerCabinClass: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AccessTokenRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ggZADkghsadgogeDxdaD
   */
  appSecret?: string;
  static names(): { [key: string]: string } {
    return {
      appSecret: 'app_secret',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appSecret: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AccessTokenResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  data?: AccessTokenResponseBodyData;
  message?: string;
  module?: AccessTokenResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @remarks
   * 成功标识
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      data: 'data',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: AccessTokenResponseBodyData,
      message: 'string',
      module: AccessTokenResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AccessTokenResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AccessTokenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AccessTokenResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDepartmentHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDepartmentRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  deptName?: string;
  managerEmployeeIdList?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dept123
   */
  outDeptId?: string;
  /**
   * @example
   * dept456
   */
  outDeptPid?: string;
  static names(): { [key: string]: string } {
    return {
      deptName: 'dept_name',
      managerEmployeeIdList: 'manager_employee_id_list',
      outDeptId: 'out_dept_id',
      outDeptPid: 'out_dept_pid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deptName: 'string',
      managerEmployeeIdList: { 'type': 'array', 'itemType': 'string' },
      outDeptId: 'string',
      outDeptPid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDepartmentShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  deptName?: string;
  managerEmployeeIdListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dept123
   */
  outDeptId?: string;
  /**
   * @example
   * dept456
   */
  outDeptPid?: string;
  static names(): { [key: string]: string } {
    return {
      deptName: 'dept_name',
      managerEmployeeIdListShrink: 'manager_employee_id_list',
      outDeptId: 'out_dept_id',
      outDeptPid: 'out_dept_pid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deptName: 'string',
      managerEmployeeIdListShrink: 'string',
      outDeptId: 'string',
      outDeptPid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDepartmentResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDepartmentResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddDepartmentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddDepartmentResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeeHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeeRequest extends $tea.Model {
  attribute?: string;
  /**
   * @example
   * https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg
   */
  avatar?: string;
  baseCityCodeList?: string[];
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certList?: AddEmployeeRequestCertList[];
  customRoleCodeList?: string[];
  /**
   * @example
   * 123@163.com
   */
  email?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * false
   */
  isAdmin?: boolean;
  /**
   * @example
   * false
   */
  isBoss?: boolean;
  /**
   * @example
   * false
   */
  isDeptLeader?: boolean;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * user456
   */
  managerUserId?: string;
  outDeptIdList?: string[];
  /**
   * @example
   * 13111111111
   */
  phone?: string;
  /**
   * @example
   * M4
   */
  positionLevel?: string;
  realName?: string;
  /**
   * @example
   * John/Wilson
   */
  realNameEn?: string;
  /**
   * @example
   * union123
   */
  unionId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * user123
   */
  userId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      avatar: 'avatar',
      baseCityCodeList: 'base_city_code_list',
      birthday: 'birthday',
      certList: 'cert_list',
      customRoleCodeList: 'custom_role_code_list',
      email: 'email',
      gender: 'gender',
      isAdmin: 'is_admin',
      isBoss: 'is_boss',
      isDeptLeader: 'is_dept_leader',
      jobNo: 'job_no',
      managerUserId: 'manager_user_id',
      outDeptIdList: 'out_dept_id_list',
      phone: 'phone',
      positionLevel: 'position_level',
      realName: 'real_name',
      realNameEn: 'real_name_en',
      unionId: 'union_id',
      userId: 'user_id',
      userNick: 'user_nick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      avatar: 'string',
      baseCityCodeList: { 'type': 'array', 'itemType': 'string' },
      birthday: 'string',
      certList: { 'type': 'array', 'itemType': AddEmployeeRequestCertList },
      customRoleCodeList: { 'type': 'array', 'itemType': 'string' },
      email: 'string',
      gender: 'string',
      isAdmin: 'boolean',
      isBoss: 'boolean',
      isDeptLeader: 'boolean',
      jobNo: 'string',
      managerUserId: 'string',
      outDeptIdList: { 'type': 'array', 'itemType': 'string' },
      phone: 'string',
      positionLevel: 'string',
      realName: 'string',
      realNameEn: 'string',
      unionId: 'string',
      userId: 'string',
      userNick: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeeShrinkRequest extends $tea.Model {
  attribute?: string;
  /**
   * @example
   * https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg
   */
  avatar?: string;
  baseCityCodeListShrink?: string;
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certListShrink?: string;
  customRoleCodeListShrink?: string;
  /**
   * @example
   * 123@163.com
   */
  email?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * false
   */
  isAdmin?: boolean;
  /**
   * @example
   * false
   */
  isBoss?: boolean;
  /**
   * @example
   * false
   */
  isDeptLeader?: boolean;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * user456
   */
  managerUserId?: string;
  outDeptIdListShrink?: string;
  /**
   * @example
   * 13111111111
   */
  phone?: string;
  /**
   * @example
   * M4
   */
  positionLevel?: string;
  realName?: string;
  /**
   * @example
   * John/Wilson
   */
  realNameEn?: string;
  /**
   * @example
   * union123
   */
  unionId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * user123
   */
  userId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      avatar: 'avatar',
      baseCityCodeListShrink: 'base_city_code_list',
      birthday: 'birthday',
      certListShrink: 'cert_list',
      customRoleCodeListShrink: 'custom_role_code_list',
      email: 'email',
      gender: 'gender',
      isAdmin: 'is_admin',
      isBoss: 'is_boss',
      isDeptLeader: 'is_dept_leader',
      jobNo: 'job_no',
      managerUserId: 'manager_user_id',
      outDeptIdListShrink: 'out_dept_id_list',
      phone: 'phone',
      positionLevel: 'position_level',
      realName: 'real_name',
      realNameEn: 'real_name_en',
      unionId: 'union_id',
      userId: 'user_id',
      userNick: 'user_nick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      avatar: 'string',
      baseCityCodeListShrink: 'string',
      birthday: 'string',
      certListShrink: 'string',
      customRoleCodeListShrink: 'string',
      email: 'string',
      gender: 'string',
      isAdmin: 'boolean',
      isBoss: 'boolean',
      isDeptLeader: 'boolean',
      jobNo: 'string',
      managerUserId: 'string',
      outDeptIdListShrink: 'string',
      phone: 'string',
      positionLevel: 'string',
      realName: 'string',
      realNameEn: 'string',
      unionId: 'string',
      userId: 'string',
      userNick: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeeResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddEmployeeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddEmployeeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeesToCustomRoleHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeesToCustomRoleRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  roleId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * **if can be null:**
   * false
   */
  userIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      roleId: 'role_id',
      userIdList: 'user_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleId: 'string',
      userIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeesToCustomRoleShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  roleId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * **if can be null:**
   * false
   */
  userIdListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      roleId: 'role_id',
      userIdListShrink: 'user_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleId: 'string',
      userIdListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeesToCustomRoleResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeesToCustomRoleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddEmployeesToCustomRoleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddEmployeesToCustomRoleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInvoiceEntityHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInvoiceEntityRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  entities?: AddInvoiceEntityRequestEntities[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 4854821
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      entities: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entities: { 'type': 'array', 'itemType': AddInvoiceEntityRequestEntities },
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInvoiceEntityShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  entitiesShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 4854821
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      entitiesShrink: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entitiesShrink: 'string',
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInvoiceEntityResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: AddInvoiceEntityResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: AddInvoiceEntityResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInvoiceEntityResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddInvoiceEntityResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddInvoiceEntityResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddressGetHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddressGetRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  actionType?: number;
  arrCityCode?: string;
  arrCityName?: string;
  carScenesCode?: string;
  depCityCode?: string;
  depCityName?: string;
  depDate?: string;
  /**
   * @example
   * 460e254b5a5b4bd0801744a2790e5d78
   */
  itineraryId?: string;
  middlePage?: number;
  orderId?: string;
  phone?: string;
  subCorpId?: string;
  /**
   * @example
   * https://alibtrip.open.com
   */
  taobaoCallbackUrl?: string;
  thirdpartApplyId?: string;
  travelerId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  useBookingProxy?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      actionType: 'action_type',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      carScenesCode: 'car_scenes_code',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depDate: 'dep_date',
      itineraryId: 'itinerary_id',
      middlePage: 'middle_page',
      orderId: 'order_Id',
      phone: 'phone',
      subCorpId: 'sub_corp_id',
      taobaoCallbackUrl: 'taobao_callback_url',
      thirdpartApplyId: 'thirdpart_apply_id',
      travelerId: 'traveler_id',
      type: 'type',
      useBookingProxy: 'use_booking_proxy',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionType: 'number',
      arrCityCode: 'string',
      arrCityName: 'string',
      carScenesCode: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depDate: 'string',
      itineraryId: 'string',
      middlePage: 'number',
      orderId: 'string',
      phone: 'string',
      subCorpId: 'string',
      taobaoCallbackUrl: 'string',
      thirdpartApplyId: 'string',
      travelerId: 'string',
      type: 'number',
      useBookingProxy: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddressGetResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: AddressGetResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210bcc3a16583004579056128d33d7
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: AddressGetResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddressGetResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddressGetResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddressGetResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AirportSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AirportSearchRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  keyword?: string;
  /**
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      keyword: 'keyword',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyword: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AirportSearchResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: AirportSearchResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f07f316603757445272547d959f
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: AirportSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AirportSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AirportSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AirportSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AllBaseCityInfoQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripAccessToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripAccessToken: 'x-acs-btrip-access-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripAccessToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AllBaseCityInfoQueryResponseBody extends $tea.Model {
  /**
   * @example
   * success
   */
  code?: string;
  /**
   * @example
   * demo
   */
  message?: string;
  module?: AllBaseCityInfoQueryResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: AllBaseCityInfoQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AllBaseCityInfoQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AllBaseCityInfoQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AllBaseCityInfoQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequest extends $tea.Model {
  /**
   * @example
   * 4000
   */
  budget?: number;
  /**
   * @example
   * 1
   */
  budgetMerge?: number;
  carRule?: ApplyAddRequestCarRule;
  corpName?: string;
  defaultStandard?: ApplyAddRequestDefaultStandard;
  /**
   * @example
   * departId01
   */
  departId?: string;
  departName?: string;
  /**
   * @remarks
   * 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
   * 
   * @example
   * {"cost_center":"成本中心"}
   */
  extendField?: string;
  externalTravelerList?: ApplyAddRequestExternalTravelerList[];
  externalTravelerStandard?: ApplyAddRequestExternalTravelerStandard;
  /**
   * @example
   * 1000
   */
  flightBudget?: number;
  /**
   * @example
   * 1000
   */
  hotelBudget?: number;
  hotelShare?: ApplyAddRequestHotelShare;
  internationalFlightCabins?: string;
  intlFlightBudget?: number;
  intlHotelBudget?: number;
  itineraryList?: ApplyAddRequestItineraryList[];
  /**
   * @example
   * 0
   */
  itineraryRule?: number;
  itinerarySetList?: ApplyAddRequestItinerarySetList[];
  /**
   * @example
   * 1
   */
  limitTraveler?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  subCorpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 00714131
   */
  thirdpartBusinessId?: string;
  thirdpartDepartId?: string;
  /**
   * @example
   * 1
   */
  togetherBookRule?: number;
  /**
   * @example
   * 1000
   */
  trainBudget?: number;
  travelerList?: ApplyAddRequestTravelerList[];
  travelerStandard?: ApplyAddRequestTravelerStandard[];
  /**
   * @remarks
   * This parameter is required.
   */
  tripCause?: string;
  /**
   * @example
   * 1
   */
  tripDay?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  tripTitle?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  /**
   * @example
   * union001
   */
  unionNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * thridpart12138
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 1000
   */
  vehicleBudget?: number;
  static names(): { [key: string]: string } {
    return {
      budget: 'budget',
      budgetMerge: 'budget_merge',
      carRule: 'car_rule',
      corpName: 'corp_name',
      defaultStandard: 'default_standard',
      departId: 'depart_id',
      departName: 'depart_name',
      extendField: 'extend_field',
      externalTravelerList: 'external_traveler_list',
      externalTravelerStandard: 'external_traveler_standard',
      flightBudget: 'flight_budget',
      hotelBudget: 'hotel_budget',
      hotelShare: 'hotel_share',
      internationalFlightCabins: 'international_flight_cabins',
      intlFlightBudget: 'intl_flight_budget',
      intlHotelBudget: 'intl_hotel_budget',
      itineraryList: 'itinerary_list',
      itineraryRule: 'itinerary_rule',
      itinerarySetList: 'itinerary_set_list',
      limitTraveler: 'limit_traveler',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      status: 'status',
      subCorpId: 'sub_corp_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      togetherBookRule: 'together_book_rule',
      trainBudget: 'train_budget',
      travelerList: 'traveler_list',
      travelerStandard: 'traveler_standard',
      tripCause: 'trip_cause',
      tripDay: 'trip_day',
      tripTitle: 'trip_title',
      type: 'type',
      unionNo: 'union_no',
      userId: 'user_id',
      userName: 'user_name',
      vehicleBudget: 'vehicle_budget',
    };
  }

  static types(): { [key: string]: any } {
    return {
      budget: 'number',
      budgetMerge: 'number',
      carRule: ApplyAddRequestCarRule,
      corpName: 'string',
      defaultStandard: ApplyAddRequestDefaultStandard,
      departId: 'string',
      departName: 'string',
      extendField: 'string',
      externalTravelerList: { 'type': 'array', 'itemType': ApplyAddRequestExternalTravelerList },
      externalTravelerStandard: ApplyAddRequestExternalTravelerStandard,
      flightBudget: 'number',
      hotelBudget: 'number',
      hotelShare: ApplyAddRequestHotelShare,
      internationalFlightCabins: 'string',
      intlFlightBudget: 'number',
      intlHotelBudget: 'number',
      itineraryList: { 'type': 'array', 'itemType': ApplyAddRequestItineraryList },
      itineraryRule: 'number',
      itinerarySetList: { 'type': 'array', 'itemType': ApplyAddRequestItinerarySetList },
      limitTraveler: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      status: 'number',
      subCorpId: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartDepartId: 'string',
      togetherBookRule: 'number',
      trainBudget: 'number',
      travelerList: { 'type': 'array', 'itemType': ApplyAddRequestTravelerList },
      travelerStandard: { 'type': 'array', 'itemType': ApplyAddRequestTravelerStandard },
      tripCause: 'string',
      tripDay: 'number',
      tripTitle: 'string',
      type: 'number',
      unionNo: 'string',
      userId: 'string',
      userName: 'string',
      vehicleBudget: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddShrinkRequest extends $tea.Model {
  /**
   * @example
   * 4000
   */
  budget?: number;
  /**
   * @example
   * 1
   */
  budgetMerge?: number;
  carRuleShrink?: string;
  corpName?: string;
  defaultStandardShrink?: string;
  /**
   * @example
   * departId01
   */
  departId?: string;
  departName?: string;
  /**
   * @remarks
   * 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
   * 
   * @example
   * {"cost_center":"成本中心"}
   */
  extendField?: string;
  externalTravelerListShrink?: string;
  externalTravelerStandardShrink?: string;
  /**
   * @example
   * 1000
   */
  flightBudget?: number;
  /**
   * @example
   * 1000
   */
  hotelBudget?: number;
  hotelShareShrink?: string;
  internationalFlightCabins?: string;
  intlFlightBudget?: number;
  intlHotelBudget?: number;
  itineraryListShrink?: string;
  /**
   * @example
   * 0
   */
  itineraryRule?: number;
  itinerarySetListShrink?: string;
  /**
   * @example
   * 1
   */
  limitTraveler?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  subCorpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 00714131
   */
  thirdpartBusinessId?: string;
  thirdpartDepartId?: string;
  /**
   * @example
   * 1
   */
  togetherBookRule?: number;
  /**
   * @example
   * 1000
   */
  trainBudget?: number;
  travelerListShrink?: string;
  travelerStandardShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tripCause?: string;
  /**
   * @example
   * 1
   */
  tripDay?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  tripTitle?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  /**
   * @example
   * union001
   */
  unionNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * thridpart12138
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 1000
   */
  vehicleBudget?: number;
  static names(): { [key: string]: string } {
    return {
      budget: 'budget',
      budgetMerge: 'budget_merge',
      carRuleShrink: 'car_rule',
      corpName: 'corp_name',
      defaultStandardShrink: 'default_standard',
      departId: 'depart_id',
      departName: 'depart_name',
      extendField: 'extend_field',
      externalTravelerListShrink: 'external_traveler_list',
      externalTravelerStandardShrink: 'external_traveler_standard',
      flightBudget: 'flight_budget',
      hotelBudget: 'hotel_budget',
      hotelShareShrink: 'hotel_share',
      internationalFlightCabins: 'international_flight_cabins',
      intlFlightBudget: 'intl_flight_budget',
      intlHotelBudget: 'intl_hotel_budget',
      itineraryListShrink: 'itinerary_list',
      itineraryRule: 'itinerary_rule',
      itinerarySetListShrink: 'itinerary_set_list',
      limitTraveler: 'limit_traveler',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      status: 'status',
      subCorpId: 'sub_corp_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      togetherBookRule: 'together_book_rule',
      trainBudget: 'train_budget',
      travelerListShrink: 'traveler_list',
      travelerStandardShrink: 'traveler_standard',
      tripCause: 'trip_cause',
      tripDay: 'trip_day',
      tripTitle: 'trip_title',
      type: 'type',
      unionNo: 'union_no',
      userId: 'user_id',
      userName: 'user_name',
      vehicleBudget: 'vehicle_budget',
    };
  }

  static types(): { [key: string]: any } {
    return {
      budget: 'number',
      budgetMerge: 'number',
      carRuleShrink: 'string',
      corpName: 'string',
      defaultStandardShrink: 'string',
      departId: 'string',
      departName: 'string',
      extendField: 'string',
      externalTravelerListShrink: 'string',
      externalTravelerStandardShrink: 'string',
      flightBudget: 'number',
      hotelBudget: 'number',
      hotelShareShrink: 'string',
      internationalFlightCabins: 'string',
      intlFlightBudget: 'number',
      intlHotelBudget: 'number',
      itineraryListShrink: 'string',
      itineraryRule: 'number',
      itinerarySetListShrink: 'string',
      limitTraveler: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      status: 'number',
      subCorpId: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartDepartId: 'string',
      togetherBookRule: 'number',
      trainBudget: 'number',
      travelerListShrink: 'string',
      travelerStandardShrink: 'string',
      tripCause: 'string',
      tripDay: 'number',
      tripTitle: 'string',
      type: 'number',
      unionNo: 'string',
      userId: 'string',
      userName: 'string',
      vehicleBudget: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: ApplyAddResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: ApplyAddResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyAddResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyAddResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyApproveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyApproveRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * sdfg
   */
  applyId?: string;
  note?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-12 16:12:53
   */
  operateTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * btrip123
   */
  subCorpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * thirdpart12138
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      note: 'note',
      operateTime: 'operate_time',
      status: 'status',
      subCorpId: 'sub_corp_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      note: 'string',
      operateTime: 'string',
      status: 'number',
      subCorpId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyApproveResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   * 
   * @example
   * module
   */
  module?: string;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyApproveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyApproveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyApproveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyExternalNodeStatusUpdateHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyExternalNodeStatusUpdateRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  nodeId?: string;
  operationRecords?: ApplyExternalNodeStatusUpdateRequestOperationRecords[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * PROCESS_AGREE
   */
  processActionResult?: string;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'node_id',
      operationRecords: 'operation_records',
      processActionResult: 'process_action_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      operationRecords: { 'type': 'array', 'itemType': ApplyExternalNodeStatusUpdateRequestOperationRecords },
      processActionResult: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyExternalNodeStatusUpdateShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  nodeId?: string;
  operationRecordsShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * PROCESS_AGREE
   */
  processActionResult?: string;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'node_id',
      operationRecordsShrink: 'operation_records',
      processActionResult: 'process_action_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      operationRecordsShrink: 'string',
      processActionResult: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyExternalNodeStatusUpdateResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * true
   */
  module?: boolean;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079416784321627628333de4ab
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyExternalNodeStatusUpdateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyExternalNodeStatusUpdateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyExternalNodeStatusUpdateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyInvoiceTaskHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyInvoiceTaskRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  invoiceTaskList?: ApplyInvoiceTaskRequestInvoiceTaskList[];
  static names(): { [key: string]: string } {
    return {
      billDate: 'bill_date',
      invoiceTaskList: 'invoice_task_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billDate: 'string',
      invoiceTaskList: { 'type': 'array', 'itemType': ApplyInvoiceTaskRequestInvoiceTaskList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyInvoiceTaskShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  invoiceTaskListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      billDate: 'bill_date',
      invoiceTaskListShrink: 'invoice_task_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billDate: 'string',
      invoiceTaskListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyInvoiceTaskResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyInvoiceTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyInvoiceTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyInvoiceTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryRequest extends $tea.Model {
  /**
   * @example
   * true
   */
  allApply?: boolean;
  /**
   * @example
   * dept1
   */
  departId?: string;
  /**
   * @example
   * 2017-05-01 00:00:00
   */
  endTime?: string;
  /**
   * @example
   * 2018-05-01 00:00:00
   */
  gmtModified?: string;
  /**
   * @example
   * false
   */
  onlyShangLvApply?: boolean;
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 2017-05-01 00:00:00
   */
  startTime?: string;
  /**
   * @example
   * btrip123
   */
  subCorpId?: string;
  /**
   * @example
   * 2
   */
  type?: number;
  /**
   * @example
   * abs123
   */
  unionNo?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      allApply: 'all_apply',
      departId: 'depart_id',
      endTime: 'end_time',
      gmtModified: 'gmt_modified',
      onlyShangLvApply: 'only_shang_lv_apply',
      page: 'page',
      pageSize: 'page_size',
      startTime: 'start_time',
      subCorpId: 'sub_corp_id',
      type: 'type',
      unionNo: 'union_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allApply: 'boolean',
      departId: 'string',
      endTime: 'string',
      gmtModified: 'string',
      onlyShangLvApply: 'boolean',
      page: 'number',
      pageSize: 'number',
      startTime: 'string',
      subCorpId: 'string',
      type: 'number',
      unionNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  moduleList?: ApplyListQueryResponseBodyModuleList[];
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      moduleList: 'module_list',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      moduleList: { 'type': 'array', 'itemType': ApplyListQueryResponseBodyModuleList },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequest extends $tea.Model {
  /**
   * @example
   * 4000
   */
  budget?: number;
  /**
   * @example
   * 1
   */
  budgetMerge?: number;
  carRule?: ApplyModifyRequestCarRule;
  corpName?: string;
  defaultStandard?: ApplyModifyRequestDefaultStandard;
  /**
   * @example
   * 001
   */
  departId?: string;
  departName?: string;
  /**
   * @remarks
   * 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
   * 
   * @example
   * {"cost_center":"成本中心"}
   */
  extendField?: string;
  externalTravelerList?: ApplyModifyRequestExternalTravelerList[];
  externalTravelerStandard?: ApplyModifyRequestExternalTravelerStandard;
  /**
   * @example
   * 1000
   */
  flightBudget?: number;
  /**
   * @example
   * 1000
   */
  hotelBudget?: number;
  hotelShare?: ApplyModifyRequestHotelShare;
  intlFlightBudget?: number;
  intlHotelBudget?: number;
  /**
   * @example
   * 0
   */
  itineraryList?: ApplyModifyRequestItineraryList[];
  /**
   * @example
   * 0
   */
  itineraryRule?: number;
  itinerarySetList?: ApplyModifyRequestItinerarySetList[];
  /**
   * @example
   * 0
   */
  limitTraveler?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * 子企业Id
   * 
   * @example
   * btrip123
   */
  subCorpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0001A1100000007EX08O
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 202201413141
   */
  thirdpartBusinessId?: string;
  thirdpartDepartId?: string;
  /**
   * @example
   * 1
   */
  togetherBookRule?: number;
  /**
   * @example
   * 1000
   */
  trainBudget?: number;
  travelerList?: ApplyModifyRequestTravelerList[];
  travelerStandard?: ApplyModifyRequestTravelerStandard[];
  /**
   * @remarks
   * This parameter is required.
   */
  tripCause?: string;
  /**
   * @example
   * 1
   */
  tripDay?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  tripTitle?: string;
  /**
   * @example
   * union51415
   */
  unionNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * thirdpart12138
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 1000
   */
  vehicleBudget?: number;
  static names(): { [key: string]: string } {
    return {
      budget: 'budget',
      budgetMerge: 'budget_merge',
      carRule: 'car_rule',
      corpName: 'corp_name',
      defaultStandard: 'default_standard',
      departId: 'depart_id',
      departName: 'depart_name',
      extendField: 'extend_field',
      externalTravelerList: 'external_traveler_list',
      externalTravelerStandard: 'external_traveler_standard',
      flightBudget: 'flight_budget',
      hotelBudget: 'hotel_budget',
      hotelShare: 'hotel_share',
      intlFlightBudget: 'intl_flight_budget',
      intlHotelBudget: 'intl_hotel_budget',
      itineraryList: 'itinerary_list',
      itineraryRule: 'itinerary_rule',
      itinerarySetList: 'itinerary_set_list',
      limitTraveler: 'limit_traveler',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      status: 'status',
      subCorpId: 'sub_corp_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      togetherBookRule: 'together_book_rule',
      trainBudget: 'train_budget',
      travelerList: 'traveler_list',
      travelerStandard: 'traveler_standard',
      tripCause: 'trip_cause',
      tripDay: 'trip_day',
      tripTitle: 'trip_title',
      unionNo: 'union_no',
      userId: 'user_id',
      userName: 'user_name',
      vehicleBudget: 'vehicle_budget',
    };
  }

  static types(): { [key: string]: any } {
    return {
      budget: 'number',
      budgetMerge: 'number',
      carRule: ApplyModifyRequestCarRule,
      corpName: 'string',
      defaultStandard: ApplyModifyRequestDefaultStandard,
      departId: 'string',
      departName: 'string',
      extendField: 'string',
      externalTravelerList: { 'type': 'array', 'itemType': ApplyModifyRequestExternalTravelerList },
      externalTravelerStandard: ApplyModifyRequestExternalTravelerStandard,
      flightBudget: 'number',
      hotelBudget: 'number',
      hotelShare: ApplyModifyRequestHotelShare,
      intlFlightBudget: 'number',
      intlHotelBudget: 'number',
      itineraryList: { 'type': 'array', 'itemType': ApplyModifyRequestItineraryList },
      itineraryRule: 'number',
      itinerarySetList: { 'type': 'array', 'itemType': ApplyModifyRequestItinerarySetList },
      limitTraveler: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      status: 'number',
      subCorpId: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartDepartId: 'string',
      togetherBookRule: 'number',
      trainBudget: 'number',
      travelerList: { 'type': 'array', 'itemType': ApplyModifyRequestTravelerList },
      travelerStandard: { 'type': 'array', 'itemType': ApplyModifyRequestTravelerStandard },
      tripCause: 'string',
      tripDay: 'number',
      tripTitle: 'string',
      unionNo: 'string',
      userId: 'string',
      userName: 'string',
      vehicleBudget: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyShrinkRequest extends $tea.Model {
  /**
   * @example
   * 4000
   */
  budget?: number;
  /**
   * @example
   * 1
   */
  budgetMerge?: number;
  carRuleShrink?: string;
  corpName?: string;
  defaultStandardShrink?: string;
  /**
   * @example
   * 001
   */
  departId?: string;
  departName?: string;
  /**
   * @remarks
   * 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
   * 
   * @example
   * {"cost_center":"成本中心"}
   */
  extendField?: string;
  externalTravelerListShrink?: string;
  externalTravelerStandardShrink?: string;
  /**
   * @example
   * 1000
   */
  flightBudget?: number;
  /**
   * @example
   * 1000
   */
  hotelBudget?: number;
  hotelShareShrink?: string;
  intlFlightBudget?: number;
  intlHotelBudget?: number;
  /**
   * @example
   * 0
   */
  itineraryListShrink?: string;
  /**
   * @example
   * 0
   */
  itineraryRule?: number;
  itinerarySetListShrink?: string;
  /**
   * @example
   * 0
   */
  limitTraveler?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * 子企业Id
   * 
   * @example
   * btrip123
   */
  subCorpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0001A1100000007EX08O
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 202201413141
   */
  thirdpartBusinessId?: string;
  thirdpartDepartId?: string;
  /**
   * @example
   * 1
   */
  togetherBookRule?: number;
  /**
   * @example
   * 1000
   */
  trainBudget?: number;
  travelerListShrink?: string;
  travelerStandardShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tripCause?: string;
  /**
   * @example
   * 1
   */
  tripDay?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  tripTitle?: string;
  /**
   * @example
   * union51415
   */
  unionNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * thirdpart12138
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 1000
   */
  vehicleBudget?: number;
  static names(): { [key: string]: string } {
    return {
      budget: 'budget',
      budgetMerge: 'budget_merge',
      carRuleShrink: 'car_rule',
      corpName: 'corp_name',
      defaultStandardShrink: 'default_standard',
      departId: 'depart_id',
      departName: 'depart_name',
      extendField: 'extend_field',
      externalTravelerListShrink: 'external_traveler_list',
      externalTravelerStandardShrink: 'external_traveler_standard',
      flightBudget: 'flight_budget',
      hotelBudget: 'hotel_budget',
      hotelShareShrink: 'hotel_share',
      intlFlightBudget: 'intl_flight_budget',
      intlHotelBudget: 'intl_hotel_budget',
      itineraryListShrink: 'itinerary_list',
      itineraryRule: 'itinerary_rule',
      itinerarySetListShrink: 'itinerary_set_list',
      limitTraveler: 'limit_traveler',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      status: 'status',
      subCorpId: 'sub_corp_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      togetherBookRule: 'together_book_rule',
      trainBudget: 'train_budget',
      travelerListShrink: 'traveler_list',
      travelerStandardShrink: 'traveler_standard',
      tripCause: 'trip_cause',
      tripDay: 'trip_day',
      tripTitle: 'trip_title',
      unionNo: 'union_no',
      userId: 'user_id',
      userName: 'user_name',
      vehicleBudget: 'vehicle_budget',
    };
  }

  static types(): { [key: string]: any } {
    return {
      budget: 'number',
      budgetMerge: 'number',
      carRuleShrink: 'string',
      corpName: 'string',
      defaultStandardShrink: 'string',
      departId: 'string',
      departName: 'string',
      extendField: 'string',
      externalTravelerListShrink: 'string',
      externalTravelerStandardShrink: 'string',
      flightBudget: 'number',
      hotelBudget: 'number',
      hotelShareShrink: 'string',
      intlFlightBudget: 'number',
      intlHotelBudget: 'number',
      itineraryListShrink: 'string',
      itineraryRule: 'number',
      itinerarySetListShrink: 'string',
      limitTraveler: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      status: 'number',
      subCorpId: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartDepartId: 'string',
      togetherBookRule: 'number',
      trainBudget: 'number',
      travelerListShrink: 'string',
      travelerStandardShrink: 'string',
      tripCause: 'string',
      tripDay: 'number',
      tripTitle: 'string',
      unionNo: 'string',
      userId: 'string',
      userName: 'string',
      vehicleBudget: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: ApplyModifyResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: ApplyModifyResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyModifyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyModifyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryRequest extends $tea.Model {
  /**
   * @example
   * 123
   */
  applyId?: number;
  /**
   * @example
   * 201710111505000464651
   */
  applyShowId?: string;
  /**
   * @example
   * btrip123
   */
  subCorpId?: string;
  /**
   * @example
   * adczd
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      applyShowId: 'apply_show_id',
      subCorpId: 'sub_corp_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      applyShowId: 'string',
      subCorpId: 'string',
      thirdpartApplyId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: ApplyQueryResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: ApplyQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyTripTaskExecuteHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyTripTaskExecuteRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * open
   */
  actionFrom?: string;
  comment?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * agree
   */
  taskAction?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  taskId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * thirdpart12138
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      actionFrom: 'action_from',
      comment: 'comment',
      taskAction: 'task_action',
      taskId: 'task_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionFrom: 'string',
      comment: 'string',
      taskAction: 'string',
      taskId: 'number',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyTripTaskExecuteResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * true
   */
  module?: boolean;
  /**
   * @example
   * 2FB0D7A8-BA41-5D04-BEFC-CADA5481AC53
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bc56016876728084104176d2c35
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyTripTaskExecuteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyTripTaskExecuteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyTripTaskExecuteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BaseCityInfoSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripAccessToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripAccessToken: 'x-acs-btrip-access-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripAccessToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BaseCityInfoSearchRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  keyword?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   * 
   * **if can be null:**
   * false
   */
  region?: string;
  static names(): { [key: string]: string } {
    return {
      keyword: 'keyword',
      region: 'region',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyword: 'string',
      region: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BaseCityInfoSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: BaseCityInfoSearchResponseBodyModule[];
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': BaseCityInfoSearchResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BaseCityInfoSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BaseCityInfoSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BaseCityInfoSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BtripBillInfoAdjustHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BtripBillInfoAdjustRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  primaryId?: number;
  /**
   * @example
   * GA15131
   */
  thirdPartCostCenterId?: string;
  /**
   * @example
   * GA15131
   */
  thirdPartDepartmentId?: string;
  /**
   * @example
   * GA15131
   */
  thirdPartInvoiceId?: string;
  /**
   * @example
   * GA15131
   */
  thirdPartProjectId?: string;
  /**
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      primaryId: 'primary_id',
      thirdPartCostCenterId: 'third_part_cost_center_id',
      thirdPartDepartmentId: 'third_part_department_id',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdPartProjectId: 'third_part_project_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      primaryId: 'number',
      thirdPartCostCenterId: 'string',
      thirdPartDepartmentId: 'string',
      thirdPartInvoiceId: 'string',
      thirdPartProjectId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BtripBillInfoAdjustResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BtripBillInfoAdjustResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BtripBillInfoAdjustResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BtripBillInfoAdjustResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyAddHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyAddRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  cause?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  city?: string;
  cityCodeSet?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-12 14:52:52
   */
  date?: string;
  /**
   * @example
   * 2022-07-12 18:51:25
   */
  finishedDate?: string;
  /**
   * @example
   * project1413
   */
  projectCode?: string;
  projectName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  status?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * IRGS1413
   */
  thirdPartApplyId?: string;
  /**
   * @example
   * QA1411
   */
  thirdPartCostCenterId?: string;
  /**
   * @example
   * GA15131
   */
  thirdPartInvoiceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timesTotal?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timesType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timesUsed?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  title?: string;
  travelerStandard?: CarApplyAddRequestTravelerStandard[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * OPEN1415614
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cause: 'cause',
      city: 'city',
      cityCodeSet: 'city_code_set',
      date: 'date',
      finishedDate: 'finished_date',
      projectCode: 'project_code',
      projectName: 'project_name',
      status: 'status',
      thirdPartApplyId: 'third_part_apply_id',
      thirdPartCostCenterId: 'third_part_cost_center_id',
      thirdPartInvoiceId: 'third_part_invoice_id',
      timesTotal: 'times_total',
      timesType: 'times_type',
      timesUsed: 'times_used',
      title: 'title',
      travelerStandard: 'traveler_standard',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cause: 'string',
      city: 'string',
      cityCodeSet: 'string',
      date: 'string',
      finishedDate: 'string',
      projectCode: 'string',
      projectName: 'string',
      status: 'number',
      thirdPartApplyId: 'string',
      thirdPartCostCenterId: 'string',
      thirdPartInvoiceId: 'string',
      timesTotal: 'number',
      timesType: 'number',
      timesUsed: 'number',
      title: 'string',
      travelerStandard: { 'type': 'array', 'itemType': CarApplyAddRequestTravelerStandard },
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyAddShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  cause?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  city?: string;
  cityCodeSet?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-12 14:52:52
   */
  date?: string;
  /**
   * @example
   * 2022-07-12 18:51:25
   */
  finishedDate?: string;
  /**
   * @example
   * project1413
   */
  projectCode?: string;
  projectName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  status?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * IRGS1413
   */
  thirdPartApplyId?: string;
  /**
   * @example
   * QA1411
   */
  thirdPartCostCenterId?: string;
  /**
   * @example
   * GA15131
   */
  thirdPartInvoiceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timesTotal?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timesType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timesUsed?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  title?: string;
  travelerStandardShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * OPEN1415614
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cause: 'cause',
      city: 'city',
      cityCodeSet: 'city_code_set',
      date: 'date',
      finishedDate: 'finished_date',
      projectCode: 'project_code',
      projectName: 'project_name',
      status: 'status',
      thirdPartApplyId: 'third_part_apply_id',
      thirdPartCostCenterId: 'third_part_cost_center_id',
      thirdPartInvoiceId: 'third_part_invoice_id',
      timesTotal: 'times_total',
      timesType: 'times_type',
      timesUsed: 'times_used',
      title: 'title',
      travelerStandardShrink: 'traveler_standard',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cause: 'string',
      city: 'string',
      cityCodeSet: 'string',
      date: 'string',
      finishedDate: 'string',
      projectCode: 'string',
      projectName: 'string',
      status: 'number',
      thirdPartApplyId: 'string',
      thirdPartCostCenterId: 'string',
      thirdPartInvoiceId: 'string',
      timesTotal: 'number',
      timesType: 'number',
      timesUsed: 'number',
      title: 'string',
      travelerStandardShrink: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyAddResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 1002923002
   */
  module?: number;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'number',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyAddResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CarApplyAddResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CarApplyAddResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyModifyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyModifyRequest extends $tea.Model {
  /**
   * @example
   * 2022-07-12 16:12:53
   */
  operateTime?: string;
  remark?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * IRGS1413
   */
  thirdPartApplyId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * open62141
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      operateTime: 'operate_time',
      remark: 'remark',
      status: 'status',
      thirdPartApplyId: 'third_part_apply_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operateTime: 'string',
      remark: 'string',
      status: 'number',
      thirdPartApplyId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyModifyResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   * 
   * @example
   * {\\"list\\": [], \\"pageSize\\": 20, \\"pageNo\\": 1}
   */
  module?: boolean;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyModifyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CarApplyModifyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CarApplyModifyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryRequest extends $tea.Model {
  /**
   * @example
   * 2021-03-18 20:26:56
   */
  createdEndAt?: string;
  /**
   * @example
   * 2021-03-18 20:26:56
   */
  createdStartAt?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * apply1
   */
  thirdPartApplyId?: string;
  /**
   * @example
   * userid
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      createdEndAt: 'created_end_at',
      createdStartAt: 'created_start_at',
      pageNumber: 'page_number',
      pageSize: 'page_size',
      thirdPartApplyId: 'third_part_apply_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createdEndAt: 'string',
      createdStartAt: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      thirdPartApplyId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryResponseBody extends $tea.Model {
  applyList?: CarApplyQueryResponseBodyApplyList[];
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  /**
   * @example
   * 6
   */
  total?: number;
  /**
   * @example
   * 210bcc3a16583004579056128d33d7
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      applyList: 'apply_list',
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      total: 'total',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyList: { 'type': 'array', 'itemType': CarApplyQueryResponseBodyApplyList },
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      total: 'number',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CarApplyQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CarApplyQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarBillSettlementQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 30
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-01
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: CarBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CarBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CarBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CarBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  allApply?: boolean;
  /**
   * @example
   * 117429516
   */
  applyId?: number;
  /**
   * @example
   * departId
   */
  departId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  endTime?: string;
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  startTime?: string;
  /**
   * @example
   * cs2NH_n1QTC3R6hB9m-BAQ08221658314273
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateEndTime?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateStartTime?: string;
  /**
   * @example
   * userId
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      allApply: 'all_apply',
      applyId: 'apply_id',
      departId: 'depart_id',
      endTime: 'end_time',
      page: 'page',
      pageSize: 'page_size',
      startTime: 'start_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      updateEndTime: 'update_end_time',
      updateStartTime: 'update_start_time',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allApply: 'boolean',
      applyId: 'number',
      departId: 'string',
      endTime: 'string',
      page: 'number',
      pageSize: 'number',
      startTime: 'string',
      thirdpartApplyId: 'string',
      updateEndTime: 'string',
      updateStartTime: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: CarOrderListQueryResponseBodyModule[];
  pageInfo?: CarOrderListQueryResponseBodyPageInfo;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      pageInfo: 'page_info',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': CarOrderListQueryResponseBodyModule },
      pageInfo: CarOrderListQueryResponseBodyPageInfo,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CarOrderListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CarOrderListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryRequest extends $tea.Model {
  /**
   * @example
   * 1012000000000000
   */
  orderId?: number;
  /**
   * @example
   * 1000000
   */
  subOrderId?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      subOrderId: 'sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      subOrderId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: CarOrderQueryResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CarOrderQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CarOrderQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CarOrderQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarSceneQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarSceneQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: CarSceneQueryResponseBodyModule[];
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': CarSceneQueryResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarSceneQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CarSceneQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CarSceneQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChannelCorpCreateHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * aqfrefd2321
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChannelCorpCreateRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  administratorName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 18378889782
   */
  administratorPhone?: string;
  city?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  corpName?: string;
  province?: string;
  /**
   * @example
   * 1
   */
  scope?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 00001
   */
  thirdCorpId?: string;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      administratorName: 'administrator_name',
      administratorPhone: 'administrator_phone',
      city: 'city',
      corpName: 'corp_name',
      province: 'province',
      scope: 'scope',
      thirdCorpId: 'third_corp_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      administratorName: 'string',
      administratorPhone: 'string',
      city: 'string',
      corpName: 'string',
      province: 'string',
      scope: 'number',
      thirdCorpId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChannelCorpCreateResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: ChannelCorpCreateResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: ChannelCorpCreateResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChannelCorpCreateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ChannelCorpCreateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ChannelCorpCreateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CitySearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CitySearchRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  keyword?: string;
  static names(): { [key: string]: string } {
    return {
      keyword: 'keyword',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyword: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CitySearchResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: CitySearchResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CitySearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CitySearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CitySearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CitySearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplyQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplyQueryRequest extends $tea.Model {
  /**
   * @example
   * 1003366164
   */
  applyId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3
   */
  bizCategory?: number;
  businessInstanceId?: string;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      bizCategory: 'biz_category',
      businessInstanceId: 'business_instance_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      bizCategory: 'number',
      businessInstanceId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplyQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: CommonApplyQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CommonApplyQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplyQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CommonApplyQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CommonApplyQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplySyncHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplySyncRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1003366164
   */
  applyId?: number;
  /**
   * @example
   * 3
   */
  bizCategory?: number;
  remark?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * asfa
   */
  thirdpartyFlowId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      bizCategory: 'biz_category',
      remark: 'remark',
      status: 'status',
      thirdpartyFlowId: 'thirdparty_flow_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      bizCategory: 'number',
      remark: 'string',
      status: 'number',
      thirdpartyFlowId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplySyncResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   * 
   * @example
   * {\\"list\\": [], \\"pageSize\\": 20, \\"pageNo\\": 1}
   */
  module?: boolean;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplySyncResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CommonApplySyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CommonApplySyncResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorFlightBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorFlightBillSettlementQueryRequest extends $tea.Model {
  /**
   * @example
   * cooperator_alibtrip
   */
  cooperatorId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-02
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      cooperatorId: 'cooperator_id',
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cooperatorId: 'string',
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorFlightBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: CooperatorFlightBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * 2103ad1216872266815642815d7e03
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * trace_id
   * 
   * @example
   * 213e20c816937929648732715e16f1
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CooperatorFlightBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorFlightBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CooperatorFlightBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CooperatorFlightBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelBillSettlementQueryRequest extends $tea.Model {
  /**
   * @example
   * cooperator_alibtrip
   */
  cooperatorId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-02
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      cooperatorId: 'cooperator_id',
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cooperatorId: 'string',
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: CooperatorHotelBillSettlementQueryResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CooperatorHotelBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CooperatorHotelBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CooperatorHotelBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelEventPushHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelEventPushRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 11
   */
  changeOrderStatus?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  changeOrderStatusDesc?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * coop_123456
   */
  cooperatorOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * USER_LEAVE
   */
  event?: string;
  eventDesc?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 204-09-01 10:55:20
   */
  eventTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  orderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeOrderStatus: 'change_order_status',
      changeOrderStatusDesc: 'change_order_status_desc',
      cooperatorOrderId: 'cooperator_order_id',
      event: 'event',
      eventDesc: 'event_desc',
      eventTime: 'event_time',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeOrderStatus: 'number',
      changeOrderStatusDesc: 'string',
      cooperatorOrderId: 'string',
      event: 'string',
      eventDesc: 'string',
      eventTime: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelEventPushResponseBody extends $tea.Model {
  code?: string;
  message?: string;
  /**
   * @example
   * true
   */
  module?: boolean;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelEventPushResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CooperatorHotelEventPushResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CooperatorHotelEventPushResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorSyncPayStatusHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorSyncPayStatusRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1234
   */
  cooperatorOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  cooperatorPayNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1017018197205925373
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * SUCCESS
   */
  payStatus?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1726022215000
   */
  payTime?: number;
  static names(): { [key: string]: string } {
    return {
      cooperatorOrderId: 'cooperator_order_id',
      cooperatorPayNo: 'cooperator_pay_no',
      orderId: 'order_id',
      payStatus: 'pay_status',
      payTime: 'pay_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cooperatorOrderId: 'string',
      cooperatorPayNo: 'string',
      orderId: 'string',
      payStatus: 'string',
      payTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorSyncPayStatusResponseBody extends $tea.Model {
  /**
   * @example
   * System.Error
   */
  code?: string;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * false
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorSyncPayStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CooperatorSyncPayStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CooperatorSyncPayStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpAuthLinkInfoQueryResponseBody extends $tea.Model {
  code?: string;
  message?: string;
  module?: CorpAuthLinkInfoQueryResponseBodyModule;
  requestId?: string;
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CorpAuthLinkInfoQueryResponseBodyModule,
      requestId: 'string',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpAuthLinkInfoQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CorpAuthLinkInfoQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CorpAuthLinkInfoQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpTokenHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * vf9_bvla0qs
   */
  xAcsBtripAccessToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripAccessToken: 'x-acs-btrip-access-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripAccessToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpTokenRequest extends $tea.Model {
  /**
   * @example
   * Z2FyYmE1YTZjMDAwTixJU1M5LnZlLXtMO3FKbiYqJSM
   */
  appSecret?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * open324dfsdafsgcxvxv
   */
  corpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      appSecret: 'app_secret',
      corpId: 'corp_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appSecret: 'string',
      corpId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpTokenResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  data?: CorpTokenResponseBodyData;
  message?: string;
  module?: CorpTokenResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @remarks
   * 是否成功
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      data: 'data',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CorpTokenResponseBodyData,
      message: 'string',
      module: CorpTokenResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpTokenResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CorpTokenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CorpTokenResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterDeleteHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterDeleteRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdpartId?: string;
  static names(): { [key: string]: string } {
    return {
      thirdpartId: 'thirdpart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      thirdpartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterDeleteResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterDeleteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CostCenterDeleteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CostCenterDeleteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterModifyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterModifyRequest extends $tea.Model {
  /**
   * @example
   * a@alipay.com
   */
  alipayNo?: string;
  disable?: number;
  /**
   * @example
   * 12345
   */
  number?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  scope?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdpartId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      alipayNo: 'alipay_no',
      disable: 'disable',
      number: 'number',
      scope: 'scope',
      thirdpartId: 'thirdpart_id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayNo: 'string',
      disable: 'number',
      number: 'string',
      scope: 'number',
      thirdpartId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterModifyResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterModifyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CostCenterModifyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CostCenterModifyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterQueryRequest extends $tea.Model {
  disable?: number;
  /**
   * @example
   * false
   */
  needOrgEntity?: boolean;
  /**
   * @example
   * cost1
   */
  thirdpartId?: string;
  title?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      disable: 'disable',
      needOrgEntity: 'need_org_entity',
      thirdpartId: 'thirdpart_id',
      title: 'title',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disable: 'number',
      needOrgEntity: 'boolean',
      thirdpartId: 'string',
      title: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: CostCenterQueryResponseBodyModule[];
  /**
   * @example
   * true
   */
  morePage?: boolean;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      morePage: 'more_page',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': CostCenterQueryResponseBodyModule },
      morePage: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CostCenterQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CostCenterQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterSaveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterSaveRequest extends $tea.Model {
  /**
   * @example
   * a@alipay.com
   */
  alipayNo?: string;
  disable?: number;
  /**
   * @example
   * 12345
   */
  number?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  scope?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdpartId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      alipayNo: 'alipay_no',
      disable: 'disable',
      number: 'number',
      scope: 'scope',
      thirdpartId: 'thirdpart_id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayNo: 'string',
      disable: 'number',
      number: 'string',
      scope: 'number',
      thirdpartId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterSaveResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: CostCenterSaveResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CostCenterSaveResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterSaveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CostCenterSaveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CostCenterSaveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCustomRoleHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCustomRoleRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123abc
   */
  roleId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  roleName?: string;
  static names(): { [key: string]: string } {
    return {
      roleId: 'role_id',
      roleName: 'role_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleId: 'string',
      roleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCustomRoleResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCustomRoleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCustomRoleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCustomRoleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSubCorpHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSubCorpRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * corp123
   */
  outerCorpId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  outerCorpName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      outerCorpId: 'outer_corp_id',
      outerCorpName: 'outer_corp_name',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      outerCorpId: 'string',
      outerCorpName: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSubCorpResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: CreateSubCorpResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: CreateSubCorpResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSubCorpResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSubCorpResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSubCorpResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCustomRoleHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCustomRoleRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  roleId?: string;
  static names(): { [key: string]: string } {
    return {
      roleId: 'role_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCustomRoleResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCustomRoleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteCustomRoleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteCustomRoleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDepartmentHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDepartmentRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dept123
   */
  outDeptId?: string;
  static names(): { [key: string]: string } {
    return {
      outDeptId: 'out_dept_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      outDeptId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDepartmentResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e847f16611516748613869de4f6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDepartmentResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDepartmentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDepartmentResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEmployeesFromCustomRoleHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEmployeesFromCustomRoleRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  roleId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      roleId: 'role_id',
      userIdList: 'user_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleId: 'string',
      userIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEmployeesFromCustomRoleShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  roleId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userIdListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      roleId: 'role_id',
      userIdListShrink: 'user_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleId: 'string',
      userIdListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEmployeesFromCustomRoleResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEmployeesFromCustomRoleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteEmployeesFromCustomRoleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteEmployeesFromCustomRoleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInvoiceEntityHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInvoiceEntityRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  delAll?: boolean;
  entities?: DeleteInvoiceEntityRequestEntities[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      delAll: 'del_all',
      entities: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      delAll: 'boolean',
      entities: { 'type': 'array', 'itemType': DeleteInvoiceEntityRequestEntities },
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInvoiceEntityShrinkRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  delAll?: boolean;
  entitiesShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      delAll: 'del_all',
      entitiesShrink: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      delAll: 'boolean',
      entitiesShrink: 'string',
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInvoiceEntityResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: DeleteInvoiceEntityResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: DeleteInvoiceEntityResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInvoiceEntityResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteInvoiceEntityResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteInvoiceEntityResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DepartmentSaveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DepartmentSaveRequest extends $tea.Model {
  departList?: DepartmentSaveRequestDepartList[];
  static names(): { [key: string]: string } {
    return {
      departList: 'depart_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      departList: { 'type': 'array', 'itemType': DepartmentSaveRequestDepartList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DepartmentSaveShrinkRequest extends $tea.Model {
  departListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      departListShrink: 'depart_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      departListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DepartmentSaveResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e847516614936690356047dde07
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DepartmentSaveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DepartmentSaveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DepartmentSaveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  applyItineraryList?: ElectronicItineraryBatchApplyRequestApplyItineraryList[];
  /**
   * @example
   * true
   */
  canReprint?: boolean;
  static names(): { [key: string]: string } {
    return {
      applyItineraryList: 'apply_itinerary_list',
      canReprint: 'can_reprint',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyItineraryList: { 'type': 'array', 'itemType': ElectronicItineraryBatchApplyRequestApplyItineraryList },
      canReprint: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  applyItineraryListShrink?: string;
  /**
   * @example
   * true
   */
  canReprint?: boolean;
  static names(): { [key: string]: string } {
    return {
      applyItineraryListShrink: 'apply_itinerary_list',
      canReprint: 'can_reprint',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyItineraryListShrink: 'string',
      canReprint: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: number;
  message?: string;
  module?: ElectronicItineraryBatchApplyResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      message: 'string',
      module: ElectronicItineraryBatchApplyResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ElectronicItineraryBatchApplyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ElectronicItineraryBatchApplyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryGetApplyResultHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryGetApplyResultRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0c7d5944608943479a9a4d40c1eec618
   */
  batchApplyNo?: string;
  static names(): { [key: string]: string } {
    return {
      batchApplyNo: 'batch_apply_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchApplyNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryGetApplyResultResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: number;
  message?: string;
  module?: ElectronicItineraryGetApplyResultResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      message: 'string',
      module: ElectronicItineraryGetApplyResultResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryGetApplyResultResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ElectronicItineraryGetApplyResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ElectronicItineraryGetApplyResultResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityAddHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityAddRequest extends $tea.Model {
  entityDOList?: EntityAddRequestEntityDOList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdpartId?: string;
  static names(): { [key: string]: string } {
    return {
      entityDOList: 'entity_d_o_list',
      thirdpartId: 'thirdpart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityDOList: { 'type': 'array', 'itemType': EntityAddRequestEntityDOList },
      thirdpartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityAddShrinkRequest extends $tea.Model {
  entityDOListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdpartId?: string;
  static names(): { [key: string]: string } {
    return {
      entityDOListShrink: 'entity_d_o_list',
      thirdpartId: 'thirdpart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityDOListShrink: 'string',
      thirdpartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityAddResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: EntityAddResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: EntityAddResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityAddResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EntityAddResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EntityAddResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityDeleteHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityDeleteRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * true
   */
  delAll?: boolean;
  entityDOList?: EntityDeleteRequestEntityDOList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  thirdpartId?: string;
  static names(): { [key: string]: string } {
    return {
      delAll: 'del_all',
      entityDOList: 'entity_d_o_list',
      thirdpartId: 'thirdpart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      delAll: 'boolean',
      entityDOList: { 'type': 'array', 'itemType': EntityDeleteRequestEntityDOList },
      thirdpartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityDeleteShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * true
   */
  delAll?: boolean;
  entityDOListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  thirdpartId?: string;
  static names(): { [key: string]: string } {
    return {
      delAll: 'del_all',
      entityDOListShrink: 'entity_d_o_list',
      thirdpartId: 'thirdpart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      delAll: 'boolean',
      entityDOListShrink: 'string',
      thirdpartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityDeleteResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: EntityDeleteResponseBodyModule;
  /**
   * @example
   * true
   */
  morePage?: boolean;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      morePage: 'more_page',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: EntityDeleteResponseBodyModule,
      morePage: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityDeleteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EntityDeleteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EntityDeleteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntitySetHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntitySetRequest extends $tea.Model {
  entityDOList?: EntitySetRequestEntityDOList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdpartId?: string;
  static names(): { [key: string]: string } {
    return {
      entityDOList: 'entity_d_o_list',
      thirdpartId: 'thirdpart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityDOList: { 'type': 'array', 'itemType': EntitySetRequestEntityDOList },
      thirdpartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntitySetShrinkRequest extends $tea.Model {
  entityDOListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdpartId?: string;
  static names(): { [key: string]: string } {
    return {
      entityDOListShrink: 'entity_d_o_list',
      thirdpartId: 'thirdpart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityDOListShrink: 'string',
      thirdpartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntitySetResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: EntitySetResponseBodyModule;
  /**
   * @example
   * true
   */
  morePage?: boolean;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      morePage: 'more_page',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: EntitySetResponseBodyModule,
      morePage: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntitySetResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EntitySetResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EntitySetResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  arrCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * flight
   */
  category?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  depCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1670601600000
   */
  endTime?: number;
  /**
   * @example
   * 1245
   */
  itineraryId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1670428800000
   */
  startTime?: number;
  /**
   * @example
   * btrip123
   */
  subCorpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345678910
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      category: 'category',
      depCity: 'dep_city',
      endTime: 'end_time',
      itineraryId: 'itinerary_id',
      startTime: 'start_time',
      subCorpId: 'sub_corp_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      category: 'string',
      depCity: 'string',
      endTime: 'number',
      itineraryId: 'string',
      startTime: 'number',
      subCorpId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: number;
  /**
   * @example
   * demo
   */
  message?: string;
  module?: EstimatedPriceQueryResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      message: 'string',
      module: EstimatedPriceQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EstimatedPriceQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EstimatedPriceQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExceedApplySyncHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExceedApplySyncRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 823744
   */
  applyId?: number;
  /**
   * @example
   * 3
   */
  bizCategory?: number;
  remark?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 123421
   */
  thirdpartyFlowId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * open5145141
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      bizCategory: 'biz_category',
      remark: 'remark',
      status: 'status',
      thirdpartyFlowId: 'thirdparty_flow_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      bizCategory: 'number',
      remark: 'string',
      status: 'number',
      thirdpartyFlowId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExceedApplySyncResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   * 
   * @example
   * {\\"list\\": [], \\"pageSize\\": 20, \\"pageNo\\": 1}
   */
  module?: boolean;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExceedApplySyncResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExceedApplySyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExceedApplySyncResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserAddHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserAddRequest extends $tea.Model {
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certRequestList?: ExternalUserAddRequestCertRequestList[];
  /**
   * @example
   * zhangsan@alibaba-inc.com
   */
  email?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0012
   */
  externalUserId?: string;
  /**
   * @example
   * 13438009765
   */
  phone?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  realName?: string;
  /**
   * @example
   * zhang/san
   */
  realNameEn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certRequestList: 'cert_request_list',
      email: 'email',
      externalUserId: 'external_user_id',
      phone: 'phone',
      realName: 'real_name',
      realNameEn: 'real_name_en',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certRequestList: { 'type': 'array', 'itemType': ExternalUserAddRequestCertRequestList },
      email: 'string',
      externalUserId: 'string',
      phone: 'string',
      realName: 'string',
      realNameEn: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserAddShrinkRequest extends $tea.Model {
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certRequestListShrink?: string;
  /**
   * @example
   * zhangsan@alibaba-inc.com
   */
  email?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0012
   */
  externalUserId?: string;
  /**
   * @example
   * 13438009765
   */
  phone?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  realName?: string;
  /**
   * @example
   * zhang/san
   */
  realNameEn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certRequestListShrink: 'cert_request_list',
      email: 'email',
      externalUserId: 'external_user_id',
      phone: 'phone',
      realName: 'real_name',
      realNameEn: 'real_name_en',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certRequestListShrink: 'string',
      email: 'string',
      externalUserId: 'string',
      phone: 'string',
      realName: 'string',
      realNameEn: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserAddResponseBody extends $tea.Model {
  /**
   * @example
   * success
   */
  code?: string;
  message?: string;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079416784321627628333de4ab
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserAddResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExternalUserAddResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExternalUserAddResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserDeleteHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserDeleteResponseBody extends $tea.Model {
  /**
   * @example
   * success
   */
  code?: string;
  message?: string;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079416784321627628333de4ab
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserDeleteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExternalUserDeleteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExternalUserDeleteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  module?: ExternalUserQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e847f16611516748613869de4f6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      module: ExternalUserQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExternalUserQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExternalUserQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserUpdateHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserUpdateRequest extends $tea.Model {
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certRequestList?: ExternalUserUpdateRequestCertRequestList[];
  /**
   * @example
   * zhangsan@alibaba-inc.com
   */
  email?: string;
  /**
   * @example
   * 13438009765
   */
  phone?: string;
  realName?: string;
  /**
   * @example
   * zhang/san
   */
  realNameEn?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certRequestList: 'cert_request_list',
      email: 'email',
      phone: 'phone',
      realName: 'real_name',
      realNameEn: 'real_name_en',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certRequestList: { 'type': 'array', 'itemType': ExternalUserUpdateRequestCertRequestList },
      email: 'string',
      phone: 'string',
      realName: 'string',
      realNameEn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserUpdateShrinkRequest extends $tea.Model {
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certRequestListShrink?: string;
  /**
   * @example
   * zhangsan@alibaba-inc.com
   */
  email?: string;
  /**
   * @example
   * 13438009765
   */
  phone?: string;
  realName?: string;
  /**
   * @example
   * zhang/san
   */
  realNameEn?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certRequestListShrink: 'cert_request_list',
      email: 'email',
      phone: 'phone',
      realName: 'real_name',
      realNameEn: 'real_name_en',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certRequestListShrink: 'string',
      email: 'string',
      phone: 'string',
      realName: 'string',
      realNameEn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserUpdateResponseBody extends $tea.Model {
  /**
   * @example
   * success
   */
  code?: string;
  message?: string;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079416784321627628333de4ab
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserUpdateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExternalUserUpdateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExternalUserUpdateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightBillSettlementQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-01
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightCancelOrderResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightCancelOrderResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightCancelOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightCancelOrderResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderV2Request extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  isvName?: string;
  orderId?: string;
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightCancelOrderV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightCancelOrderV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightCancelOrderV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightCancelOrderV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderRequest extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * 0
   */
  autoPay?: number;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  buyerUniqueKey?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  contactInfo?: FlightCreateOrderRequestContactInfo;
  /**
   * @example
   * PEK
   */
  depAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000-00-00 00:00:00
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  orderAttr?: { [key: string]: any };
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000_1_0
   */
  orderParams?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 7fb731deeb4510b86c17e8c8c25740_11
   */
  otaItemId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000
   */
  price?: number;
  receiptAddress?: string;
  /**
   * @example
   * 1
   */
  receiptTarget?: number;
  receiptTitle?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  travelerInfoList?: FlightCreateOrderRequestTravelerInfoList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCityCode: 'arr_city_code',
      autoPay: 'auto_pay',
      buyerName: 'buyer_name',
      buyerUniqueKey: 'buyer_unique_key',
      contactInfo: 'contact_info',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      disOrderId: 'dis_order_id',
      orderAttr: 'order_attr',
      orderParams: 'order_params',
      otaItemId: 'ota_item_id',
      price: 'price',
      receiptAddress: 'receipt_address',
      receiptTarget: 'receipt_target',
      receiptTitle: 'receipt_title',
      travelerInfoList: 'traveler_info_list',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCityCode: 'string',
      autoPay: 'number',
      buyerName: 'string',
      buyerUniqueKey: 'string',
      contactInfo: FlightCreateOrderRequestContactInfo,
      depAirportCode: 'string',
      depCityCode: 'string',
      depDate: 'string',
      disOrderId: 'string',
      orderAttr: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      orderParams: 'string',
      otaItemId: 'string',
      price: 'number',
      receiptAddress: 'string',
      receiptTarget: 'number',
      receiptTitle: 'string',
      travelerInfoList: { 'type': 'array', 'itemType': FlightCreateOrderRequestTravelerInfoList },
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderShrinkRequest extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * 0
   */
  autoPay?: number;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  buyerUniqueKey?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  contactInfoShrink?: string;
  /**
   * @example
   * PEK
   */
  depAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000-00-00 00:00:00
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  orderAttrShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000_1_0
   */
  orderParams?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 7fb731deeb4510b86c17e8c8c25740_11
   */
  otaItemId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000
   */
  price?: number;
  receiptAddress?: string;
  /**
   * @example
   * 1
   */
  receiptTarget?: number;
  receiptTitle?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  travelerInfoListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCityCode: 'arr_city_code',
      autoPay: 'auto_pay',
      buyerName: 'buyer_name',
      buyerUniqueKey: 'buyer_unique_key',
      contactInfoShrink: 'contact_info',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      disOrderId: 'dis_order_id',
      orderAttrShrink: 'order_attr',
      orderParams: 'order_params',
      otaItemId: 'ota_item_id',
      price: 'price',
      receiptAddress: 'receipt_address',
      receiptTarget: 'receipt_target',
      receiptTitle: 'receipt_title',
      travelerInfoListShrink: 'traveler_info_list',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCityCode: 'string',
      autoPay: 'number',
      buyerName: 'string',
      buyerUniqueKey: 'string',
      contactInfoShrink: 'string',
      depAirportCode: 'string',
      depCityCode: 'string',
      depDate: 'string',
      disOrderId: 'string',
      orderAttrShrink: 'string',
      orderParams: 'string',
      otaItemId: 'string',
      price: 'number',
      receiptAddress: 'string',
      receiptTarget: 'number',
      receiptTitle: 'string',
      travelerInfoListShrink: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightCreateOrderResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightCreateOrderResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightCreateOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightCreateOrderResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2Request extends $tea.Model {
  asyncCreateOrderKey?: string;
  /**
   * @example
   * false
   */
  asyncCreateOrderMode?: boolean;
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  contactInfo?: FlightCreateOrderV2RequestContactInfo;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 7fb731deeb4510b86c17e8c8c25740_11
   */
  otaItemId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  outOrderId?: string;
  totalPriceCent?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  travelers?: FlightCreateOrderV2RequestTravelers[];
  static names(): { [key: string]: string } {
    return {
      asyncCreateOrderKey: 'async_create_order_key',
      asyncCreateOrderMode: 'async_create_order_mode',
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      contactInfo: 'contact_info',
      isvName: 'isv_name',
      otaItemId: 'ota_item_id',
      outOrderId: 'out_order_id',
      totalPriceCent: 'total_price_cent',
      travelers: 'travelers',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncCreateOrderKey: 'string',
      asyncCreateOrderMode: 'boolean',
      btripUserId: 'string',
      buyerName: 'string',
      contactInfo: FlightCreateOrderV2RequestContactInfo,
      isvName: 'string',
      otaItemId: 'string',
      outOrderId: 'string',
      totalPriceCent: 'number',
      travelers: { 'type': 'array', 'itemType': FlightCreateOrderV2RequestTravelers },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2ShrinkRequest extends $tea.Model {
  asyncCreateOrderKey?: string;
  /**
   * @example
   * false
   */
  asyncCreateOrderMode?: boolean;
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  contactInfoShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 7fb731deeb4510b86c17e8c8c25740_11
   */
  otaItemId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  outOrderId?: string;
  totalPriceCent?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  travelersShrink?: string;
  static names(): { [key: string]: string } {
    return {
      asyncCreateOrderKey: 'async_create_order_key',
      asyncCreateOrderMode: 'async_create_order_mode',
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      contactInfoShrink: 'contact_info',
      isvName: 'isv_name',
      otaItemId: 'ota_item_id',
      outOrderId: 'out_order_id',
      totalPriceCent: 'total_price_cent',
      travelersShrink: 'travelers',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncCreateOrderKey: 'string',
      asyncCreateOrderMode: 'boolean',
      btripUserId: 'string',
      buyerName: 'string',
      contactInfoShrink: 'string',
      isvName: 'string',
      otaItemId: 'string',
      outOrderId: 'string',
      totalPriceCent: 'number',
      travelersShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightCreateOrderV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 210bc60a16916593445203790d2a16
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 2103ad0716827336456723986d4bda
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightCreateOrderV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightCreateOrderV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightCreateOrderV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryRequest extends $tea.Model {
  /**
   * @example
   * 175634
   */
  applyId?: number;
  businessInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      businessInstanceId: 'business_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      businessInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightExceedApplyQueryResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightExceedApplyQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightExceedApplyQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightExceedApplyQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightItineraryScanQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightItineraryScanQueryRequest extends $tea.Model {
  /**
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @example
   * 123
   */
  billId?: number;
  /**
   * @example
   * 456
   */
  invoiceSubTaskId?: number;
  itineraryNum?: string;
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      billDate: 'bill_date',
      billId: 'bill_id',
      invoiceSubTaskId: 'invoice_sub_task_id',
      itineraryNum: 'itinerary_num',
      pageNo: 'page_no',
      pageSize: 'page_size',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billDate: 'string',
      billId: 'number',
      invoiceSubTaskId: 'number',
      itineraryNum: 'string',
      pageNo: 'number',
      pageSize: 'number',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightItineraryScanQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: FlightItineraryScanQueryResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightItineraryScanQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightItineraryScanQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightItineraryScanQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightItineraryScanQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchRequest extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-26
   */
  depDate?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      arrCityCode: 'arr_city_code',
      cabinClass: 'cabin_class',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      arrCityCode: 'string',
      cabinClass: 'string',
      depCityCode: 'string',
      depDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightListingSearchResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightListingSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightListingSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightListingSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * Dj2laAwE00
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2Request extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  cabinTypeList?: number[];
  /**
   * @example
   * true
   */
  directOnly?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshi
   */
  isvName?: string;
  /**
   * @example
   * false
   */
  needMultiClassPrice?: boolean;
  /**
   * @example
   * true
   */
  needQueryServiceFee?: boolean;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @example
   * false
   */
  needYCBestPrice?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneys?: FlightListingSearchV2RequestSearchJourneys[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  searchMode?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      cabinTypeList: 'cabin_type_list',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      needMultiClassPrice: 'need_multi_class_price',
      needQueryServiceFee: 'need_query_service_fee',
      needShareFlight: 'need_share_flight',
      needYCBestPrice: 'need_y_c_best_price',
      searchJourneys: 'search_journeys',
      searchMode: 'search_mode',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      cabinTypeList: { 'type': 'array', 'itemType': 'number' },
      directOnly: 'boolean',
      isvName: 'string',
      needMultiClassPrice: 'boolean',
      needQueryServiceFee: 'boolean',
      needShareFlight: 'boolean',
      needYCBestPrice: 'boolean',
      searchJourneys: { 'type': 'array', 'itemType': FlightListingSearchV2RequestSearchJourneys },
      searchMode: 'number',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ShrinkRequest extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  cabinTypeListShrink?: string;
  /**
   * @example
   * true
   */
  directOnly?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshi
   */
  isvName?: string;
  /**
   * @example
   * false
   */
  needMultiClassPrice?: boolean;
  /**
   * @example
   * true
   */
  needQueryServiceFee?: boolean;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @example
   * false
   */
  needYCBestPrice?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneysShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  searchMode?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      cabinTypeListShrink: 'cabin_type_list',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      needMultiClassPrice: 'need_multi_class_price',
      needQueryServiceFee: 'need_query_service_fee',
      needShareFlight: 'need_share_flight',
      needYCBestPrice: 'need_y_c_best_price',
      searchJourneysShrink: 'search_journeys',
      searchMode: 'search_mode',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      cabinTypeListShrink: 'string',
      directOnly: 'boolean',
      isvName: 'string',
      needMultiClassPrice: 'boolean',
      needQueryServiceFee: 'boolean',
      needShareFlight: 'boolean',
      needYCBestPrice: 'boolean',
      searchJourneysShrink: 'string',
      searchMode: 'number',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightListingSearchV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e842b16611337974412836dae27
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightListingSearchV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightListingSearchV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightListingSearchV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyApplyV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyApplyV2Request extends $tea.Model {
  /**
   * @example
   * 72e961f8-930b-43c1-a4ca-18a6f28349c6distributionModifyCacheInfo
   */
  cacheKey?: string;
  /**
   * @example
   * 17816963077
   */
  contactPhone?: string;
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * fa2fb23a859a4e78b5ddb87a6a23094b_0
   */
  itemId?: string;
  /**
   * @example
   * 1017002195370467138
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  outSubOrderId?: string;
  passengerSegmentRelations?: FlightModifyApplyV2RequestPassengerSegmentRelations[];
  reason?: string;
  /**
   * @remarks
   * sessionId
   * 
   * @example
   * a2ffebfe733742aab5c491d960ba3d59
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      cacheKey: 'cache_key',
      contactPhone: 'contact_phone',
      isvName: 'isv_name',
      itemId: 'item_id',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      passengerSegmentRelations: 'passenger_segment_relations',
      reason: 'reason',
      sessionId: 'session_id',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cacheKey: 'string',
      contactPhone: 'string',
      isvName: 'string',
      itemId: 'string',
      orderId: 'number',
      outOrderId: 'string',
      outSubOrderId: 'string',
      passengerSegmentRelations: { 'type': 'array', 'itemType': FlightModifyApplyV2RequestPassengerSegmentRelations },
      reason: 'string',
      sessionId: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyApplyV2ShrinkRequest extends $tea.Model {
  /**
   * @example
   * 72e961f8-930b-43c1-a4ca-18a6f28349c6distributionModifyCacheInfo
   */
  cacheKey?: string;
  /**
   * @example
   * 17816963077
   */
  contactPhone?: string;
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * fa2fb23a859a4e78b5ddb87a6a23094b_0
   */
  itemId?: string;
  /**
   * @example
   * 1017002195370467138
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  outSubOrderId?: string;
  passengerSegmentRelationsShrink?: string;
  reason?: string;
  /**
   * @remarks
   * sessionId
   * 
   * @example
   * a2ffebfe733742aab5c491d960ba3d59
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      cacheKey: 'cache_key',
      contactPhone: 'contact_phone',
      isvName: 'isv_name',
      itemId: 'item_id',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      passengerSegmentRelationsShrink: 'passenger_segment_relations',
      reason: 'reason',
      sessionId: 'session_id',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cacheKey: 'string',
      contactPhone: 'string',
      isvName: 'string',
      itemId: 'string',
      orderId: 'number',
      outOrderId: 'string',
      outSubOrderId: 'string',
      passengerSegmentRelationsShrink: 'string',
      reason: 'string',
      sessionId: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyApplyV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightModifyApplyV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 212a8b8216915622178333839e665d
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightModifyApplyV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyApplyV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightModifyApplyV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightModifyApplyV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyCancelV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyCancelV2Request extends $tea.Model {
  isvName?: string;
  orderId?: number;
  outOrderId?: string;
  outSubOrderId?: string;
  subOrderId?: number;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      subOrderId: 'sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'number',
      outOrderId: 'string',
      outSubOrderId: 'string',
      subOrderId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyCancelV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: { [key: string]: any };
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyCancelV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightModifyCancelV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightModifyCancelV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2Request extends $tea.Model {
  cabinClass?: number[];
  depDate?: string[];
  interfaceCallerIsSupportRetry?: boolean;
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * 1017002195370467138
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  passengerSegmentRelations?: FlightModifyListingSearchV2RequestPassengerSegmentRelations[];
  /**
   * @example
   * 2
   */
  searchMode?: number;
  searchRetryToken?: string;
  selectedSegments?: FlightModifyListingSearchV2RequestSelectedSegments[];
  /**
   * @example
   * a2ffebfe733742aab5c491d960ba3d59
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      depDate: 'dep_date',
      interfaceCallerIsSupportRetry: 'interface_caller_is_support_retry',
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      passengerSegmentRelations: 'passenger_segment_relations',
      searchMode: 'search_mode',
      searchRetryToken: 'search_retry_token',
      selectedSegments: 'selected_segments',
      sessionId: 'session_id',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': 'number' },
      depDate: { 'type': 'array', 'itemType': 'string' },
      interfaceCallerIsSupportRetry: 'boolean',
      isvName: 'string',
      orderId: 'number',
      outOrderId: 'string',
      passengerSegmentRelations: { 'type': 'array', 'itemType': FlightModifyListingSearchV2RequestPassengerSegmentRelations },
      searchMode: 'number',
      searchRetryToken: 'string',
      selectedSegments: { 'type': 'array', 'itemType': FlightModifyListingSearchV2RequestSelectedSegments },
      sessionId: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ShrinkRequest extends $tea.Model {
  cabinClassShrink?: string;
  depDateShrink?: string;
  interfaceCallerIsSupportRetry?: boolean;
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * 1017002195370467138
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  passengerSegmentRelationsShrink?: string;
  /**
   * @example
   * 2
   */
  searchMode?: number;
  searchRetryToken?: string;
  selectedSegmentsShrink?: string;
  /**
   * @example
   * a2ffebfe733742aab5c491d960ba3d59
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      cabinClassShrink: 'cabin_class',
      depDateShrink: 'dep_date',
      interfaceCallerIsSupportRetry: 'interface_caller_is_support_retry',
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      passengerSegmentRelationsShrink: 'passenger_segment_relations',
      searchMode: 'search_mode',
      searchRetryToken: 'search_retry_token',
      selectedSegmentsShrink: 'selected_segments',
      sessionId: 'session_id',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClassShrink: 'string',
      depDateShrink: 'string',
      interfaceCallerIsSupportRetry: 'boolean',
      isvName: 'string',
      orderId: 'number',
      outOrderId: 'string',
      passengerSegmentRelationsShrink: 'string',
      searchMode: 'number',
      searchRetryToken: 'string',
      selectedSegmentsShrink: 'string',
      sessionId: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightModifyListingSearchV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 2136019116915615924561621e06ee
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightModifyListingSearchV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightModifyListingSearchV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightModifyListingSearchV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2Request extends $tea.Model {
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * 1019195786853020
   */
  modifyApplyId?: string;
  /**
   * @example
   * false
   */
  needQueryServiceFee?: boolean;
  /**
   * @example
   * 1017002195370467200
   */
  orderId?: string;
  outModifyApplyId?: string;
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      modifyApplyId: 'modify_apply_id',
      needQueryServiceFee: 'need_query_service_fee',
      orderId: 'order_id',
      outModifyApplyId: 'out_modify_apply_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      modifyApplyId: 'string',
      needQueryServiceFee: 'boolean',
      orderId: 'string',
      outModifyApplyId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightModifyOrderDetailV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bc2dc16839612026565712dcbe6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightModifyOrderDetailV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightModifyOrderDetailV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightModifyOrderDetailV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2Request extends $tea.Model {
  cabinClass?: number[];
  depDate?: string[];
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * 1017002195370467200
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467200
   */
  outOrderId?: string;
  passengerSegmentRelations?: FlightModifyOtaSearchV2RequestPassengerSegmentRelations[];
  selectedSegments?: FlightModifyOtaSearchV2RequestSelectedSegments[];
  /**
   * @example
   * 590f17eca9374f20ac7e8ed8a7db2f35
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      depDate: 'dep_date',
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      passengerSegmentRelations: 'passenger_segment_relations',
      selectedSegments: 'selected_segments',
      sessionId: 'session_id',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': 'number' },
      depDate: { 'type': 'array', 'itemType': 'string' },
      isvName: 'string',
      orderId: 'number',
      outOrderId: 'string',
      passengerSegmentRelations: { 'type': 'array', 'itemType': FlightModifyOtaSearchV2RequestPassengerSegmentRelations },
      selectedSegments: { 'type': 'array', 'itemType': FlightModifyOtaSearchV2RequestSelectedSegments },
      sessionId: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ShrinkRequest extends $tea.Model {
  cabinClassShrink?: string;
  depDateShrink?: string;
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * 1017002195370467200
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467200
   */
  outOrderId?: string;
  passengerSegmentRelationsShrink?: string;
  selectedSegmentsShrink?: string;
  /**
   * @example
   * 590f17eca9374f20ac7e8ed8a7db2f35
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      cabinClassShrink: 'cabin_class',
      depDateShrink: 'dep_date',
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      passengerSegmentRelationsShrink: 'passenger_segment_relations',
      selectedSegmentsShrink: 'selected_segments',
      sessionId: 'session_id',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClassShrink: 'string',
      depDateShrink: 'string',
      isvName: 'string',
      orderId: 'number',
      outOrderId: 'string',
      passengerSegmentRelationsShrink: 'string',
      selectedSegmentsShrink: 'string',
      sessionId: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightModifyOtaSearchV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 2136019116915615639457351e06ee
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightModifyOtaSearchV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightModifyOtaSearchV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightModifyOtaSearchV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyPayV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyPayV2Request extends $tea.Model {
  extParams?: { [key: string]: any };
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * 5100
   */
  modifyPayAmount?: number;
  /**
   * @example
   * 1017002195370467200
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467200
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  outSubOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  subOrderId?: number;
  static names(): { [key: string]: string } {
    return {
      extParams: 'ext_params',
      isvName: 'isv_name',
      modifyPayAmount: 'modify_pay_amount',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      subOrderId: 'sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      isvName: 'string',
      modifyPayAmount: 'number',
      orderId: 'number',
      outOrderId: 'string',
      outSubOrderId: 'string',
      subOrderId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyPayV2ShrinkRequest extends $tea.Model {
  extParamsShrink?: string;
  /**
   * @example
   * name
   */
  isvName?: string;
  /**
   * @example
   * 5100
   */
  modifyPayAmount?: number;
  /**
   * @example
   * 1017002195370467200
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467200
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  outSubOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  subOrderId?: number;
  static names(): { [key: string]: string } {
    return {
      extParamsShrink: 'ext_params',
      isvName: 'isv_name',
      modifyPayAmount: 'modify_pay_amount',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      subOrderId: 'sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extParamsShrink: 'string',
      isvName: 'string',
      modifyPayAmount: 'number',
      orderId: 'number',
      outOrderId: 'string',
      outSubOrderId: 'string',
      subOrderId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyPayV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: { [key: string]: any };
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bc59716837025964391120d3a5e
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyPayV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightModifyPayV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightModifyPayV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightOrderDetailInfoResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightOrderDetailInfoResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOrderDetailInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOrderDetailInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * Dj2laAwE00
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2Request extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @example
   * 1017002195370467138
   */
  orderId?: number;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'number',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightOrderDetailV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * E5F4ACF5-5677-1515-9999-ABBB5E668032
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bc60a16917251281873772dac41
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightOrderDetailV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOrderDetailV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOrderDetailV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  allApply?: boolean;
  /**
   * @example
   * 175634
   */
  applyId?: number;
  departId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  endTime?: string;
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  startTime?: string;
  /**
   * @example
   * CS-FLIGHT
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateEndTime?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateStartTime?: string;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      allApply: 'all_apply',
      applyId: 'apply_id',
      departId: 'depart_id',
      endTime: 'end_time',
      page: 'page',
      pageSize: 'page_size',
      startTime: 'start_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      updateEndTime: 'update_end_time',
      updateStartTime: 'update_start_time',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allApply: 'boolean',
      applyId: 'number',
      departId: 'string',
      endTime: 'string',
      page: 'number',
      pageSize: 'number',
      startTime: 'string',
      thirdpartApplyId: 'string',
      updateEndTime: 'string',
      updateStartTime: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightOrderListQueryResponseBodyModule[];
  pageInfo?: FlightOrderListQueryResponseBodyPageInfo;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      pageInfo: 'page_info',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': FlightOrderListQueryResponseBodyModule },
      pageInfo: FlightOrderListQueryResponseBodyPageInfo,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOrderListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOrderListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2Request extends $tea.Model {
  approveId?: string[];
  bookerId?: string[];
  departId?: string[];
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  endDate?: string;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4
   */
  scrollId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  startDate?: string;
  supplier?: string[];
  thirdpartApproveId?: string[];
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateEndDate?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateStartDate?: string;
  static names(): { [key: string]: string } {
    return {
      approveId: 'approve_id',
      bookerId: 'booker_id',
      departId: 'depart_id',
      endDate: 'end_date',
      pageSize: 'page_Size',
      scrollId: 'scroll_id',
      startDate: 'start_date',
      supplier: 'supplier',
      thirdpartApproveId: 'thirdpart_approve_id',
      updateEndDate: 'update_end_date',
      updateStartDate: 'update_start_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approveId: { 'type': 'array', 'itemType': 'string' },
      bookerId: { 'type': 'array', 'itemType': 'string' },
      departId: { 'type': 'array', 'itemType': 'string' },
      endDate: 'string',
      pageSize: 'number',
      scrollId: 'string',
      startDate: 'string',
      supplier: { 'type': 'array', 'itemType': 'string' },
      thirdpartApproveId: { 'type': 'array', 'itemType': 'string' },
      updateEndDate: 'string',
      updateStartDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ShrinkRequest extends $tea.Model {
  approveIdShrink?: string;
  bookerIdShrink?: string;
  departIdShrink?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  endDate?: string;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4
   */
  scrollId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  startDate?: string;
  supplierShrink?: string;
  thirdpartApproveIdShrink?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateEndDate?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateStartDate?: string;
  static names(): { [key: string]: string } {
    return {
      approveIdShrink: 'approve_id',
      bookerIdShrink: 'booker_id',
      departIdShrink: 'depart_id',
      endDate: 'end_date',
      pageSize: 'page_Size',
      scrollId: 'scroll_id',
      startDate: 'start_date',
      supplierShrink: 'supplier',
      thirdpartApproveIdShrink: 'thirdpart_approve_id',
      updateEndDate: 'update_end_date',
      updateStartDate: 'update_start_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approveIdShrink: 'string',
      bookerIdShrink: 'string',
      departIdShrink: 'string',
      endDate: 'string',
      pageSize: 'number',
      scrollId: 'string',
      startDate: 'string',
      supplierShrink: 'string',
      thirdpartApproveIdShrink: 'string',
      updateEndDate: 'string',
      updateStartDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: FlightOrderListQueryV2ResponseBodyModule[];
  pageInfo?: FlightOrderListQueryV2ResponseBodyPageInfo;
  /**
   * @example
   * C61ECFF6-****-****-****-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce********056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      pageInfo: 'pageInfo',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModule },
      pageInfo: FlightOrderListQueryV2ResponseBodyPageInfo,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOrderListQueryV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOrderListQueryV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 246584390
   */
  orderId?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightOrderQueryResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightOrderQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOrderQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOrderQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * Dj2laAwE00
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshi
   */
  isvName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 68cdc6b37c87484c98b479b49306ffbb_0
   */
  otaItemId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      otaItemId: 'ota_item_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      otaItemId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightOtaItemDetailResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 92359A00-85D8-16C4-AED0-249618DEEC17
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bc60a16916374201706365d2a16
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightOtaItemDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOtaItemDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOtaItemDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchRequest extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  arrCityCode?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * CA2324
   */
  carrierFlightNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-08-15 19:30:00
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * CA2323
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      arrCityCode: 'arr_city_code',
      cabinClass: 'cabin_class',
      carrierFlightNo: 'carrier_flight_no',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      arrCityCode: 'string',
      cabinClass: 'string',
      carrierFlightNo: 'string',
      depCityCode: 'string',
      depDate: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: FlightOtaSearchResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightOtaSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOtaSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOtaSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * Dj2laAwE00
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2Request extends $tea.Model {
  cabinTypeList?: number[];
  /**
   * @example
   * true
   */
  directOnly?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshi
   */
  isvName?: string;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneys?: FlightOtaSearchV2RequestSearchJourneys[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  searchMode?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      cabinTypeList: 'cabin_type_list',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      needShareFlight: 'need_share_flight',
      searchJourneys: 'search_journeys',
      searchMode: 'search_mode',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinTypeList: { 'type': 'array', 'itemType': 'number' },
      directOnly: 'boolean',
      isvName: 'string',
      needShareFlight: 'boolean',
      searchJourneys: { 'type': 'array', 'itemType': FlightOtaSearchV2RequestSearchJourneys },
      searchMode: 'number',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ShrinkRequest extends $tea.Model {
  cabinTypeListShrink?: string;
  /**
   * @example
   * true
   */
  directOnly?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cheshi
   */
  isvName?: string;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneysShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  searchMode?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      cabinTypeListShrink: 'cabin_type_list',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      needShareFlight: 'need_share_flight',
      searchJourneysShrink: 'search_journeys',
      searchMode: 'search_mode',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinTypeListShrink: 'string',
      directOnly: 'boolean',
      isvName: 'string',
      needShareFlight: 'boolean',
      searchJourneysShrink: 'string',
      searchMode: 'number',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightOtaSearchV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e842b16611337974412836dae27
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightOtaSearchV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightOtaSearchV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightOtaSearchV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  corpPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  extra?: { [key: string]: string };
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  personalPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  totalPayPrice?: number;
  static names(): { [key: string]: string } {
    return {
      corpPayPrice: 'corp_pay_price',
      disOrderId: 'dis_order_id',
      extra: 'extra',
      personalPayPrice: 'personal_pay_price',
      totalPayPrice: 'total_pay_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpPayPrice: 'number',
      disOrderId: 'string',
      extra: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      personalPayPrice: 'number',
      totalPayPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  corpPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  extraShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  personalPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  totalPayPrice?: number;
  static names(): { [key: string]: string } {
    return {
      corpPayPrice: 'corp_pay_price',
      disOrderId: 'dis_order_id',
      extraShrink: 'extra',
      personalPayPrice: 'personal_pay_price',
      totalPayPrice: 'total_pay_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpPayPrice: 'number',
      disOrderId: 'string',
      extraShrink: 'string',
      personalPayPrice: 'number',
      totalPayPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightPayOrderResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e842b16611337974412836dae27
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightPayOrderResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightPayOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightPayOrderResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderV2Request extends $tea.Model {
  /**
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @example
   * cheshiapi002kwl
   */
  orderId?: string;
  /**
   * @example
   * 1017002195798359400
   */
  outOrderId?: string;
  /**
   * @example
   * 5100
   */
  totalPrice?: number;
  /**
   * @example
   * 10
   */
  totalServiceFeePrice?: number;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      totalPrice: 'total_price',
      totalServiceFeePrice: 'total_service_fee_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      totalPrice: 'number',
      totalServiceFeePrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightPayOrderV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightPayOrderV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightPayOrderV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightPayOrderV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyRequest extends $tea.Model {
  /**
   * @example
   * 100
   */
  corpRefundPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * refu123
   */
  disSubOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  displayRefundMoney?: string;
  extra?: { [key: string]: string };
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  isVoluntary?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * FlightItem_9966772382
   */
  itemUnitIds?: string;
  passengerSegmentInfoList?: FlightRefundApplyRequestPassengerSegmentInfoList[];
  /**
   * @example
   * 100
   */
  personalRefundPrice?: number;
  reasonDetail?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  reasonType?: number;
  refundVoucherInfo?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0f9418cd2ce34af49ab0de16fea166d1
   */
  sessionId?: string;
  /**
   * @example
   * 100
   */
  totalRefundPrice?: number;
  static names(): { [key: string]: string } {
    return {
      corpRefundPrice: 'corp_refund_price',
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      displayRefundMoney: 'display_refund_money',
      extra: 'extra',
      isVoluntary: 'is_voluntary',
      itemUnitIds: 'item_unit_ids',
      passengerSegmentInfoList: 'passenger_segment_info_list',
      personalRefundPrice: 'personal_refund_price',
      reasonDetail: 'reason_detail',
      reasonType: 'reason_type',
      refundVoucherInfo: 'refund_voucher_info',
      sessionId: 'session_id',
      totalRefundPrice: 'total_refund_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpRefundPrice: 'number',
      disOrderId: 'string',
      disSubOrderId: 'string',
      displayRefundMoney: 'string',
      extra: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      isVoluntary: 'number',
      itemUnitIds: 'string',
      passengerSegmentInfoList: { 'type': 'array', 'itemType': FlightRefundApplyRequestPassengerSegmentInfoList },
      personalRefundPrice: 'number',
      reasonDetail: 'string',
      reasonType: 'number',
      refundVoucherInfo: { 'type': 'array', 'itemType': 'string' },
      sessionId: 'string',
      totalRefundPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyShrinkRequest extends $tea.Model {
  /**
   * @example
   * 100
   */
  corpRefundPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * refu123
   */
  disSubOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  displayRefundMoney?: string;
  extraShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  isVoluntary?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * FlightItem_9966772382
   */
  itemUnitIds?: string;
  passengerSegmentInfoListShrink?: string;
  /**
   * @example
   * 100
   */
  personalRefundPrice?: number;
  reasonDetail?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  reasonType?: number;
  refundVoucherInfoShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0f9418cd2ce34af49ab0de16fea166d1
   */
  sessionId?: string;
  /**
   * @example
   * 100
   */
  totalRefundPrice?: number;
  static names(): { [key: string]: string } {
    return {
      corpRefundPrice: 'corp_refund_price',
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      displayRefundMoney: 'display_refund_money',
      extraShrink: 'extra',
      isVoluntary: 'is_voluntary',
      itemUnitIds: 'item_unit_ids',
      passengerSegmentInfoListShrink: 'passenger_segment_info_list',
      personalRefundPrice: 'personal_refund_price',
      reasonDetail: 'reason_detail',
      reasonType: 'reason_type',
      refundVoucherInfoShrink: 'refund_voucher_info',
      sessionId: 'session_id',
      totalRefundPrice: 'total_refund_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpRefundPrice: 'number',
      disOrderId: 'string',
      disSubOrderId: 'string',
      displayRefundMoney: 'string',
      extraShrink: 'string',
      isVoluntary: 'number',
      itemUnitIds: 'string',
      passengerSegmentInfoListShrink: 'string',
      personalRefundPrice: 'number',
      reasonDetail: 'string',
      reasonType: 'number',
      refundVoucherInfoShrink: 'string',
      sessionId: 'string',
      totalRefundPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightRefundApplyResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightRefundApplyResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightRefundApplyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightRefundApplyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyV2Request extends $tea.Model {
  /**
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @example
   * 1683901850297448082
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195836916039
   */
  outSubOrderId?: string;
  passengerSegmentRelations?: FlightRefundApplyV2RequestPassengerSegmentRelations[];
  /**
   * @example
   * 2
   */
  preCalType?: number;
  refundReason?: string;
  /**
   * @example
   * 2
   */
  refundReasonType?: number;
  ticketNos?: string[];
  /**
   * @example
   * 10000
   */
  totalRefundPrice?: number;
  uploadPictUrls?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      passengerSegmentRelations: 'passenger_segment_relations',
      preCalType: 'pre_cal_type',
      refundReason: 'refund_reason',
      refundReasonType: 'refund_reason_type',
      ticketNos: 'ticket_nos',
      totalRefundPrice: 'total_refund_price',
      uploadPictUrls: 'upload_pict_urls',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      passengerSegmentRelations: { 'type': 'array', 'itemType': FlightRefundApplyV2RequestPassengerSegmentRelations },
      preCalType: 'number',
      refundReason: 'string',
      refundReasonType: 'number',
      ticketNos: { 'type': 'array', 'itemType': 'string' },
      totalRefundPrice: 'number',
      uploadPictUrls: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyV2ShrinkRequest extends $tea.Model {
  /**
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @example
   * 1683901850297448082
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195836916039
   */
  outSubOrderId?: string;
  passengerSegmentRelationsShrink?: string;
  /**
   * @example
   * 2
   */
  preCalType?: number;
  refundReason?: string;
  /**
   * @example
   * 2
   */
  refundReasonType?: number;
  ticketNosShrink?: string;
  /**
   * @example
   * 10000
   */
  totalRefundPrice?: number;
  uploadPictUrls?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      passengerSegmentRelationsShrink: 'passenger_segment_relations',
      preCalType: 'pre_cal_type',
      refundReason: 'refund_reason',
      refundReasonType: 'refund_reason_type',
      ticketNosShrink: 'ticket_nos',
      totalRefundPrice: 'total_refund_price',
      uploadPictUrls: 'upload_pict_urls',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      passengerSegmentRelationsShrink: 'string',
      preCalType: 'number',
      refundReason: 'string',
      refundReasonType: 'number',
      ticketNosShrink: 'string',
      totalRefundPrice: 'number',
      uploadPictUrls: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: FlightRefundApplyV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightRefundApplyV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightRefundApplyV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightRefundApplyV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * refun123
   */
  disSubOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      disSubOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightRefundDetailResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightRefundDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightRefundDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightRefundDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2Request extends $tea.Model {
  /**
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @example
   * 1002039195025156784
   */
  orderId?: string;
  outOrderId?: string;
  outRefundApplyId?: string;
  /**
   * @example
   * 1002039195025156700
   */
  refundApplyId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outRefundApplyId: 'out_refund_apply_id',
      refundApplyId: 'refund_apply_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      outRefundApplyId: 'string',
      refundApplyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightRefundDetailV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e845f16785007404904300ddc92
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightRefundDetailV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightRefundDetailV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightRefundDetailV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * 1
   */
  isVoluntary?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerSegmentInfoList?: FlightRefundPreCalRequestPassengerSegmentInfoList[];
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      isVoluntary: 'is_voluntary',
      passengerSegmentInfoList: 'passenger_segment_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      isVoluntary: 'string',
      passengerSegmentInfoList: { 'type': 'array', 'itemType': FlightRefundPreCalRequestPassengerSegmentInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * 1
   */
  isVoluntary?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerSegmentInfoListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      isVoluntary: 'is_voluntary',
      passengerSegmentInfoListShrink: 'passenger_segment_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      isVoluntary: 'string',
      passengerSegmentInfoListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightRefundPreCalResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightRefundPreCalResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightRefundPreCalResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightRefundPreCalResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2Request extends $tea.Model {
  /**
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @example
   * 3454043907950204159
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  passengerSegmentRelations?: FlightRefundPreCalV2RequestPassengerSegmentRelations[];
  /**
   * @example
   * 2
   */
  preCalType?: number;
  ticketNos?: string[];
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      passengerSegmentRelations: 'passenger_segment_relations',
      preCalType: 'pre_cal_type',
      ticketNos: 'ticket_nos',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      passengerSegmentRelations: { 'type': 'array', 'itemType': FlightRefundPreCalV2RequestPassengerSegmentRelations },
      preCalType: 'number',
      ticketNos: { 'type': 'array', 'itemType': 'string' },
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2ShrinkRequest extends $tea.Model {
  /**
   * @example
   * cheshiapi
   */
  isvName?: string;
  /**
   * @example
   * 3454043907950204159
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  passengerSegmentRelationsShrink?: string;
  /**
   * @example
   * 2
   */
  preCalType?: number;
  ticketNosShrink?: string;
  /**
   * @example
   * true
   */
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      passengerSegmentRelationsShrink: 'passenger_segment_relations',
      preCalType: 'pre_cal_type',
      ticketNosShrink: 'ticket_nos',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      passengerSegmentRelationsShrink: 'string',
      preCalType: 'number',
      ticketNosShrink: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: FlightRefundPreCalV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 92359A00-85D8-16C4-AED0-249618DEEC17
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightRefundPreCalV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightRefundPreCalV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightRefundPreCalV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListRequest extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * BJS
   */
  arrCityName?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  arrDate?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * HGH
   */
  depCityName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000-00-00 00:00:00
   */
  depDate?: string;
  /**
   * @example
   * CA2323
   */
  flightNo?: string;
  /**
   * @example
   * false
   */
  needMultiClassPrice?: boolean;
  /**
   * @example
   * HGH
   */
  transferCityCode?: string;
  /**
   * @example
   * CA2323
   */
  transferFlightNo?: string;
  /**
   * @example
   * BJS
   */
  transferLeaveDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  tripType?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrDate: 'arr_date',
      cabinClass: 'cabin_class',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depDate: 'dep_date',
      flightNo: 'flight_no',
      needMultiClassPrice: 'need_multi_class_price',
      transferCityCode: 'transfer_city_code',
      transferFlightNo: 'transfer_flight_no',
      transferLeaveDate: 'transfer_leave_date',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrDate: 'string',
      cabinClass: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depDate: 'string',
      flightNo: 'string',
      needMultiClassPrice: 'boolean',
      transferCityCode: 'string',
      transferFlightNo: 'string',
      transferLeaveDate: 'string',
      tripType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: FlightSearchListResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: FlightSearchListResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FlightSearchListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FlightSearchListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupCorpTokenHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripAccessToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripAccessToken: 'x-acs-btrip-access-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripAccessToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupCorpTokenRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ZzljczY5dnFjNDAwVlNofiwoWX5ZWCxlcjVTKnVoZS0
   */
  appSecret?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * open12g9sfbmm5i07v10wDzRSK9w00
   */
  corpId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * btripuyxmbg3cs286734u_mow6q
   */
  subCorpId?: string;
  static names(): { [key: string]: string } {
    return {
      appSecret: 'app_secret',
      corpId: 'corp_id',
      subCorpId: 'sub_corp_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appSecret: 'string',
      corpId: 'string',
      subCorpId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupCorpTokenResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: GroupCorpTokenResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  success?: string;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: GroupCorpTokenResponseBodyModule,
      requestId: 'string',
      success: 'string',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupCorpTokenResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GroupCorpTokenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GroupCorpTokenResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupDepartSaveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupDepartSaveRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  deptName?: string;
  managerIds?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 001
   */
  outerDeptId?: string;
  /**
   * @example
   * 002
   */
  outerDeptPid?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  status?: number;
  subCorpIdList?: string[];
  syncGroup?: boolean;
  static names(): { [key: string]: string } {
    return {
      deptName: 'dept_name',
      managerIds: 'manager_ids',
      outerDeptId: 'outer_dept_id',
      outerDeptPid: 'outer_dept_pid',
      status: 'status',
      subCorpIdList: 'sub_corp_id_list',
      syncGroup: 'sync_group',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deptName: 'string',
      managerIds: 'string',
      outerDeptId: 'string',
      outerDeptPid: 'string',
      status: 'number',
      subCorpIdList: { 'type': 'array', 'itemType': 'string' },
      syncGroup: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupDepartSaveShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  deptName?: string;
  managerIds?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 001
   */
  outerDeptId?: string;
  /**
   * @example
   * 002
   */
  outerDeptPid?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  status?: number;
  subCorpIdListShrink?: string;
  syncGroup?: boolean;
  static names(): { [key: string]: string } {
    return {
      deptName: 'dept_name',
      managerIds: 'manager_ids',
      outerDeptId: 'outer_dept_id',
      outerDeptPid: 'outer_dept_pid',
      status: 'status',
      subCorpIdListShrink: 'sub_corp_id_list',
      syncGroup: 'sync_group',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deptName: 'string',
      managerIds: 'string',
      outerDeptId: 'string',
      outerDeptPid: 'string',
      status: 'number',
      subCorpIdListShrink: 'string',
      syncGroup: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupDepartSaveResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e847f16611516748613869de4f6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupDepartSaveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GroupDepartSaveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GroupDepartSaveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupUserSaveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupUserSaveRequest extends $tea.Model {
  baseCityCode?: string;
  birthday?: string;
  certList?: GroupUserSaveRequestCertList[];
  gender?: string;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * 18000000000
   */
  phone?: string;
  /**
   * @example
   * ce/shi
   */
  realNameEn?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  subCorpIdList?: GroupUserSaveRequestSubCorpIdList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  userId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      baseCityCode: 'base_city_code',
      birthday: 'birthday',
      certList: 'cert_list',
      gender: 'gender',
      jobNo: 'job_no',
      phone: 'phone',
      realNameEn: 'real_name_en',
      subCorpIdList: 'sub_corp_id_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baseCityCode: 'string',
      birthday: 'string',
      certList: { 'type': 'array', 'itemType': GroupUserSaveRequestCertList },
      gender: 'string',
      jobNo: 'string',
      phone: 'string',
      realNameEn: 'string',
      subCorpIdList: { 'type': 'array', 'itemType': GroupUserSaveRequestSubCorpIdList },
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupUserSaveShrinkRequest extends $tea.Model {
  baseCityCode?: string;
  birthday?: string;
  certListShrink?: string;
  gender?: string;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * 18000000000
   */
  phone?: string;
  /**
   * @example
   * ce/shi
   */
  realNameEn?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  subCorpIdListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  userId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      baseCityCode: 'base_city_code',
      birthday: 'birthday',
      certListShrink: 'cert_list',
      gender: 'gender',
      jobNo: 'job_no',
      phone: 'phone',
      realNameEn: 'real_name_en',
      subCorpIdListShrink: 'sub_corp_id_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baseCityCode: 'string',
      birthday: 'string',
      certListShrink: 'string',
      gender: 'string',
      jobNo: 'string',
      phone: 'string',
      realNameEn: 'string',
      subCorpIdListShrink: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupUserSaveResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupUserSaveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GroupUserSaveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GroupUserSaveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelAskingPriceHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelAskingPriceRequest extends $tea.Model {
  /**
   * @example
   * 1
   */
  adultNum?: string;
  /**
   * @example
   * 1000
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22 00:00:00
   */
  checkInDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22 00:00:00
   */
  checkOutDate?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 1
   */
  dir?: number;
  /**
   * @example
   * 1
   */
  hotelStar?: string;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * 0
   */
  paymentType?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  shids?: number[];
  /**
   * @example
   * 0
   */
  sortCode?: number;
  static names(): { [key: string]: string } {
    return {
      adultNum: 'adult_num',
      btripUserId: 'btrip_user_id',
      checkInDate: 'check_in_date',
      checkOutDate: 'check_out_date',
      cityCode: 'city_code',
      cityName: 'city_name',
      dir: 'dir',
      hotelStar: 'hotel_star',
      isProtocol: 'is_protocol',
      paymentType: 'payment_type',
      shids: 'shids',
      sortCode: 'sort_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultNum: 'string',
      btripUserId: 'string',
      checkInDate: 'string',
      checkOutDate: 'string',
      cityCode: 'string',
      cityName: 'string',
      dir: 'number',
      hotelStar: 'string',
      isProtocol: 'boolean',
      paymentType: 'number',
      shids: { 'type': 'array', 'itemType': 'number' },
      sortCode: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelAskingPriceShrinkRequest extends $tea.Model {
  /**
   * @example
   * 1
   */
  adultNum?: string;
  /**
   * @example
   * 1000
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22 00:00:00
   */
  checkInDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22 00:00:00
   */
  checkOutDate?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 1
   */
  dir?: number;
  /**
   * @example
   * 1
   */
  hotelStar?: string;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * 0
   */
  paymentType?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  shidsShrink?: string;
  /**
   * @example
   * 0
   */
  sortCode?: number;
  static names(): { [key: string]: string } {
    return {
      adultNum: 'adult_num',
      btripUserId: 'btrip_user_id',
      checkInDate: 'check_in_date',
      checkOutDate: 'check_out_date',
      cityCode: 'city_code',
      cityName: 'city_name',
      dir: 'dir',
      hotelStar: 'hotel_star',
      isProtocol: 'is_protocol',
      paymentType: 'payment_type',
      shidsShrink: 'shids',
      sortCode: 'sort_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultNum: 'string',
      btripUserId: 'string',
      checkInDate: 'string',
      checkOutDate: 'string',
      cityCode: 'string',
      cityName: 'string',
      dir: 'number',
      hotelStar: 'string',
      isProtocol: 'boolean',
      paymentType: 'number',
      shidsShrink: 'string',
      sortCode: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelAskingPriceResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * None
   */
  message?: string;
  module?: HotelAskingPriceResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210bcc3a16583004579056128d33d7
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelAskingPriceResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelAskingPriceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelAskingPriceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelAskingPriceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelBillSettlementQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-02
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: HotelBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelCityCodeListHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelCityCodeListRequest extends $tea.Model {
  /**
   * @example
   * 1
   */
  countryCode?: string;
  static names(): { [key: string]: string } {
    return {
      countryCode: 'country_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      countryCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelCityCodeListResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * response is empty.
   */
  message?: string;
  module?: HotelCityCodeListResponseBodyModule[];
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': HotelCityCodeListResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelCityCodeListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelCityCodeListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelCityCodeListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelExceedApplyQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelExceedApplyQueryRequest extends $tea.Model {
  /**
   * @example
   * 1287123
   */
  applyId?: number;
  businessInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      businessInstanceId: 'business_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      businessInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelExceedApplyQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: HotelExceedApplyQueryResponseBodyModule;
  /**
   * @example
   * E03779E6-71C2-5082-ABE3-6315B8247EE8
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelExceedApplyQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelExceedApplyQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelExceedApplyQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelExceedApplyQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryRequest extends $tea.Model {
  /**
   * @example
   * 1
   */
  adultNum?: string;
  /**
   * @example
   * false
   */
  agreementPrice?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-27
   */
  beginDate?: string;
  /**
   * @example
   * false
   */
  breakfastIncluded?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  btripUserId?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-28
   */
  endDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 182873
   */
  hotelId?: string;
  /**
   * @example
   * 0
   */
  payOverType?: number;
  /**
   * @example
   * 0
   */
  paymentType?: number;
  /**
   * @example
   * false
   */
  specialInvoice?: boolean;
  /**
   * @example
   * 0
   */
  superMan?: number;
  static names(): { [key: string]: string } {
    return {
      adultNum: 'adult_num',
      agreementPrice: 'agreement_price',
      beginDate: 'begin_date',
      breakfastIncluded: 'breakfast_included',
      btripUserId: 'btrip_user_id',
      cityCode: 'city_code',
      endDate: 'end_date',
      hotelId: 'hotel_id',
      payOverType: 'pay_over_type',
      paymentType: 'payment_type',
      specialInvoice: 'special_invoice',
      superMan: 'super_man',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultNum: 'string',
      agreementPrice: 'boolean',
      beginDate: 'string',
      breakfastIncluded: 'boolean',
      btripUserId: 'string',
      cityCode: 'string',
      endDate: 'string',
      hotelId: 'string',
      payOverType: 'number',
      paymentType: 'number',
      specialInvoice: 'boolean',
      superMan: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * None
   */
  message?: string;
  module?: HotelGoodsQueryResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e847f16611516748613869de4f6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelGoodsQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelGoodsQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelGoodsQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelIndexInfoHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelIndexInfoRequest extends $tea.Model {
  /**
   * @example
   * 330000
   */
  cityCode?: string;
  /**
   * @example
   * 0
   */
  hotelStatus?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 1038882
   */
  pageToken?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      hotelStatus: 'hotel_status',
      pageSize: 'page_size',
      pageToken: 'page_token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      hotelStatus: 'number',
      pageSize: 'number',
      pageToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelIndexInfoResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * operation success.
   */
  message?: string;
  module?: HotelIndexInfoResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelIndexInfoResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelIndexInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelIndexInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelIndexInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCancelHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCancelRequest extends $tea.Model {
  btripOrderId?: string;
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      btripOrderId: 'btrip_order_id',
      disOrderId: 'dis_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripOrderId: 'string',
      disOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCancelResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * noPermission
   */
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: HotelOrderCancelResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderCancelResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCancelResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderCancelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderCancelResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeApplyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeApplyRequest extends $tea.Model {
  /**
   * @example
   * 123122
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3685792244476194816
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  reason?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  roomInfoList?: HotelOrderChangeApplyRequestRoomInfoList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1402002197440511306
   */
  saleOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      disOrderId: 'dis_order_id',
      reason: 'reason',
      roomInfoList: 'room_info_list',
      saleOrderId: 'sale_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      disOrderId: 'string',
      reason: 'string',
      roomInfoList: { 'type': 'array', 'itemType': HotelOrderChangeApplyRequestRoomInfoList },
      saleOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeApplyShrinkRequest extends $tea.Model {
  /**
   * @example
   * 123122
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3685792244476194816
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  reason?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  roomInfoListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1402002197440511306
   */
  saleOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      disOrderId: 'dis_order_id',
      reason: 'reason',
      roomInfoListShrink: 'room_info_list',
      saleOrderId: 'sale_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      disOrderId: 'string',
      reason: 'string',
      roomInfoListShrink: 'string',
      saleOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeApplyResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: HotelOrderChangeApplyResponseBodyModule;
  /**
   * @example
   * 6E9ABA14-5135-58FB-9DFC-C751B5855605
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 215045ec17018285034106091e8ba9
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderChangeApplyResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeApplyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderChangeApplyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderChangeApplyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeDetailRequest extends $tea.Model {
  /**
   * @example
   * 123455
   */
  btripUserId?: string;
  /**
   * @example
   * 21351235134
   */
  changeOrderId?: string;
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * 1402002197440511306
   */
  saleOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      changeOrderId: 'change_order_id',
      disOrderId: 'dis_order_id',
      saleOrderId: 'sale_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      changeOrderId: 'string',
      disOrderId: 'string',
      saleOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeDetailResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * operation success
   */
  message?: string;
  module?: HotelOrderChangeDetailResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderChangeDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderChangeDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderChangeDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123122
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2020-10-20
   */
  checkIn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2020-10-20
   */
  checkOut?: string;
  /**
   * @example
   * demo
   */
  contractEmail?: string;
  contractName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 19281772123
   */
  contractPhone?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  corpPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  extra?: string;
  invoiceInfo?: HotelOrderCreateRequestInvoiceInfo;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 671570615157
   */
  itemId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * fb5e1abf33924b6c912bd6d80deec0eb-1
   */
  itineraryNo?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  occupantInfoList?: HotelOrderCreateRequestOccupantInfoList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000
   */
  personPayPrice?: number;
  promotionInfo?: HotelOrderCreateRequestPromotionInfo;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1399417428510
   */
  ratePlanId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 187211
   */
  roomId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  roomNum?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2088441675613762
   */
  sellerId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2198781
   */
  shid?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  totalOrderPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82
   */
  validateResKey?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      checkIn: 'check_in',
      checkOut: 'check_out',
      contractEmail: 'contract_email',
      contractName: 'contract_name',
      contractPhone: 'contract_phone',
      corpPayPrice: 'corp_pay_price',
      disOrderId: 'dis_order_id',
      extra: 'extra',
      invoiceInfo: 'invoice_info',
      itemId: 'item_id',
      itineraryNo: 'itinerary_no',
      occupantInfoList: 'occupant_info_list',
      personPayPrice: 'person_pay_price',
      promotionInfo: 'promotion_info',
      ratePlanId: 'rate_plan_id',
      roomId: 'room_id',
      roomNum: 'room_num',
      sellerId: 'seller_id',
      shid: 'shid',
      totalOrderPrice: 'total_order_price',
      validateResKey: 'validate_res_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      checkIn: 'string',
      checkOut: 'string',
      contractEmail: 'string',
      contractName: 'string',
      contractPhone: 'string',
      corpPayPrice: 'number',
      disOrderId: 'string',
      extra: 'string',
      invoiceInfo: HotelOrderCreateRequestInvoiceInfo,
      itemId: 'number',
      itineraryNo: 'string',
      occupantInfoList: { 'type': 'array', 'itemType': HotelOrderCreateRequestOccupantInfoList },
      personPayPrice: 'number',
      promotionInfo: HotelOrderCreateRequestPromotionInfo,
      ratePlanId: 'number',
      roomId: 'number',
      roomNum: 'number',
      sellerId: 'number',
      shid: 'number',
      totalOrderPrice: 'number',
      validateResKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123122
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2020-10-20
   */
  checkIn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2020-10-20
   */
  checkOut?: string;
  /**
   * @example
   * demo
   */
  contractEmail?: string;
  contractName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 19281772123
   */
  contractPhone?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  corpPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  extra?: string;
  invoiceInfoShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 671570615157
   */
  itemId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * fb5e1abf33924b6c912bd6d80deec0eb-1
   */
  itineraryNo?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  occupantInfoListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000
   */
  personPayPrice?: number;
  promotionInfoShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1399417428510
   */
  ratePlanId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 187211
   */
  roomId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  roomNum?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2088441675613762
   */
  sellerId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2198781
   */
  shid?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  totalOrderPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82
   */
  validateResKey?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      checkIn: 'check_in',
      checkOut: 'check_out',
      contractEmail: 'contract_email',
      contractName: 'contract_name',
      contractPhone: 'contract_phone',
      corpPayPrice: 'corp_pay_price',
      disOrderId: 'dis_order_id',
      extra: 'extra',
      invoiceInfoShrink: 'invoice_info',
      itemId: 'item_id',
      itineraryNo: 'itinerary_no',
      occupantInfoListShrink: 'occupant_info_list',
      personPayPrice: 'person_pay_price',
      promotionInfoShrink: 'promotion_info',
      ratePlanId: 'rate_plan_id',
      roomId: 'room_id',
      roomNum: 'room_num',
      sellerId: 'seller_id',
      shid: 'shid',
      totalOrderPrice: 'total_order_price',
      validateResKey: 'validate_res_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      checkIn: 'string',
      checkOut: 'string',
      contractEmail: 'string',
      contractName: 'string',
      contractPhone: 'string',
      corpPayPrice: 'number',
      disOrderId: 'string',
      extra: 'string',
      invoiceInfoShrink: 'string',
      itemId: 'number',
      itineraryNo: 'string',
      occupantInfoListShrink: 'string',
      personPayPrice: 'number',
      promotionInfoShrink: 'string',
      ratePlanId: 'number',
      roomId: 'number',
      roomNum: 'number',
      sellerId: 'number',
      shid: 'number',
      totalOrderPrice: 'number',
      validateResKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * operation success.
   */
  message?: string;
  module?: HotelOrderCreateResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderCreateResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderCreateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderCreateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoRequest extends $tea.Model {
  btripOrderId?: string;
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      btripOrderId: 'btrip_order_id',
      disOrderId: 'dis_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripOrderId: 'string',
      disOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * succeed in handling request
   */
  message?: string;
  module?: HotelOrderDetailInfoResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderDetailInfoResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderDetailInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderDetailInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBody extends $tea.Model {
  /**
   * @example
   * success
   */
  code?: string;
  message?: string;
  module?: HotelOrderInfoQueryResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderInfoQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderInfoQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderInfoQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  allApply?: boolean;
  /**
   * @example
   * 165782
   */
  applyId?: number;
  category?: number;
  departId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  endTime?: string;
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  startTime?: string;
  /**
   * @example
   * CS154JKOI
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateEndTime?: string;
  /**
   * @example
   * 2022-07-01 00:00:00
   */
  updateStartTime?: string;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      allApply: 'all_apply',
      applyId: 'apply_id',
      category: 'category',
      departId: 'depart_id',
      endTime: 'end_time',
      page: 'page',
      pageSize: 'page_size',
      startTime: 'start_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      updateEndTime: 'update_end_time',
      updateStartTime: 'update_start_time',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allApply: 'boolean',
      applyId: 'number',
      category: 'number',
      departId: 'string',
      endTime: 'string',
      page: 'number',
      pageSize: 'number',
      startTime: 'string',
      thirdpartApplyId: 'string',
      updateEndTime: 'string',
      updateStartTime: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: HotelOrderListQueryResponseBodyModule[];
  pageInfo?: HotelOrderListQueryResponseBodyPageInfo;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      pageInfo: 'page_info',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': HotelOrderListQueryResponseBodyModule },
      pageInfo: HotelOrderListQueryResponseBodyPageInfo,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPayHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPayRequest extends $tea.Model {
  /**
   * @remarks
   * 供应商订单号（取自创单返回的订单号）
   * 
   * This parameter is required.
   * 
   * @example
   * 1002202194207077022
   */
  btripOrderId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 23918781
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  companyPayFee?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  personPayFee?: number;
  /**
   * @example
   * demo
   */
  thirdPayAccount?: string;
  /**
   * @example
   * demo
   */
  thirdTradeNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      btripOrderId: 'btrip_order_id',
      btripUserId: 'btrip_user_id',
      companyPayFee: 'company_pay_fee',
      personPayFee: 'person_pay_fee',
      thirdPayAccount: 'third_pay_account',
      thirdTradeNo: 'third_trade_no',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripOrderId: 'number',
      btripUserId: 'string',
      companyPayFee: 'number',
      personPayFee: 'number',
      thirdPayAccount: 'string',
      thirdTradeNo: 'string',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPayResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * successful
   */
  message?: string;
  /**
   * @example
   * true
   */
  module?: boolean;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e842b16611337974412836dae27
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPayResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderPayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderPayResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 23141
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-05-15
   */
  checkIn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-05-15
   */
  checkOut?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  dailyList?: HotelOrderPreValidateRequestDailyList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 612673015638
   */
  itemId?: number;
  /**
   * @example
   * 1
   */
  numberOfAdultsPerRoom?: number;
  occupantInfoList?: HotelOrderPreValidateRequestOccupantInfoList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 239872781
   */
  ratePlanId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 71652158
   */
  roomId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  roomNum?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000
   */
  searchRoomPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2088441675613762
   */
  sellerId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 52302073
   */
  shid?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      checkIn: 'check_in',
      checkOut: 'check_out',
      dailyList: 'daily_list',
      itemId: 'item_id',
      numberOfAdultsPerRoom: 'number_of_adults_per_room',
      occupantInfoList: 'occupant_info_list',
      ratePlanId: 'rate_plan_id',
      roomId: 'room_id',
      roomNum: 'room_num',
      searchRoomPrice: 'search_room_price',
      sellerId: 'seller_id',
      shid: 'shid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      checkIn: 'string',
      checkOut: 'string',
      dailyList: { 'type': 'array', 'itemType': HotelOrderPreValidateRequestDailyList },
      itemId: 'number',
      numberOfAdultsPerRoom: 'number',
      occupantInfoList: { 'type': 'array', 'itemType': HotelOrderPreValidateRequestOccupantInfoList },
      ratePlanId: 'number',
      roomId: 'number',
      roomNum: 'number',
      searchRoomPrice: 'number',
      sellerId: 'number',
      shid: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 23141
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-05-15
   */
  checkIn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-05-15
   */
  checkOut?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  dailyListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 612673015638
   */
  itemId?: number;
  /**
   * @example
   * 1
   */
  numberOfAdultsPerRoom?: number;
  occupantInfoListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 239872781
   */
  ratePlanId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 71652158
   */
  roomId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  roomNum?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000
   */
  searchRoomPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2088441675613762
   */
  sellerId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 52302073
   */
  shid?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      checkIn: 'check_in',
      checkOut: 'check_out',
      dailyListShrink: 'daily_list',
      itemId: 'item_id',
      numberOfAdultsPerRoom: 'number_of_adults_per_room',
      occupantInfoListShrink: 'occupant_info_list',
      ratePlanId: 'rate_plan_id',
      roomId: 'room_id',
      roomNum: 'room_num',
      searchRoomPrice: 'search_room_price',
      sellerId: 'seller_id',
      shid: 'shid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      checkIn: 'string',
      checkOut: 'string',
      dailyListShrink: 'string',
      itemId: 'number',
      numberOfAdultsPerRoom: 'number',
      occupantInfoListShrink: 'string',
      ratePlanId: 'number',
      roomId: 'number',
      roomNum: 'number',
      searchRoomPrice: 'number',
      sellerId: 'number',
      shid: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: HotelOrderPreValidateResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderPreValidateResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderPreValidateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderPreValidateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1002145190081005400
   */
  orderId?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: HotelOrderQueryResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelOrderQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelOrderQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelOrderQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullRequest extends $tea.Model {
  /**
   * @example
   * 1000
   */
  btripUserId?: string;
  /**
   * @example
   * 2022-05-15
   */
  checkIn?: string;
  /**
   * @example
   * 2022-05-15
   */
  checkOut?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: number;
  hotelIds?: string[];
  /**
   * @example
   * 0
   */
  paymentType?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      checkIn: 'check_in',
      checkOut: 'check_out',
      cityCode: 'city_code',
      hotelIds: 'hotel_ids',
      paymentType: 'payment_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      checkIn: 'string',
      checkOut: 'string',
      cityCode: 'number',
      hotelIds: { 'type': 'array', 'itemType': 'string' },
      paymentType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullShrinkRequest extends $tea.Model {
  /**
   * @example
   * 1000
   */
  btripUserId?: string;
  /**
   * @example
   * 2022-05-15
   */
  checkIn?: string;
  /**
   * @example
   * 2022-05-15
   */
  checkOut?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: number;
  hotelIdsShrink?: string;
  /**
   * @example
   * 0
   */
  paymentType?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      checkIn: 'check_in',
      checkOut: 'check_out',
      cityCode: 'city_code',
      hotelIdsShrink: 'hotel_ids',
      paymentType: 'payment_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      checkIn: 'string',
      checkOut: 'string',
      cityCode: 'number',
      hotelIdsShrink: 'string',
      paymentType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * None
   */
  message?: string;
  module?: HotelPricePullResponseBodyModule;
  /**
   * @example
   * 9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'request_id',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelPricePullResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelPricePullResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelPricePullResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  roomIds?: number[];
  static names(): { [key: string]: string } {
    return {
      roomIds: 'room_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roomIds: { 'type': 'array', 'itemType': 'number' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  roomIdsShrink?: string;
  static names(): { [key: string]: string } {
    return {
      roomIdsShrink: 'room_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roomIdsShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * operation success.
   */
  message?: string;
  module?: HotelRoomInfoResponseBodyModule[];
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': HotelRoomInfoResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelRoomInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelRoomInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchRequest extends $tea.Model {
  /**
   * @example
   * 1
   */
  adultNum?: string;
  brandCode?: string[];
  /**
   * @example
   * 1000
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22
   */
  checkInDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22
   */
  checkOutDate?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  /**
   * @example
   * 1
   */
  dir?: number;
  /**
   * @example
   * 100
   */
  distance?: number;
  /**
   * @example
   * 330000
   */
  districtCode?: string;
  /**
   * @example
   * 0
   */
  hotelStar?: string;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  keyWords?: string;
  /**
   * @example
   * 120.010059, 30.284666
   */
  location?: string;
  /**
   * @example
   * 1000
   */
  maxPrice?: number;
  /**
   * @example
   * 100
   */
  minPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 1
   */
  payOverType?: number;
  /**
   * @example
   * 0
   */
  paymentType?: number;
  shids?: number[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  sortCode?: number;
  /**
   * @example
   * 0
   */
  superMan?: number;
  static names(): { [key: string]: string } {
    return {
      adultNum: 'adult_num',
      brandCode: 'brand_code',
      btripUserId: 'btrip_user_id',
      checkInDate: 'check_in_date',
      checkOutDate: 'check_out_date',
      cityCode: 'city_code',
      dir: 'dir',
      distance: 'distance',
      districtCode: 'district_code',
      hotelStar: 'hotel_star',
      isProtocol: 'is_protocol',
      keyWords: 'key_words',
      location: 'location',
      maxPrice: 'max_price',
      minPrice: 'min_price',
      pageNo: 'page_no',
      pageSize: 'page_size',
      payOverType: 'pay_over_type',
      paymentType: 'payment_type',
      shids: 'shids',
      sortCode: 'sort_code',
      superMan: 'super_man',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultNum: 'string',
      brandCode: { 'type': 'array', 'itemType': 'string' },
      btripUserId: 'string',
      checkInDate: 'string',
      checkOutDate: 'string',
      cityCode: 'string',
      dir: 'number',
      distance: 'number',
      districtCode: 'string',
      hotelStar: 'string',
      isProtocol: 'boolean',
      keyWords: 'string',
      location: 'string',
      maxPrice: 'number',
      minPrice: 'number',
      pageNo: 'number',
      pageSize: 'number',
      payOverType: 'number',
      paymentType: 'number',
      shids: { 'type': 'array', 'itemType': 'number' },
      sortCode: 'number',
      superMan: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchShrinkRequest extends $tea.Model {
  /**
   * @example
   * 1
   */
  adultNum?: string;
  brandCodeShrink?: string;
  /**
   * @example
   * 1000
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22
   */
  checkInDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-02-22
   */
  checkOutDate?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  /**
   * @example
   * 1
   */
  dir?: number;
  /**
   * @example
   * 100
   */
  distance?: number;
  /**
   * @example
   * 330000
   */
  districtCode?: string;
  /**
   * @example
   * 0
   */
  hotelStar?: string;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  keyWords?: string;
  /**
   * @example
   * 120.010059, 30.284666
   */
  location?: string;
  /**
   * @example
   * 1000
   */
  maxPrice?: number;
  /**
   * @example
   * 100
   */
  minPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 1
   */
  payOverType?: number;
  /**
   * @example
   * 0
   */
  paymentType?: number;
  shidsShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  sortCode?: number;
  /**
   * @example
   * 0
   */
  superMan?: number;
  static names(): { [key: string]: string } {
    return {
      adultNum: 'adult_num',
      brandCodeShrink: 'brand_code',
      btripUserId: 'btrip_user_id',
      checkInDate: 'check_in_date',
      checkOutDate: 'check_out_date',
      cityCode: 'city_code',
      dir: 'dir',
      distance: 'distance',
      districtCode: 'district_code',
      hotelStar: 'hotel_star',
      isProtocol: 'is_protocol',
      keyWords: 'key_words',
      location: 'location',
      maxPrice: 'max_price',
      minPrice: 'min_price',
      pageNo: 'page_no',
      pageSize: 'page_size',
      payOverType: 'pay_over_type',
      paymentType: 'payment_type',
      shidsShrink: 'shids',
      sortCode: 'sort_code',
      superMan: 'super_man',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultNum: 'string',
      brandCodeShrink: 'string',
      btripUserId: 'string',
      checkInDate: 'string',
      checkOutDate: 'string',
      cityCode: 'string',
      dir: 'number',
      distance: 'number',
      districtCode: 'string',
      hotelStar: 'string',
      isProtocol: 'boolean',
      keyWords: 'string',
      location: 'string',
      maxPrice: 'number',
      minPrice: 'number',
      pageNo: 'number',
      pageSize: 'number',
      payOverType: 'number',
      paymentType: 'number',
      shidsShrink: 'string',
      sortCode: 'number',
      superMan: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * None
   */
  message?: string;
  module?: HotelSearchResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  hotelIds?: string[];
  static names(): { [key: string]: string } {
    return {
      hotelIds: 'hotel_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  hotelIdsShrink?: string;
  static names(): { [key: string]: string } {
    return {
      hotelIdsShrink: 'hotel_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelIdsShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * operation success.
   */
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: HotelStaticInfoResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelStaticInfoResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelStaticInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelStaticInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2Request extends $tea.Model {
  /**
   * @example
   * 1000
   */
  btripUserId?: string;
  /**
   * @example
   * 2024-05-15
   */
  checkIn?: string;
  /**
   * @example
   * 2024-06-04
   */
  checkOut?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  keyword?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  searchType?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      checkIn: 'check_in',
      checkOut: 'check_out',
      cityCode: 'city_code',
      keyword: 'keyword',
      searchType: 'search_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      checkIn: 'string',
      checkOut: 'string',
      cityCode: 'string',
      keyword: 'string',
      searchType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * None
   */
  message?: string;
  module?: HotelSuggestV2ResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: HotelSuggestV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HotelSuggestV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HotelSuggestV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1017035199702438072
   */
  orderId?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: IFlightOrderDetailQueryResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: IFlightOrderDetailQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IFlightOrderDetailQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IFlightOrderDetailQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryRequest extends $tea.Model {
  applyIdList?: string[];
  bookTypeList?: number[];
  bookerId?: string[];
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  endDate?: string;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4
   */
  scrollId?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  startDate?: string;
  thirdPartApplyIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      applyIdList: 'apply_id_list',
      bookTypeList: 'book_type_list',
      bookerId: 'booker_id',
      endDate: 'end_date',
      pageSize: 'page_size',
      scrollId: 'scroll_id',
      startDate: 'start_date',
      thirdPartApplyIdList: 'third_part_apply_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyIdList: { 'type': 'array', 'itemType': 'string' },
      bookTypeList: { 'type': 'array', 'itemType': 'number' },
      bookerId: { 'type': 'array', 'itemType': 'string' },
      endDate: 'string',
      pageSize: 'number',
      scrollId: 'string',
      startDate: 'string',
      thirdPartApplyIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryShrinkRequest extends $tea.Model {
  applyIdListShrink?: string;
  bookTypeListShrink?: string;
  bookerIdShrink?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  endDate?: string;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4
   */
  scrollId?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  startDate?: string;
  thirdPartApplyIdListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      applyIdListShrink: 'apply_id_list',
      bookTypeListShrink: 'book_type_list',
      bookerIdShrink: 'booker_id',
      endDate: 'end_date',
      pageSize: 'page_size',
      scrollId: 'scroll_id',
      startDate: 'start_date',
      thirdPartApplyIdListShrink: 'third_part_apply_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyIdListShrink: 'string',
      bookTypeListShrink: 'string',
      bookerIdShrink: 'string',
      endDate: 'string',
      pageSize: 'number',
      scrollId: 'string',
      startDate: 'string',
      thirdPartApplyIdListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: IFlightOrderListQueryResponseBodyModule[];
  pageInfo?: IFlightOrderListQueryResponseBodyPageInfo;
  /**
   * @example
   * C61ECFF6-****-****-****-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce********056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      pageInfo: 'pageInfo',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModule },
      pageInfo: IFlightOrderListQueryResponseBodyPageInfo,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IFlightOrderListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IFlightOrderListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeFlightBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeFlightBillSettlementQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-02
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeFlightBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: IeFlightBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * true
   */
  morePage?: boolean;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e842b16611337974412836dae27
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      morePage: 'more_page',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: IeFlightBillSettlementQueryResponseBodyModule,
      morePage: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeFlightBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IeFlightBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IeFlightBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeHotelBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeHotelBillSettlementQueryRequest extends $tea.Model {
  /**
   * @example
   * 12
   */
  category?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-02
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeHotelBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: IeHotelBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * 210e877f16763560074236874d5268
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  /**
   * @example
   * 2103a08a16861217249785276d5a87
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: IeHotelBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeHotelBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IeHotelBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IeHotelBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsInvoiceScanQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsInvoiceScanQueryRequest extends $tea.Model {
  /**
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @example
   * 123
   */
  billId?: number;
  /**
   * @example
   * 456
   */
  invoiceSubTaskId?: number;
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      billDate: 'bill_date',
      billId: 'bill_id',
      invoiceSubTaskId: 'invoice_sub_task_id',
      pageNo: 'page_no',
      pageSize: 'page_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billDate: 'string',
      billId: 'number',
      invoiceSubTaskId: 'number',
      pageNo: 'number',
      pageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsInvoiceScanQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: InsInvoiceScanQueryResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e847f16611516748613869de4f6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InsInvoiceScanQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsInvoiceScanQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsInvoiceScanQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsInvoiceScanQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderApplyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderApplyRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100000102
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1000003000000490
   */
  insOrderId?: string;
  /**
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * 202310101026030
   */
  outOrderId?: string;
  /**
   * @example
   * 1020030003332000
   */
  outSubOrderId?: string;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      insOrderId: 'ins_order_id',
      isvName: 'isv_name',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      insOrderId: 'string',
      isvName: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderApplyResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: InsureOrderApplyResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e800316781571635951548d1e9d
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InsureOrderApplyResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderApplyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureOrderApplyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureOrderApplyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCancelHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCancelRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000310301
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @example
   * open12igetbis4o07v10B1TlOWcM00
   */
  isvName?: string;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      isvName: 'isv_name',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      isvName: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCancelResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 210bc41416861901778051918d1942
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCancelResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureOrderCancelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureOrderCancelResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  applicant?: InsureOrderCreateRequestApplicant;
  /**
   * @example
   * 20202109390122
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  insPersonAndSegmentList?: InsureOrderCreateRequestInsPersonAndSegmentList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * 100000320302020
   */
  outInsOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 202310101026030
   */
  outOrderId?: string;
  /**
   * @example
   * 1020030003332000
   */
  outSubOrderId?: string;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      applicant: 'applicant',
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      insPersonAndSegmentList: 'ins_person_and_segment_list',
      isvName: 'isv_name',
      outInsOrderId: 'out_ins_order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicant: InsureOrderCreateRequestApplicant,
      btripUserId: 'string',
      buyerName: 'string',
      insPersonAndSegmentList: { 'type': 'array', 'itemType': InsureOrderCreateRequestInsPersonAndSegmentList },
      isvName: 'string',
      outInsOrderId: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  applicantShrink?: string;
  /**
   * @example
   * 20202109390122
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  insPersonAndSegmentListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * 100000320302020
   */
  outInsOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 202310101026030
   */
  outOrderId?: string;
  /**
   * @example
   * 1020030003332000
   */
  outSubOrderId?: string;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      applicantShrink: 'applicant',
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      insPersonAndSegmentListShrink: 'ins_person_and_segment_list',
      isvName: 'isv_name',
      outInsOrderId: 'out_ins_order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicantShrink: 'string',
      btripUserId: 'string',
      buyerName: 'string',
      insPersonAndSegmentListShrink: 'string',
      isvName: 'string',
      outInsOrderId: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: InsureOrderCreateResponseBodyModule;
  /**
   * @example
   * C6055EA5-C566-511D-9FC4-5E4D45182711
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079916782711059363565d6be1
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InsureOrderCreateResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureOrderCreateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureOrderCreateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10000001
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1021000196440356901
   */
  insOrderId?: string;
  /**
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      insOrderId: 'ins_order_id',
      isvName: 'isv_name',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      insOrderId: 'string',
      isvName: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: InsureOrderDetailResponseBodyModule;
  /**
   * @example
   * 4498BDAB-2AAF-5B6F-942A-3C1C935345C9
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InsureOrderDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureOrderDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderPayHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderPayRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100000001
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * 202310101026030
   */
  outOrderId?: string;
  /**
   * @example
   * 1020030003332000
   */
  outSubOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3000
   */
  paymentAmount?: number;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      isvName: 'isv_name',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      paymentAmount: 'payment_amount',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      isvName: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      paymentAmount: 'number',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderPayResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 210bc4ba16799697693368683dbafc
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderPayResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureOrderPayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureOrderPayResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderRefundHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderRefundRequest extends $tea.Model {
  /**
   * @example
   * 1000001
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * 1021000196440356908
   */
  outApplyId?: string;
  policyNoList?: string[];
  subInsOrderIds?: string[];
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      isvName: 'isv_name',
      outApplyId: 'out_apply_id',
      policyNoList: 'policy_no_list',
      subInsOrderIds: 'sub_ins_order_ids',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      isvName: 'string',
      outApplyId: 'string',
      policyNoList: { 'type': 'array', 'itemType': 'string' },
      subInsOrderIds: { 'type': 'array', 'itemType': 'string' },
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderRefundShrinkRequest extends $tea.Model {
  /**
   * @example
   * 1000001
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * 1021000196440356908
   */
  outApplyId?: string;
  policyNoListShrink?: string;
  subInsOrderIdsShrink?: string;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      isvName: 'isv_name',
      outApplyId: 'out_apply_id',
      policyNoListShrink: 'policy_no_list',
      subInsOrderIdsShrink: 'sub_ins_order_ids',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      isvName: 'string',
      outApplyId: 'string',
      policyNoListShrink: 'string',
      subInsOrderIdsShrink: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderRefundResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: InsureOrderRefundResponseBodyModule;
  /**
   * @example
   * 2103ad3116824902540648188de7ac
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e846c16726306481681232d441f
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InsureOrderRefundResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderRefundResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureOrderRefundResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureOrderRefundResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderUrlDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderUrlDetailResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * https://siopuat.mingya.com.cn/siop-fliggy/index.html#/list?token=fR4iOOZWgG
   */
  module?: string;
  /**
   * @example
   * 210bc59616861088185764700d7589
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 213e212c16975080875814628effac
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderUrlDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureOrderUrlDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureOrderUrlDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailRequest extends $tea.Model {
  /**
   * @example
   * 1423052318072952023
   */
  applyId?: string;
  /**
   * @example
   * 1000000001
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @example
   * 1000003000000490
   */
  insOrderId?: string;
  /**
   * @example
   * PostalSavingsBank
   */
  isvName?: string;
  /**
   * @example
   * 1021000196440356908
   */
  outApplyId?: string;
  /**
   * @example
   * fliggy
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      insOrderId: 'ins_order_id',
      isvName: 'isv_name',
      outApplyId: 'out_apply_id',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      btripUserId: 'string',
      buyerName: 'string',
      insOrderId: 'string',
      isvName: 'string',
      outApplyId: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: InsureRefundDetailResponseBodyModule;
  /**
   * @example
   * 2103a75b16843756660655464d56a9
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210bc44e16818128994413918de6c1
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InsureRefundDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InsureRefundDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InsureRefundDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderRequest extends $tea.Model {
  /**
   * @example
   * fcoid_deb6372db8194f1c94c23bc4fadc508d
   */
  asyncCreateOrderKey?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  asyncCreateOrderMode?: boolean;
  contactInfo?: IntlFlightCreateOrderRequestContactInfo;
  costCenter?: IntlFlightCreateOrderRequestCostCenter;
  extraInfo?: { [key: string]: string };
  /**
   * @example
   * open12k0lclldfdc7v10E2HaRrOr00
   */
  isvName?: string;
  /**
   * @example
   * chinese
   */
  language?: string;
  /**
   * @example
   * 56319a175bdf4b1898190bd7edb603b5_0
   */
  otaItemId?: string;
  /**
   * @example
   * F11380075736888770560
   */
  outOrderId?: string;
  passengerList?: IntlFlightCreateOrderRequestPassengerList[];
  /**
   * @example
   * fcoid_deb6372db8194f1c94c23bc4fadc508d
   */
  renderKey?: string;
  /**
   * @example
   * 120000
   */
  totalPriceCent?: number;
  /**
   * @example
   * 12341234
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      asyncCreateOrderKey: 'async_create_order_key',
      asyncCreateOrderMode: 'async_create_order_mode',
      contactInfo: 'contact_info',
      costCenter: 'cost_center',
      extraInfo: 'extra_info',
      isvName: 'isv_name',
      language: 'language',
      otaItemId: 'ota_item_id',
      outOrderId: 'out_order_id',
      passengerList: 'passenger_list',
      renderKey: 'render_key',
      totalPriceCent: 'total_price_cent',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncCreateOrderKey: 'string',
      asyncCreateOrderMode: 'boolean',
      contactInfo: IntlFlightCreateOrderRequestContactInfo,
      costCenter: IntlFlightCreateOrderRequestCostCenter,
      extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      isvName: 'string',
      language: 'string',
      otaItemId: 'string',
      outOrderId: 'string',
      passengerList: { 'type': 'array', 'itemType': IntlFlightCreateOrderRequestPassengerList },
      renderKey: 'string',
      totalPriceCent: 'number',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderShrinkRequest extends $tea.Model {
  /**
   * @example
   * fcoid_deb6372db8194f1c94c23bc4fadc508d
   */
  asyncCreateOrderKey?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  asyncCreateOrderMode?: boolean;
  contactInfoShrink?: string;
  costCenterShrink?: string;
  extraInfoShrink?: string;
  /**
   * @example
   * open12k0lclldfdc7v10E2HaRrOr00
   */
  isvName?: string;
  /**
   * @example
   * chinese
   */
  language?: string;
  /**
   * @example
   * 56319a175bdf4b1898190bd7edb603b5_0
   */
  otaItemId?: string;
  /**
   * @example
   * F11380075736888770560
   */
  outOrderId?: string;
  passengerListShrink?: string;
  /**
   * @example
   * fcoid_deb6372db8194f1c94c23bc4fadc508d
   */
  renderKey?: string;
  /**
   * @example
   * 120000
   */
  totalPriceCent?: number;
  /**
   * @example
   * 12341234
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      asyncCreateOrderKey: 'async_create_order_key',
      asyncCreateOrderMode: 'async_create_order_mode',
      contactInfoShrink: 'contact_info',
      costCenterShrink: 'cost_center',
      extraInfoShrink: 'extra_info',
      isvName: 'isv_name',
      language: 'language',
      otaItemId: 'ota_item_id',
      outOrderId: 'out_order_id',
      passengerListShrink: 'passenger_list',
      renderKey: 'render_key',
      totalPriceCent: 'total_price_cent',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncCreateOrderKey: 'string',
      asyncCreateOrderMode: 'boolean',
      contactInfoShrink: 'string',
      costCenterShrink: 'string',
      extraInfoShrink: 'string',
      isvName: 'string',
      language: 'string',
      otaItemId: 'string',
      outOrderId: 'string',
      passengerListShrink: 'string',
      renderKey: 'string',
      totalPriceCent: 'number',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  module?: IntlFlightCreateOrderResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  resultCode?: string;
  resultMsg?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 2103ad1116826479016562032da98c
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      httpStatusCode: 'http_status_code',
      module: 'module',
      requestId: 'requestId',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      httpStatusCode: 'number',
      module: IntlFlightCreateOrderResponseBodyModule,
      requestId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightCreateOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightCreateOrderResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckRequest extends $tea.Model {
  /**
   * @example
   * ZJTD
   */
  isvName?: string;
  /**
   * @example
   * chinese
   */
  language?: string;
  /**
   * @example
   * 102000
   */
  orderPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 22111acaf9ea47c09ed0db6abc45be2d_0
   */
  otaItemId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerList?: IntlFlightInventoryPriceCheckRequestPassengerList[];
  /**
   * @example
   * 12412341234
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      language: 'language',
      orderPrice: 'order_price',
      otaItemId: 'ota_item_id',
      passengerList: 'passenger_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      language: 'string',
      orderPrice: 'number',
      otaItemId: 'string',
      passengerList: { 'type': 'array', 'itemType': IntlFlightInventoryPriceCheckRequestPassengerList },
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckShrinkRequest extends $tea.Model {
  /**
   * @example
   * ZJTD
   */
  isvName?: string;
  /**
   * @example
   * chinese
   */
  language?: string;
  /**
   * @example
   * 102000
   */
  orderPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 22111acaf9ea47c09ed0db6abc45be2d_0
   */
  otaItemId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerListShrink?: string;
  /**
   * @example
   * 12412341234
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      language: 'language',
      orderPrice: 'order_price',
      otaItemId: 'ota_item_id',
      passengerListShrink: 'passenger_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      language: 'string',
      orderPrice: 'number',
      otaItemId: 'string',
      passengerListShrink: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckResponseBody extends $tea.Model {
  module?: IntlFlightInventoryPriceCheckResponseBodyModule;
  /**
   * @example
   * 92359A00-85D8-16C4-AED0-249618DEEC17
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  resultCode?: string;
  resultMsg?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 2103ad1516839612078738332dea5c
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      module: 'module',
      requestId: 'requestId',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      module: IntlFlightInventoryPriceCheckResponseBodyModule,
      requestId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightInventoryPriceCheckResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightInventoryPriceCheckResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchRequest extends $tea.Model {
  /**
   * @example
   * 10001
   */
  btripUserId?: string;
  /**
   * @example
   * ZHANGSAN
   */
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  cabinType?: number;
  /**
   * @example
   * false
   */
  directOnly?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * TEST
   */
  isvName?: string;
  language?: string;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  outWheelSearch?: boolean;
  /**
   * @example
   * 60b412-cc05-4d10-b570-
   */
  queryRecordId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneys?: IntlFlightListingSearchRequestSearchJourneys[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  searchMode?: number;
  searchPassengerList?: IntlFlightListingSearchRequestSearchPassengerList[];
  /**
   * @example
   * JIANHANG
   */
  supplierCode?: string;
  /**
   * @example
   * 9960b412-cc05-4d10-b570-93372d816807
   */
  token?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      cabinType: 'cabin_type',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      language: 'language',
      needShareFlight: 'need_share_flight',
      outWheelSearch: 'out_wheel_search',
      queryRecordId: 'query_record_id',
      searchJourneys: 'search_journeys',
      searchMode: 'search_mode',
      searchPassengerList: 'search_passenger_list',
      supplierCode: 'supplier_code',
      token: 'token',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      cabinType: 'number',
      directOnly: 'boolean',
      isvName: 'string',
      language: 'string',
      needShareFlight: 'boolean',
      outWheelSearch: 'boolean',
      queryRecordId: 'string',
      searchJourneys: { 'type': 'array', 'itemType': IntlFlightListingSearchRequestSearchJourneys },
      searchMode: 'number',
      searchPassengerList: { 'type': 'array', 'itemType': IntlFlightListingSearchRequestSearchPassengerList },
      supplierCode: 'string',
      token: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchShrinkRequest extends $tea.Model {
  /**
   * @example
   * 10001
   */
  btripUserId?: string;
  /**
   * @example
   * ZHANGSAN
   */
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  cabinType?: number;
  /**
   * @example
   * false
   */
  directOnly?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * TEST
   */
  isvName?: string;
  language?: string;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  outWheelSearch?: boolean;
  /**
   * @example
   * 60b412-cc05-4d10-b570-
   */
  queryRecordId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneysShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  searchMode?: number;
  searchPassengerListShrink?: string;
  /**
   * @example
   * JIANHANG
   */
  supplierCode?: string;
  /**
   * @example
   * 9960b412-cc05-4d10-b570-93372d816807
   */
  token?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      cabinType: 'cabin_type',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      language: 'language',
      needShareFlight: 'need_share_flight',
      outWheelSearch: 'out_wheel_search',
      queryRecordId: 'query_record_id',
      searchJourneysShrink: 'search_journeys',
      searchMode: 'search_mode',
      searchPassengerListShrink: 'search_passenger_list',
      supplierCode: 'supplier_code',
      token: 'token',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      cabinType: 'number',
      directOnly: 'boolean',
      isvName: 'string',
      language: 'string',
      needShareFlight: 'boolean',
      outWheelSearch: 'boolean',
      queryRecordId: 'string',
      searchJourneysShrink: 'string',
      searchMode: 'number',
      searchPassengerListShrink: 'string',
      supplierCode: 'string',
      token: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: IntlFlightListingSearchResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210bc4b116835992457938931db4de
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: IntlFlightListingSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightListingSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightListingSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderCancelHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderCancelRequest extends $tea.Model {
  /**
   * @example
   * TRAVEL
   */
  isvName?: string;
  memo?: string;
  /**
   * @example
   * 1012000000000000
   */
  orderId?: string;
  /**
   * @example
   * F11374007131319304192
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      memo: 'memo',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      memo: 'string',
      orderId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderCancelResponseBody extends $tea.Model {
  module?: IntlFlightOrderCancelResponseBodyModule;
  /**
   * @example
   * A3F8DCAB-8301-5770-BD9F-71B0BF9E1A6E
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  resultCode?: string;
  resultMsg?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      module: 'module',
      requestId: 'request_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      success: 'success',
      traceId: 'trace_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      module: IntlFlightOrderCancelResponseBodyModule,
      requestId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderCancelResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightOrderCancelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightOrderCancelResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailRequest extends $tea.Model {
  /**
   * @example
   * TRAVEL
   */
  isvName?: string;
  /**
   * @example
   * 1012000000000000
   */
  orderId?: string;
  /**
   * @example
   * F11374007131319304192
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBody extends $tea.Model {
  module?: IntlFlightOrderDetailResponseBodyModule;
  /**
   * @example
   * A3F8DCAB-8301-5770-BD9F-71B0BF9E1A6E
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  resultCode?: string;
  resultMsg?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      module: 'module',
      requestId: 'request_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      success: 'success',
      traceId: 'trace_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      module: IntlFlightOrderDetailResponseBodyModule,
      requestId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightOrderDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayRequest extends $tea.Model {
  extParams?: { [key: string]: any };
  /**
   * @example
   * TRAVEL
   */
  isvName?: string;
  /**
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @example
   * F11372878673688133632
   */
  outOrderId?: string;
  /**
   * @example
   * 15500
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      extParams: 'ext_params',
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayShrinkRequest extends $tea.Model {
  extParamsShrink?: string;
  /**
   * @example
   * TRAVEL
   */
  isvName?: string;
  /**
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @example
   * F11372878673688133632
   */
  outOrderId?: string;
  /**
   * @example
   * 15500
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      extParamsShrink: 'ext_params',
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extParamsShrink: 'string',
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayResponseBody extends $tea.Model {
  module?: IntlFlightOrderPayResponseBodyModule;
  /**
   * @example
   * 9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  resultCode?: string;
  resultMsg?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      module: 'module',
      requestId: 'request_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      success: 'success',
      traceId: 'trace_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      module: IntlFlightOrderPayResponseBodyModule,
      requestId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightOrderPayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightOrderPayResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayCheckHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayCheckRequest extends $tea.Model {
  /**
   * @example
   * TRAVEL
   */
  isvName?: string;
  /**
   * @example
   * 1002094194679957528
   */
  orderId?: string;
  /**
   * @example
   * F11374007131319304192
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      orderId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayCheckResponseBody extends $tea.Model {
  /**
   * @example
   * 9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  resultCode?: string;
  resultMsg?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'request_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      success: 'success',
      traceId: 'trace_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayCheckResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightOrderPayCheckResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightOrderPayCheckResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailRequest extends $tea.Model {
  /**
   * @example
   * 10001
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @example
   * open12igetbis4o07v10B1TlOWcM00
   */
  isvName?: string;
  language?: string;
  /**
   * @example
   * JIANHANG
   */
  supplierCode?: string;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      isvName: 'isv_name',
      language: 'language',
      supplierCode: 'supplier_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      isvName: 'string',
      language: 'string',
      supplierCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: IntlFlightOtaItemDetailResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: IntlFlightOtaItemDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightOtaItemDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightOtaItemDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchRequest extends $tea.Model {
  /**
   * @example
   * 10023
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  cabinType?: number;
  /**
   * @example
   * false
   */
  directOnly?: boolean;
  /**
   * @example
   * open12igetbis4o07v10B1TlOWcM00
   */
  isvName?: string;
  language?: string;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneys?: IntlFlightOtaSearchRequestSearchJourneys[];
  searchPassengerList?: IntlFlightOtaSearchRequestSearchPassengerList[];
  /**
   * @example
   * TEST
   */
  supplierCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      cabinType: 'cabin_type',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      language: 'language',
      needShareFlight: 'need_share_flight',
      searchJourneys: 'search_journeys',
      searchPassengerList: 'search_passenger_list',
      supplierCode: 'supplier_code',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      cabinType: 'number',
      directOnly: 'boolean',
      isvName: 'string',
      language: 'string',
      needShareFlight: 'boolean',
      searchJourneys: { 'type': 'array', 'itemType': IntlFlightOtaSearchRequestSearchJourneys },
      searchPassengerList: { 'type': 'array', 'itemType': IntlFlightOtaSearchRequestSearchPassengerList },
      supplierCode: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchShrinkRequest extends $tea.Model {
  /**
   * @example
   * 10023
   */
  btripUserId?: string;
  buyerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  cabinType?: number;
  /**
   * @example
   * false
   */
  directOnly?: boolean;
  /**
   * @example
   * open12igetbis4o07v10B1TlOWcM00
   */
  isvName?: string;
  language?: string;
  /**
   * @example
   * true
   */
  needShareFlight?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  searchJourneysShrink?: string;
  searchPassengerListShrink?: string;
  /**
   * @example
   * TEST
   */
  supplierCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      btripUserId: 'btrip_user_id',
      buyerName: 'buyer_name',
      cabinType: 'cabin_type',
      directOnly: 'direct_only',
      isvName: 'isv_name',
      language: 'language',
      needShareFlight: 'need_share_flight',
      searchJourneysShrink: 'search_journeys',
      searchPassengerListShrink: 'search_passenger_list',
      supplierCode: 'supplier_code',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripUserId: 'string',
      buyerName: 'string',
      cabinType: 'number',
      directOnly: 'boolean',
      isvName: 'string',
      language: 'string',
      needShareFlight: 'boolean',
      searchJourneysShrink: 'string',
      searchPassengerListShrink: 'string',
      supplierCode: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: IntlFlightOtaSearchResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 2150435016896473589786246e03e9
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: IntlFlightOtaSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightOtaSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightOtaSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightSegmentAvailableCertHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightSegmentAvailableCertRequest extends $tea.Model {
  /**
   * @example
   * ZJTD
   */
  isvName?: string;
  /**
   * @example
   * chinese
   */
  language?: string;
  /**
   * @example
   * 21341234
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      isvName: 'isv_name',
      language: 'language',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isvName: 'string',
      language: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightSegmentAvailableCertResponseBody extends $tea.Model {
  module?: IntlFlightSegmentAvailableCertResponseBodyModule;
  /**
   * @example
   * 210bc81a17090871660176894d008c
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  resultCode?: string;
  resultMsg?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 213e1ea516895592036143147e5864
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      module: 'module',
      requestId: 'requestId',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      module: IntlFlightSegmentAvailableCertResponseBodyModule,
      requestId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightSegmentAvailableCertResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IntlFlightSegmentAvailableCertResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IntlFlightSegmentAvailableCertResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceAddHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceAddRequest extends $tea.Model {
  /**
   * @example
   * xxx
   */
  address?: string;
  bankName?: string;
  /**
   * @example
   * 123456
   */
  bankNo?: string;
  /**
   * @example
   * 12345
   */
  taxNo?: string;
  /**
   * @example
   * 123
   */
  tel?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  title?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  type?: number;
  unitType?: number;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      bankName: 'bank_name',
      bankNo: 'bank_no',
      taxNo: 'tax_no',
      tel: 'tel',
      thirdPartId: 'third_part_id',
      title: 'title',
      type: 'type',
      unitType: 'unit_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      bankName: 'string',
      bankNo: 'string',
      taxNo: 'string',
      tel: 'string',
      thirdPartId: 'string',
      title: 'string',
      type: 'number',
      unitType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceAddResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceAddResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InvoiceAddResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InvoiceAddResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceDeleteHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceDeleteRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceDeleteResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceDeleteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InvoiceDeleteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InvoiceDeleteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceModifyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceModifyRequest extends $tea.Model {
  address?: string;
  /**
   * @example
   * 12345678
   */
  bankName?: string;
  /**
   * @example
   * 2222
   */
  bankNo?: string;
  /**
   * @example
   * 122333121
   */
  taxNo?: string;
  /**
   * @example
   * 12345678
   */
  tel?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  title?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  type?: number;
  unitType?: number;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      bankName: 'bank_name',
      bankNo: 'bank_no',
      taxNo: 'tax_no',
      tel: 'tel',
      thirdPartId: 'third_part_id',
      title: 'title',
      type: 'type',
      unitType: 'unit_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      bankName: 'string',
      bankNo: 'string',
      taxNo: 'string',
      tel: 'string',
      thirdPartId: 'string',
      title: 'string',
      type: 'number',
      unitType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceModifyResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceModifyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InvoiceModifyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InvoiceModifyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleAddHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleAddRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  entities?: InvoiceRuleAddRequestEntities[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 4854821
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      entities: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entities: { 'type': 'array', 'itemType': InvoiceRuleAddRequestEntities },
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleAddShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  entitiesShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 4854821
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      entitiesShrink: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entitiesShrink: 'string',
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleAddResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: InvoiceRuleAddResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InvoiceRuleAddResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleAddResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InvoiceRuleAddResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InvoiceRuleAddResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleDeleteHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleDeleteRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  delAll?: boolean;
  entities?: InvoiceRuleDeleteRequestEntities[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      delAll: 'del_all',
      entities: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      delAll: 'boolean',
      entities: { 'type': 'array', 'itemType': InvoiceRuleDeleteRequestEntities },
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleDeleteShrinkRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  delAll?: boolean;
  entitiesShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      delAll: 'del_all',
      entitiesShrink: 'entities',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      delAll: 'boolean',
      entitiesShrink: 'string',
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleDeleteResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: InvoiceRuleDeleteResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InvoiceRuleDeleteResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleDeleteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InvoiceRuleDeleteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InvoiceRuleDeleteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleSaveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleSaveRequest extends $tea.Model {
  /**
   * @example
   * true
   */
  allEmploye?: boolean;
  entities?: InvoiceRuleSaveRequestEntities[];
  scope?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * i123
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      allEmploye: 'all_employe',
      entities: 'entities',
      scope: 'scope',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allEmploye: 'boolean',
      entities: { 'type': 'array', 'itemType': InvoiceRuleSaveRequestEntities },
      scope: 'number',
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleSaveShrinkRequest extends $tea.Model {
  /**
   * @example
   * true
   */
  allEmploye?: boolean;
  entitiesShrink?: string;
  scope?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * i123
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      allEmploye: 'all_employe',
      entitiesShrink: 'entities',
      scope: 'scope',
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allEmploye: 'boolean',
      entitiesShrink: 'string',
      scope: 'number',
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleSaveResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: InvoiceRuleSaveResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 8465F68D-BC97-5C0F-9161-3E65919D9135
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: InvoiceRuleSaveResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleSaveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InvoiceRuleSaveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InvoiceRuleSaveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceSearchRequest extends $tea.Model {
  thirdPartId?: string;
  title?: string;
  /**
   * @example
   * 12345
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      thirdPartId: 'third_part_id',
      title: 'title',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      thirdPartId: 'string',
      title: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceSearchResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: InvoiceSearchResponseBodyModule[];
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * EB68C364-F9A0-5046-910A-2DD92C277E71
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': InvoiceSearchResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InvoiceSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InvoiceSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvRuleSaveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvRuleSaveRequest extends $tea.Model {
  applyNeed?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  bookType?: string;
  bookuserList?: IsvRuleSaveRequestBookuserList[];
  ruleNeed?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyNeed: 'apply_need',
      bookType: 'book_type',
      bookuserList: 'bookuser_list',
      ruleNeed: 'rule_need',
      status: 'status',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyNeed: 'boolean',
      bookType: 'string',
      bookuserList: { 'type': 'array', 'itemType': IsvRuleSaveRequestBookuserList },
      ruleNeed: 'boolean',
      status: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvRuleSaveShrinkRequest extends $tea.Model {
  applyNeed?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  bookType?: string;
  bookuserListShrink?: string;
  ruleNeed?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyNeed: 'apply_need',
      bookType: 'book_type',
      bookuserListShrink: 'bookuser_list',
      ruleNeed: 'rule_need',
      status: 'status',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyNeed: 'boolean',
      bookType: 'string',
      bookuserListShrink: 'string',
      ruleNeed: 'boolean',
      status: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvRuleSaveResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   * 
   * @example
   * null
   */
  module?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvRuleSaveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IsvRuleSaveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IsvRuleSaveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvUserSaveHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvUserSaveRequest extends $tea.Model {
  userList?: IsvUserSaveRequestUserList[];
  static names(): { [key: string]: string } {
    return {
      userList: 'user_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userList: { 'type': 'array', 'itemType': IsvUserSaveRequestUserList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvUserSaveShrinkRequest extends $tea.Model {
  userListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      userListShrink: 'user_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvUserSaveResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: string;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 707c9fd116393792883244141e4e7d
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvUserSaveResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: IsvUserSaveResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: IsvUserSaveResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealBillSettlementQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-02
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: number;
  message?: string;
  module?: MealBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      message: 'string',
      module: MealBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MealBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MealBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderDetailQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderDetailQueryRequest extends $tea.Model {
  /**
   * @example
   * 1000
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderDetailQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * None
   */
  message?: string;
  module?: MealOrderDetailQueryResponseBodyModule;
  /**
   * @example
   * 9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: MealOrderDetailQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderDetailQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MealOrderDetailQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MealOrderDetailQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderListQueryRequest extends $tea.Model {
  /**
   * @example
   * 1000
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  /**
   * @example
   * noPermission
   */
  message?: string;
  module?: MealOrderListQueryResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: MealOrderListQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MealOrderListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MealOrderListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillConfirmHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillConfirmRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 20221001
   */
  mailBillDate?: number;
  /**
   * @example
   * 12345
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      mailBillDate: 'mail_bill_date',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      mailBillDate: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillConfirmResponseBody extends $tea.Model {
  /**
   * @example
   * success
   */
  code?: string;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillConfirmResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MonthBillConfirmResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MonthBillConfirmResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillGetHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillGetRequest extends $tea.Model {
  /**
   * @example
   * 202207
   */
  billMonth?: string;
  static names(): { [key: string]: string } {
    return {
      billMonth: 'bill_month',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billMonth: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillGetResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: MonthBillGetResponseBodyModule[];
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': MonthBillGetResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillGetResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MonthBillGetResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MonthBillGetResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectAddHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectAddRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * pro_code
   */
  code?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  projectName?: string;
  /**
   * @example
   * 234
   */
  thirdPartCostCenterId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  thirdPartId?: string;
  /**
   * @example
   * 123
   */
  thirdPartInvoiceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      projectName: 'project_name',
      thirdPartCostCenterId: 'third_part_cost_center_id',
      thirdPartId: 'third_part_id',
      thirdPartInvoiceId: 'third_part_invoice_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      projectName: 'string',
      thirdPartCostCenterId: 'string',
      thirdPartId: 'string',
      thirdPartInvoiceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectAddResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * 530404
   */
  module?: number;
  /**
   * @example
   * true
   */
  morePage?: boolean;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      morePage: 'more_page',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'number',
      morePage: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectAddResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ProjectAddResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ProjectAddResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectDeleteHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectDeleteRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  thirdPartId?: string;
  static names(): { [key: string]: string } {
    return {
      thirdPartId: 'third_part_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      thirdPartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectDeleteResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * true
   */
  module?: boolean;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectDeleteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ProjectDeleteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ProjectDeleteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectModifyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectModifyRequest extends $tea.Model {
  /**
   * @example
   * pro_code
   */
  code?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  projectName?: string;
  /**
   * @example
   * 234
   */
  thirdPartCostCenterId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 340049
   */
  thirdPartId?: string;
  /**
   * @example
   * 123
   */
  thirdPartInvoiceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      projectName: 'project_name',
      thirdPartCostCenterId: 'third_part_cost_center_id',
      thirdPartId: 'third_part_id',
      thirdPartInvoiceId: 'third_part_invoice_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      projectName: 'string',
      thirdPartCostCenterId: 'string',
      thirdPartId: 'string',
      thirdPartInvoiceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectModifyResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * true
   */
  module?: boolean;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectModifyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ProjectModifyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ProjectModifyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryEmployeeDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryEmployeeDetailRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * abc12138
   */
  outEmployeeId?: string;
  static names(): { [key: string]: string } {
    return {
      outEmployeeId: 'out_employee_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      outEmployeeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryEmployeeDetailResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * None
   */
  message?: string;
  module?: QueryEmployeeDetailResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      module: QueryEmployeeDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryEmployeeDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryEmployeeDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryEmployeeDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryGroupCorpListHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryGroupCorpListRequest extends $tea.Model {
  /**
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryGroupCorpListResponseBody extends $tea.Model {
  /**
   * @example
   * A3F8DCAB-8301-5770-BD9F-71B0BF9E1A6E
   */
  requestId?: string;
  /**
   * @example
   * 0
   */
  code?: number;
  message?: string;
  module?: QueryGroupCorpListResponseBodyModule[];
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      code: 'code',
      message: 'message',
      module: 'module',
      success: 'success',
      traceId: 'trace_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      code: 'number',
      message: 'string',
      module: { 'type': 'array', 'itemType': QueryGroupCorpListResponseBodyModule },
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryGroupCorpListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryGroupCorpListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryGroupCorpListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * RT204396
   */
  reimbOrderNo?: string;
  /**
   * @example
   * ding123
   */
  subCorpId?: string;
  static names(): { [key: string]: string } {
    return {
      reimbOrderNo: 'reimb_order_no',
      subCorpId: 'sub_corp_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reimbOrderNo: 'string',
      subCorpId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponseBody extends $tea.Model {
  /**
   * @example
   * PARAM_ERROR
   */
  code?: string;
  message?: string;
  module?: QueryReimbursementOrderResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: QueryReimbursementOrderResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryReimbursementOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryReimbursementOrderResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncSingleUserHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncSingleUserRequest extends $tea.Model {
  email?: string;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * 0
   */
  leaveStatus?: number;
  /**
   * @example
   * 72369
   */
  managerUserId?: string;
  /**
   * @example
   * 16392740204
   */
  phone?: string;
  position?: string;
  /**
   * @example
   * 1
   */
  positionLevel?: string;
  /**
   * @example
   * ce/shi
   */
  realNameEn?: string;
  thirdDepartIdList?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 573263
   */
  userId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      email: 'email',
      jobNo: 'job_no',
      leaveStatus: 'leave_status',
      managerUserId: 'manager_user_id',
      phone: 'phone',
      position: 'position',
      positionLevel: 'position_level',
      realNameEn: 'real_name_en',
      thirdDepartIdList: 'third_depart_id_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      email: 'string',
      jobNo: 'string',
      leaveStatus: 'number',
      managerUserId: 'string',
      phone: 'string',
      position: 'string',
      positionLevel: 'string',
      realNameEn: 'string',
      thirdDepartIdList: { 'type': 'array', 'itemType': 'string' },
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncSingleUserShrinkRequest extends $tea.Model {
  email?: string;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * 0
   */
  leaveStatus?: number;
  /**
   * @example
   * 72369
   */
  managerUserId?: string;
  /**
   * @example
   * 16392740204
   */
  phone?: string;
  position?: string;
  /**
   * @example
   * 1
   */
  positionLevel?: string;
  /**
   * @example
   * ce/shi
   */
  realNameEn?: string;
  thirdDepartIdListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 573263
   */
  userId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      email: 'email',
      jobNo: 'job_no',
      leaveStatus: 'leave_status',
      managerUserId: 'manager_user_id',
      phone: 'phone',
      position: 'position',
      positionLevel: 'position_level',
      realNameEn: 'real_name_en',
      thirdDepartIdListShrink: 'third_depart_id_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      email: 'string',
      jobNo: 'string',
      leaveStatus: 'number',
      managerUserId: 'string',
      phone: 'string',
      position: 'string',
      positionLevel: 'string',
      realNameEn: 'string',
      thirdDepartIdListShrink: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncSingleUserResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @example
   * success
   */
  module?: string;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncSingleUserResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SyncSingleUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SyncSingleUserResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncThirdUserMappingHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncThirdUserMappingRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  status?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * weCom
   */
  thirdChannelType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  thirdUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      status: 'status',
      thirdChannelType: 'third_channel_type',
      thirdUserId: 'third_user_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      status: 'number',
      thirdChannelType: 'string',
      thirdUserId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncThirdUserMappingResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 8465F68D-BC97-5C0F-9161-3E65919D9135
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncThirdUserMappingResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SyncThirdUserMappingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SyncThirdUserMappingResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TBAccountInfoQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TBAccountInfoQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: TBAccountInfoQueryResponseBodyModule;
  /**
   * @example
   * 456456575656757
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f07f316603757445272547d959f
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TBAccountInfoQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TBAccountInfoQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TBAccountInfoQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TBAccountInfoQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TBAccountUnbindHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TBAccountUnbindResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  /**
   * @example
   * true
   */
  module?: boolean;
  /**
   * @example
   * 456456575656757
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: 'boolean',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TBAccountUnbindResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TBAccountUnbindResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TBAccountUnbindResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis1234
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * mid1243
   */
  disSubOrderId?: string;
  isVoluntary?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  modifyFlightInfoList?: TicketChangingApplyRequestModifyFlightInfoList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1s8837sh991hsj92h
   */
  otaItemId?: string;
  reason?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * us88s2bsbin22hjusd8i
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  whetherRetry?: boolean;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      isVoluntary: 'is_voluntary',
      modifyFlightInfoList: 'modify_flight_info_list',
      otaItemId: 'ota_item_id',
      reason: 'reason',
      sessionId: 'session_id',
      whetherRetry: 'whether_retry',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      disSubOrderId: 'string',
      isVoluntary: 'number',
      modifyFlightInfoList: { 'type': 'array', 'itemType': TicketChangingApplyRequestModifyFlightInfoList },
      otaItemId: 'string',
      reason: 'string',
      sessionId: 'string',
      whetherRetry: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis1234
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * mid1243
   */
  disSubOrderId?: string;
  isVoluntary?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  modifyFlightInfoListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1s8837sh991hsj92h
   */
  otaItemId?: string;
  reason?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * us88s2bsbin22hjusd8i
   */
  sessionId?: string;
  /**
   * @example
   * true
   */
  whetherRetry?: boolean;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      isVoluntary: 'is_voluntary',
      modifyFlightInfoListShrink: 'modify_flight_info_list',
      otaItemId: 'ota_item_id',
      reason: 'reason',
      sessionId: 'session_id',
      whetherRetry: 'whether_retry',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      disSubOrderId: 'string',
      isVoluntary: 'number',
      modifyFlightInfoListShrink: 'string',
      otaItemId: 'string',
      reason: 'string',
      sessionId: 'string',
      whetherRetry: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: TicketChangingApplyResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TicketChangingApplyResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TicketChangingApplyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TicketChangingApplyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingCancelHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingCancelRequest extends $tea.Model {
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * refun123
   */
  disSubOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      disSubOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingCancelResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TicketChangingCancelResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TicketChangingCancelResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingCancelResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TicketChangingCancelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TicketChangingCancelResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingDetailHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingDetailRequest extends $tea.Model {
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * chang123
   */
  disSubOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      disSubOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingDetailResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: TicketChangingDetailResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TicketChangingDetailResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TicketChangingDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TicketChangingDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  arrCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  depCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  isVoluntary?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000-00-00 00:00:00
   */
  modifyDepartDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * CA1704
   */
  modifyFlightNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ece19e8b1047898a5a98b6487348c2
   */
  sessionId?: string;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      depCity: 'dep_city',
      disOrderId: 'dis_order_id',
      isVoluntary: 'is_voluntary',
      modifyDepartDate: 'modify_depart_date',
      modifyFlightNo: 'modify_flight_no',
      sessionId: 'session_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      depCity: 'string',
      disOrderId: 'string',
      isVoluntary: 'number',
      modifyDepartDate: 'string',
      modifyFlightNo: 'string',
      sessionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TicketChangingEnquiryResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TicketChangingEnquiryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TicketChangingEnquiryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TicketChangingEnquiryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListRequest extends $tea.Model {
  /**
   * @example
   * BJS
   */
  arrCity?: string;
  /**
   * @example
   * HGH
   */
  depCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000-00-00 00:00:00
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  isVoluntary?: number;
  travelerInfoList?: TicketChangingFlightListRequestTravelerInfoList[];
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      depCity: 'dep_city',
      depDate: 'dep_date',
      disOrderId: 'dis_order_id',
      isVoluntary: 'is_voluntary',
      travelerInfoList: 'traveler_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      depCity: 'string',
      depDate: 'string',
      disOrderId: 'string',
      isVoluntary: 'number',
      travelerInfoList: { 'type': 'array', 'itemType': TicketChangingFlightListRequestTravelerInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListShrinkRequest extends $tea.Model {
  /**
   * @example
   * BJS
   */
  arrCity?: string;
  /**
   * @example
   * HGH
   */
  depCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000-00-00 00:00:00
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  isVoluntary?: number;
  travelerInfoListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      depCity: 'dep_city',
      depDate: 'dep_date',
      disOrderId: 'dis_order_id',
      isVoluntary: 'is_voluntary',
      travelerInfoListShrink: 'traveler_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      depCity: 'string',
      depDate: 'string',
      disOrderId: 'string',
      isVoluntary: 'number',
      travelerInfoListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TicketChangingFlightListResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TicketChangingFlightListResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TicketChangingFlightListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TicketChangingFlightListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingPayHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingPayRequest extends $tea.Model {
  /**
   * @example
   * 100
   */
  corpPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * refun123
   */
  disSubOrderId?: string;
  extra?: { [key: string]: string };
  /**
   * @example
   * 100
   */
  personalPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  totalPayPrice?: number;
  static names(): { [key: string]: string } {
    return {
      corpPayPrice: 'corp_pay_price',
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      extra: 'extra',
      personalPayPrice: 'personal_pay_price',
      totalPayPrice: 'total_pay_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpPayPrice: 'number',
      disOrderId: 'string',
      disSubOrderId: 'string',
      extra: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      personalPayPrice: 'number',
      totalPayPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingPayShrinkRequest extends $tea.Model {
  /**
   * @example
   * 100
   */
  corpPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * refun123
   */
  disSubOrderId?: string;
  extraShrink?: string;
  /**
   * @example
   * 100
   */
  personalPayPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  totalPayPrice?: number;
  static names(): { [key: string]: string } {
    return {
      corpPayPrice: 'corp_pay_price',
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      extraShrink: 'extra',
      personalPayPrice: 'personal_pay_price',
      totalPayPrice: 'total_pay_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpPayPrice: 'number',
      disOrderId: 'string',
      disSubOrderId: 'string',
      extraShrink: 'string',
      personalPayPrice: 'number',
      totalPayPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingPayResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TicketChangingPayResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TicketChangingPayResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingPayResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TicketChangingPayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TicketChangingPayResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeRequest extends $tea.Model {
  /**
   * @example
   * 0
   */
  acceptNoSeat?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  changeTrainInfoS?: TrainApplyChangeRequestChangeTrainInfoS[];
  /**
   * @example
   * 0
   */
  forceMatch?: string;
  /**
   * @example
   * false
   */
  isPayNow?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1017028198411054446
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  outChangeApplyId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      acceptNoSeat: 'accept_no_seat',
      changeTrainInfoS: 'change_train_info_s',
      forceMatch: 'force_match',
      isPayNow: 'is_pay_now',
      orderId: 'order_id',
      outChangeApplyId: 'out_change_apply_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      acceptNoSeat: 'string',
      changeTrainInfoS: { 'type': 'array', 'itemType': TrainApplyChangeRequestChangeTrainInfoS },
      forceMatch: 'string',
      isPayNow: 'boolean',
      orderId: 'string',
      outChangeApplyId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeShrinkRequest extends $tea.Model {
  /**
   * @example
   * 0
   */
  acceptNoSeat?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  changeTrainInfoSShrink?: string;
  /**
   * @example
   * 0
   */
  forceMatch?: string;
  /**
   * @example
   * false
   */
  isPayNow?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1017028198411054446
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  outChangeApplyId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      acceptNoSeat: 'accept_no_seat',
      changeTrainInfoSShrink: 'change_train_info_s',
      forceMatch: 'force_match',
      isPayNow: 'is_pay_now',
      orderId: 'order_id',
      outChangeApplyId: 'out_change_apply_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      acceptNoSeat: 'string',
      changeTrainInfoSShrink: 'string',
      forceMatch: 'string',
      isPayNow: 'boolean',
      orderId: 'string',
      outChangeApplyId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainApplyChangeResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 2103ad0216854277618591626db2b6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainApplyChangeResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainApplyChangeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainApplyChangeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456778
   */
  outRefundId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  refundTrainInfos?: TrainApplyRefundRequestRefundTrainInfos[];
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outRefundId: 'out_refund_id',
      refundTrainInfos: 'refund_train_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
      outRefundId: 'string',
      refundTrainInfos: { 'type': 'array', 'itemType': TrainApplyRefundRequestRefundTrainInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456778
   */
  outRefundId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  refundTrainInfosShrink?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outRefundId: 'out_refund_id',
      refundTrainInfosShrink: 'refund_train_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
      outRefundId: 'string',
      refundTrainInfosShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainApplyRefundResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainApplyRefundResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainApplyRefundResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainApplyRefundResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainBillSettlementQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainBillSettlementQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-02
   */
  periodEnd?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2021-10-01
   */
  periodStart?: string;
  static names(): { [key: string]: string } {
    return {
      pageNo: 'page_no',
      pageSize: 'page_size',
      periodEnd: 'period_end',
      periodStart: 'period_start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNo: 'number',
      pageSize: 'number',
      periodEnd: 'string',
      periodStart: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainBillSettlementQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TrainBillSettlementQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainBillSettlementQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainBillSettlementQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainBillSettlementQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainBillSettlementQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainExceedApplyQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainExceedApplyQueryRequest extends $tea.Model {
  /**
   * @example
   * 349720
   */
  applyId?: number;
  businessInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      businessInstanceId: 'business_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      businessInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainExceedApplyQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TrainExceedApplyQueryResponseBodyModule;
  /**
   * @example
   * BE3FBA15-C5E1-5B99-8120-9FB84A04FB81
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainExceedApplyQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainExceedApplyQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainExceedApplyQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainExceedApplyQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  changeTrainDetails?: TrainFeeCalculateChangeRequestChangeTrainDetails[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  distributeOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2627694109810885616
   */
  orderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeTrainDetails: 'change_train_details',
      distributeOrderId: 'distribute_order_id',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeTrainDetails: { 'type': 'array', 'itemType': TrainFeeCalculateChangeRequestChangeTrainDetails },
      distributeOrderId: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  changeTrainDetailsShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  distributeOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2627694109810885616
   */
  orderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeTrainDetailsShrink: 'change_train_details',
      distributeOrderId: 'distribute_order_id',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeTrainDetailsShrink: 'string',
      distributeOrderId: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainFeeCalculateChangeResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainFeeCalculateChangeResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainFeeCalculateChangeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainFeeCalculateChangeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  distributeOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  refundTrainInfos?: TrainFeeCalculateRefundRequestRefundTrainInfos[];
  static names(): { [key: string]: string } {
    return {
      distributeOrderId: 'distribute_order_id',
      orderId: 'order_id',
      refundTrainInfos: 'refund_train_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      distributeOrderId: 'string',
      orderId: 'string',
      refundTrainInfos: { 'type': 'array', 'itemType': TrainFeeCalculateRefundRequestRefundTrainInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  distributeOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  refundTrainInfosShrink?: string;
  static names(): { [key: string]: string } {
    return {
      distributeOrderId: 'distribute_order_id',
      orderId: 'order_id',
      refundTrainInfosShrink: 'refund_train_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      distributeOrderId: 'string',
      orderId: 'string',
      refundTrainInfosShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainFeeCalculateRefundResponseBodyModule;
  /**
   * @example
   * 210bc4c416859457407135025d509c
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainFeeCalculateRefundResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainFeeCalculateRefundResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainFeeCalculateRefundResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  arrLocation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-08-15
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  depLocation?: string;
  /**
   * @example
   * qwwweqswxxa
   */
  lineKey?: string;
  /**
   * @example
   * 2023-08-15
   */
  middleDate?: string;
  middleStation?: string;
  /**
   * @example
   * 12342123212
   */
  orderId?: string;
  /**
   * @example
   * K2345
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrLocation: 'arr_location',
      depDate: 'dep_date',
      depLocation: 'dep_location',
      lineKey: 'line_key',
      middleDate: 'middle_date',
      middleStation: 'middle_station',
      orderId: 'order_id',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrLocation: 'string',
      depDate: 'string',
      depLocation: 'string',
      lineKey: 'string',
      middleDate: 'string',
      middleStation: 'string',
      orderId: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainNoInfoSearchResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 2136019116915615924561621e06ee
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainNoInfoSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainNoInfoSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainNoInfoSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  arrLocation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-16
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  depLocation?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  option?: TrainNoListSearchRequestOption;
  /**
   * @example
   * null
   */
  orderId?: string;
  static names(): { [key: string]: string } {
    return {
      arrLocation: 'arr_location',
      depDate: 'dep_date',
      depLocation: 'dep_location',
      option: 'option',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrLocation: 'string',
      depDate: 'string',
      depLocation: 'string',
      option: TrainNoListSearchRequestOption,
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  arrLocation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-16
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  depLocation?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  optionShrink?: string;
  /**
   * @example
   * null
   */
  orderId?: string;
  static names(): { [key: string]: string } {
    return {
      arrLocation: 'arr_location',
      depDate: 'dep_date',
      depLocation: 'dep_location',
      optionShrink: 'option',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrLocation: 'string',
      depDate: 'string',
      depLocation: 'string',
      optionShrink: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainNoListSearchResponseBodyModule;
  /**
   * @example
   * 210bc81a17090871660176894d008c
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainNoListSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainNoListSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainNoListSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCancelHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCancelRequest extends $tea.Model {
  /**
   * @example
   * 1234223
   */
  changeOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @example
   * 123321245534
   */
  outChangeOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeOrderId: 'change_order_id',
      orderId: 'order_id',
      outChangeOrderId: 'out_change_order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeOrderId: 'string',
      orderId: 'string',
      outChangeOrderId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCancelResponseBody extends $tea.Model {
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainOrderCancelResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainOrderCancelResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCancelResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderCancelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderCancelResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderChangeConfirmHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderChangeConfirmRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1234567890
   */
  changeApplyId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  changeSettleAmount?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1002145190081005400
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  outChangeApplyId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeApplyId: 'change_apply_id',
      changeSettleAmount: 'change_settle_amount',
      orderId: 'order_id',
      outChangeApplyId: 'out_change_apply_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeApplyId: 'string',
      changeSettleAmount: 'number',
      orderId: 'string',
      outChangeApplyId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderChangeConfirmResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainOrderChangeConfirmResponseBodyModule;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainOrderChangeConfirmResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderChangeConfirmResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderChangeConfirmResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderChangeConfirmResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateRequest extends $tea.Model {
  /**
   * @example
   * 0
   */
  acceptNoSeat?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  bookTrainInfos?: TrainOrderCreateRequestBookTrainInfos[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12344321
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  btripUserName?: string;
  businessInfo?: TrainOrderCreateRequestBusinessInfo;
  /**
   * @remarks
   * This parameter is required.
   */
  contactInfo?: TrainOrderCreateRequestContactInfo;
  /**
   * @example
   * 0
   */
  forceMatch?: string;
  /**
   * @example
   * false
   */
  isPayNow?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerOpenInfoS?: TrainOrderCreateRequestPassengerOpenInfoS[];
  static names(): { [key: string]: string } {
    return {
      acceptNoSeat: 'accept_no_seat',
      bookTrainInfos: 'book_train_infos',
      btripUserId: 'btrip_user_id',
      btripUserName: 'btrip_user_name',
      businessInfo: 'business_info',
      contactInfo: 'contact_info',
      forceMatch: 'force_match',
      isPayNow: 'is_pay_now',
      outOrderId: 'out_order_id',
      passengerOpenInfoS: 'passenger_open_info_s',
    };
  }

  static types(): { [key: string]: any } {
    return {
      acceptNoSeat: 'string',
      bookTrainInfos: { 'type': 'array', 'itemType': TrainOrderCreateRequestBookTrainInfos },
      btripUserId: 'string',
      btripUserName: 'string',
      businessInfo: TrainOrderCreateRequestBusinessInfo,
      contactInfo: TrainOrderCreateRequestContactInfo,
      forceMatch: 'string',
      isPayNow: 'boolean',
      outOrderId: 'string',
      passengerOpenInfoS: { 'type': 'array', 'itemType': TrainOrderCreateRequestPassengerOpenInfoS },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateShrinkRequest extends $tea.Model {
  /**
   * @example
   * 0
   */
  acceptNoSeat?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  bookTrainInfosShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12344321
   */
  btripUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  btripUserName?: string;
  businessInfoShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  contactInfoShrink?: string;
  /**
   * @example
   * 0
   */
  forceMatch?: string;
  /**
   * @example
   * false
   */
  isPayNow?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerOpenInfoSShrink?: string;
  static names(): { [key: string]: string } {
    return {
      acceptNoSeat: 'accept_no_seat',
      bookTrainInfosShrink: 'book_train_infos',
      btripUserId: 'btrip_user_id',
      btripUserName: 'btrip_user_name',
      businessInfoShrink: 'business_info',
      contactInfoShrink: 'contact_info',
      forceMatch: 'force_match',
      isPayNow: 'is_pay_now',
      outOrderId: 'out_order_id',
      passengerOpenInfoSShrink: 'passenger_open_info_s',
    };
  }

  static types(): { [key: string]: any } {
    return {
      acceptNoSeat: 'string',
      bookTrainInfosShrink: 'string',
      btripUserId: 'string',
      btripUserName: 'string',
      businessInfoShrink: 'string',
      contactInfoShrink: 'string',
      forceMatch: 'string',
      isPayNow: 'boolean',
      outOrderId: 'string',
      passengerOpenInfoSShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainOrderCreateResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainOrderCreateResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderCreateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderCreateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2083528200659337994
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3703190607180169216
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainOrderDetailQueryResponseBodyModule;
  /**
   * @example
   * 210bc81a17090871660176894d008c
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 2103a05c16872420814992343d8a09
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainOrderDetailQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderDetailQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderDetailQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  allApply?: boolean;
  /**
   * @example
   * 11657
   */
  applyId?: number;
  departId?: string;
  /**
   * @example
   * 2022-05-15 22:27:00
   */
  endTime?: string;
  /**
   * @example
   * 3
   */
  page?: number;
  /**
   * @example
   * 25
   */
  pageSize?: number;
  /**
   * @example
   * 2022-05-15 22:27:00
   */
  startTime?: string;
  /**
   * @example
   * CS-EDES9898
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 2022-05-15 22:27:00
   */
  updateEndTime?: string;
  /**
   * @example
   * 2022-05-15 22:27:00
   */
  updateStartTime?: string;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      allApply: 'all_apply',
      applyId: 'apply_id',
      departId: 'depart_id',
      endTime: 'end_time',
      page: 'page',
      pageSize: 'page_size',
      startTime: 'start_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      updateEndTime: 'update_end_time',
      updateStartTime: 'update_start_time',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allApply: 'boolean',
      applyId: 'number',
      departId: 'string',
      endTime: 'string',
      page: 'number',
      pageSize: 'number',
      startTime: 'string',
      thirdpartApplyId: 'string',
      updateEndTime: 'string',
      updateStartTime: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TrainOrderListQueryResponseBodyModule[];
  pageInfo?: TrainOrderListQueryResponseBodyPageInfo;
  /**
   * @example
   * F93C3EBD-17BE-5FE6-BF06-96A6F1AC8DC5
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      pageInfo: 'page_info',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': TrainOrderListQueryResponseBodyModule },
      pageInfo: TrainOrderListQueryResponseBodyPageInfo,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderPayHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderPayRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1379598062646
   */
  orderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  outOrderId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  payAmount?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      payAmount: 'pay_amount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
      payAmount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderPayResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainOrderPayResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainOrderPayResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderPayResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderPayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderPayResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2627694109810885616
   */
  orderId?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: TrainOrderQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainOrderQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2Headers extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * 112dcasca
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2Request extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12342123212
   */
  orderId?: number;
  /**
   * @example
   * 123121112
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: TrainOrderQueryV2ResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 1213ds1d
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 123412dcdsac sd
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainOrderQueryV2ResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2Response extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainOrderQueryV2ResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainOrderQueryV2ResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStationSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStationSearchRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  keyword?: string;
  static names(): { [key: string]: string } {
    return {
      keyword: 'keyword',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyword: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStationSearchResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainStationSearchResponseBodyModule;
  /**
   * @example
   * B72B39C8-32DE-558D-AD1C-D53F11F6ADFE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 210e847f16611516748613869de4f6
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainStationSearchResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStationSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainStationSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainStationSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStopoverSearchHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStopoverSearchRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  arrStation?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  depStation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-08
   */
  trainDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * k2345
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStation: 'arr_station',
      depStation: 'dep_station',
      trainDate: 'train_date',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStation: 'string',
      depStation: 'string',
      trainDate: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStopoverSearchResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module
   */
  module?: TrainStopoverSearchResponseBodyModule[];
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': TrainStopoverSearchResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStopoverSearchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainStopoverSearchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainStopoverSearchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainTicketScanQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainTicketScanQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @example
   * 123
   */
  billId?: number;
  /**
   * @example
   * 456
   */
  invoiceSubTaskId?: number;
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  serialNumber?: string;
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      billDate: 'bill_date',
      billId: 'bill_id',
      invoiceSubTaskId: 'invoice_sub_task_id',
      pageNo: 'page_no',
      pageSize: 'page_size',
      serialNumber: 'serial_number',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billDate: 'string',
      billId: 'number',
      invoiceSubTaskId: 'number',
      pageNo: 'number',
      pageSize: 'number',
      serialNumber: 'string',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainTicketScanQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: TrainTicketScanQueryResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TrainTicketScanQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainTicketScanQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TrainTicketScanQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TrainTicketScanQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryRequest extends $tea.Model {
  /**
   * @example
   * false
   */
  fromGroup?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      fromGroup: 'from_group',
      pageNo: 'page_no',
      pageSize: 'page_size',
      ruleName: 'rule_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fromGroup: 'boolean',
      pageNo: 'number',
      pageSize: 'number',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: number;
  message?: string;
  module?: TravelStandardListQueryResponseBodyModule;
  /**
   * @example
   * 05F9C201-1B53-5905-94AB-0D7444D8466A
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041aa317070996148671005d0a0b
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      message: 'string',
      module: TravelStandardListQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TravelStandardListQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TravelStandardListQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  fromGroup?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2006523763
   */
  ruleCode?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  serviceTypeList?: string[];
  static names(): { [key: string]: string } {
    return {
      fromGroup: 'from_group',
      ruleCode: 'rule_code',
      serviceTypeList: 'service_type_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fromGroup: 'boolean',
      ruleCode: 'number',
      serviceTypeList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  fromGroup?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2006523763
   */
  ruleCode?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  serviceTypeListShrink?: string;
  static names(): { [key: string]: string } {
    return {
      fromGroup: 'from_group',
      ruleCode: 'rule_code',
      serviceTypeListShrink: 'service_type_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fromGroup: 'boolean',
      ruleCode: 'number',
      serviceTypeListShrink: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  message?: string;
  module?: TravelStandardQueryResponseBodyModule;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bcc3a16583004579056128d33d7
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TravelStandardQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TravelStandardQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TravelStandardQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripBusinessInstanceQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripBusinessInstanceQueryRequest extends $tea.Model {
  /**
   * @example
   * 12345
   */
  businessInstanceId?: string;
  /**
   * @example
   * 12345
   */
  thirdBusinessId?: string;
  /**
   * @example
   * thirdpart12138
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      businessInstanceId: 'business_instance_id',
      thirdBusinessId: 'third_business_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessInstanceId: 'string',
      thirdBusinessId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripBusinessInstanceQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: TripBusinessInstanceQueryResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bc44416869853114684533da3c2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TripBusinessInstanceQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripBusinessInstanceQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TripBusinessInstanceQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TripBusinessInstanceQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripCCInfoQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripCCInfoQueryRequest extends $tea.Model {
  /**
   * @example
   * 2024060710160003300008684
   */
  businessInstanceId?: string;
  /**
   * @example
   * 458003
   */
  nodeId?: string;
  /**
   * @example
   * 2024060710160003300008684
   */
  thirdBusinessId?: string;
  static names(): { [key: string]: string } {
    return {
      businessInstanceId: 'business_instance_id',
      nodeId: 'node_id',
      thirdBusinessId: 'third_business_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessInstanceId: 'string',
      nodeId: 'string',
      thirdBusinessId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripCCInfoQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: TripCCInfoQueryResponseBodyModule[];
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': TripCCInfoQueryResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripCCInfoQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TripCCInfoQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TripCCInfoQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripTaskQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripTaskQueryRequest extends $tea.Model {
  /**
   * @example
   * 12345
   */
  businessInstanceId?: string;
  /**
   * @example
   * 12345
   */
  thirdBusinessId?: string;
  /**
   * @example
   * thirdpart12138
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      businessInstanceId: 'business_instance_id',
      thirdBusinessId: 'third_business_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessInstanceId: 'string',
      thirdBusinessId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripTaskQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  /**
   * @remarks
   * module。
   */
  module?: TripTaskQueryResponseBodyModule;
  /**
   * @example
   * 2FB0D7A8-BA41-5D04-BEFC-CADA5481AC53
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: TripTaskQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripTaskQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TripTaskQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TripTaskQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateCustomRoleHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateCustomRoleRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  roleId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  roleName?: string;
  static names(): { [key: string]: string } {
    return {
      roleId: 'role_id',
      roleName: 'role_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleId: 'string',
      roleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateCustomRoleResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210bcc3a16583004579056128d33d7
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateCustomRoleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateCustomRoleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateCustomRoleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDepartmentHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwis
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDepartmentRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  deptName?: string;
  managerEmployeeIdList?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dept123
   */
  outDeptId?: string;
  /**
   * @example
   * dept456
   */
  outDeptPid?: string;
  static names(): { [key: string]: string } {
    return {
      deptName: 'dept_name',
      managerEmployeeIdList: 'manager_employee_id_list',
      outDeptId: 'out_dept_id',
      outDeptPid: 'out_dept_pid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deptName: 'string',
      managerEmployeeIdList: { 'type': 'array', 'itemType': 'string' },
      outDeptId: 'string',
      outDeptPid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDepartmentShrinkRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  deptName?: string;
  managerEmployeeIdListShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dept123
   */
  outDeptId?: string;
  /**
   * @example
   * dept456
   */
  outDeptPid?: string;
  static names(): { [key: string]: string } {
    return {
      deptName: 'dept_name',
      managerEmployeeIdListShrink: 'manager_employee_id_list',
      outDeptId: 'out_dept_id',
      outDeptPid: 'out_dept_pid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deptName: 'string',
      managerEmployeeIdListShrink: 'string',
      outDeptId: 'string',
      outDeptPid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDepartmentResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDepartmentResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateDepartmentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateDepartmentResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeRequest extends $tea.Model {
  attribute?: string;
  /**
   * @example
   * https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg
   */
  avatar?: string;
  baseCityCodeList?: string[];
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certList?: UpdateEmployeeRequestCertList[];
  customRoleCodeList?: string[];
  /**
   * @example
   * 123@163.com
   */
  email?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * false
   */
  isAdmin?: boolean;
  /**
   * @example
   * false
   */
  isBoss?: boolean;
  /**
   * @example
   * false
   */
  isDeptLeader?: boolean;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * user456
   */
  managerUserId?: string;
  outDeptIdList?: string[];
  /**
   * @example
   * 13111111111
   */
  phone?: string;
  /**
   * @example
   * M4
   */
  positionLevel?: string;
  realName?: string;
  /**
   * @example
   * John/Wilson
   */
  realNameEn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * user123
   */
  userId?: string;
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      avatar: 'avatar',
      baseCityCodeList: 'base_city_code_list',
      birthday: 'birthday',
      certList: 'cert_list',
      customRoleCodeList: 'custom_role_code_list',
      email: 'email',
      gender: 'gender',
      isAdmin: 'is_admin',
      isBoss: 'is_boss',
      isDeptLeader: 'is_dept_leader',
      jobNo: 'job_no',
      managerUserId: 'manager_user_id',
      outDeptIdList: 'out_dept_id_list',
      phone: 'phone',
      positionLevel: 'position_level',
      realName: 'real_name',
      realNameEn: 'real_name_en',
      userId: 'user_id',
      userNick: 'user_nick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      avatar: 'string',
      baseCityCodeList: { 'type': 'array', 'itemType': 'string' },
      birthday: 'string',
      certList: { 'type': 'array', 'itemType': UpdateEmployeeRequestCertList },
      customRoleCodeList: { 'type': 'array', 'itemType': 'string' },
      email: 'string',
      gender: 'string',
      isAdmin: 'boolean',
      isBoss: 'boolean',
      isDeptLeader: 'boolean',
      jobNo: 'string',
      managerUserId: 'string',
      outDeptIdList: { 'type': 'array', 'itemType': 'string' },
      phone: 'string',
      positionLevel: 'string',
      realName: 'string',
      realNameEn: 'string',
      userId: 'string',
      userNick: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeShrinkRequest extends $tea.Model {
  attribute?: string;
  /**
   * @example
   * https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg
   */
  avatar?: string;
  baseCityCodeListShrink?: string;
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  certListShrink?: string;
  customRoleCodeListShrink?: string;
  /**
   * @example
   * 123@163.com
   */
  email?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * false
   */
  isAdmin?: boolean;
  /**
   * @example
   * false
   */
  isBoss?: boolean;
  /**
   * @example
   * false
   */
  isDeptLeader?: boolean;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * user456
   */
  managerUserId?: string;
  outDeptIdListShrink?: string;
  /**
   * @example
   * 13111111111
   */
  phone?: string;
  /**
   * @example
   * M4
   */
  positionLevel?: string;
  realName?: string;
  /**
   * @example
   * John/Wilson
   */
  realNameEn?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * user123
   */
  userId?: string;
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      avatar: 'avatar',
      baseCityCodeListShrink: 'base_city_code_list',
      birthday: 'birthday',
      certListShrink: 'cert_list',
      customRoleCodeListShrink: 'custom_role_code_list',
      email: 'email',
      gender: 'gender',
      isAdmin: 'is_admin',
      isBoss: 'is_boss',
      isDeptLeader: 'is_dept_leader',
      jobNo: 'job_no',
      managerUserId: 'manager_user_id',
      outDeptIdListShrink: 'out_dept_id_list',
      phone: 'phone',
      positionLevel: 'position_level',
      realName: 'real_name',
      realNameEn: 'real_name_en',
      userId: 'user_id',
      userNick: 'user_nick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      avatar: 'string',
      baseCityCodeListShrink: 'string',
      birthday: 'string',
      certListShrink: 'string',
      customRoleCodeListShrink: 'string',
      email: 'string',
      gender: 'string',
      isAdmin: 'boolean',
      isBoss: 'boolean',
      isDeptLeader: 'boolean',
      jobNo: 'string',
      managerUserId: 'string',
      outDeptIdListShrink: 'string',
      phone: 'string',
      positionLevel: 'string',
      realName: 'string',
      realNameEn: 'string',
      userId: 'string',
      userNick: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * A5009956-1077-52FB-B520-EA8C7E91D722
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateEmployeeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateEmployeeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeLeaveStatusHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripCorpToken: 'x-acs-btrip-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeLeaveStatusRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * true
   */
  isLeave?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * user123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      isLeave: 'is_leave',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isLeave: 'boolean',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeLeaveStatusResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 21041ce316577904808056433edbb2
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeLeaveStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateEmployeeLeaveStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateEmployeeLeaveStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UserQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UserQueryRequest extends $tea.Model {
  /**
   * @example
   * 2021-06-02 00:00:00
   */
  modifiedTimeGreaterOrEqualThan?: string;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 9YN+jxa7PcxbNUTISeKjEw==
   */
  pageToken?: string;
  /**
   * @example
   * 12345
   */
  thirdPartJobNo?: string;
  static names(): { [key: string]: string } {
    return {
      modifiedTimeGreaterOrEqualThan: 'modified_time_greater_or_equal_than',
      pageSize: 'page_size',
      pageToken: 'page_token',
      thirdPartJobNo: 'third_part_job_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      modifiedTimeGreaterOrEqualThan: 'string',
      pageSize: 'number',
      pageToken: 'string',
      thirdPartJobNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UserQueryResponseBody extends $tea.Model {
  /**
   * @example
   * SUCCESS
   */
  code?: string;
  message?: string;
  module?: UserQueryResponseBodyModule;
  /**
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 2f624a6316366024344424669e3279
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: UserQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UserQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UserQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UserQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VatInvoiceScanQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VatInvoiceScanQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @example
   * 123
   */
  billId?: number;
  /**
   * @example
   * 456
   */
  invoiceSubTaskId?: number;
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      billDate: 'bill_date',
      billId: 'bill_id',
      invoiceSubTaskId: 'invoice_sub_task_id',
      pageNo: 'page_no',
      pageSize: 'page_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billDate: 'string',
      billId: 'number',
      invoiceSubTaskId: 'number',
      pageNo: 'number',
      pageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VatInvoiceScanQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: VatInvoiceScanQueryResponseBodyModule;
  /**
   * @remarks
   * requestId
   * 
   * @example
   * C61ECFF6-606B-5F66-B81D-D77369043A5F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210e842b16611337974412836dae27
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: VatInvoiceScanQueryResponseBodyModule,
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VatInvoiceScanQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: VatInvoiceScanQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: VatInvoiceScanQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WaitApplyInvoiceTaskDetailQueryHeaders extends $tea.Model {
  commonHeaders?: { [key: string]: string };
  /**
   * @example
   * feth00jqwls
   */
  xAcsBtripSoCorpToken?: string;
  static names(): { [key: string]: string } {
    return {
      commonHeaders: 'commonHeaders',
      xAcsBtripSoCorpToken: 'x-acs-btrip-so-corp-token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      xAcsBtripSoCorpToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WaitApplyInvoiceTaskDetailQueryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-12-01
   */
  billDate?: string;
  static names(): { [key: string]: string } {
    return {
      billDate: 'bill_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WaitApplyInvoiceTaskDetailQueryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  message?: string;
  module?: WaitApplyInvoiceTaskDetailQueryResponseBodyModule[];
  /**
   * @remarks
   * requestId
   * 
   * @example
   * 407543AF-2BD9-5890-BD92-9D1AB7218B27
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * traceId
   * 
   * @example
   * 210f079e16603757182131635d866a
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      message: 'message',
      module: 'module',
      requestId: 'requestId',
      success: 'success',
      traceId: 'traceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      module: { 'type': 'array', 'itemType': WaitApplyInvoiceTaskDetailQueryResponseBodyModule },
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WaitApplyInvoiceTaskDetailQueryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: WaitApplyInvoiceTaskDetailQueryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: WaitApplyInvoiceTaskDetailQueryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  static names(): { [key: string]: string } {
    return {
      segmentIndex: 'segment_index',
      journeyIndex: 'journey_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentIndex: 'number',
      journeyIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListCabin extends $tea.Model {
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      quantity: 'quantity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      quantity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityList extends $tea.Model {
  segmentPosition?: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListSegmentPosition;
  cabin?: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListCabin;
  static names(): { [key: string]: string } {
    return {
      segmentPosition: 'segment_position',
      cabin: 'cabin',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentPosition: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListSegmentPosition,
      cabin: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListCabin,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  /**
   * @example
   * 17400
   */
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSearchPrice extends $tea.Model {
  /**
   * @example
   * 120000
   */
  ticketPrice?: number;
  /**
   * @example
   * 120000
   */
  sellPrice?: number;
  /**
   * @example
   * 6000
   */
  tax?: number;
  static names(): { [key: string]: string } {
    return {
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      tax: 'tax',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ticketPrice: 'number',
      sellPrice: 'number',
      tax: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceList extends $tea.Model {
  segmentPosition?: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSegmentPosition;
  searchPrice?: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSearchPrice;
  static names(): { [key: string]: string } {
    return {
      segmentPosition: 'segment_position',
      searchPrice: 'search_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentPosition: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSegmentPosition,
      searchPrice: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSearchPrice,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  /**
   * @example
   * 17400
   */
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  /**
   * @example
   * 17400
   */
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  /**
   * @example
   * 17400
   */
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueCabinQuantityListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueCabinQuantityListCabin extends $tea.Model {
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      quantity: 'quantity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      quantity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueCabinQuantityList extends $tea.Model {
  segmentPosition?: ModuleItemListShoppingItemMapValueCabinQuantityListSegmentPosition;
  cabin?: ModuleItemListShoppingItemMapValueCabinQuantityListCabin;
  static names(): { [key: string]: string } {
    return {
      segmentPosition: 'segment_position',
      cabin: 'cabin',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentPosition: ModuleItemListShoppingItemMapValueCabinQuantityListSegmentPosition,
      cabin: ModuleItemListShoppingItemMapValueCabinQuantityListCabin,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  /**
   * @example
   * 17400
   */
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueSegmentPriceListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueSegmentPriceListSearchPrice extends $tea.Model {
  /**
   * @example
   * 120000
   */
  ticketPrice?: number;
  /**
   * @example
   * 120000
   */
  sellPrice?: number;
  /**
   * @example
   * 6000
   */
  tax?: number;
  static names(): { [key: string]: string } {
    return {
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      tax: 'tax',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ticketPrice: 'number',
      sellPrice: 'number',
      tax: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueSegmentPriceList extends $tea.Model {
  segmentPosition?: ModuleItemListShoppingItemMapValueSegmentPriceListSegmentPosition;
  searchPrice?: ModuleItemListShoppingItemMapValueSegmentPriceListSearchPrice;
  static names(): { [key: string]: string } {
    return {
      segmentPosition: 'segment_position',
      searchPrice: 'search_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentPosition: ModuleItemListShoppingItemMapValueSegmentPriceListSegmentPosition,
      searchPrice: ModuleItemListShoppingItemMapValueSegmentPriceListSearchPrice,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 17400
   */
  floorPrice?: number;
  /**
   * @example
   * 121000
   */
  ticketPrice?: number;
  /**
   * @example
   * 17400
   */
  sellPrice?: number;
  /**
   * @example
   * 17400
   */
  originalSellPrice?: number;
  baseTotalPrice?: number;
  /**
   * @example
   * 17400
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 11000
   */
  tax?: number;
  supplyPrice?: number;
  /**
   * @example
   * 242000
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 5000
   */
  buildPrice?: number;
  /**
   * @example
   * 6000
   */
  oilPrice?: number;
  firstStandardPrice?: number;
  businessStandardPrice?: number;
  /**
   * @example
   * 242000
   */
  commonStandardPrice?: number;
  /**
   * @remarks
   * fdPrice
   * 
   * @example
   * fdPrice
   */
  interTicketPrice?: number;
  subtractedPrice?: number;
  originCommonPrice?: number;
  dynamicPromotionPrice?: number;
  installmentNum?: number;
  installmentPrice?: number;
  competitionDynamicPrice?: number;
  competitionPromotionPrice?: number;
  /**
   * @example
   * 17400
   */
  minBeforeControlPriceOfNormal?: number;
  priceShowInfo?: ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo;
  static names(): { [key: string]: string } {
    return {
      floorPrice: 'floor_price',
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      originalSellPrice: 'original_sell_price',
      baseTotalPrice: 'base_total_price',
      beforeControlPrice: 'before_control_price',
      tax: 'tax',
      supplyPrice: 'supply_price',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      firstStandardPrice: 'first_standard_price',
      businessStandardPrice: 'business_standard_price',
      commonStandardPrice: 'common_standard_price',
      interTicketPrice: 'inter_ticket_price',
      subtractedPrice: 'subtracted_price',
      originCommonPrice: 'origin_common_price',
      dynamicPromotionPrice: 'dynamic_promotion_price',
      installmentNum: 'installment_num',
      installmentPrice: 'installment_price',
      competitionDynamicPrice: 'competition_dynamic_price',
      competitionPromotionPrice: 'competition_promotion_price',
      minBeforeControlPriceOfNormal: 'min_before_control_price_of_normal',
      priceShowInfo: 'price_show_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      floorPrice: 'number',
      ticketPrice: 'number',
      sellPrice: 'number',
      originalSellPrice: 'number',
      baseTotalPrice: 'number',
      beforeControlPrice: 'number',
      tax: 'number',
      supplyPrice: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      oilPrice: 'number',
      firstStandardPrice: 'number',
      businessStandardPrice: 'number',
      commonStandardPrice: 'number',
      interTicketPrice: 'number',
      subtractedPrice: 'number',
      originCommonPrice: 'number',
      dynamicPromotionPrice: 'number',
      installmentNum: 'number',
      installmentPrice: 'number',
      competitionDynamicPrice: 'number',
      competitionPromotionPrice: 'number',
      minBeforeControlPriceOfNormal: 'number',
      priceShowInfo: ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValueCabinQuantityListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValueCabinQuantityListCabin extends $tea.Model {
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * A
   */
  quantity?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      quantity: 'quantity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      quantity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValueCabinQuantityList extends $tea.Model {
  segmentPosition?: ModuleGroupItemShoppingItemMapValueCabinQuantityListSegmentPosition;
  cabin?: ModuleGroupItemShoppingItemMapValueCabinQuantityListCabin;
  static names(): { [key: string]: string } {
    return {
      segmentPosition: 'segment_position',
      cabin: 'cabin',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentPosition: ModuleGroupItemShoppingItemMapValueCabinQuantityListSegmentPosition,
      cabin: ModuleGroupItemShoppingItemMapValueCabinQuantityListCabin,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 120000
   */
  ticketPrice?: number;
  /**
   * @example
   * 120000
   */
  sellPrice?: number;
  /**
   * @example
   * 6000
   */
  tax?: number;
  static names(): { [key: string]: string } {
    return {
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      tax: 'tax',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ticketPrice: 'number',
      sellPrice: 'number',
      tax: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValueSegmentPriceListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValueSegmentPriceListSearchPrice extends $tea.Model {
  /**
   * @example
   * 120000
   */
  ticketPrice?: number;
  /**
   * @example
   * 120000
   */
  sellPrice?: number;
  /**
   * @example
   * 6000
   */
  tax?: number;
  static names(): { [key: string]: string } {
    return {
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      tax: 'tax',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ticketPrice: 'number',
      sellPrice: 'number',
      tax: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemShoppingItemMapValueSegmentPriceList extends $tea.Model {
  segmentPosition?: ModuleGroupItemShoppingItemMapValueSegmentPriceListSegmentPosition;
  searchPrice?: ModuleGroupItemShoppingItemMapValueSegmentPriceListSearchPrice;
  static names(): { [key: string]: string } {
    return {
      segmentPosition: 'segment_position',
      searchPrice: 'search_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentPosition: ModuleGroupItemShoppingItemMapValueSegmentPriceListSegmentPosition,
      searchPrice: ModuleGroupItemShoppingItemMapValueSegmentPriceListSearchPrice,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleGroupItemSubItemsShoppingItemMapValueSearchPrice extends $tea.Model {
  /**
   * @example
   * 120000
   */
  ticketPrice?: number;
  /**
   * @example
   * 120000
   */
  sellPrice?: number;
  /**
   * @example
   * 6000
   */
  tax?: number;
  static names(): { [key: string]: string } {
    return {
      ticketPrice: 'ticket_price',
      sellPrice: 'sell_price',
      tax: 'tax',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ticketPrice: 'number',
      sellPrice: 'number',
      tax: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo extends $tea.Model {
  discountInfo?: string;
  /**
   * @example
   * 0.8
   */
  discountNum?: number;
  /**
   * @example
   * false
   */
  showTicketPrice?: boolean;
  static names(): { [key: string]: string } {
    return {
      discountInfo: 'discount_info',
      discountNum: 'discount_num',
      showTicketPrice: 'show_ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountInfo: 'string',
      discountNum: 'number',
      showTicketPrice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AccessTokenResponseBodyData extends $tea.Model {
  /**
   * @example
   * 70000
   */
  expire?: number;
  /**
   * @example
   * 37j76df
   */
  token?: string;
  static names(): { [key: string]: string } {
    return {
      expire: 'expire',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expire: 'number',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AccessTokenResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 70000
   */
  expire?: number;
  /**
   * @example
   * 1652410740914
   */
  start?: number;
  /**
   * @example
   * 37j76df
   */
  token?: string;
  static names(): { [key: string]: string } {
    return {
      expire: 'expire',
      start: 'start',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expire: 'number',
      start: 'number',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddEmployeeRequestCertList extends $tea.Model {
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  /**
   * @example
   * 2099-03-12
   */
  certExpiredTime?: string;
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @example
   * 123
   */
  certNo?: string;
  /**
   * @example
   * 0
   */
  certType?: number;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * CN
   */
  nationality?: string;
  /**
   * @example
   * 13111111111
   */
  phone?: string;
  realName?: string;
  /**
   * @example
   * John/Wilson
   */
  realNameEn?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certExpiredTime: 'cert_expired_time',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      gender: 'gender',
      nationality: 'nationality',
      phone: 'phone',
      realName: 'real_name',
      realNameEn: 'real_name_en',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certExpiredTime: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      gender: 'string',
      nationality: 'string',
      phone: 'string',
      realName: 'string',
      realNameEn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInvoiceEntityRequestEntities extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  entityId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  entityName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityName: 'entity_name',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityName: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInvoiceEntityResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  addNum?: number;
  /**
   * @example
   * 2
   */
  selectedUserNum?: number;
  static names(): { [key: string]: string } {
    return {
      addNum: 'add_num',
      selectedUserNum: 'selected_user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addNum: 'number',
      selectedUserNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddressGetResponseBodyModule extends $tea.Model {
  /**
   * @example
   * https://trip-hisv.taobao.com/ding/trustLogin.htm?redirectUrl=https%3A%2F%2Fmarket.m.taobao.com%2Fapp%2Fbtrip-fe%2Frx-alitrip-main%2Fhome.html%3Ffpt%3DbIdentify%2528dingtalk.isv.h5.home%2529%26corpId%3Dding3f9797e277423f14a1320dcb25e91351%26dingUserId%3Dmanager9302%26dingAppId%3D1692%26fit%3Dtrue&token=b73e0b9e-d25a-40f0-aff8-2c2e58da659b
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AirportSearchResponseBodyModuleCities extends $tea.Model {
  /**
   * @example
   * HGH
   */
  code?: string;
  /**
   * @example
   * 100
   */
  distance?: number;
  name?: string;
  /**
   * @example
   * 上海
   */
  travelName?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      distance: 'distance',
      name: 'name',
      travelName: 'travel_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      distance: 'number',
      name: 'string',
      travelName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AirportSearchResponseBodyModule extends $tea.Model {
  cities?: AirportSearchResponseBodyModuleCities[];
  /**
   * @example
   * false
   */
  nearby?: boolean;
  static names(): { [key: string]: string } {
    return {
      cities: 'cities',
      nearby: 'nearby',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cities: { 'type': 'array', 'itemType': AirportSearchResponseBodyModuleCities },
      nearby: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList extends $tea.Model {
  /**
   * @example
   * 330122
   */
  adcode?: string;
  /**
   * @example
   * 0571
   */
  cityCode?: string;
  /**
   * @example
   * 3
   */
  cityLevel?: string;
  /**
   * @example
   * 桐庐
   */
  cityName?: string;
  /**
   * @example
   * 中国，浙江省，杭州市，桐庐
   */
  cnNameTree?: string;
  /**
   * @example
   * 1
   */
  id?: number;
  otherNameList?: string[];
  static names(): { [key: string]: string } {
    return {
      adcode: 'adcode',
      cityCode: 'city_code',
      cityLevel: 'city_level',
      cityName: 'city_name',
      cnNameTree: 'cn_name_tree',
      id: 'id',
      otherNameList: 'other_name_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adcode: 'string',
      cityCode: 'string',
      cityLevel: 'string',
      cityName: 'string',
      cnNameTree: 'string',
      id: 'number',
      otherNameList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AllBaseCityInfoQueryResponseBodyModule extends $tea.Model {
  allCityBaseInfoList?: AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList[];
  static names(): { [key: string]: string } {
    return {
      allCityBaseInfoList: 'all_city_base_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allCityBaseInfoList: { 'type': 'array', 'itemType': AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestCarRule extends $tea.Model {
  scenarioTemplateId?: string;
  scenarioTemplateName?: string;
  static names(): { [key: string]: string } {
    return {
      scenarioTemplateId: 'scenario_template_id',
      scenarioTemplateName: 'scenario_template_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scenarioTemplateId: 'string',
      scenarioTemplateName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestDefaultStandardHotelCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestDefaultStandardHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestDefaultStandard extends $tea.Model {
  businessDiscount?: number;
  economyDiscount?: number;
  firstDiscount?: number;
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyAddRequestDefaultStandardHotelCitys[];
  hotelIntlCitys?: ApplyAddRequestDefaultStandardHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  /**
   * @example
   * F
   */
  internationalFlightCabins?: string;
  premiumEconomyDiscount?: number;
  reserveType?: number;
  trainRuleCode?: number;
  trainSeats?: string;
  static names(): { [key: string]: string } {
    return {
      businessDiscount: 'business_discount',
      economyDiscount: 'economy_discount',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      internationalFlightCabins: 'international_flight_cabins',
      premiumEconomyDiscount: 'premium_economy_discount',
      reserveType: 'reserve_type',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessDiscount: 'number',
      economyDiscount: 'number',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyAddRequestDefaultStandardHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyAddRequestDefaultStandardHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      internationalFlightCabins: 'string',
      premiumEconomyDiscount: 'number',
      reserveType: 'number',
      trainRuleCode: 'number',
      trainSeats: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestExternalTravelerList extends $tea.Model {
  attribute?: string;
  costCenterId?: number;
  externalUserId?: string;
  invoiceId?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  projectCode?: string;
  projectTitle?: string;
  thirdPartInvoiceId?: string;
  thirdpartCostCenterId?: string;
  thirdpartDepartId?: string;
  userName?: string;
  userNameEn?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      costCenterId: 'cost_center_id',
      externalUserId: 'external_user_id',
      invoiceId: 'invoice_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      userName: 'user_name',
      userNameEn: 'user_name_en',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      costCenterId: 'number',
      externalUserId: 'string',
      invoiceId: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartDepartId: 'string',
      userName: 'string',
      userNameEn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestExternalTravelerStandardHotelCitys extends $tea.Model {
  /**
   * @example
   * 0
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 1009
   */
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestExternalTravelerStandardHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestExternalTravelerStandard extends $tea.Model {
  /**
   * @example
   * 1
   */
  businessDiscount?: number;
  /**
   * @example
   * 1
   */
  economyDiscount?: number;
  /**
   * @example
   * 1
   */
  firstDiscount?: number;
  /**
   * @example
   * F
   */
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyAddRequestExternalTravelerStandardHotelCitys[];
  hotelIntlCitys?: ApplyAddRequestExternalTravelerStandardHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  /**
   * @example
   * F
   */
  internationalFlightCabins?: string;
  /**
   * @example
   * 1
   */
  premiumEconomyDiscount?: number;
  /**
   * @example
   * 0
   */
  reserveType?: number;
  trainRuleCode?: number;
  /**
   * @example
   * 0
   */
  trainSeats?: string;
  static names(): { [key: string]: string } {
    return {
      businessDiscount: 'business_discount',
      economyDiscount: 'economy_discount',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      internationalFlightCabins: 'international_flight_cabins',
      premiumEconomyDiscount: 'premium_economy_discount',
      reserveType: 'reserve_type',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessDiscount: 'number',
      economyDiscount: 'number',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyAddRequestExternalTravelerStandardHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyAddRequestExternalTravelerStandardHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      internationalFlightCabins: 'string',
      premiumEconomyDiscount: 'number',
      reserveType: 'number',
      trainRuleCode: 'number',
      trainSeats: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestHotelShare extends $tea.Model {
  /**
   * @example
   * 70
   */
  param?: string;
  /**
   * @example
   * 1
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      param: 'param',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      param: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestItineraryListItineraryTravelStandard extends $tea.Model {
  hotelAvailableNightsPerDay?: number;
  static names(): { [key: string]: string } {
    return {
      hotelAvailableNightsPerDay: 'hotel_available_nights_per_day',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelAvailableNightsPerDay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestItineraryList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  arrCity?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  arrDate?: string;
  attribute?: string;
  /**
   * @example
   * 12138
   */
  costCenterId?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  depCity?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2017-01-01 00:00:00
   */
  depDate?: string;
  /**
   * @example
   * 34711
   */
  invoiceId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  itineraryId?: string;
  itineraryTravelStandard?: ApplyAddRequestItineraryListItineraryTravelStandard;
  /**
   * @example
   * true
   */
  needHotel?: boolean;
  /**
   * @example
   * true
   */
  needTraffic?: boolean;
  /**
   * @example
   * projecttow
   */
  projectCode?: string;
  projectTitle?: string;
  provinceTravelCityAdcodes?: string[];
  /**
   * @example
   * thirdpart34711
   */
  thirdPartInvoiceId?: string;
  /**
   * @example
   * thridpart12138
   */
  thirdpartCostCenterId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  trafficType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  tripWay?: number;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrDate: 'arr_date',
      attribute: 'attribute',
      costCenterId: 'cost_center_id',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      invoiceId: 'invoice_id',
      itineraryId: 'itinerary_id',
      itineraryTravelStandard: 'itinerary_travel_standard',
      needHotel: 'need_hotel',
      needTraffic: 'need_traffic',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      provinceTravelCityAdcodes: 'province_travel_city_adcodes',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      trafficType: 'traffic_type',
      tripWay: 'trip_way',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrCityCode: 'string',
      arrDate: 'string',
      attribute: 'string',
      costCenterId: 'number',
      depCity: 'string',
      depCityCode: 'string',
      depDate: 'string',
      invoiceId: 'number',
      itineraryId: 'string',
      itineraryTravelStandard: ApplyAddRequestItineraryListItineraryTravelStandard,
      needHotel: 'boolean',
      needTraffic: 'boolean',
      projectCode: 'string',
      projectTitle: 'string',
      provinceTravelCityAdcodes: { 'type': 'array', 'itemType': 'string' },
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      trafficType: 'number',
      tripWay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestItinerarySetListItineraryTravelStandard extends $tea.Model {
  hotelAvailableNightsPerDay?: number;
  static names(): { [key: string]: string } {
    return {
      hotelAvailableNightsPerDay: 'hotel_available_nights_per_day',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelAvailableNightsPerDay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestItinerarySetList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2017-01-01 00:00:00
   */
  arrDate?: string;
  attribute?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS,HGH
   */
  cityCodeSet?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  citySet?: string;
  /**
   * @example
   * 12345
   */
  costCenterId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2017-01-01 00:00:00
   */
  depDate?: string;
  /**
   * @example
   * 12345
   */
  invoiceId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  itineraryId?: string;
  itineraryTravelStandard?: ApplyAddRequestItinerarySetListItineraryTravelStandard;
  /**
   * @example
   * projecttow
   */
  projectCode?: string;
  projectTitle?: string;
  provinceTravelCityAdcodes?: string[];
  /**
   * @example
   * thridpart12138
   */
  thirdPartInvoiceId?: string;
  /**
   * @example
   * thridpart12138
   */
  thirdpartCostCenterId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  trafficType?: number;
  static names(): { [key: string]: string } {
    return {
      arrDate: 'arr_date',
      attribute: 'attribute',
      cityCodeSet: 'city_code_set',
      citySet: 'city_set',
      costCenterId: 'cost_center_id',
      depDate: 'dep_date',
      invoiceId: 'invoice_id',
      itineraryId: 'itinerary_id',
      itineraryTravelStandard: 'itinerary_travel_standard',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      provinceTravelCityAdcodes: 'province_travel_city_adcodes',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      trafficType: 'traffic_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDate: 'string',
      attribute: 'string',
      cityCodeSet: 'string',
      citySet: 'string',
      costCenterId: 'number',
      depDate: 'string',
      invoiceId: 'number',
      itineraryId: 'string',
      itineraryTravelStandard: ApplyAddRequestItinerarySetListItineraryTravelStandard,
      projectCode: 'string',
      projectTitle: 'string',
      provinceTravelCityAdcodes: { 'type': 'array', 'itemType': 'string' },
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      trafficType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestTravelerList extends $tea.Model {
  attribute?: string;
  costCenterId?: number;
  invoiceId?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  projectCode?: string;
  projectTitle?: string;
  thirdPartInvoiceId?: string;
  thirdpartCostCenterId?: string;
  thirdpartDepartId?: string;
  /**
   * @example
   * wu51531
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      costCenterId: 'cost_center_id',
      invoiceId: 'invoice_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      costCenterId: 'number',
      invoiceId: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartDepartId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestTravelerStandardCarCitySet extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  cityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  cityName?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestTravelerStandardHotelCitys extends $tea.Model {
  /**
   * @example
   * 0
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 1009
   */
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestTravelerStandardHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddRequestTravelerStandard extends $tea.Model {
  /**
   * @example
   * 1
   */
  businessDiscount?: number;
  carCitySet?: ApplyAddRequestTravelerStandardCarCitySet[];
  /**
   * @example
   * 1
   */
  economyDiscount?: number;
  /**
   * @example
   * 1
   */
  firstDiscount?: number;
  /**
   * @example
   * Y
   */
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyAddRequestTravelerStandardHotelCitys[];
  hotelIntlCitys?: ApplyAddRequestTravelerStandardHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  /**
   * @example
   * F
   */
  internationalFlightCabins?: string;
  /**
   * @example
   * 1
   */
  premiumEconomyDiscount?: number;
  /**
   * @example
   * 0
   */
  reserveType?: number;
  trainRuleCode?: number;
  /**
   * @example
   * 1
   */
  trainSeats?: string;
  /**
   * @example
   * wfffeng
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      businessDiscount: 'business_discount',
      carCitySet: 'car_city_set',
      economyDiscount: 'economy_discount',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      internationalFlightCabins: 'international_flight_cabins',
      premiumEconomyDiscount: 'premium_economy_discount',
      reserveType: 'reserve_type',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessDiscount: 'number',
      carCitySet: { 'type': 'array', 'itemType': ApplyAddRequestTravelerStandardCarCitySet },
      economyDiscount: 'number',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyAddRequestTravelerStandardHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyAddRequestTravelerStandardHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      internationalFlightCabins: 'string',
      premiumEconomyDiscount: 'number',
      reserveType: 'number',
      trainRuleCode: 'number',
      trainSeats: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAddResponseBodyModule extends $tea.Model {
  /**
   * @example
   * thirdpart12132
   */
  applyId?: number;
  /**
   * @example
   * thirdpart12132
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 20220702001
   */
  thirdpartBusinessId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyExternalNodeStatusUpdateRequestOperationRecords extends $tea.Model {
  comment?: string;
  /**
   * @example
   * 2023-05-28 11:33:28
   */
  operateTime?: string;
  operatorName?: string;
  /**
   * @example
   * AGREE
   */
  result?: string;
  /**
   * @example
   * PROCESS_APPROVE
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      comment: 'comment',
      operateTime: 'operate_time',
      operatorName: 'operator_name',
      result: 'result',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      operateTime: 'string',
      operatorName: 'string',
      result: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyInvoiceTaskRequestInvoiceTaskList extends $tea.Model {
  contact?: string;
  email?: string;
  /**
   * @example
   * 0
   */
  flightInvoiceFee?: string;
  /**
   * @example
   * 3.12
   */
  fuPointInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  hotelNormalInvoiceFee?: string;
  /**
   * @example
   * 100
   */
  hotelSpecialInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  internationalFlightInvoiceFee?: string;
  internationalHotelInvoiceFee?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  invoiceThirdPartId?: string;
  invoiceType?: number;
  mailAddress?: string;
  mailCity?: string;
  mailFullAddress?: string;
  mailProvince?: string;
  mealNormalInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  penaltyFee?: string;
  remark?: string;
  /**
   * @example
   * 1.02
   */
  serviceFee?: string;
  /**
   * @example
   * 1234567890
   */
  telephone?: string;
  trainAccelerationPackageInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  trainInvoiceFee?: string;
  vasMallSpecialInvoiceFee?: string;
  /**
   * @example
   * 100
   */
  vehicleInvoiceFee?: string;
  vehicleNormalInvoiceFee?: string;
  static names(): { [key: string]: string } {
    return {
      contact: 'contact',
      email: 'email',
      flightInvoiceFee: 'flight_invoice_fee',
      fuPointInvoiceFee: 'fu_point_invoice_fee',
      hotelNormalInvoiceFee: 'hotel_normal_invoice_fee',
      hotelSpecialInvoiceFee: 'hotel_special_invoice_fee',
      internationalFlightInvoiceFee: 'international_flight_invoice_fee',
      internationalHotelInvoiceFee: 'international_hotel_invoice_fee',
      invoiceThirdPartId: 'invoice_third_part_id',
      invoiceType: 'invoice_type',
      mailAddress: 'mail_address',
      mailCity: 'mail_city',
      mailFullAddress: 'mail_full_address',
      mailProvince: 'mail_province',
      mealNormalInvoiceFee: 'meal_normal_invoice_fee',
      penaltyFee: 'penalty_fee',
      remark: 'remark',
      serviceFee: 'service_fee',
      telephone: 'telephone',
      trainAccelerationPackageInvoiceFee: 'train_acceleration_package_invoice_fee',
      trainInvoiceFee: 'train_invoice_fee',
      vasMallSpecialInvoiceFee: 'vas_mall_special_invoice_fee',
      vehicleInvoiceFee: 'vehicle_invoice_fee',
      vehicleNormalInvoiceFee: 'vehicle_normal_invoice_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contact: 'string',
      email: 'string',
      flightInvoiceFee: 'string',
      fuPointInvoiceFee: 'string',
      hotelNormalInvoiceFee: 'string',
      hotelSpecialInvoiceFee: 'string',
      internationalFlightInvoiceFee: 'string',
      internationalHotelInvoiceFee: 'string',
      invoiceThirdPartId: 'string',
      invoiceType: 'number',
      mailAddress: 'string',
      mailCity: 'string',
      mailFullAddress: 'string',
      mailProvince: 'string',
      mealNormalInvoiceFee: 'string',
      penaltyFee: 'string',
      remark: 'string',
      serviceFee: 'string',
      telephone: 'string',
      trainAccelerationPackageInvoiceFee: 'string',
      trainInvoiceFee: 'string',
      vasMallSpecialInvoiceFee: 'string',
      vehicleInvoiceFee: 'string',
      vehicleNormalInvoiceFee: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleListApproverList extends $tea.Model {
  note?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  operateTime?: string;
  /**
   * @example
   * 1
   */
  order?: number;
  /**
   * @example
   * 1
   */
  status?: number;
  statusDesc?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      note: 'note',
      operateTime: 'operate_time',
      order: 'order',
      status: 'status',
      statusDesc: 'status_desc',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      note: 'string',
      operateTime: 'string',
      order: 'number',
      status: 'number',
      statusDesc: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleListCarRule extends $tea.Model {
  scenarioTemplateId?: string;
  scenarioTemplateName?: string;
  static names(): { [key: string]: string } {
    return {
      scenarioTemplateId: 'scenario_template_id',
      scenarioTemplateName: 'scenario_template_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scenarioTemplateId: 'string',
      scenarioTemplateName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleListExternalTravelerList extends $tea.Model {
  attribute?: string;
  costCenterName?: string;
  departId?: string;
  externalUserId?: string;
  invoiceName?: string;
  paymentDepartmentName?: string;
  projectCode?: string;
  projectTitle?: string;
  thirdpartDepartId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      costCenterName: 'cost_center_name',
      departId: 'depart_id',
      externalUserId: 'external_user_id',
      invoiceName: 'invoice_name',
      paymentDepartmentName: 'payment_department_name',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdpartDepartId: 'thirdpart_depart_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      costCenterName: 'string',
      departId: 'string',
      externalUserId: 'string',
      invoiceName: 'string',
      paymentDepartmentName: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdpartDepartId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleListItineraryList extends $tea.Model {
  arrCity?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  arrDate?: string;
  costCenterName?: string;
  depCity?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  depDate?: string;
  invoiceName?: string;
  /**
   * @example
   * abcd
   */
  itineraryId?: string;
  /**
   * @example
   * xm1
   */
  projectCode?: string;
  projectTitle?: string;
  thirdpartCostCenterId?: string;
  thirdpartInvoiceId?: string;
  thirdpartItineraryId?: string;
  /**
   * @example
   * 0
   */
  trafficType?: number;
  /**
   * @example
   * 1
   */
  tripWay?: number;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrDate: 'arr_date',
      costCenterName: 'cost_center_name',
      depCity: 'dep_city',
      depDate: 'dep_date',
      invoiceName: 'invoice_name',
      itineraryId: 'itinerary_id',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartInvoiceId: 'thirdpart_invoice_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      trafficType: 'traffic_type',
      tripWay: 'trip_way',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrDate: 'string',
      costCenterName: 'string',
      depCity: 'string',
      depDate: 'string',
      invoiceName: 'string',
      itineraryId: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartInvoiceId: 'string',
      thirdpartItineraryId: 'string',
      trafficType: 'number',
      tripWay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleListItinerarySetList extends $tea.Model {
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  arrDate?: string;
  /**
   * @example
   * BJS，HGH
   */
  cityCodeSet?: string;
  citySet?: string;
  costCenterName?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  depDate?: string;
  invoiceName?: string;
  /**
   * @example
   * abcd
   */
  itineraryId?: string;
  /**
   * @example
   * 12345
   */
  projectCode?: string;
  projectTitle?: string;
  thirdpartCostCenterId?: string;
  thirdpartInvoiceId?: string;
  thirdpartItineraryId?: string;
  /**
   * @example
   * 0
   */
  trafficType?: number;
  static names(): { [key: string]: string } {
    return {
      arrDate: 'arr_date',
      cityCodeSet: 'city_code_set',
      citySet: 'city_set',
      costCenterName: 'cost_center_name',
      depDate: 'dep_date',
      invoiceName: 'invoice_name',
      itineraryId: 'itinerary_id',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartInvoiceId: 'thirdpart_invoice_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      trafficType: 'traffic_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDate: 'string',
      cityCodeSet: 'string',
      citySet: 'string',
      costCenterName: 'string',
      depDate: 'string',
      invoiceName: 'string',
      itineraryId: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartInvoiceId: 'string',
      thirdpartItineraryId: 'string',
      trafficType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleListTravelerListCarCitySet extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleListTravelerList extends $tea.Model {
  attribute?: string;
  carCitySet?: ApplyListQueryResponseBodyModuleListTravelerListCarCitySet[];
  costCenterName?: string;
  departId?: string;
  invoiceName?: string;
  jobNo?: string;
  paymentDepartmentName?: string;
  projectCode?: string;
  projectTitle?: string;
  thirdpartDepartId?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      carCitySet: 'car_city_set',
      costCenterName: 'cost_center_name',
      departId: 'depart_id',
      invoiceName: 'invoice_name',
      jobNo: 'job_no',
      paymentDepartmentName: 'payment_department_name',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdpartDepartId: 'thirdpart_depart_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      carCitySet: { 'type': 'array', 'itemType': ApplyListQueryResponseBodyModuleListTravelerListCarCitySet },
      costCenterName: 'string',
      departId: 'string',
      invoiceName: 'string',
      jobNo: 'string',
      paymentDepartmentName: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdpartDepartId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyListQueryResponseBodyModuleList extends $tea.Model {
  /**
   * @example
   * 201710111505000464651
   */
  applyShowId?: string;
  approverList?: ApplyListQueryResponseBodyModuleListApproverList[];
  carRule?: ApplyListQueryResponseBodyModuleListCarRule;
  /**
   * @example
   * corp1
   */
  corpId?: string;
  /**
   * @example
   * abc
   */
  corpName?: string;
  /**
   * @example
   * depart1
   */
  departId?: string;
  departName?: string;
  externalTravelerList?: ApplyListQueryResponseBodyModuleListExternalTravelerList[];
  /**
   * @example
   * abc1234
   */
  flowCode?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  gmtModified?: string;
  /**
   * @example
   * 1476
   */
  id?: number;
  itineraryList?: ApplyListQueryResponseBodyModuleListItineraryList[];
  /**
   * @example
   * 0
   */
  itineraryRule?: number;
  itinerarySetList?: ApplyListQueryResponseBodyModuleListItinerarySetList[];
  jobNo?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  statusDesc?: string;
  /**
   * @example
   * abc
   */
  thirdpartBusinessId?: string;
  /**
   * @example
   * abc
   */
  thirdpartId?: string;
  travelerList?: ApplyListQueryResponseBodyModuleListTravelerList[];
  tripCause?: string;
  /**
   * @example
   * 1
   */
  tripDay?: number;
  tripTitle?: string;
  /**
   * @example
   * 2
   */
  type?: number;
  /**
   * @example
   * abc
   */
  unionNo?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyShowId: 'apply_show_id',
      approverList: 'approver_list',
      carRule: 'car_rule',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      externalTravelerList: 'external_traveler_list',
      flowCode: 'flow_code',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      id: 'id',
      itineraryList: 'itinerary_list',
      itineraryRule: 'itinerary_rule',
      itinerarySetList: 'itinerary_set_list',
      jobNo: 'job_no',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      status: 'status',
      statusDesc: 'status_desc',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartId: 'thirdpart_id',
      travelerList: 'traveler_list',
      tripCause: 'trip_cause',
      tripDay: 'trip_day',
      tripTitle: 'trip_title',
      type: 'type',
      unionNo: 'union_no',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyShowId: 'string',
      approverList: { 'type': 'array', 'itemType': ApplyListQueryResponseBodyModuleListApproverList },
      carRule: ApplyListQueryResponseBodyModuleListCarRule,
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      externalTravelerList: { 'type': 'array', 'itemType': ApplyListQueryResponseBodyModuleListExternalTravelerList },
      flowCode: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      itineraryList: { 'type': 'array', 'itemType': ApplyListQueryResponseBodyModuleListItineraryList },
      itineraryRule: 'number',
      itinerarySetList: { 'type': 'array', 'itemType': ApplyListQueryResponseBodyModuleListItinerarySetList },
      jobNo: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      status: 'number',
      statusDesc: 'string',
      thirdpartBusinessId: 'string',
      thirdpartId: 'string',
      travelerList: { 'type': 'array', 'itemType': ApplyListQueryResponseBodyModuleListTravelerList },
      tripCause: 'string',
      tripDay: 'number',
      tripTitle: 'string',
      type: 'number',
      unionNo: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestCarRule extends $tea.Model {
  scenarioTemplateId?: string;
  scenarioTemplateName?: string;
  static names(): { [key: string]: string } {
    return {
      scenarioTemplateId: 'scenario_template_id',
      scenarioTemplateName: 'scenario_template_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scenarioTemplateId: 'string',
      scenarioTemplateName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestDefaultStandardHotelCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestDefaultStandardHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestDefaultStandard extends $tea.Model {
  businessDiscount?: number;
  economyDiscount?: number;
  firstDiscount?: number;
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyModifyRequestDefaultStandardHotelCitys[];
  hotelIntlCitys?: ApplyModifyRequestDefaultStandardHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  premiumEconomyDiscount?: number;
  reserveType?: number;
  trainRuleCode?: number;
  trainSeats?: string;
  static names(): { [key: string]: string } {
    return {
      businessDiscount: 'business_discount',
      economyDiscount: 'economy_discount',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      premiumEconomyDiscount: 'premium_economy_discount',
      reserveType: 'reserve_type',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessDiscount: 'number',
      economyDiscount: 'number',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyModifyRequestDefaultStandardHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyModifyRequestDefaultStandardHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      premiumEconomyDiscount: 'number',
      reserveType: 'number',
      trainRuleCode: 'number',
      trainSeats: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestExternalTravelerList extends $tea.Model {
  attribute?: string;
  costCenterId?: number;
  externalUserId?: string;
  invoiceId?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  projectCode?: string;
  projectTitle?: string;
  thirdPartInvoiceId?: string;
  thirdpartCostCenterId?: string;
  thirdpartDepartId?: string;
  userName?: string;
  userNameEn?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      costCenterId: 'cost_center_id',
      externalUserId: 'external_user_id',
      invoiceId: 'invoice_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      userName: 'user_name',
      userNameEn: 'user_name_en',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      costCenterId: 'number',
      externalUserId: 'string',
      invoiceId: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartDepartId: 'string',
      userName: 'string',
      userNameEn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestExternalTravelerStandardHotelCitys extends $tea.Model {
  /**
   * @example
   * 0
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 1001
   */
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestExternalTravelerStandardHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestExternalTravelerStandard extends $tea.Model {
  /**
   * @example
   * 1
   */
  businessDiscount?: number;
  /**
   * @example
   * 1
   */
  economyDiscount?: number;
  /**
   * @example
   * 1
   */
  firstDiscount?: number;
  /**
   * @example
   * Y
   */
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyModifyRequestExternalTravelerStandardHotelCitys[];
  hotelIntlCitys?: ApplyModifyRequestExternalTravelerStandardHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  /**
   * @remarks
   * 超级经济舱折扣。1到10的整数
   * 
   * @example
   * 1
   */
  premiumEconomyDiscount?: number;
  /**
   * @example
   * 0
   */
  reserveType?: number;
  trainRuleCode?: number;
  /**
   * @example
   * 1
   */
  trainSeats?: string;
  static names(): { [key: string]: string } {
    return {
      businessDiscount: 'business_discount',
      economyDiscount: 'economy_discount',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      premiumEconomyDiscount: 'premium_economy_discount',
      reserveType: 'reserve_type',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessDiscount: 'number',
      economyDiscount: 'number',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyModifyRequestExternalTravelerStandardHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyModifyRequestExternalTravelerStandardHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      premiumEconomyDiscount: 'number',
      reserveType: 'number',
      trainRuleCode: 'number',
      trainSeats: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestHotelShare extends $tea.Model {
  /**
   * @example
   * 70
   */
  param?: string;
  /**
   * @example
   * 1
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      param: 'param',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      param: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestItineraryListItineraryTravelStandard extends $tea.Model {
  hotelAvailableNightsPerDay?: number;
  static names(): { [key: string]: string } {
    return {
      hotelAvailableNightsPerDay: 'hotel_available_nights_per_day',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelAvailableNightsPerDay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestItineraryList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  arrCity?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-12 00:00:00
   */
  arrDate?: string;
  attribute?: string;
  /**
   * @example
   * 2021413
   */
  costCenterId?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  depCity?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2022-07-12 00:00:00
   */
  depDate?: string;
  /**
   * @example
   * 614141
   */
  invoiceId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2000131
   */
  itineraryId?: string;
  itineraryTravelStandard?: ApplyModifyRequestItineraryListItineraryTravelStandard;
  /**
   * @example
   * true
   */
  needHotel?: boolean;
  /**
   * @example
   * true
   */
  needTraffic?: boolean;
  /**
   * @example
   * projectone
   */
  projectCode?: string;
  projectTitle?: string;
  provinceTravelCityAdcodes?: string[];
  /**
   * @example
   * ZG14131
   */
  thirdPartInvoiceId?: string;
  /**
   * @example
   * thirdpart5151
   */
  thirdpartCostCenterId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  trafficType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  tripWay?: number;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrDate: 'arr_date',
      attribute: 'attribute',
      costCenterId: 'cost_center_id',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      invoiceId: 'invoice_id',
      itineraryId: 'itinerary_id',
      itineraryTravelStandard: 'itinerary_travel_standard',
      needHotel: 'need_hotel',
      needTraffic: 'need_traffic',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      provinceTravelCityAdcodes: 'province_travel_city_adcodes',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      trafficType: 'traffic_type',
      tripWay: 'trip_way',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrCityCode: 'string',
      arrDate: 'string',
      attribute: 'string',
      costCenterId: 'number',
      depCity: 'string',
      depCityCode: 'string',
      depDate: 'string',
      invoiceId: 'number',
      itineraryId: 'string',
      itineraryTravelStandard: ApplyModifyRequestItineraryListItineraryTravelStandard,
      needHotel: 'boolean',
      needTraffic: 'boolean',
      projectCode: 'string',
      projectTitle: 'string',
      provinceTravelCityAdcodes: { 'type': 'array', 'itemType': 'string' },
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      trafficType: 'number',
      tripWay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestItinerarySetListItineraryTravelStandard extends $tea.Model {
  hotelAvailableNightsPerDay?: number;
  static names(): { [key: string]: string } {
    return {
      hotelAvailableNightsPerDay: 'hotel_available_nights_per_day',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelAvailableNightsPerDay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestItinerarySetList extends $tea.Model {
  /**
   * @example
   * 2017-01-01 00:00:00
   */
  arrDate?: string;
  attribute?: string;
  /**
   * @example
   * BJS,SHA
   */
  cityCodeSet?: string;
  citySet?: string;
  /**
   * @example
   * 123455
   */
  costCenterId?: number;
  /**
   * @example
   * 2017-01-01 00:00:00
   */
  depDate?: string;
  /**
   * @example
   * 12344
   */
  invoiceId?: number;
  /**
   * @example
   * 20220722001
   */
  itineraryId?: string;
  itineraryTravelStandard?: ApplyModifyRequestItinerarySetListItineraryTravelStandard;
  /**
   * @example
   * projecttow
   */
  projectCode?: string;
  projectTitle?: string;
  provinceTravelCityAdcodes?: string[];
  /**
   * @example
   * thridpart12138
   */
  thirdPartInvoiceId?: string;
  /**
   * @example
   * thridpart12138
   */
  thirdpartCostCenterId?: string;
  /**
   * @example
   * 0
   */
  trafficType?: number;
  static names(): { [key: string]: string } {
    return {
      arrDate: 'arr_date',
      attribute: 'attribute',
      cityCodeSet: 'city_code_set',
      citySet: 'city_set',
      costCenterId: 'cost_center_id',
      depDate: 'dep_date',
      invoiceId: 'invoice_id',
      itineraryId: 'itinerary_id',
      itineraryTravelStandard: 'itinerary_travel_standard',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      provinceTravelCityAdcodes: 'province_travel_city_adcodes',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      trafficType: 'traffic_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDate: 'string',
      attribute: 'string',
      cityCodeSet: 'string',
      citySet: 'string',
      costCenterId: 'number',
      depDate: 'string',
      invoiceId: 'number',
      itineraryId: 'string',
      itineraryTravelStandard: ApplyModifyRequestItinerarySetListItineraryTravelStandard,
      projectCode: 'string',
      projectTitle: 'string',
      provinceTravelCityAdcodes: { 'type': 'array', 'itemType': 'string' },
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      trafficType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestTravelerList extends $tea.Model {
  attribute?: string;
  costCenterId?: number;
  invoiceId?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  projectCode?: string;
  projectTitle?: string;
  thirdPartInvoiceId?: string;
  thirdpartCostCenterId?: string;
  thirdpartDepartId?: string;
  /**
   * @example
   * GS641312
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      costCenterId: 'cost_center_id',
      invoiceId: 'invoice_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      costCenterId: 'number',
      invoiceId: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartDepartId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestTravelerStandardCarCitySet extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  cityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  cityName?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestTravelerStandardHotelCitys extends $tea.Model {
  /**
   * @example
   * 0
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 1014
   */
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestTravelerStandardHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyRequestTravelerStandard extends $tea.Model {
  /**
   * @example
   * 1
   */
  businessDiscount?: number;
  carCitySet?: ApplyModifyRequestTravelerStandardCarCitySet[];
  /**
   * @example
   * 1
   */
  economyDiscount?: number;
  /**
   * @example
   * 1
   */
  firstDiscount?: number;
  /**
   * @example
   * Y
   */
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyModifyRequestTravelerStandardHotelCitys[];
  hotelIntlCitys?: ApplyModifyRequestTravelerStandardHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  /**
   * @remarks
   * 超级经济舱折扣。1到10的整数
   * 
   * @example
   * 1
   */
  premiumEconomyDiscount?: number;
  /**
   * @example
   * 0
   */
  reserveType?: number;
  trainRuleCode?: number;
  /**
   * @example
   * 1
   */
  trainSeats?: string;
  /**
   * @example
   * thirdpart12138
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      businessDiscount: 'business_discount',
      carCitySet: 'car_city_set',
      economyDiscount: 'economy_discount',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      premiumEconomyDiscount: 'premium_economy_discount',
      reserveType: 'reserve_type',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessDiscount: 'number',
      carCitySet: { 'type': 'array', 'itemType': ApplyModifyRequestTravelerStandardCarCitySet },
      economyDiscount: 'number',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyModifyRequestTravelerStandardHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyModifyRequestTravelerStandardHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      premiumEconomyDiscount: 'number',
      reserveType: 'number',
      trainRuleCode: 'number',
      trainSeats: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyModifyResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 118526587
   */
  applyId?: number;
  /**
   * @example
   * thirdpart12132
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 20220702001
   */
  thirdpartBusinessId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleApproverList extends $tea.Model {
  note?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  operateTime?: string;
  /**
   * @example
   * 1
   */
  order?: number;
  /**
   * @example
   * 0
   */
  status?: number;
  statusDesc?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      note: 'note',
      operateTime: 'operate_time',
      order: 'order',
      status: 'status',
      statusDesc: 'status_desc',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      note: 'string',
      operateTime: 'string',
      order: 'number',
      status: 'number',
      statusDesc: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleCarRule extends $tea.Model {
  scenarioTemplateId?: string;
  scenarioTemplateName?: string;
  static names(): { [key: string]: string } {
    return {
      scenarioTemplateId: 'scenario_template_id',
      scenarioTemplateName: 'scenario_template_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scenarioTemplateId: 'string',
      scenarioTemplateName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys extends $tea.Model {
  /**
   * @example
   * 0
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 100000
   */
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleExternalTravelerListHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleExternalTravelerList extends $tea.Model {
  attribute?: string;
  /**
   * @example
   * 1
   */
  businessDiscount?: number;
  costCenterName?: string;
  departId?: string;
  /**
   * @example
   * 1
   */
  economyDiscount?: number;
  externalUserId?: string;
  /**
   * @example
   * 1
   */
  firstDiscount?: number;
  /**
   * @example
   * F
   */
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys[];
  hotelIntlCitys?: ApplyQueryResponseBodyModuleExternalTravelerListHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  invoiceName?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 1
   */
  premiumEconomyDiscount?: number;
  projectCode?: string;
  projectTitle?: string;
  /**
   * @example
   * 1
   */
  reserveType?: number;
  thirdPartInvoiceId?: string;
  thirdpartCostCenterId?: string;
  thirdpartDepartId?: string;
  trainRuleCode?: number;
  /**
   * @example
   * 1
   */
  trainSeats?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      businessDiscount: 'business_discount',
      costCenterName: 'cost_center_name',
      departId: 'depart_id',
      economyDiscount: 'economy_discount',
      externalUserId: 'external_user_id',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      invoiceName: 'invoice_name',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      premiumEconomyDiscount: 'premium_economy_discount',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      reserveType: 'reserve_type',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      businessDiscount: 'number',
      costCenterName: 'string',
      departId: 'string',
      economyDiscount: 'number',
      externalUserId: 'string',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleExternalTravelerListHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      invoiceName: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      premiumEconomyDiscount: 'number',
      projectCode: 'string',
      projectTitle: 'string',
      reserveType: 'number',
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartDepartId: 'string',
      trainRuleCode: 'number',
      trainSeats: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleHotelShare extends $tea.Model {
  /**
   * @example
   * 70
   */
  param?: string;
  /**
   * @example
   * 1
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      param: 'param',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      param: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard extends $tea.Model {
  hotelAvailableNightsPerDay?: number;
  static names(): { [key: string]: string } {
    return {
      hotelAvailableNightsPerDay: 'hotel_available_nights_per_day',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelAvailableNightsPerDay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleItineraryList extends $tea.Model {
  arrCity?: string;
  /**
   * @example
   * 330100
   */
  arrCityCode?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  arrDate?: string;
  attribute?: string;
  /**
   * @example
   * accac
   */
  costCenterName?: string;
  depCity?: string;
  /**
   * @example
   * 330100
   */
  depCityCode?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  depDate?: string;
  invoiceName?: string;
  itineraryId?: string;
  itineraryTravelStandard?: ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard;
  /**
   * @example
   * xm1
   */
  projectCode?: string;
  projectTitle?: string;
  thirdpartCostCenterId?: string;
  thirdpartInvoiceId?: string;
  thirdpartItineraryId?: string;
  /**
   * @example
   * 1
   */
  trafficType?: number;
  /**
   * @example
   * 1
   */
  tripWay?: number;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrDate: 'arr_date',
      attribute: 'attribute',
      costCenterName: 'cost_center_name',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      invoiceName: 'invoice_name',
      itineraryId: 'itinerary_id',
      itineraryTravelStandard: 'itinerary_travel_standard',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartInvoiceId: 'thirdpart_invoice_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      trafficType: 'traffic_type',
      tripWay: 'trip_way',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrCityCode: 'string',
      arrDate: 'string',
      attribute: 'string',
      costCenterName: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depDate: 'string',
      invoiceName: 'string',
      itineraryId: 'string',
      itineraryTravelStandard: ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard,
      projectCode: 'string',
      projectTitle: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartInvoiceId: 'string',
      thirdpartItineraryId: 'string',
      trafficType: 'number',
      tripWay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard extends $tea.Model {
  hotelAvailableNightsPerDay?: number;
  static names(): { [key: string]: string } {
    return {
      hotelAvailableNightsPerDay: 'hotel_available_nights_per_day',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelAvailableNightsPerDay: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleItinerarySetList extends $tea.Model {
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  arrDate?: string;
  attribute?: string;
  /**
   * @example
   * BJS，HGH
   */
  cityCodeSet?: string;
  citySet?: string;
  costCenterName?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  depDate?: string;
  invoiceName?: string;
  /**
   * @example
   * 12345
   */
  itineraryId?: string;
  itineraryTravelStandard?: ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard;
  /**
   * @example
   * projecttow
   */
  projectCode?: string;
  projectTitle?: string;
  thirdpartCostCenterId?: string;
  thirdpartInvoiceId?: string;
  thirdpartItineraryId?: string;
  /**
   * @example
   * 0
   */
  trafficType?: number;
  static names(): { [key: string]: string } {
    return {
      arrDate: 'arr_date',
      attribute: 'attribute',
      cityCodeSet: 'city_code_set',
      citySet: 'city_set',
      costCenterName: 'cost_center_name',
      depDate: 'dep_date',
      invoiceName: 'invoice_name',
      itineraryId: 'itinerary_id',
      itineraryTravelStandard: 'itinerary_travel_standard',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartInvoiceId: 'thirdpart_invoice_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      trafficType: 'traffic_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDate: 'string',
      attribute: 'string',
      cityCodeSet: 'string',
      citySet: 'string',
      costCenterName: 'string',
      depDate: 'string',
      invoiceName: 'string',
      itineraryId: 'string',
      itineraryTravelStandard: ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard,
      projectCode: 'string',
      projectTitle: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartInvoiceId: 'string',
      thirdpartItineraryId: 'string',
      trafficType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleTravelerListCarCitySet extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleTravelerListHotelCitys extends $tea.Model {
  /**
   * @example
   * 0
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 100000
   */
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleTravelerListHotelIntlCitys extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  fee?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      fee: 'fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      fee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModuleTravelerList extends $tea.Model {
  attribute?: string;
  /**
   * @example
   * 1
   */
  businessDiscount?: number;
  carCitySet?: ApplyQueryResponseBodyModuleTravelerListCarCitySet[];
  costCenterName?: string;
  departId?: string;
  /**
   * @example
   * 1
   */
  economyDiscount?: number;
  /**
   * @example
   * 1
   */
  firstDiscount?: number;
  /**
   * @example
   * F
   */
  flightCabins?: string;
  flightIntlRuleCode?: number;
  flightRuleCode?: number;
  hotelCitys?: ApplyQueryResponseBodyModuleTravelerListHotelCitys[];
  hotelIntlCitys?: ApplyQueryResponseBodyModuleTravelerListHotelIntlCitys[];
  hotelIntlRuleCode?: number;
  hotelRuleCode?: number;
  invoiceName?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 1
   */
  premiumEconomyDiscount?: number;
  projectCode?: string;
  projectTitle?: string;
  /**
   * @example
   * 1
   */
  reserveType?: number;
  thirdPartInvoiceId?: string;
  thirdpartCostCenterId?: string;
  thirdpartDepartId?: string;
  trainRuleCode?: number;
  /**
   * @example
   * 1
   */
  trainSeats?: string;
  /**
   * @example
   * 3423
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      attribute: 'attribute',
      businessDiscount: 'business_discount',
      carCitySet: 'car_city_set',
      costCenterName: 'cost_center_name',
      departId: 'depart_id',
      economyDiscount: 'economy_discount',
      firstDiscount: 'first_discount',
      flightCabins: 'flight_cabins',
      flightIntlRuleCode: 'flight_intl_rule_code',
      flightRuleCode: 'flight_rule_code',
      hotelCitys: 'hotel_citys',
      hotelIntlCitys: 'hotel_intl_citys',
      hotelIntlRuleCode: 'hotel_intl_rule_code',
      hotelRuleCode: 'hotel_rule_code',
      invoiceName: 'invoice_name',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      premiumEconomyDiscount: 'premium_economy_discount',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      reserveType: 'reserve_type',
      thirdPartInvoiceId: 'third_part_invoice_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      trainRuleCode: 'train_rule_code',
      trainSeats: 'train_seats',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      businessDiscount: 'number',
      carCitySet: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleTravelerListCarCitySet },
      costCenterName: 'string',
      departId: 'string',
      economyDiscount: 'number',
      firstDiscount: 'number',
      flightCabins: 'string',
      flightIntlRuleCode: 'number',
      flightRuleCode: 'number',
      hotelCitys: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleTravelerListHotelCitys },
      hotelIntlCitys: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleTravelerListHotelIntlCitys },
      hotelIntlRuleCode: 'number',
      hotelRuleCode: 'number',
      invoiceName: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      premiumEconomyDiscount: 'number',
      projectCode: 'string',
      projectTitle: 'string',
      reserveType: 'number',
      thirdPartInvoiceId: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartDepartId: 'string',
      trainRuleCode: 'number',
      trainSeats: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 201710111505000464651
   */
  applyShowId?: string;
  approverList?: ApplyQueryResponseBodyModuleApproverList[];
  /**
   * @example
   * 100000
   */
  budget?: number;
  /**
   * @example
   * 1
   */
  budgetMerge?: number;
  carRule?: ApplyQueryResponseBodyModuleCarRule;
  /**
   * @example
   * corpid
   */
  corpId?: string;
  corpName?: string;
  /**
   * @example
   * dept1
   */
  departId?: string;
  /**
   * @example
   * adv
   */
  departName?: string;
  /**
   * @remarks
   * 补充描述，账单中将会体现此字段的值。可以用于企业的统计和对账
   * 
   * @example
   * {"cost_center":"成本中心"}
   */
  extendField?: string;
  externalTravelerList?: ApplyQueryResponseBodyModuleExternalTravelerList[];
  /**
   * @example
   * 10000
   */
  flightBudget?: number;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2018-09-19T14:03Z
   */
  gmtModified?: string;
  /**
   * @example
   * 100000
   */
  hotelBudget?: number;
  hotelShare?: ApplyQueryResponseBodyModuleHotelShare;
  /**
   * @example
   * 3298
   */
  id?: number;
  intlFlightBudget?: number;
  intlHotelBudget?: number;
  itineraryList?: ApplyQueryResponseBodyModuleItineraryList[];
  /**
   * @example
   * 0
   */
  itineraryRule?: number;
  itinerarySetList?: ApplyQueryResponseBodyModuleItinerarySetList[];
  /**
   * @example
   * 0
   */
  limitTraveler?: number;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  statusDesc?: string;
  /**
   * @example
   * 1213
   */
  thirdpartBusinessId?: string;
  /**
   * @example
   * 1214254
   */
  thirdpartId?: string;
  /**
   * @example
   * 1
   */
  togetherBookRule?: number;
  /**
   * @example
   * 10000
   */
  trainBudget?: number;
  travelerList?: ApplyQueryResponseBodyModuleTravelerList[];
  tripCause?: string;
  /**
   * @example
   * 2
   */
  tripDay?: number;
  tripTitle?: string;
  /**
   * @example
   * 2
   */
  type?: number;
  /**
   * @example
   * abd123
   */
  unionNo?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 10000
   */
  vehicleBudget?: number;
  static names(): { [key: string]: string } {
    return {
      applyShowId: 'apply_show_id',
      approverList: 'approver_list',
      budget: 'budget',
      budgetMerge: 'budget_merge',
      carRule: 'car_rule',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      extendField: 'extend_field',
      externalTravelerList: 'external_traveler_list',
      flightBudget: 'flight_budget',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      hotelBudget: 'hotel_budget',
      hotelShare: 'hotel_share',
      id: 'id',
      intlFlightBudget: 'intl_flight_budget',
      intlHotelBudget: 'intl_hotel_budget',
      itineraryList: 'itinerary_list',
      itineraryRule: 'itinerary_rule',
      itinerarySetList: 'itinerary_set_list',
      limitTraveler: 'limit_traveler',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      status: 'status',
      statusDesc: 'status_desc',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartId: 'thirdpart_id',
      togetherBookRule: 'together_book_rule',
      trainBudget: 'train_budget',
      travelerList: 'traveler_list',
      tripCause: 'trip_cause',
      tripDay: 'trip_day',
      tripTitle: 'trip_title',
      type: 'type',
      unionNo: 'union_no',
      userId: 'user_id',
      userName: 'user_name',
      vehicleBudget: 'vehicle_budget',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyShowId: 'string',
      approverList: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleApproverList },
      budget: 'number',
      budgetMerge: 'number',
      carRule: ApplyQueryResponseBodyModuleCarRule,
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      extendField: 'string',
      externalTravelerList: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleExternalTravelerList },
      flightBudget: 'number',
      gmtCreate: 'string',
      gmtModified: 'string',
      hotelBudget: 'number',
      hotelShare: ApplyQueryResponseBodyModuleHotelShare,
      id: 'number',
      intlFlightBudget: 'number',
      intlHotelBudget: 'number',
      itineraryList: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleItineraryList },
      itineraryRule: 'number',
      itinerarySetList: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleItinerarySetList },
      limitTraveler: 'number',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      status: 'number',
      statusDesc: 'string',
      thirdpartBusinessId: 'string',
      thirdpartId: 'string',
      togetherBookRule: 'number',
      trainBudget: 'number',
      travelerList: { 'type': 'array', 'itemType': ApplyQueryResponseBodyModuleTravelerList },
      tripCause: 'string',
      tripDay: 'number',
      tripTitle: 'string',
      type: 'number',
      unionNo: 'string',
      userId: 'string',
      userName: 'string',
      vehicleBudget: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BaseCityInfoSearchResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 330100
   */
  code?: string;
  name?: string;
  nameTree?: string;
  /**
   * @example
   * 0
   */
  region?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      name: 'name',
      nameTree: 'nameTree',
      region: 'region',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      name: 'string',
      nameTree: 'string',
      region: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyAddRequestTravelerStandardCarCitySet extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  cityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  cityName?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyAddRequestTravelerStandard extends $tea.Model {
  carCitySet?: CarApplyAddRequestTravelerStandardCarCitySet[];
  /**
   * @remarks
   * This parameter is required.
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      carCitySet: 'car_city_set',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      carCitySet: { 'type': 'array', 'itemType': CarApplyAddRequestTravelerStandardCarCitySet },
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryResponseBodyApplyListApproverList extends $tea.Model {
  note?: string;
  /**
   * @example
   * 2021-03-18T20:26Z
   */
  operateTime?: string;
  /**
   * @example
   * 1
   */
  order?: number;
  /**
   * @example
   * 1
   */
  status?: number;
  statusDesc?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      note: 'note',
      operateTime: 'operate_time',
      order: 'order',
      status: 'status',
      statusDesc: 'status_desc',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      note: 'string',
      operateTime: 'string',
      order: 'number',
      status: 'number',
      statusDesc: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryResponseBodyApplyListItineraryList extends $tea.Model {
  arrCity?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * 2021-03-18T20:26Z
   */
  arrDate?: string;
  /**
   * @example
   * 1
   */
  costCenterId?: number;
  costCenterName?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * 2021-03-18T20:26Z
   */
  depDate?: string;
  /**
   * @example
   * 1
   */
  invoiceId?: number;
  invoiceName?: string;
  /**
   * @example
   * 1
   */
  itineraryId?: string;
  /**
   * @example
   * xm1
   */
  projectCode?: string;
  projectTitle?: string;
  /**
   * @example
   * 4
   */
  trafficType?: number;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrDate: 'arr_date',
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      invoiceId: 'invoice_id',
      invoiceName: 'invoice_name',
      itineraryId: 'itinerary_id',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      trafficType: 'traffic_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrCityCode: 'string',
      arrDate: 'string',
      costCenterId: 'number',
      costCenterName: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depDate: 'string',
      invoiceId: 'number',
      invoiceName: 'string',
      itineraryId: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      trafficType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryResponseBodyApplyListTravelerStandardCarCitySet extends $tea.Model {
  cityCode?: string;
  cityName?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryResponseBodyApplyListTravelerStandard extends $tea.Model {
  carCitySet?: CarApplyQueryResponseBodyApplyListTravelerStandardCarCitySet[];
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      carCitySet: 'car_city_set',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      carCitySet: { 'type': 'array', 'itemType': CarApplyQueryResponseBodyApplyListTravelerStandardCarCitySet },
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarApplyQueryResponseBodyApplyList extends $tea.Model {
  approverList?: CarApplyQueryResponseBodyApplyListApproverList[];
  businessType?: string;
  /**
   * @example
   * depart1
   */
  departId?: string;
  departName?: string;
  /**
   * @example
   * 2021-03-18T20:26Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2021-03-18T20:26Z
   */
  gmtModified?: string;
  itineraryList?: CarApplyQueryResponseBodyApplyListItineraryList[];
  orderId?: number;
  relatedThirdApplyId?: string;
  /**
   * @example
   * 2
   */
  status?: number;
  statusDesc?: string;
  /**
   * @example
   * 1
   */
  thirdpartId?: string;
  travelerStandard?: CarApplyQueryResponseBodyApplyListTravelerStandard[];
  tripCause?: string;
  tripTitle?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      approverList: 'approver_list',
      businessType: 'business_type',
      departId: 'depart_id',
      departName: 'depart_name',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      itineraryList: 'itinerary_list',
      orderId: 'order_id',
      relatedThirdApplyId: 'related_third_apply_id',
      status: 'status',
      statusDesc: 'status_desc',
      thirdpartId: 'thirdpart_id',
      travelerStandard: 'traveler_standard',
      tripCause: 'trip_cause',
      tripTitle: 'trip_title',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approverList: { 'type': 'array', 'itemType': CarApplyQueryResponseBodyApplyListApproverList },
      businessType: 'string',
      departId: 'string',
      departName: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      itineraryList: { 'type': 'array', 'itemType': CarApplyQueryResponseBodyApplyListItineraryList },
      orderId: 'number',
      relatedThirdApplyId: 'string',
      status: 'number',
      statusDesc: 'string',
      thirdpartId: 'string',
      travelerStandard: { 'type': 'array', 'itemType': CarApplyQueryResponseBodyApplyListTravelerStandard },
      tripCause: 'string',
      tripTitle: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarBillSettlementQueryResponseBodyModuleDataList extends $tea.Model {
  /**
   * @example
   * 34534543545345
   */
  alipayTradeNo?: string;
  applyArrCityCode?: string;
  applyArrCityName?: string;
  applyDepCityCode?: string;
  applyDepCityName?: string;
  /**
   * @remarks
   * 审批扩展自定义字段
   */
  applyExtendField?: string;
  applyId?: string;
  arrCity?: string;
  arrCityCode?: string;
  /**
   * @example
   * 2022-07-02
   */
  arrDate?: string;
  arrLocation?: string;
  /**
   * @example
   * 13:51:43
   */
  arrTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  billRecordTime?: string;
  billingEntity?: string;
  bookModel?: string;
  /**
   * @example
   * 2022-05-15 22:27:00
   */
  bookTime?: string;
  bookerId?: string;
  /**
   * @example
   * 70022164
   */
  bookerJobNo?: string;
  bookerName?: string;
  businessCategory?: string;
  /**
   * @example
   * 1
   */
  capitalDirection?: string;
  carLevel?: string;
  cascadeDepartment?: string;
  costCenter?: string;
  /**
   * @example
   * 2391-CN90.150
   */
  costCenterNumber?: string;
  /**
   * @example
   * 1
   */
  coupon?: number;
  /**
   * @example
   * 12.7
   */
  couponPrice?: number;
  deductibleTax?: number;
  depCityCode?: string;
  department?: string;
  departmentId?: string;
  deptCity?: string;
  /**
   * @example
   * 2021-10-13
   */
  deptDate?: string;
  deptLocation?: string;
  /**
   * @example
   * 13:46:05
   */
  deptTime?: string;
  driverAddDetail?: string;
  driverAddFee?: number;
  /**
   * @example
   * 29.07
   */
  estimateDriveDistance?: string;
  /**
   * @example
   * 69
   */
  estimatePrice?: number;
  /**
   * @example
   * 40107
   */
  feeType?: string;
  /**
   * @example
   * 4988580
   */
  index?: string;
  invoiceTitle?: string;
  levelName?: string;
  memo?: string;
  /**
   * @example
   * 110285961234324
   */
  orderId?: string;
  /**
   * @example
   * 12.7
   */
  orderPrice?: number;
  /**
   * @example
   * 34535465346
   */
  overApplyId?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 0
   */
  personSettleFee?: number;
  /**
   * @example
   * 4988580
   */
  primaryId?: number;
  /**
   * @example
   * 23423432423
   */
  projectCode?: string;
  projectName?: string;
  providerName?: string;
  /**
   * @example
   * 0.00
   */
  realDriveDistance?: string;
  realFromAddr?: string;
  realToAddr?: string;
  remark?: string;
  sceneId?: string;
  sceneName?: string;
  /**
   * @example
   * 12.7
   */
  serviceFee?: number;
  /**
   * @example
   * 5
   */
  settlementFee?: number;
  /**
   * @example
   * 6.11
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2022-05-15 22:27:00
   */
  settlementTime?: string;
  /**
   * @example
   * 4
   */
  settlementType?: string;
  specialOrder?: string;
  specialReason?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 123123232
   */
  subOrderId?: string;
  supplementApplyId?: string;
  /**
   * @remarks
   * 税率
   * 
   * @example
   * 6%
   */
  taxRate?: string;
  thirdItineraryId?: string;
  timeType?: string;
  travelerId?: string;
  /**
   * @example
   * 70022164
   */
  travelerJobNo?: string;
  travelerMemberTypeName?: string;
  travelerName?: string;
  userConfirmDesc?: string;
  vehicleSceneId?: string;
  vehicleSceneName?: string;
  /**
   * @example
   * 11
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrDate: 'arr_date',
      arrLocation: 'arr_location',
      arrTime: 'arr_time',
      billRecordTime: 'bill_record_time',
      billingEntity: 'billing_entity',
      bookModel: 'book_model',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      businessCategory: 'business_category',
      capitalDirection: 'capital_direction',
      carLevel: 'car_level',
      cascadeDepartment: 'cascade_department',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      coupon: 'coupon',
      couponPrice: 'coupon_price',
      deductibleTax: 'deductible_tax',
      depCityCode: 'dep_city_code',
      department: 'department',
      departmentId: 'department_id',
      deptCity: 'dept_city',
      deptDate: 'dept_date',
      deptLocation: 'dept_location',
      deptTime: 'dept_time',
      driverAddDetail: 'driver_add_detail',
      driverAddFee: 'driver_add_fee',
      estimateDriveDistance: 'estimate_drive_distance',
      estimatePrice: 'estimate_price',
      feeType: 'fee_type',
      index: 'index',
      invoiceTitle: 'invoice_title',
      levelName: 'level_name',
      memo: 'memo',
      orderId: 'order_id',
      orderPrice: 'order_price',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      personSettleFee: 'person_settle_fee',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      providerName: 'provider_name',
      realDriveDistance: 'real_drive_distance',
      realFromAddr: 'real_from_addr',
      realToAddr: 'real_to_addr',
      remark: 'remark',
      sceneId: 'scene_id',
      sceneName: 'scene_name',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      specialOrder: 'special_order',
      specialReason: 'special_reason',
      status: 'status',
      subOrderId: 'sub_order_id',
      supplementApplyId: 'supplement_apply_id',
      taxRate: 'tax_rate',
      thirdItineraryId: 'third_itinerary_id',
      timeType: 'time_type',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberTypeName: 'traveler_member_type_name',
      travelerName: 'traveler_name',
      userConfirmDesc: 'user_confirm_desc',
      vehicleSceneId: 'vehicle_scene_id',
      vehicleSceneName: 'vehicle_scene_name',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrDate: 'string',
      arrLocation: 'string',
      arrTime: 'string',
      billRecordTime: 'string',
      billingEntity: 'string',
      bookModel: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      businessCategory: 'string',
      capitalDirection: 'string',
      carLevel: 'string',
      cascadeDepartment: 'string',
      costCenter: 'string',
      costCenterNumber: 'string',
      coupon: 'number',
      couponPrice: 'number',
      deductibleTax: 'number',
      depCityCode: 'string',
      department: 'string',
      departmentId: 'string',
      deptCity: 'string',
      deptDate: 'string',
      deptLocation: 'string',
      deptTime: 'string',
      driverAddDetail: 'string',
      driverAddFee: 'number',
      estimateDriveDistance: 'string',
      estimatePrice: 'number',
      feeType: 'string',
      index: 'string',
      invoiceTitle: 'string',
      levelName: 'string',
      memo: 'string',
      orderId: 'string',
      orderPrice: 'number',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      personSettleFee: 'number',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      providerName: 'string',
      realDriveDistance: 'string',
      realFromAddr: 'string',
      realToAddr: 'string',
      remark: 'string',
      sceneId: 'string',
      sceneName: 'string',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      specialOrder: 'string',
      specialReason: 'string',
      status: 'number',
      subOrderId: 'string',
      supplementApplyId: 'string',
      taxRate: 'string',
      thirdItineraryId: 'string',
      timeType: 'string',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberTypeName: 'string',
      travelerName: 'string',
      userConfirmDesc: 'string',
      vehicleSceneId: 'string',
      vehicleSceneName: 'string',
      voucherType: 'number',
      voucherTypeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 4
   */
  category?: number;
  corpId?: string;
  dataList?: CarBillSettlementQueryResponseBodyModuleDataList[];
  /**
   * @example
   * 2021-10-14
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-13
   */
  periodStart?: string;
  /**
   * @example
   * 2695
   */
  totalNum?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      dataList: 'data_list',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalNum: 'total_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      dataList: { 'type': 'array', 'itemType': CarBillSettlementQueryResponseBodyModuleDataList },
      periodEnd: 'string',
      periodStart: 'string',
      totalNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 1
   */
  categoryType?: number;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  gmtCreate?: string;
  passengerName?: string;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * 100
   */
  personPrice?: number;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 8908076767
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      categoryType: 'category_type',
      gmtCreate: 'gmt_create',
      passengerName: 'passenger_name',
      payType: 'pay_type',
      personPrice: 'person_price',
      price: 'price',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      categoryType: 'number',
      gmtCreate: 'string',
      passengerName: 'string',
      payType: 'number',
      personPrice: 'number',
      price: 'number',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryResponseBodyModuleUserAffiliateList extends $tea.Model {
  /**
   * @example
   * 11342
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 117429516
   */
  applyId?: number;
  /**
   * @example
   * 201802031353000525653
   */
  applyShowId?: string;
  btripTitle?: string;
  /**
   * @example
   * TRAVEL
   */
  businessCategory?: string;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  cancelTime?: string;
  carInfo?: string;
  /**
   * @example
   * 1
   */
  carLevel?: number;
  corpId?: string;
  corpName?: string;
  /**
   * @example
   * 11376
   */
  costCenterId?: number;
  costCenterName?: string;
  /**
   * @example
   * CT-134JHK
   */
  costCenterNumber?: string;
  deptId?: number;
  deptName?: string;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  driverConfirmTime?: string;
  /**
   * @example
   * 100
   */
  estimatePrice?: number;
  fromAddress?: string;
  fromCityAdCode?: string;
  fromCityName?: string;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  gmtModified?: string;
  /**
   * @example
   * 3615085
   */
  id?: number;
  /**
   * @example
   * 11876
   */
  invoiceId?: number;
  invoiceTitle?: string;
  /**
   * @example
   * true
   */
  isSpecial?: boolean;
  memo?: string;
  orderId?: string;
  orderStatus?: number;
  passengerName?: string;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  payTime?: string;
  priceInfoList?: CarOrderListQueryResponseBodyModulePriceInfoList[];
  /**
   * @example
   * P- JI87KK
   */
  projectCode?: string;
  /**
   * @example
   * 11546
   */
  projectId?: number;
  projectTitle?: string;
  /**
   * @example
   * 2
   */
  provider?: number;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  publishTime?: string;
  realFromAddress?: string;
  realFromCityAdCode?: string;
  realFromCityName?: string;
  realToAddress?: string;
  realToCityAdCode?: string;
  realToCityName?: string;
  /**
   * @example
   * 1
   */
  serviceType?: number;
  specialTypes?: string[];
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  takenTime?: string;
  /**
   * @example
   * CS-OIPK34H
   */
  thirdpartApplyId?: string;
  thirdpartBusinessId?: string;
  /**
   * @example
   * CS-112JKDF
   */
  thirdpartItineraryId?: string;
  toAddress?: string;
  toCityAdCode?: string;
  toCityName?: string;
  /**
   * @example
   * 1.2
   */
  travelDistance?: number;
  userAffiliateList?: CarOrderListQueryResponseBodyModuleUserAffiliateList[];
  /**
   * @example
   * 1
   */
  userConfirm?: number;
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      applyShowId: 'apply_show_id',
      btripTitle: 'btrip_title',
      businessCategory: 'business_category',
      cancelTime: 'cancel_time',
      carInfo: 'car_info',
      carLevel: 'car_level',
      corpId: 'corp_id',
      corpName: 'corp_name',
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      deptId: 'dept_id',
      deptName: 'dept_name',
      driverConfirmTime: 'driver_confirm_time',
      estimatePrice: 'estimate_price',
      fromAddress: 'from_address',
      fromCityAdCode: 'from_city_ad_code',
      fromCityName: 'from_city_name',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      id: 'id',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      isSpecial: 'is_special',
      memo: 'memo',
      orderId: 'order_id',
      orderStatus: 'order_status',
      passengerName: 'passenger_name',
      payTime: 'pay_time',
      priceInfoList: 'price_info_list',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      provider: 'provider',
      publishTime: 'publish_time',
      realFromAddress: 'real_from_address',
      realFromCityAdCode: 'real_from_city_ad_code',
      realFromCityName: 'real_from_city_name',
      realToAddress: 'real_to_address',
      realToCityAdCode: 'real_to_city_ad_code',
      realToCityName: 'real_to_city_name',
      serviceType: 'service_type',
      specialTypes: 'special_types',
      takenTime: 'taken_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      toAddress: 'to_address',
      toCityAdCode: 'to_city_ad_code',
      toCityName: 'to_city_name',
      travelDistance: 'travel_distance',
      userAffiliateList: 'user_affiliate_list',
      userConfirm: 'user_confirm',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      applyShowId: 'string',
      btripTitle: 'string',
      businessCategory: 'string',
      cancelTime: 'string',
      carInfo: 'string',
      carLevel: 'number',
      corpId: 'string',
      corpName: 'string',
      costCenterId: 'number',
      costCenterName: 'string',
      costCenterNumber: 'string',
      deptId: 'number',
      deptName: 'string',
      driverConfirmTime: 'string',
      estimatePrice: 'number',
      fromAddress: 'string',
      fromCityAdCode: 'string',
      fromCityName: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      invoiceId: 'number',
      invoiceTitle: 'string',
      isSpecial: 'boolean',
      memo: 'string',
      orderId: 'string',
      orderStatus: 'number',
      passengerName: 'string',
      payTime: 'string',
      priceInfoList: { 'type': 'array', 'itemType': CarOrderListQueryResponseBodyModulePriceInfoList },
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      provider: 'number',
      publishTime: 'string',
      realFromAddress: 'string',
      realFromCityAdCode: 'string',
      realFromCityName: 'string',
      realToAddress: 'string',
      realToCityAdCode: 'string',
      realToCityName: 'string',
      serviceType: 'number',
      specialTypes: { 'type': 'array', 'itemType': 'string' },
      takenTime: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartItineraryId: 'string',
      toAddress: 'string',
      toCityAdCode: 'string',
      toCityName: 'string',
      travelDistance: 'number',
      userAffiliateList: { 'type': 'array', 'itemType': CarOrderListQueryResponseBodyModuleUserAffiliateList },
      userConfirm: 'number',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderListQueryResponseBodyPageInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 1000
   */
  totalNumber?: number;
  static names(): { [key: string]: string } {
    return {
      page: 'page',
      pageSize: 'page_size',
      totalNumber: 'total_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      page: 'number',
      pageSize: 'number',
      totalNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponseBodyModuleCarInfo extends $tea.Model {
  /**
   * @example
   * TRAVEL
   */
  businessCategory?: string;
  /**
   * @example
   * 1669274251000
   */
  cancelTime?: number;
  carInfo?: string;
  /**
   * @example
   * 601
   */
  carLevel?: number;
  driverCard?: string;
  /**
   * @example
   * 1669274251000
   */
  driverConfirmTime?: number;
  driverName?: string;
  /**
   * @example
   * 2900
   */
  estimatePrice?: number;
  fromAddress?: string;
  fromCityAdCode?: string;
  fromCityName?: string;
  /**
   * @example
   * true
   */
  isSpecial?: boolean;
  memo?: string;
  /**
   * @example
   * 1669274251000
   */
  payTime?: number;
  /**
   * @example
   * 1669274251000
   */
  publishTime?: number;
  realFromAddress?: string;
  realFromCityAdCode?: string;
  realFromCityName?: string;
  realToAddress?: string;
  realToCityAdCode?: string;
  realToCityName?: string;
  /**
   * @example
   * 3
   */
  serviceType?: number;
  /**
   * @example
   * v_sp_t_1,v_sp_t_2,v_sp_t_3,v_sp_t_4,v_sp_t_5
   */
  specialTypes?: string;
  /**
   * @example
   * 1669274251000
   */
  takenTime?: number;
  toAddress?: string;
  toCityAdCode?: string;
  toCityName?: string;
  /**
   * @example
   * 12
   */
  travelDistance?: string;
  static names(): { [key: string]: string } {
    return {
      businessCategory: 'business_category',
      cancelTime: 'cancel_time',
      carInfo: 'car_info',
      carLevel: 'car_level',
      driverCard: 'driver_card',
      driverConfirmTime: 'driver_confirm_time',
      driverName: 'driver_name',
      estimatePrice: 'estimate_price',
      fromAddress: 'from_address',
      fromCityAdCode: 'from_city_ad_code',
      fromCityName: 'from_city_name',
      isSpecial: 'is_special',
      memo: 'memo',
      payTime: 'pay_time',
      publishTime: 'publish_time',
      realFromAddress: 'real_from_address',
      realFromCityAdCode: 'real_from_city_ad_code',
      realFromCityName: 'real_from_city_name',
      realToAddress: 'real_to_address',
      realToCityAdCode: 'real_to_city_ad_code',
      realToCityName: 'real_to_city_name',
      serviceType: 'service_type',
      specialTypes: 'special_types',
      takenTime: 'taken_time',
      toAddress: 'to_address',
      toCityAdCode: 'to_city_ad_code',
      toCityName: 'to_city_name',
      travelDistance: 'travel_distance',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessCategory: 'string',
      cancelTime: 'number',
      carInfo: 'string',
      carLevel: 'number',
      driverCard: 'string',
      driverConfirmTime: 'number',
      driverName: 'string',
      estimatePrice: 'number',
      fromAddress: 'string',
      fromCityAdCode: 'string',
      fromCityName: 'string',
      isSpecial: 'boolean',
      memo: 'string',
      payTime: 'number',
      publishTime: 'number',
      realFromAddress: 'string',
      realFromCityAdCode: 'string',
      realFromCityName: 'string',
      realToAddress: 'string',
      realToCityAdCode: 'string',
      realToCityName: 'string',
      serviceType: 'number',
      specialTypes: 'string',
      takenTime: 'number',
      toAddress: 'string',
      toCityAdCode: 'string',
      toCityName: 'string',
      travelDistance: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponseBodyModuleInvoiceInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  id?: number;
  /**
   * @example
   * xxxx
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponseBodyModuleOrderBaseInfo extends $tea.Model {
  /**
   * @example
   * xxxxx
   */
  applyId?: string;
  btripCause?: string;
  btripTitle?: string;
  /**
   * @example
   * xxxxxxxx
   */
  corpId?: string;
  corpName?: string;
  /**
   * @example
   * 10101010
   */
  departId?: string;
  departName?: string;
  /**
   * @example
   * 1669274251000
   */
  gmtCreate?: number;
  /**
   * @example
   * 1669274251000
   */
  gmtModified?: number;
  /**
   * @example
   * xxxxx
   */
  itineraryId?: string;
  /**
   * @example
   * 1012000000000000
   */
  orderId?: number;
  /**
   * @example
   * 5
   */
  orderStatus?: number;
  /**
   * @example
   * 100000
   */
  subOrderId?: number;
  /**
   * @example
   * thirdpart_1010101010
   */
  thirdDepartId?: string;
  /**
   * @example
   * xxxxx
   */
  thirdpartApplyId?: string;
  thirdpartBusinessId?: string;
  /**
   * @example
   * xxxxx
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * xxxxxxxx
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      btripCause: 'btrip_cause',
      btripTitle: 'btrip_title',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      itineraryId: 'itinerary_id',
      orderId: 'order_id',
      orderStatus: 'order_status',
      subOrderId: 'sub_order_id',
      thirdDepartId: 'third_depart_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      btripCause: 'string',
      btripTitle: 'string',
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      itineraryId: 'string',
      orderId: 'number',
      orderStatus: 'number',
      subOrderId: 'number',
      thirdDepartId: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartItineraryId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponseBodyModulePassengerList extends $tea.Model {
  /**
   * @example
   * costId
   */
  costCenterId?: number;
  /**
   * @example
   * costName
   */
  costCenterName?: string;
  /**
   * @example
   * costNumber
   */
  costCenterNumber?: string;
  /**
   * @example
   * projectCode1
   */
  projectCode?: string;
  /**
   * @example
   * projectId
   */
  projectId?: number;
  projectTitle?: string;
  /**
   * @example
   * thirdpartCostId
   */
  thirdpartCostCenterId?: string;
  /**
   * @example
   * thirdpartProjectId
   */
  thirdpartProjectId?: string;
  /**
   * @example
   * userId
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 1
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartProjectId: 'thirdpart_project_id',
      userId: 'user_id',
      userName: 'user_name',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterId: 'number',
      costCenterName: 'string',
      costCenterNumber: 'string',
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartProjectId: 'string',
      userId: 'string',
      userName: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 1669274251000
   */
  gmtCreate?: number;
  /**
   * @example
   * 4
   */
  payType?: number;
  /**
   * @example
   * 1000
   */
  personPrice?: number;
  /**
   * @example
   * 2000
   */
  price?: number;
  /**
   * @example
   * 1012000000001
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      gmtCreate: 'gmt_create',
      payType: 'pay_type',
      personPrice: 'person_price',
      price: 'price',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      gmtCreate: 'number',
      payType: 'number',
      personPrice: 'number',
      price: 'number',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarOrderQueryResponseBodyModule extends $tea.Model {
  carInfo?: CarOrderQueryResponseBodyModuleCarInfo;
  invoiceInfo?: CarOrderQueryResponseBodyModuleInvoiceInfo;
  orderBaseInfo?: CarOrderQueryResponseBodyModuleOrderBaseInfo;
  passengerList?: CarOrderQueryResponseBodyModulePassengerList[];
  priceInfoList?: CarOrderQueryResponseBodyModulePriceInfoList[];
  static names(): { [key: string]: string } {
    return {
      carInfo: 'car_info',
      invoiceInfo: 'invoice_info',
      orderBaseInfo: 'order_base_info',
      passengerList: 'passenger_list',
      priceInfoList: 'price_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      carInfo: CarOrderQueryResponseBodyModuleCarInfo,
      invoiceInfo: CarOrderQueryResponseBodyModuleInvoiceInfo,
      orderBaseInfo: CarOrderQueryResponseBodyModuleOrderBaseInfo,
      passengerList: { 'type': 'array', 'itemType': CarOrderQueryResponseBodyModulePassengerList },
      priceInfoList: { 'type': 'array', 'itemType': CarOrderQueryResponseBodyModulePriceInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CarSceneQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * travel
   */
  scenarioTemplateId?: string;
  scenarioTemplateName?: string;
  /**
   * @example
   * ACTIVATE
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      scenarioTemplateId: 'scenarioTemplateId',
      scenarioTemplateName: 'scenarioTemplateName',
      state: 'state',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scenarioTemplateId: 'string',
      scenarioTemplateName: 'string',
      state: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChannelCorpCreateResponseBodyModule extends $tea.Model {
  administratorName?: string;
  /**
   * @example
   * 18378889782
   */
  administratorPhone?: string;
  /**
   * @example
   * dingaa15ca45cba9ee744a5
   */
  corpId?: string;
  corpName?: string;
  /**
   * @example
   * open12mplkebufu8701012jq
   */
  openAgentId?: string;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      administratorName: 'administrator_name',
      administratorPhone: 'administrator_phone',
      corpId: 'corp_id',
      corpName: 'corp_name',
      openAgentId: 'open_agent_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      administratorName: 'string',
      administratorPhone: 'string',
      corpId: 'string',
      corpName: 'string',
      openAgentId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CitySearchResponseBodyModuleCities extends $tea.Model {
  /**
   * @example
   * 330100
   */
  code?: string;
  name?: string;
  /**
   * @example
   * 0
   */
  region?: number;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      name: 'name',
      region: 'region',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      name: 'string',
      region: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CitySearchResponseBodyModule extends $tea.Model {
  cities?: CitySearchResponseBodyModuleCities[];
  static names(): { [key: string]: string } {
    return {
      cities: 'cities',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cities: { 'type': 'array', 'itemType': CitySearchResponseBodyModuleCities },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CommonApplyQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 123
   */
  applyId?: number;
  /**
   * @example
   * 5
   */
  bizCategory?: number;
  cause?: string;
  /**
   * @example
   * 0001A1100000007EX08O
   */
  corpId?: string;
  extendValue?: string;
  /**
   * @example
   * 2021-03-18T20:26Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  /**
   * @example
   * 1233
   */
  thirdpartCorpId?: string;
  /**
   * @example
   * 12344
   */
  thirdpartId?: string;
  tripCause?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      bizCategory: 'biz_category',
      cause: 'cause',
      corpId: 'corp_id',
      extendValue: 'extend_value',
      gmtCreate: 'gmt_create',
      status: 'status',
      thirdpartCorpId: 'thirdpart_corp_id',
      thirdpartId: 'thirdpart_id',
      tripCause: 'trip_cause',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      bizCategory: 'number',
      cause: 'string',
      corpId: 'string',
      extendValue: 'string',
      gmtCreate: 'string',
      status: 'number',
      thirdpartCorpId: 'string',
      thirdpartId: 'string',
      tripCause: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorFlightBillSettlementQueryResponseBodyModuleItems extends $tea.Model {
  /**
   * @example
   * 1
   */
  advanceDay?: number;
  /**
   * @example
   * AB
   */
  airlineCorpCode?: string;
  airlineCorpName?: string;
  /**
   * @example
   * 123aaa
   */
  alipayId?: string;
  /**
   * @example
   * a123
   */
  alipayTradeNo?: string;
  /**
   * @example
   * CD
   */
  applyArrCityCode?: string;
  applyArrCityName?: string;
  /**
   * @example
   * AB
   */
  applyDepCityCode?: string;
  applyDepCityName?: string;
  applyExtendField?: string;
  /**
   * @example
   * 1004430880
   */
  applyId?: string;
  /**
   * @example
   * CKG
   */
  arrAirportCode?: string;
  arrCity?: string;
  /**
   * @example
   * CKG
   */
  arrCityCode?: string;
  /**
   * @example
   * 2023-01-01
   */
  arrDate?: string;
  arrStation?: string;
  /**
   * @example
   * 12:00:00
   */
  arrTime?: string;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  billRecordTime?: string;
  bookMode?: string;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  bookTime?: string;
  /**
   * @example
   * 1234
   */
  bookerId?: string;
  /**
   * @example
   * A1234
   */
  bookerJobNo?: string;
  bookerName?: string;
  /**
   * @example
   * 100.0
   */
  btripCouponFee?: number;
  /**
   * @example
   * 50.0
   */
  buildFee?: number;
  businessTripResult?: string;
  /**
   * @example
   * A
   */
  cabin?: string;
  /**
   * @example
   * YS
   */
  cabinClass?: string;
  capitalDirection?: string;
  cascadeDepartment?: string;
  /**
   * @example
   * 100.0
   */
  changeFee?: number;
  changeResult?: string;
  /**
   * @example
   * IN240102113438277278
   */
  cooperatorBillCode?: string;
  cooperatorName?: string;
  /**
   * @example
   * DF24020163776907739
   */
  cooperatorOrderId?: string;
  /**
   * @example
   * 100.0
   */
  corpPayOrderFee?: number;
  /**
   * @example
   * 100.0
   */
  corpSettlePrice?: number;
  costCenter?: string;
  /**
   * @example
   * cs1
   */
  costCenterNumber?: string;
  /**
   * @example
   * 0.0
   */
  coupon?: number;
  /**
   * @example
   * JHG
   */
  depAirportCode?: string;
  /**
   * @example
   * TAO
   */
  depCityCode?: string;
  department?: string;
  /**
   * @example
   * 1112
   */
  departmentId?: string;
  deptCity?: string;
  /**
   * @example
   * 2023-01-01
   */
  deptDate?: string;
  deptStation?: string;
  /**
   * @example
   * 09:30:00
   */
  deptTime?: string;
  /**
   * @example
   * 1
   */
  discount?: string;
  exceedReason?: string;
  feeType?: string;
  /**
   * @example
   * CZ3590
   */
  flightNo?: string;
  /**
   * @example
   * 1
   */
  index?: string;
  /**
   * @example
   * 111
   */
  insOrderId?: string;
  /**
   * @example
   * 0.0
   */
  insuranceFee?: number;
  /**
   * @example
   * 1234A
   */
  insuranceNumber?: string;
  invoiceTitle?: string;
  itemType?: string;
  /**
   * @example
   * 6666666666
   */
  itineraryNum?: string;
  /**
   * @example
   * 100.0
   */
  itineraryPrice?: number;
  /**
   * @example
   * 100
   */
  mileage?: number;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  mostDifferenceDeptTime?: string;
  /**
   * @example
   * 1
   */
  mostDifferenceDiscount?: string;
  /**
   * @example
   * 123
   */
  mostDifferenceFlightNo?: string;
  /**
   * @example
   * 100.0
   */
  mostDifferencePrice?: number;
  mostDifferenceReason?: string;
  /**
   * @example
   * 100.0
   */
  mostPrice?: number;
  /**
   * @example
   * 0.0
   */
  negotiationCouponFee?: number;
  /**
   * @example
   * 30.0
   */
  oilFee?: number;
  /**
   * @example
   * 3137168772101111000
   */
  orderId?: string;
  orderStatusDesc?: string;
  /**
   * @example
   * 123
   */
  overApplyId?: string;
  /**
   * @example
   * 123
   */
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 100.0
   */
  personSettlePrice?: number;
  preBookTip?: string;
  /**
   * @example
   * 60399513
   */
  primaryId?: number;
  /**
   * @example
   * acs
   */
  projectCode?: string;
  projectName?: string;
  /**
   * @example
   * 100.0
   */
  refundFee?: number;
  refundResult?: string;
  /**
   * @example
   * 20.0
   */
  refundUpgradeCost?: number;
  remark?: string;
  repeatRefund?: string;
  /**
   * @example
   * 100.0
   */
  sealPrice?: number;
  /**
   * @example
   * 0.0
   */
  serviceFee?: number;
  /**
   * @example
   * 200.0
   */
  settlementFee?: number;
  /**
   * @example
   * 0.0
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  settlementTime?: string;
  settlementType?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  /**
   * @example
   * 169551103
   */
  subOrderId?: string;
  /**
   * @example
   * 9%
   */
  taxRate?: string;
  /**
   * @example
   * cs2
   */
  thirdInvoiceId?: string;
  /**
   * @example
   * 11
   */
  thirdItineraryId?: string;
  /**
   * @example
   * 123-2345
   */
  ticketId?: string;
  /**
   * @example
   * 1
   */
  trade?: string;
  /**
   * @example
   * A1234
   */
  travelerId?: string;
  /**
   * @example
   * A1234
   */
  travelerJobNo?: string;
  travelerMemberType?: string;
  travelerMemberTypeName?: string;
  travelerName?: string;
  /**
   * @example
   * 100.0
   */
  upgradeCost?: number;
  /**
   * @example
   * 11
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  voyageName?: string;
  static names(): { [key: string]: string } {
    return {
      advanceDay: 'advance_day',
      airlineCorpCode: 'airline_corp_code',
      airlineCorpName: 'airline_corp_name',
      alipayId: 'alipay_id',
      alipayTradeNo: 'alipay_trade_no',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrDate: 'arr_date',
      arrStation: 'arr_station',
      arrTime: 'arr_time',
      billRecordTime: 'bill_record_time',
      bookMode: 'book_mode',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      btripCouponFee: 'btrip_coupon_fee',
      buildFee: 'build_fee',
      businessTripResult: 'business_trip_result',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      changeFee: 'change_fee',
      changeResult: 'change_result',
      cooperatorBillCode: 'cooperator_bill_code',
      cooperatorName: 'cooperator_name',
      cooperatorOrderId: 'cooperator_order_id',
      corpPayOrderFee: 'corp_pay_order_fee',
      corpSettlePrice: 'corp_settle_price',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      coupon: 'coupon',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      department: 'department',
      departmentId: 'department_id',
      deptCity: 'dept_city',
      deptDate: 'dept_date',
      deptStation: 'dept_station',
      deptTime: 'dept_time',
      discount: 'discount',
      exceedReason: 'exceed_reason',
      feeType: 'fee_type',
      flightNo: 'flight_no',
      index: 'index',
      insOrderId: 'ins_order_id',
      insuranceFee: 'insurance_fee',
      insuranceNumber: 'insurance_number',
      invoiceTitle: 'invoice_title',
      itemType: 'item_type',
      itineraryNum: 'itinerary_num',
      itineraryPrice: 'itinerary_price',
      mileage: 'mileage',
      mostDifferenceDeptTime: 'most_difference_dept_time',
      mostDifferenceDiscount: 'most_difference_discount',
      mostDifferenceFlightNo: 'most_difference_flight_no',
      mostDifferencePrice: 'most_difference_price',
      mostDifferenceReason: 'most_difference_reason',
      mostPrice: 'most_price',
      negotiationCouponFee: 'negotiation_coupon_fee',
      oilFee: 'oil_fee',
      orderId: 'order_id',
      orderStatusDesc: 'order_status_desc',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      personSettlePrice: 'person_settle_price',
      preBookTip: 'pre_book_tip',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      refundFee: 'refund_fee',
      refundResult: 'refund_result',
      refundUpgradeCost: 'refund_upgrade_cost',
      remark: 'remark',
      repeatRefund: 'repeat_refund',
      sealPrice: 'seal_price',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      status: 'status',
      subOrderId: 'sub_order_id',
      taxRate: 'tax_rate',
      thirdInvoiceId: 'third_invoice_id',
      thirdItineraryId: 'third_itinerary_id',
      ticketId: 'ticket_id',
      trade: 'trade',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberType: 'traveler_member_type',
      travelerMemberTypeName: 'traveler_member_type_name',
      travelerName: 'traveler_name',
      upgradeCost: 'upgrade_cost',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
      voyageName: 'voyage_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      advanceDay: 'number',
      airlineCorpCode: 'string',
      airlineCorpName: 'string',
      alipayId: 'string',
      alipayTradeNo: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrDate: 'string',
      arrStation: 'string',
      arrTime: 'string',
      billRecordTime: 'string',
      bookMode: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      btripCouponFee: 'number',
      buildFee: 'number',
      businessTripResult: 'string',
      cabin: 'string',
      cabinClass: 'string',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      changeFee: 'number',
      changeResult: 'string',
      cooperatorBillCode: 'string',
      cooperatorName: 'string',
      cooperatorOrderId: 'string',
      corpPayOrderFee: 'number',
      corpSettlePrice: 'number',
      costCenter: 'string',
      costCenterNumber: 'string',
      coupon: 'number',
      depAirportCode: 'string',
      depCityCode: 'string',
      department: 'string',
      departmentId: 'string',
      deptCity: 'string',
      deptDate: 'string',
      deptStation: 'string',
      deptTime: 'string',
      discount: 'string',
      exceedReason: 'string',
      feeType: 'string',
      flightNo: 'string',
      index: 'string',
      insOrderId: 'string',
      insuranceFee: 'number',
      insuranceNumber: 'string',
      invoiceTitle: 'string',
      itemType: 'string',
      itineraryNum: 'string',
      itineraryPrice: 'number',
      mileage: 'number',
      mostDifferenceDeptTime: 'string',
      mostDifferenceDiscount: 'string',
      mostDifferenceFlightNo: 'string',
      mostDifferencePrice: 'number',
      mostDifferenceReason: 'string',
      mostPrice: 'number',
      negotiationCouponFee: 'number',
      oilFee: 'number',
      orderId: 'string',
      orderStatusDesc: 'string',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      personSettlePrice: 'number',
      preBookTip: 'string',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      refundFee: 'number',
      refundResult: 'string',
      refundUpgradeCost: 'number',
      remark: 'string',
      repeatRefund: 'string',
      sealPrice: 'number',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      status: 'number',
      subOrderId: 'string',
      taxRate: 'string',
      thirdInvoiceId: 'string',
      thirdItineraryId: 'string',
      ticketId: 'string',
      trade: 'string',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberType: 'string',
      travelerMemberTypeName: 'string',
      travelerName: 'string',
      upgradeCost: 'number',
      voucherType: 'number',
      voucherTypeDesc: 'string',
      voyageName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorFlightBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  category?: number;
  /**
   * @example
   * 123
   */
  corpId?: string;
  items?: CooperatorFlightBillSettlementQueryResponseBodyModuleItems[];
  /**
   * @example
   * 2022-11-02
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-13
   */
  periodStart?: string;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      items: 'items',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      items: { 'type': 'array', 'itemType': CooperatorFlightBillSettlementQueryResponseBodyModuleItems },
      periodEnd: 'string',
      periodStart: 'string',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelBillSettlementQueryResponseBodyModuleItems extends $tea.Model {
  /**
   * @example
   * 124
   */
  alipayTradeNo?: string;
  /**
   * @example
   * 123
   */
  applyArrCityCode?: string;
  applyArrCityName?: string;
  /**
   * @example
   * 123
   */
  applyDepCityCode?: string;
  applyDepCityName?: string;
  applyExtendField?: string;
  /**
   * @example
   * sdasdas123324
   */
  applyId?: string;
  /**
   * @example
   * 1.0
   */
  averageNights?: number;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  billRecordTime?: string;
  bookMode?: string;
  bookReason?: string;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  bookTime?: string;
  /**
   * @example
   * 123
   */
  bookerId?: string;
  /**
   * @example
   * zs123
   */
  bookerJobNo?: string;
  bookerName?: string;
  brandGroup?: string;
  brandName?: string;
  businessTripResult?: string;
  capitalDirection?: string;
  cascadeDepartment?: string;
  /**
   * @example
   * 2024-02-13
   */
  checkInDate?: string;
  /**
   * @example
   * 2024-02-15
   */
  checkoutDate?: string;
  city?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  cityCounty?: string;
  /**
   * @example
   * 330100
   */
  cityCountyCode?: number;
  /**
   * @example
   * IN240102113438277278
   */
  cooperatorBillCode?: string;
  cooperatorName?: string;
  /**
   * @example
   * HO20240125162800280928
   */
  cooperatorOrderId?: string;
  /**
   * @example
   * 0.1
   */
  corpRefundFee?: number;
  /**
   * @example
   * 100.0
   */
  corpTotalFee?: number;
  costCenter?: string;
  /**
   * @example
   * 123
   */
  costCenterNumber?: string;
  department?: string;
  /**
   * @example
   * 123
   */
  departmentId?: string;
  exceedReason?: string;
  feeType?: string;
  /**
   * @example
   * 10.0
   */
  fees?: number;
  /**
   * @example
   * 1.0
   */
  fines?: number;
  /**
   * @example
   * 10.0
   */
  fuPointFee?: number;
  hotelName?: string;
  /**
   * @example
   * 1
   */
  index?: string;
  invoiceTitle?: string;
  isEarlyDeparture?: string;
  isNegotiation?: string;
  isShareStr?: string;
  /**
   * @example
   * 2
   */
  nights?: number;
  /**
   * @example
   * 3137168772101111000
   */
  orderId?: string;
  /**
   * @example
   * 100.0
   */
  orderPrice?: number;
  orderStatusDesc?: string;
  orderType?: string;
  /**
   * @example
   * 123
   */
  overApplyId?: string;
  /**
   * @example
   * 123
   */
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 0.1
   */
  personRefundFee?: number;
  /**
   * @example
   * 10.0
   */
  personSettlePrice?: number;
  /**
   * @example
   * 72328485
   */
  primaryId?: number;
  /**
   * @example
   * acs
   */
  projectCode?: string;
  projectName?: string;
  /**
   * @example
   * 0.0
   */
  promotionFee?: number;
  remark?: string;
  /**
   * @example
   * 10
   */
  reserveRule?: number;
  roomNo?: string;
  /**
   * @example
   * 1
   */
  roomNumber?: number;
  /**
   * @example
   * 105.0
   */
  roomPrice?: number;
  roomType?: string;
  /**
   * @example
   * 5.0
   */
  serviceFee?: number;
  /**
   * @example
   * 110.0
   */
  settlementFee?: number;
  /**
   * @example
   * 0.0
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  settlementTime?: string;
  settlementType?: string;
  star?: string;
  /**
   * @example
   * 2
   */
  status?: number;
  /**
   * @example
   * 166564408
   */
  subOrderId?: string;
  /**
   * @example
   * 9%
   */
  taxRate?: string;
  /**
   * @example
   * 1
   */
  thirdInvoiceId?: string;
  /**
   * @example
   * 123
   */
  thirdItineraryId?: string;
  /**
   * @example
   * 2
   */
  totalNights?: number;
  /**
   * @example
   * 123
   */
  travelerId?: string;
  /**
   * @example
   * zs123
   */
  travelerJobNo?: string;
  travelerMemberType?: string;
  travelerMemberTypeName?: string;
  travelerName?: string;
  /**
   * @example
   * 1
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      averageNights: 'average_nights',
      billRecordTime: 'bill_record_time',
      bookMode: 'book_mode',
      bookReason: 'book_reason',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      brandGroup: 'brand_group',
      brandName: 'brand_name',
      businessTripResult: 'business_trip_result',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      checkInDate: 'check_in_date',
      checkoutDate: 'checkout_date',
      city: 'city',
      cityCode: 'city_code',
      cityCounty: 'city_county',
      cityCountyCode: 'city_county_code',
      cooperatorBillCode: 'cooperator_bill_code',
      cooperatorName: 'cooperator_name',
      cooperatorOrderId: 'cooperator_order_id',
      corpRefundFee: 'corp_refund_fee',
      corpTotalFee: 'corp_total_fee',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      department: 'department',
      departmentId: 'department_id',
      exceedReason: 'exceed_reason',
      feeType: 'fee_type',
      fees: 'fees',
      fines: 'fines',
      fuPointFee: 'fu_point_fee',
      hotelName: 'hotel_name',
      index: 'index',
      invoiceTitle: 'invoice_title',
      isEarlyDeparture: 'is_early_departure',
      isNegotiation: 'is_negotiation',
      isShareStr: 'is_share_str',
      nights: 'nights',
      orderId: 'order_id',
      orderPrice: 'order_price',
      orderStatusDesc: 'order_status_desc',
      orderType: 'order_type',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      personRefundFee: 'person_refund_fee',
      personSettlePrice: 'person_settle_price',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      promotionFee: 'promotion_fee',
      remark: 'remark',
      reserveRule: 'reserve_rule',
      roomNo: 'room_no',
      roomNumber: 'room_number',
      roomPrice: 'room_price',
      roomType: 'room_type',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      star: 'star',
      status: 'status',
      subOrderId: 'sub_order_id',
      taxRate: 'tax_rate',
      thirdInvoiceId: 'third_invoice_id',
      thirdItineraryId: 'third_itinerary_id',
      totalNights: 'total_nights',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberType: 'traveler_member_type',
      travelerMemberTypeName: 'traveler_member_type_name',
      travelerName: 'traveler_name',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      averageNights: 'number',
      billRecordTime: 'string',
      bookMode: 'string',
      bookReason: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      brandGroup: 'string',
      brandName: 'string',
      businessTripResult: 'string',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      checkInDate: 'string',
      checkoutDate: 'string',
      city: 'string',
      cityCode: 'string',
      cityCounty: 'string',
      cityCountyCode: 'number',
      cooperatorBillCode: 'string',
      cooperatorName: 'string',
      cooperatorOrderId: 'string',
      corpRefundFee: 'number',
      corpTotalFee: 'number',
      costCenter: 'string',
      costCenterNumber: 'string',
      department: 'string',
      departmentId: 'string',
      exceedReason: 'string',
      feeType: 'string',
      fees: 'number',
      fines: 'number',
      fuPointFee: 'number',
      hotelName: 'string',
      index: 'string',
      invoiceTitle: 'string',
      isEarlyDeparture: 'string',
      isNegotiation: 'string',
      isShareStr: 'string',
      nights: 'number',
      orderId: 'string',
      orderPrice: 'number',
      orderStatusDesc: 'string',
      orderType: 'string',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      personRefundFee: 'number',
      personSettlePrice: 'number',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      promotionFee: 'number',
      remark: 'string',
      reserveRule: 'number',
      roomNo: 'string',
      roomNumber: 'number',
      roomPrice: 'number',
      roomType: 'string',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      star: 'string',
      status: 'number',
      subOrderId: 'string',
      taxRate: 'string',
      thirdInvoiceId: 'string',
      thirdItineraryId: 'string',
      totalNights: 'number',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberType: 'string',
      travelerMemberTypeName: 'string',
      travelerName: 'string',
      voucherType: 'number',
      voucherTypeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CooperatorHotelBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2
   */
  category?: number;
  /**
   * @example
   * open12ilgngll7us7v10Bm5UlMg700
   */
  corpId?: string;
  items?: CooperatorHotelBillSettlementQueryResponseBodyModuleItems[];
  /**
   * @example
   * 2021-10-14
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-13
   */
  periodStart?: string;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      items: 'items',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      items: { 'type': 'array', 'itemType': CooperatorHotelBillSettlementQueryResponseBodyModuleItems },
      periodEnd: 'string',
      periodStart: 'string',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps extends $tea.Model {
  corpName?: string;
  openCorpId?: string;
  trueCorpId?: string;
  static names(): { [key: string]: string } {
    return {
      corpName: 'corp_name',
      openCorpId: 'open_corp_id',
      trueCorpId: 'true_corp_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpName: 'string',
      openCorpId: 'string',
      trueCorpId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp extends $tea.Model {
  corpName?: string;
  openCorpId?: string;
  trueCorpId?: string;
  static names(): { [key: string]: string } {
    return {
      corpName: 'corp_name',
      openCorpId: 'open_corp_id',
      trueCorpId: 'true_corp_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpName: 'string',
      openCorpId: 'string',
      trueCorpId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpAuthLinkInfoQueryResponseBodyModule extends $tea.Model {
  linkCorps?: CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps[];
  orgCorp?: CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp;
  static names(): { [key: string]: string } {
    return {
      linkCorps: 'link_corps',
      orgCorp: 'org_corp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      linkCorps: { 'type': 'array', 'itemType': CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps },
      orgCorp: CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpTokenResponseBodyData extends $tea.Model {
  /**
   * @example
   * 70000
   */
  expire?: number;
  /**
   * @example
   * 37j76df
   */
  token?: string;
  static names(): { [key: string]: string } {
    return {
      expire: 'expire',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expire: 'number',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CorpTokenResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 70000
   */
  expire?: number;
  /**
   * @example
   * 1635744378301
   */
  start?: number;
  /**
   * @example
   * 37j76df
   */
  token?: string;
  static names(): { [key: string]: string } {
    return {
      expire: 'expire',
      start: 'start',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expire: 'number',
      start: 'number',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterQueryResponseBodyModuleEntityDOS extends $tea.Model {
  /**
   * @example
   * ding1234567
   */
  corpId?: string;
  /**
   * @example
   * 12345
   */
  entityId?: string;
  /**
   * @example
   * 1
   */
  entityType?: string;
  /**
   * @example
   * default_bus
   */
  name?: string;
  /**
   * @example
   * 10
   */
  userNum?: number;
  static names(): { [key: string]: string } {
    return {
      corpId: 'corp_id',
      entityId: 'entity_id',
      entityType: 'entity_type',
      name: 'name',
      userNum: 'user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpId: 'string',
      entityId: 'string',
      entityType: 'string',
      name: 'string',
      userNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * a@alipay.com
   */
  alipayNo?: string;
  /**
   * @example
   * ding12345678
   */
  corpId?: string;
  disable?: number;
  entityDOS?: CostCenterQueryResponseBodyModuleEntityDOS[];
  /**
   * @example
   * 7232
   */
  id?: number;
  /**
   * @example
   * 123456
   */
  number?: string;
  /**
   * @remarks
   * rule code
   * 
   * @example
   * 500578154
   */
  ruleCode?: number;
  /**
   * @example
   * 1
   */
  scope?: number;
  /**
   * @example
   * 1
   */
  thirdpartId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      alipayNo: 'alipay_no',
      corpId: 'corp_id',
      disable: 'disable',
      entityDOS: 'entity_d_o_s',
      id: 'id',
      number: 'number',
      ruleCode: 'rule_code',
      scope: 'scope',
      thirdpartId: 'thirdpart_id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayNo: 'string',
      corpId: 'string',
      disable: 'number',
      entityDOS: { 'type': 'array', 'itemType': CostCenterQueryResponseBodyModuleEntityDOS },
      id: 'number',
      number: 'string',
      ruleCode: 'number',
      scope: 'number',
      thirdpartId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CostCenterSaveResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 17690
   */
  id?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSubCorpResponseBodyModule extends $tea.Model {
  /**
   * @example
   * btrip123
   */
  subCorpId?: string;
  static names(): { [key: string]: string } {
    return {
      subCorpId: 'sub_corp_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      subCorpId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInvoiceEntityRequestEntities extends $tea.Model {
  /**
   * @example
   * 12345
   */
  entityId?: string;
  /**
   * @example
   * 1
   */
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInvoiceEntityResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  removeNum?: number;
  /**
   * @example
   * 2
   */
  selectedUserNum?: number;
  static names(): { [key: string]: string } {
    return {
      removeNum: 'remove_num',
      selectedUserNum: 'selected_user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      removeNum: 'number',
      selectedUserNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DepartmentSaveRequestDepartList extends $tea.Model {
  /**
   * @example
   * 10
   */
  departId?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  departName?: string;
  /**
   * @example
   * 10
   */
  departPid?: number;
  /**
   * @example
   * 001|002|003
   */
  managerIds?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * testdepartid001
   */
  thirdDepartId?: string;
  /**
   * @example
   * testdepartpid001
   */
  thirdDepartPid?: string;
  static names(): { [key: string]: string } {
    return {
      departId: 'depart_id',
      departName: 'depart_name',
      departPid: 'depart_pid',
      managerIds: 'manager_ids',
      status: 'status',
      thirdDepartId: 'third_depart_id',
      thirdDepartPid: 'third_depart_pid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      departId: 'number',
      departName: 'string',
      departPid: 'number',
      managerIds: 'string',
      status: 'number',
      thirdDepartId: 'string',
      thirdDepartPid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyRequestApplyItineraryList extends $tea.Model {
  purchaserName?: string;
  /**
   * @example
   * tax3213132131
   */
  purchaserTaxNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  purchaserType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 781-2205431917
   */
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      purchaserName: 'purchaser_name',
      purchaserTaxNo: 'purchaser_tax_no',
      purchaserType: 'purchaser_type',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      purchaserName: 'string',
      purchaserTaxNo: 'string',
      purchaserType: 'number',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyResponseBodyModuleApplyFailedTicketList extends $tea.Model {
  failedCode?: number;
  failedReason?: string;
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      failedCode: 'failed_code',
      failedReason: 'failed_reason',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failedCode: 'number',
      failedReason: 'string',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryBatchApplyResponseBodyModule extends $tea.Model {
  applyFailedTicketList?: ElectronicItineraryBatchApplyResponseBodyModuleApplyFailedTicketList[];
  batchNo?: string;
  static names(): { [key: string]: string } {
    return {
      applyFailedTicketList: 'apply_failed_ticket_list',
      batchNo: 'batch_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyFailedTicketList: { 'type': 'array', 'itemType': ElectronicItineraryBatchApplyResponseBodyModuleApplyFailedTicketList },
      batchNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryGetApplyResultResponseBodyModuleApplyTicketList extends $tea.Model {
  /**
   * @example
   * 5001
   */
  failedCode?: number;
  failedReason?: string;
  itineraryStatus?: number;
  /**
   * @example
   * 781-6605285563
   */
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      failedCode: 'failed_code',
      failedReason: 'failed_reason',
      itineraryStatus: 'itinerary_status',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failedCode: 'number',
      failedReason: 'string',
      itineraryStatus: 'number',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ElectronicItineraryGetApplyResultResponseBodyModule extends $tea.Model {
  applyTicketList?: ElectronicItineraryGetApplyResultResponseBodyModuleApplyTicketList[];
  batchApplyNo?: string;
  static names(): { [key: string]: string } {
    return {
      applyTicketList: 'apply_ticket_list',
      batchApplyNo: 'batch_apply_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyTicketList: { 'type': 'array', 'itemType': ElectronicItineraryGetApplyResultResponseBodyModuleApplyTicketList },
      batchApplyNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityAddRequestEntityDOList extends $tea.Model {
  /**
   * @example
   * 12345
   */
  entityId?: string;
  /**
   * @example
   * 1
   */
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityAddResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  addNum?: number;
  /**
   * @example
   * 2
   */
  selectedUserNum?: number;
  static names(): { [key: string]: string } {
    return {
      addNum: 'add_num',
      selectedUserNum: 'selected_user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addNum: 'number',
      selectedUserNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityDeleteRequestEntityDOList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  entityId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntityDeleteResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  removeNum?: number;
  /**
   * @example
   * 1
   */
  selectedUserNum?: number;
  static names(): { [key: string]: string } {
    return {
      removeNum: 'remove_num',
      selectedUserNum: 'selected_user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      removeNum: 'number',
      selectedUserNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntitySetRequestEntityDOList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  entityId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EntitySetResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  addNum?: number;
  /**
   * @example
   * 1
   */
  removeNum?: number;
  /**
   * @example
   * 1
   */
  selectedUserNum?: number;
  static names(): { [key: string]: string } {
    return {
      addNum: 'add_num',
      removeNum: 'remove_num',
      selectedUserNum: 'selected_user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addNum: 'number',
      removeNum: 'number',
      selectedUserNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponseBodyModuleHotelFeeDetail extends $tea.Model {
  city?: string;
  /**
   * @example
   * 6
   */
  criterion?: number;
  /**
   * @example
   * 1245
   */
  itineraryId?: string;
  /**
   * @example
   * 6
   */
  total?: number;
  /**
   * @example
   * 1
   */
  tripDays?: number;
  static names(): { [key: string]: string } {
    return {
      city: 'city',
      criterion: 'criterion',
      itineraryId: 'itinerary_id',
      total: 'total',
      tripDays: 'trip_days',
    };
  }

  static types(): { [key: string]: any } {
    return {
      city: 'string',
      criterion: 'number',
      itineraryId: 'string',
      total: 'number',
      tripDays: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest extends $tea.Model {
  /**
   * @example
   * 00:40
   */
  arrTime?: string;
  /**
   * @example
   * 22:20
   */
  depTime?: string;
  /**
   * @example
   * 30100
   */
  fee?: number;
  seatGrade?: string;
  /**
   * @example
   * MU9668
   */
  vehicleNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      depTime: 'dep_time',
      fee: 'fee',
      seatGrade: 'seat_grade',
      vehicleNo: 'vehicle_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      depTime: 'string',
      fee: 'number',
      seatGrade: 'string',
      vehicleNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive extends $tea.Model {
  /**
   * @example
   * 19:20
   */
  arrTime?: string;
  /**
   * @example
   * 17:00
   */
  depTime?: string;
  /**
   * @example
   * 265000
   */
  fee?: number;
  seatGrade?: string;
  /**
   * @example
   * CA1721
   */
  vehicleNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      depTime: 'dep_time',
      fee: 'fee',
      seatGrade: 'seat_grade',
      vehicleNo: 'vehicle_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      depTime: 'string',
      fee: 'number',
      seatGrade: 'string',
      vehicleNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes extends $tea.Model {
  arrCity?: string;
  arrDate?: number;
  cheapest?: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest;
  depCity?: string;
  depDate?: number;
  /**
   * @example
   * demo
   */
  errMsg?: string;
  /**
   * @example
   * 1245
   */
  itineraryId?: string;
  mostExpensive?: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrDate: 'arr_date',
      cheapest: 'cheapest',
      depCity: 'dep_city',
      depDate: 'dep_date',
      errMsg: 'err_msg',
      itineraryId: 'itinerary_id',
      mostExpensive: 'most_expensive',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrDate: 'number',
      cheapest: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest,
      depCity: 'string',
      depDate: 'number',
      errMsg: 'string',
      itineraryId: 'string',
      mostExpensive: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponseBodyModuleTrafficFee extends $tea.Model {
  btripRoutes?: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes[];
  /**
   * @example
   * demo
   */
  errMsg?: string;
  /**
   * @example
   * 265000
   */
  maxFee?: number;
  /**
   * @example
   * 30100
   */
  minFee?: number;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      btripRoutes: 'btrip_routes',
      errMsg: 'err_msg',
      maxFee: 'max_fee',
      minFee: 'min_fee',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripRoutes: { 'type': 'array', 'itemType': EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes },
      errMsg: 'string',
      maxFee: 'number',
      minFee: 'number',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EstimatedPriceQueryResponseBodyModule extends $tea.Model {
  hotelFeeDetail?: EstimatedPriceQueryResponseBodyModuleHotelFeeDetail[];
  /**
   * @remarks
   * 酒店费用总额，单位为元
   * 
   * @example
   * 500
   */
  totalHotelFee?: number;
  trafficFee?: EstimatedPriceQueryResponseBodyModuleTrafficFee;
  static names(): { [key: string]: string } {
    return {
      hotelFeeDetail: 'hotel_fee_detail',
      totalHotelFee: 'total_hotel_fee',
      trafficFee: 'traffic_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelFeeDetail: { 'type': 'array', 'itemType': EstimatedPriceQueryResponseBodyModuleHotelFeeDetail },
      totalHotelFee: 'number',
      trafficFee: EstimatedPriceQueryResponseBodyModuleTrafficFee,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserAddRequestCertRequestList extends $tea.Model {
  /**
   * @example
   * 2034-10-01
   */
  certExpiredTime?: string;
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 330101199010010213
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  certType?: number;
  /**
   * @example
   * CN
   */
  nationality?: string;
  static names(): { [key: string]: string } {
    return {
      certExpiredTime: 'cert_expired_time',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      nationality: 'nationality',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certExpiredTime: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      nationality: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  /**
   * @example
   * btrip123456
   */
  corpId?: string;
  /**
   * @example
   * zhangsan@alibaba-inc.com
   */
  email?: string;
  /**
   * @example
   * 000001
   */
  externalUserId?: string;
  /**
   * @example
   * 13438009765
   */
  phone?: string;
  realName?: string;
  /**
   * @example
   * zhang/san
   */
  realNameEn?: string;
  /**
   * @example
   * e1$12345678
   */
  userId?: string;
  userNick?: string;
  /**
   * @example
   * 1
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      corpId: 'corp_id',
      email: 'email',
      externalUserId: 'external_user_id',
      phone: 'phone',
      realName: 'real_name',
      realNameEn: 'real_name_en',
      userId: 'user_id',
      userNick: 'user_nick',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      corpId: 'string',
      email: 'string',
      externalUserId: 'string',
      phone: 'string',
      realName: 'string',
      realNameEn: 'string',
      userId: 'string',
      userNick: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExternalUserUpdateRequestCertRequestList extends $tea.Model {
  /**
   * @example
   * 2034-10-01
   */
  certExpiredTime?: string;
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 330101199010010213
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  certType?: number;
  /**
   * @example
   * CN
   */
  nationality?: string;
  static names(): { [key: string]: string } {
    return {
      certExpiredTime: 'cert_expired_time',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      nationality: 'nationality',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certExpiredTime: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      nationality: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightBillSettlementQueryResponseBodyModuleDataList extends $tea.Model {
  /**
   * @example
   * 1
   */
  advanceDay?: number;
  /**
   * @example
   * MU
   */
  airlineCorpCode?: string;
  airlineCorpName?: string;
  alipayId?: string;
  /**
   * @example
   * 2021100122001138061456080520
   */
  alipayTradeNo?: string;
  applyArrCityCode?: string;
  applyArrCityName?: string;
  applyDepCityCode?: string;
  applyDepCityName?: string;
  /**
   * @remarks
   * 审批扩展自定义字段
   */
  applyExtendField?: string;
  /**
   * @example
   * 103177854
   */
  applyId?: string;
  /**
   * @example
   * CAN
   */
  arrAirportCode?: string;
  arrCity?: string;
  arrCityCode?: string;
  /**
   * @example
   * 2021-10-02
   */
  arrDate?: string;
  arrStation?: string;
  /**
   * @example
   * 13:30:00
   */
  arrTime?: string;
  /**
   * @example
   * 2020-12-23T20:18Z
   */
  billRecordTime?: string;
  bookMode?: string;
  /**
   * @example
   * 2021-10-01 00:17:05
   */
  bookTime?: string;
  bookerId?: string;
  /**
   * @example
   * 2342432
   */
  bookerJobNo?: string;
  bookerName?: string;
  /**
   * @example
   * 23.9
   */
  btripCouponFee?: number;
  /**
   * @example
   * 50
   */
  buildFee?: number;
  businessTripResult?: string;
  /**
   * @example
   * R
   */
  cabin?: string;
  cabinClass?: string;
  /**
   * @example
   * 1
   */
  capitalDirection?: string;
  cascadeDepartment?: string;
  /**
   * @example
   * 23.9
   */
  changeFee?: number;
  changeReasonCode?: string;
  changeResult?: string;
  /**
   * @example
   * 460
   */
  corpPayOrderFee?: number;
  corpSettlePrice?: number;
  costCenter?: string;
  /**
   * @example
   * 48b7f3cd-8a4f-4df9-ae2c-883e008cf097
   */
  costCenterNumber?: string;
  /**
   * @example
   * 1
   */
  coupon?: number;
  deductibleTax?: number;
  /**
   * @example
   * KHN
   */
  depAirportCode?: string;
  depCityCode?: string;
  department?: string;
  departmentId?: string;
  deptCity?: string;
  /**
   * @example
   * 2021-10-02
   */
  deptDate?: string;
  deptStation?: string;
  /**
   * @example
   * 12:00:00
   */
  deptTime?: string;
  /**
   * @example
   * 51%
   */
  discount?: string;
  exceedReason?: string;
  /**
   * @example
   * 10101
   */
  feeType?: string;
  /**
   * @example
   * MU9684
   */
  flightNo?: string;
  /**
   * @example
   * 4564547
   */
  index?: string;
  insOrderId?: string;
  /**
   * @example
   * 23.9
   */
  insuranceFee?: number;
  insuranceNumber?: string;
  invoiceTitle?: string;
  itemType?: string;
  /**
   * @example
   * 5334916421
   */
  itineraryNum?: string;
  /**
   * @example
   * 460
   */
  itineraryPrice?: number;
  mileage?: string;
  /**
   * @example
   * 2021-10-01 00:17:13
   */
  mostDifferenceDeptTime?: string;
  /**
   * @example
   * 23%
   */
  mostDifferenceDiscount?: string;
  /**
   * @example
   * MU9684
   */
  mostDifferenceFlightNo?: string;
  /**
   * @example
   * 23.9
   */
  mostDifferencePrice?: number;
  mostDifferenceReason?: string;
  /**
   * @example
   * 23.9
   */
  mostPrice?: number;
  /**
   * @example
   * 23.9
   */
  negotiationCouponFee?: number;
  offlineStatus?: string;
  /**
   * @example
   * 0
   */
  oilFee?: number;
  /**
   * @example
   * 234223423423
   */
  orderId?: string;
  /**
   * @example
   * 234324324423
   */
  overApplyId?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  personSettlePrice?: number;
  preBookTip?: string;
  /**
   * @example
   * 4564547
   */
  primaryId?: number;
  /**
   * @example
   * 45623234
   */
  projectCode?: string;
  projectName?: string;
  refundAffiliateNo?: string;
  refundApplyId?: string;
  /**
   * @example
   * 23.9
   */
  refundFee?: number;
  refundReasonCode?: string;
  refundResult?: string;
  /**
   * @example
   * 23.9
   */
  refundUpgradeCost?: number;
  remark?: string;
  repeatRefund?: string;
  sceneId?: string;
  sceneName?: string;
  /**
   * @example
   * 410
   */
  sealPrice?: number;
  /**
   * @example
   * 23.9
   */
  serviceFee?: number;
  /**
   * @example
   * 460
   */
  settlementFee?: number;
  /**
   * @example
   * 5.67
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2021-10-01 00:17:13
   */
  settlementTime?: string;
  /**
   * @example
   * 2
   */
  settlementType?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * 税率
   * 
   * @example
   * 6%
   */
  taxRate?: string;
  thirdItineraryId?: string;
  /**
   * @example
   * 781-6586234234324
   */
  ticketId?: string;
  trade?: string;
  travelerId?: string;
  /**
   * @example
   * 345345
   */
  travelerJobNo?: string;
  travelerMemberTypeName?: string;
  travelerName?: string;
  /**
   * @example
   * 23.9
   */
  upgradeCost?: number;
  /**
   * @example
   * 11
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  voyageName?: string;
  static names(): { [key: string]: string } {
    return {
      advanceDay: 'advance_day',
      airlineCorpCode: 'airline_corp_code',
      airlineCorpName: 'airline_corp_name',
      alipayId: 'alipay_id',
      alipayTradeNo: 'alipay_trade_no',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrDate: 'arr_date',
      arrStation: 'arr_station',
      arrTime: 'arr_time',
      billRecordTime: 'bill_record_time',
      bookMode: 'book_mode',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      btripCouponFee: 'btrip_coupon_fee',
      buildFee: 'build_fee',
      businessTripResult: 'business_trip_result',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      changeFee: 'change_fee',
      changeReasonCode: 'change_reason_code',
      changeResult: 'change_result',
      corpPayOrderFee: 'corp_pay_order_fee',
      corpSettlePrice: 'corp_settle_price',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      coupon: 'coupon',
      deductibleTax: 'deductible_tax',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      department: 'department',
      departmentId: 'department_id',
      deptCity: 'dept_city',
      deptDate: 'dept_date',
      deptStation: 'dept_station',
      deptTime: 'dept_time',
      discount: 'discount',
      exceedReason: 'exceed_reason',
      feeType: 'fee_type',
      flightNo: 'flight_no',
      index: 'index',
      insOrderId: 'ins_order_id',
      insuranceFee: 'insurance_fee',
      insuranceNumber: 'insurance_number',
      invoiceTitle: 'invoice_title',
      itemType: 'item_type',
      itineraryNum: 'itinerary_num',
      itineraryPrice: 'itinerary_price',
      mileage: 'mileage',
      mostDifferenceDeptTime: 'most_difference_dept_time',
      mostDifferenceDiscount: 'most_difference_discount',
      mostDifferenceFlightNo: 'most_difference_flight_no',
      mostDifferencePrice: 'most_difference_price',
      mostDifferenceReason: 'most_difference_reason',
      mostPrice: 'most_price',
      negotiationCouponFee: 'negotiation_coupon_fee',
      offlineStatus: 'offline_status',
      oilFee: 'oil_fee',
      orderId: 'order_id',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      personSettlePrice: 'person_settle_price',
      preBookTip: 'pre_book_tip',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      refundAffiliateNo: 'refund_affiliate_no',
      refundApplyId: 'refund_apply_id',
      refundFee: 'refund_fee',
      refundReasonCode: 'refund_reason_code',
      refundResult: 'refund_result',
      refundUpgradeCost: 'refund_upgrade_cost',
      remark: 'remark',
      repeatRefund: 'repeat_refund',
      sceneId: 'scene_id',
      sceneName: 'scene_name',
      sealPrice: 'seal_price',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      status: 'status',
      taxRate: 'tax_rate',
      thirdItineraryId: 'third_itinerary_id',
      ticketId: 'ticket_id',
      trade: 'trade',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberTypeName: 'traveler_member_type_name',
      travelerName: 'traveler_name',
      upgradeCost: 'upgrade_cost',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
      voyageName: 'voyage_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      advanceDay: 'number',
      airlineCorpCode: 'string',
      airlineCorpName: 'string',
      alipayId: 'string',
      alipayTradeNo: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrDate: 'string',
      arrStation: 'string',
      arrTime: 'string',
      billRecordTime: 'string',
      bookMode: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      btripCouponFee: 'number',
      buildFee: 'number',
      businessTripResult: 'string',
      cabin: 'string',
      cabinClass: 'string',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      changeFee: 'number',
      changeReasonCode: 'string',
      changeResult: 'string',
      corpPayOrderFee: 'number',
      corpSettlePrice: 'number',
      costCenter: 'string',
      costCenterNumber: 'string',
      coupon: 'number',
      deductibleTax: 'number',
      depAirportCode: 'string',
      depCityCode: 'string',
      department: 'string',
      departmentId: 'string',
      deptCity: 'string',
      deptDate: 'string',
      deptStation: 'string',
      deptTime: 'string',
      discount: 'string',
      exceedReason: 'string',
      feeType: 'string',
      flightNo: 'string',
      index: 'string',
      insOrderId: 'string',
      insuranceFee: 'number',
      insuranceNumber: 'string',
      invoiceTitle: 'string',
      itemType: 'string',
      itineraryNum: 'string',
      itineraryPrice: 'number',
      mileage: 'string',
      mostDifferenceDeptTime: 'string',
      mostDifferenceDiscount: 'string',
      mostDifferenceFlightNo: 'string',
      mostDifferencePrice: 'number',
      mostDifferenceReason: 'string',
      mostPrice: 'number',
      negotiationCouponFee: 'number',
      offlineStatus: 'string',
      oilFee: 'number',
      orderId: 'string',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      personSettlePrice: 'number',
      preBookTip: 'string',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      refundAffiliateNo: 'string',
      refundApplyId: 'string',
      refundFee: 'number',
      refundReasonCode: 'string',
      refundResult: 'string',
      refundUpgradeCost: 'number',
      remark: 'string',
      repeatRefund: 'string',
      sceneId: 'string',
      sceneName: 'string',
      sealPrice: 'number',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      status: 'number',
      taxRate: 'string',
      thirdItineraryId: 'string',
      ticketId: 'string',
      trade: 'string',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberTypeName: 'string',
      travelerName: 'string',
      upgradeCost: 'number',
      voucherType: 'number',
      voucherTypeDesc: 'string',
      voyageName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  category?: number;
  corpId?: string;
  dataList?: FlightBillSettlementQueryResponseBodyModuleDataList[];
  /**
   * @example
   * 2021-10-14
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-13
   */
  periodStart?: string;
  /**
   * @example
   * 5180
   */
  totalNum?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      dataList: 'data_list',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalNum: 'total_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      dataList: { 'type': 'array', 'itemType': FlightBillSettlementQueryResponseBodyModuleDataList },
      periodEnd: 'string',
      periodStart: 'string',
      totalNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  cancelTime?: string;
  failCode?: string;
  failReason?: string;
  /**
   * @example
   * 0
   */
  orderStatus?: string;
  static names(): { [key: string]: string } {
    return {
      cancelTime: 'cancel_time',
      failCode: 'fail_code',
      failReason: 'fail_reason',
      orderStatus: 'order_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelTime: 'string',
      failCode: 'string',
      failReason: 'string',
      orderStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCancelOrderV2ResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2023-08-10 17:45:32
   */
  cancelTime?: string;
  static names(): { [key: string]: string } {
    return {
      cancelTime: 'cancel_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderRequestContactInfo extends $tea.Model {
  /**
   * @example
   * ******@alibaba-inc.com
   */
  contactEmail?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  contactName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12312345211
   */
  contactPhone?: string;
  static names(): { [key: string]: string } {
    return {
      contactEmail: 'contact_email',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactEmail: 'string',
      contactName: 'string',
      contactPhone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderRequestTravelerInfoList extends $tea.Model {
  /**
   * @example
   * 2000-00-00
   */
  birthday?: string;
  certNation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1262651555151
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  certType?: string;
  /**
   * @example
   * 2000-00-00
   */
  certValidDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  name?: string;
  /**
   * @remarks
   * 国籍
   * 
   * @example
   * 中国大陆
   */
  nationality?: string;
  /**
   * @remarks
   * 国籍二字码
   * 
   * @example
   * CN
   */
  nationalityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1234
   */
  outUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12341231232
   */
  phone?: string;
  /**
   * @example
   * 0
   */
  sex?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      name: 'name',
      nationality: 'nationality',
      nationalityCode: 'nationality_code',
      outUserId: 'out_user_id',
      phone: 'phone',
      sex: 'sex',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'string',
      certValidDate: 'string',
      name: 'string',
      nationality: 'string',
      nationalityCode: 'string',
      outUserId: 'string',
      phone: 'string',
      sex: 'number',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 3287177727711
   */
  alipayTradeNo?: string;
  /**
   * @example
   * 123
   */
  btripOrderId?: number;
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  lastPayTime?: string;
  /**
   * @example
   * 1
   */
  orderStatus?: number;
  /**
   * @example
   * 1
   */
  payStatus?: number;
  /**
   * @example
   * 100
   */
  paymentPrice?: number;
  /**
   * @example
   * 100
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      btripOrderId: 'btrip_order_id',
      disOrderId: 'dis_order_id',
      lastPayTime: 'last_pay_time',
      orderStatus: 'order_status',
      payStatus: 'pay_status',
      paymentPrice: 'payment_price',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      btripOrderId: 'number',
      disOrderId: 'string',
      lastPayTime: 'string',
      orderStatus: 'number',
      payStatus: 'number',
      paymentPrice: 'number',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2RequestContactInfo extends $tea.Model {
  contactEmail?: string;
  contactName?: string;
  contactPhone?: string;
  sendMsgToPassenger?: boolean;
  static names(): { [key: string]: string } {
    return {
      contactEmail: 'contact_email',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      sendMsgToPassenger: 'send_msg_to_passenger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactEmail: 'string',
      contactName: 'string',
      contactPhone: 'string',
      sendMsgToPassenger: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2RequestTravelers extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1991-01-22
   */
  birthday?: string;
  certNation?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  certType?: number;
  certValidDate?: string;
  costCenterName?: string;
  costCenterNumber?: string;
  deptId?: string;
  deptName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  gender?: number;
  invoiceTitle?: string;
  nationality?: string;
  nationalityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  phone?: string;
  projectCode?: string;
  projectTitle?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 18155711459129970552412
   */
  userId?: string;
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      deptId: 'dept_id',
      deptName: 'dept_name',
      gender: 'gender',
      invoiceTitle: 'invoice_title',
      nationality: 'nationality',
      nationalityCode: 'nationality_code',
      passengerName: 'passenger_name',
      passengerType: 'passenger_type',
      phone: 'phone',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      userId: 'user_id',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      certValidDate: 'string',
      costCenterName: 'string',
      costCenterNumber: 'string',
      deptId: 'string',
      deptName: 'string',
      gender: 'number',
      invoiceTitle: 'string',
      nationality: 'string',
      nationalityCode: 'string',
      passengerName: 'string',
      passengerType: 'number',
      phone: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      userId: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightCreateOrderV2ResponseBodyModule extends $tea.Model {
  asyncCreateOrderKey?: string;
  /**
   * @example
   * 2023-08-10 17:42:32
   */
  latestPayTime?: string;
  /**
   * @example
   * 1017002195798359369
   */
  orderId?: number;
  /**
   * @example
   * cheshiapi002kwl
   */
  outOrderId?: string;
  /**
   * @example
   * 32
   */
  status?: number;
  /**
   * @example
   * 51000
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      asyncCreateOrderKey: 'async_create_order_key',
      latestPayTime: 'latest_pay_time',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      status: 'status',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncCreateOrderKey: 'string',
      latestPayTime: 'string',
      orderId: 'number',
      outOrderId: 'string',
      status: 'number',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo extends $tea.Model {
  arrAirportName?: string;
  /**
   * @example
   * SHA
   */
  arrCity?: string;
  arrCityName?: string;
  /**
   * @example
   * 2022-01-12T16:47Z
   */
  arrTime?: string;
  /**
   * @example
   * F
   */
  cabin?: string;
  /**
   * @example
   * 1
   */
  cabinClass?: number;
  cabinClassStr?: string;
  depAirportName?: string;
  /**
   * @example
   * SHA
   */
  depCity?: string;
  depCityName?: string;
  /**
   * @example
   * 2022-01-12T16:47Z
   */
  depTime?: string;
  /**
   * @example
   * 4
   */
  discount?: string;
  /**
   * @example
   * MU2759
   */
  flightNo?: string;
  /**
   * @example
   * 300
   */
  price?: number;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      arrAirportName: 'arr_airport_name',
      arrCity: 'arr_city',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassStr: 'cabin_class_str',
      depAirportName: 'dep_airport_name',
      depCity: 'dep_city',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      discount: 'discount',
      flightNo: 'flight_no',
      price: 'price',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportName: 'string',
      arrCity: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'number',
      cabinClassStr: 'string',
      depAirportName: 'string',
      depCity: 'string',
      depCityName: 'string',
      depTime: 'string',
      discount: 'string',
      flightNo: 'string',
      price: 'number',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDoList extends $tea.Model {
  arrAirportName?: string;
  arrCity?: string;
  arrCityName?: string;
  arrTime?: string;
  cabin?: string;
  cabinClass?: number;
  cabinClassStr?: string;
  depAirportName?: string;
  depCity?: string;
  depCityName?: string;
  depTime?: string;
  discount?: string;
  flightNo?: string;
  price?: number;
  type?: number;
  static names(): { [key: string]: string } {
    return {
      arrAirportName: 'arr_airport_name',
      arrCity: 'arr_city',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassStr: 'cabin_class_str',
      depAirportName: 'dep_airport_name',
      depCity: 'dep_city',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      discount: 'discount',
      flightNo: 'flight_no',
      price: 'price',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportName: 'string',
      arrCity: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'number',
      cabinClassStr: 'string',
      depAirportName: 'string',
      depCity: 'string',
      depCityName: 'string',
      depTime: 'string',
      discount: 'string',
      flightNo: 'string',
      price: 'number',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights extends $tea.Model {
  arrAirportName?: string;
  arrCityName?: string;
  arrTime?: string;
  cabin?: string;
  cabinClass?: number;
  cabinClassStr?: string;
  depAirportName?: string;
  depCityName?: string;
  depTime?: string;
  discount?: string;
  flightNo?: string;
  price?: number;
  transferAirportName?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportName: 'arr_airport_name',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassStr: 'cabin_class_str',
      depAirportName: 'dep_airport_name',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      discount: 'discount',
      flightNo: 'flight_no',
      price: 'price',
      transferAirportName: 'transfer_airport_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportName: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'number',
      cabinClassStr: 'string',
      depAirportName: 'string',
      depCityName: 'string',
      depTime: 'string',
      discount: 'string',
      flightNo: 'string',
      price: 'number',
      transferAirportName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightExceedApplyQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1231
   */
  applyId?: number;
  applyIntentionInfoDo?: FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo;
  applyIntentionInfoDoList?: FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDoList[];
  applyRecommendFlights?: FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights;
  btripCause?: string;
  /**
   * @example
   * 123
   */
  corpId?: string;
  exceedReason?: string;
  /**
   * @example
   * 1
   */
  exceedType?: number;
  originStandard?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 2022-01-12T16:47Z
   */
  submitTime?: string;
  /**
   * @example
   * 0001A1100000007EX08O
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * test_corp
   */
  thirdpartCorpId?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      applyIntentionInfoDo: 'apply_intention_info_do',
      applyIntentionInfoDoList: 'apply_intention_info_do_list',
      applyRecommendFlights: 'apply_recommend_flights',
      btripCause: 'btrip_cause',
      corpId: 'corp_id',
      exceedReason: 'exceed_reason',
      exceedType: 'exceed_type',
      originStandard: 'origin_standard',
      status: 'status',
      submitTime: 'submit_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartCorpId: 'thirdpart_corp_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      applyIntentionInfoDo: FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo,
      applyIntentionInfoDoList: { 'type': 'array', 'itemType': FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDoList },
      applyRecommendFlights: FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights,
      btripCause: 'string',
      corpId: 'string',
      exceedReason: 'string',
      exceedType: 'number',
      originStandard: 'string',
      status: 'number',
      submitTime: 'string',
      thirdpartApplyId: 'string',
      thirdpartCorpId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightItineraryScanQueryResponseBodyModuleItemsFlights extends $tea.Model {
  /**
   * @remarks
   * 航班至
   */
  arrivalStation?: string;
  /**
   * @remarks
   * 座位等级
   * 
   * @example
   * M
   */
  cabinClass?: string;
  /**
   * @remarks
   * 承运人
   */
  carrier?: string;
  /**
   * @remarks
   * 航班从
   */
  departureStation?: string;
  /**
   * @remarks
   * 日期
   * 
   * @example
   * 2018-11-18
   */
  flightDate?: string;
  /**
   * @remarks
   * 航班号
   * 
   * @example
   * MU2271
   */
  flightNumber?: string;
  /**
   * @remarks
   * 时间
   * 
   * @example
   * 18:25
   */
  flightTime?: string;
  /**
   * @remarks
   * 免费行李
   * 
   * @example
   * 20K
   */
  freeBaggageAllowance?: string;
  /**
   * @remarks
   * 行号
   * 
   * @example
   * 1
   */
  index?: string;
  /**
   * @remarks
   * 客票级别
   * 
   * @example
   * M
   */
  seatClass?: string;
  /**
   * @remarks
   * 客票生效日期
   * 
   * @example
   * 2023-01-01
   */
  validFromDate?: string;
  /**
   * @remarks
   * 有效截止日期
   * 
   * @example
   * 2023-01-01
   */
  validToDate?: string;
  static names(): { [key: string]: string } {
    return {
      arrivalStation: 'arrival_station',
      cabinClass: 'cabin_class',
      carrier: 'carrier',
      departureStation: 'departure_station',
      flightDate: 'flight_date',
      flightNumber: 'flight_number',
      flightTime: 'flight_time',
      freeBaggageAllowance: 'free_baggage_allowance',
      index: 'index',
      seatClass: 'seat_class',
      validFromDate: 'valid_from_date',
      validToDate: 'valid_to_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrivalStation: 'string',
      cabinClass: 'string',
      carrier: 'string',
      departureStation: 'string',
      flightDate: 'string',
      flightNumber: 'string',
      flightTime: 'string',
      freeBaggageAllowance: 'string',
      index: 'string',
      seatClass: 'string',
      validFromDate: 'string',
      validToDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightItineraryScanQueryResponseBodyModuleItems extends $tea.Model {
  /**
   * @remarks
   * 销售单位代号
   * 
   * @example
   * SIA25608336893
   */
  agentCode?: string;
  applyId?: string;
  /**
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @example
   * 50
   */
  build?: string;
  costCenter?: string;
  department?: string;
  /**
   * @remarks
   * 机票行程明细
   */
  flights?: FlightItineraryScanQueryResponseBodyModuleItemsFlights[];
  /**
   * @example
   * 120
   */
  fuelSurcharge?: string;
  /**
   * @remarks
   * UK
   * 
   * @example
   * 30
   */
  id?: string;
  /**
   * @example
   * 0
   */
  insurance?: string;
  invoiceTitle?: string;
  invoiceType?: number;
  /**
   * @remarks
   * 填开单位
   */
  issueCompany?: string;
  /**
   * @remarks
   * 填开日期
   * 
   * @example
   * 2019-02-28
   */
  issueDate?: string;
  /**
   * @example
   * 6666666666
   */
  itineraryNum?: string;
  ofdOssUrl?: string;
  /**
   * @example
   * 4801105714092
   */
  orderId?: number;
  /**
   * @example
   * https://www.testurl.com
   */
  ossUrl?: string;
  passengerName?: string;
  project?: string;
  /**
   * @remarks
   * 提示信息
   */
  promptMessage?: string;
  purchaserName?: string;
  purchaserType?: number;
  /**
   * @example
   * 108.17
   */
  taxAmount?: string;
  /**
   * @example
   * 9%
   */
  taxRate?: string;
  /**
   * @example
   * 784-1111111111
   */
  ticketNo?: string;
  /**
   * @example
   * 1190
   */
  ticketPrice?: string;
  /**
   * @example
   * 1360
   */
  totalPrice?: string;
  /**
   * @remarks
   * 验证码
   * 
   * @example
   * 9817
   */
  validationCode?: string;
  static names(): { [key: string]: string } {
    return {
      agentCode: 'agent_code',
      applyId: 'apply_id',
      billDate: 'bill_date',
      build: 'build',
      costCenter: 'cost_center',
      department: 'department',
      flights: 'flights',
      fuelSurcharge: 'fuel_surcharge',
      id: 'id',
      insurance: 'insurance',
      invoiceTitle: 'invoice_title',
      invoiceType: 'invoice_type',
      issueCompany: 'issue_company',
      issueDate: 'issue_date',
      itineraryNum: 'itinerary_num',
      ofdOssUrl: 'ofd_oss_url',
      orderId: 'order_id',
      ossUrl: 'oss_url',
      passengerName: 'passenger_name',
      project: 'project',
      promptMessage: 'prompt_message',
      purchaserName: 'purchaser_name',
      purchaserType: 'purchaser_type',
      taxAmount: 'tax_amount',
      taxRate: 'tax_rate',
      ticketNo: 'ticket_no',
      ticketPrice: 'ticket_price',
      totalPrice: 'total_price',
      validationCode: 'validation_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentCode: 'string',
      applyId: 'string',
      billDate: 'string',
      build: 'string',
      costCenter: 'string',
      department: 'string',
      flights: { 'type': 'array', 'itemType': FlightItineraryScanQueryResponseBodyModuleItemsFlights },
      fuelSurcharge: 'string',
      id: 'string',
      insurance: 'string',
      invoiceTitle: 'string',
      invoiceType: 'number',
      issueCompany: 'string',
      issueDate: 'string',
      itineraryNum: 'string',
      ofdOssUrl: 'string',
      orderId: 'number',
      ossUrl: 'string',
      passengerName: 'string',
      project: 'string',
      promptMessage: 'string',
      purchaserName: 'string',
      purchaserType: 'number',
      taxAmount: 'string',
      taxRate: 'string',
      ticketNo: 'string',
      ticketPrice: 'string',
      totalPrice: 'string',
      validationCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightItineraryScanQueryResponseBodyModule extends $tea.Model {
  items?: FlightItineraryScanQueryResponseBodyModuleItems[];
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 2
   */
  totalPage?: number;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      items: 'items',
      pageNo: 'page_no',
      pageSize: 'page_size',
      totalPage: 'total_page',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': FlightItineraryScanQueryResponseBodyModuleItems },
      pageNo: 'number',
      pageSize: 'number',
      totalPage: 'number',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListAirlineInfo extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListArrAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * HGH
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListDepAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * BJS
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png
   */
  icon?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * demo
   */
  image?: string;
  /**
   * @example
   * 50
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  baggageDesc?: string[];
  /**
   * @example
   * 1
   */
  baggageSubContentType?: number;
  description?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * true
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'image_d_o',
      isHighlight: 'is_highlight',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems extends $tea.Model {
  baggageSubContentVisualizes?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes[];
  extraContentVisualizes?: any[];
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      extraContentVisualizes: 'extra_content_visualizes',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes },
      extraContentVisualizes: { 'type': 'array', 'itemType': 'any' },
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem extends $tea.Model {
  baggageSubItems?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems[];
  /**
   * @example
   * 1
   */
  index?: number;
  tableHead?: string;
  tips?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents extends $tea.Model {
  content?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems extends $tea.Model {
  /**
   * @remarks
   * isStruct : true
   * 
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem extends $tea.Model {
  extraContents?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem extends $tea.Model {
  extraContents?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents[];
  /**
   * @example
   * 1
   */
  index?: number;
  refundSubItems?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightListFlightRuleList extends $tea.Model {
  /**
   * @example
   * demo
   */
  baggageInfo?: string;
  baggageItem?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem;
  changeRule?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule;
  changeRuleItem?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem;
  /**
   * @example
   * {}
   */
  extra?: string;
  refundRule?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule;
  refundRuleItem?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem;
  signRule?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule;
  tuigaiqianInfo?: string;
  upgradeRule?: FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule;
  static names(): { [key: string]: string } {
    return {
      baggageInfo: 'baggage_info',
      baggageItem: 'baggage_item',
      changeRule: 'change_rule',
      changeRuleItem: 'change_rule_item',
      extra: 'extra',
      refundRule: 'refund_rule',
      refundRuleItem: 'refund_rule_item',
      signRule: 'sign_rule',
      tuigaiqianInfo: 'tuigaiqian_info',
      upgradeRule: 'upgrade_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageInfo: 'string',
      baggageItem: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem,
      changeRule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule,
      changeRuleItem: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem,
      extra: 'string',
      refundRule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule,
      refundRuleItem: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem,
      signRule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule,
      tuigaiqianInfo: 'string',
      upgradeRule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModuleFlightList extends $tea.Model {
  airlineInfo?: FlightListingSearchResponseBodyModuleFlightListAirlineInfo;
  arrAirportInfo?: FlightListingSearchResponseBodyModuleFlightListArrAirportInfo;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  arrDate?: string;
  /**
   * @example
   * 12456
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * 2
   */
  cabinClass?: string;
  /**
   * @example
   * FM
   */
  carrierAirline?: string;
  /**
   * @example
   * FM9152
   */
  carrierNo?: string;
  depAirportInfo?: FlightListingSearchResponseBodyModuleFlightListDepAirportInfo;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  depDate?: string;
  /**
   * @example
   * 1
   */
  discount?: number;
  /**
   * @example
   * CA1234
   */
  flightNo?: string;
  flightRuleList?: FlightListingSearchResponseBodyModuleFlightListFlightRuleList[];
  /**
   * @example
   * demo
   */
  flightRuleListStr?: string;
  flightSize?: string;
  /**
   * @example
   * demo
   */
  flightType?: string;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * false
   */
  isShare?: boolean;
  /**
   * @example
   * false
   */
  isStop?: boolean;
  /**
   * @example
   * false
   */
  isTransfer?: boolean;
  mealDesc?: string;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  /**
   * @example
   * 4ec61b13fc9746f99c072a16bfc265af_0
   */
  otaItemId?: string;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 1
   */
  productType?: number;
  productTypeDesc?: string;
  /**
   * @example
   * 100
   */
  promotionPrice?: string;
  /**
   * @example
   * 1
   */
  remainedSeatCount?: string;
  /**
   * @example
   * 1000_1_0
   */
  secretParams?: string;
  /**
   * @example
   * 1
   */
  segmentNumber?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCity?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  stopDepTime?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  totalPrice?: string;
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrDate: 'arr_date',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      carrierAirline: 'carrier_airline',
      carrierNo: 'carrier_no',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      discount: 'discount',
      flightNo: 'flight_no',
      flightRuleList: 'flight_rule_list',
      flightRuleListStr: 'flight_rule_list_str',
      flightSize: 'flight_size',
      flightType: 'flight_type',
      invoiceType: 'invoice_type',
      isProtocol: 'is_protocol',
      isShare: 'is_share',
      isStop: 'is_stop',
      isTransfer: 'is_transfer',
      mealDesc: 'meal_desc',
      oilPrice: 'oil_price',
      otaItemId: 'ota_item_id',
      price: 'price',
      productType: 'product_type',
      productTypeDesc: 'product_type_desc',
      promotionPrice: 'promotion_price',
      remainedSeatCount: 'remained_seat_count',
      secretParams: 'secret_params',
      segmentNumber: 'segment_number',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
      ticketPrice: 'ticket_price',
      totalPrice: 'total_price',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: FlightListingSearchResponseBodyModuleFlightListAirlineInfo,
      arrAirportInfo: FlightListingSearchResponseBodyModuleFlightListArrAirportInfo,
      arrDate: 'string',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      cabin: 'string',
      cabinClass: 'string',
      carrierAirline: 'string',
      carrierNo: 'string',
      depAirportInfo: FlightListingSearchResponseBodyModuleFlightListDepAirportInfo,
      depCityCode: 'string',
      depDate: 'string',
      discount: 'number',
      flightNo: 'string',
      flightRuleList: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightListFlightRuleList },
      flightRuleListStr: 'string',
      flightSize: 'string',
      flightType: 'string',
      invoiceType: 'number',
      isProtocol: 'boolean',
      isShare: 'boolean',
      isStop: 'boolean',
      isTransfer: 'boolean',
      mealDesc: 'string',
      oilPrice: 'number',
      otaItemId: 'string',
      price: 'number',
      productType: 'number',
      productTypeDesc: 'string',
      promotionPrice: 'string',
      remainedSeatCount: 'string',
      secretParams: 'string',
      segmentNumber: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
      ticketPrice: 'number',
      totalPrice: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchResponseBodyModule extends $tea.Model {
  flightList?: FlightListingSearchResponseBodyModuleFlightList[];
  static names(): { [key: string]: string } {
    return {
      flightList: 'flight_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightList: { 'type': 'array', 'itemType': FlightListingSearchResponseBodyModuleFlightList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2RequestSearchJourneysSelectedFlights extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * PKX
   */
  depAirportCode?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-09-01 07:10:00
   */
  flightTime?: string;
  /**
   * @example
   * HO3925
   */
  marketFlightNo?: string;
  /**
   * @example
   * CX601
   */
  operateFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCityCode: 'arr_city_code',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      flightTime: 'flight_time',
      marketFlightNo: 'market_flight_no',
      operateFlightNo: 'operate_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCityCode: 'string',
      depAirportCode: 'string',
      depCityCode: 'string',
      flightTime: 'string',
      marketFlightNo: 'string',
      operateFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2RequestSearchJourneys extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-09-01
   */
  depDate?: string;
  selectedFlights?: FlightListingSearchV2RequestSearchJourneysSelectedFlights[];
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      selectedFlights: 'selected_flights',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      depCityCode: 'string',
      depDate: 'string',
      selectedFlights: { 'type': 'array', 'itemType': FlightListingSearchV2RequestSearchJourneysSelectedFlights },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems extends $tea.Model {
  shoppingItemMap?: { [key: string]: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue };
  /**
   * @example
   * 07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  uniqKey?: string;
  static names(): { [key: string]: string } {
    return {
      shoppingItemMap: 'shopping_item_map',
      uniqKey: 'uniq_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue },
      uniqKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem extends $tea.Model {
  flightRuleInfos?: { [key: string]: ModuleFlightItemListBestPriceItemFlightRuleInfosValue };
  /**
   * @example
   * e50d380fc05942cc8ac57af8ae02f448_0
   */
  itemId?: string;
  shoppingItemMap?: { [key: string]: ModuleFlightItemListBestPriceItemShoppingItemMapValue };
  subItemPositionMap?: { [key: string]: ModuleFlightItemListBestPriceItemSubItemPositionMapValue[] };
  subItems?: FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems[];
  static names(): { [key: string]: string } {
    return {
      flightRuleInfos: 'flight_rule_infos',
      itemId: 'item_id',
      shoppingItemMap: 'shopping_item_map',
      subItemPositionMap: 'sub_item_position_map',
      subItems: 'sub_items',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightRuleInfos: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemFlightRuleInfosValue },
      itemId: 'string',
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemShoppingItemMapValue },
      subItemPositionMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleFlightItemListBestPriceItemSubItemPositionMapValue } },
      subItems: { 'type': 'array', 'itemType': FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo extends $tea.Model {
  /**
   * @example
   * PKX
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * #FF7300
   */
  airportNameColor?: string;
  airportShortName?: string;
  /**
   * @example
   * --
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportNameColor: 'airport_name_color',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportNameColor: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * #FF7300
   */
  airportNameColor?: string;
  airportShortName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportNameColor: 'airport_name_color',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportNameColor: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * DR
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo extends $tea.Model {
  operatingAirlineInfo?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo;
  /**
   * @example
   * CX601
   */
  operatingFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingAirlineInfo: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo,
      operatingFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  stopAirport?: string;
  stopAirportName?: string;
  /**
   * @example
   * T3
   */
  stopArrTerm?: string;
  /**
   * @example
   * BJS
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCityCode?: string;
  /**
   * @example
   * HGH
   */
  stopCityName?: string;
  stopCityNames?: string[];
  /**
   * @example
   * T4
   */
  stopDepTerm?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  stopDepTime?: string;
  stopTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopAirportName: 'stop_airport_name',
      stopArrTerm: 'stop_arr_term',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopCityNames: 'stop_city_names',
      stopDepTerm: 'stop_dep_term',
      stopDepTime: 'stop_dep_time',
      stopTime: 'stop_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopAirportName: 'string',
      stopArrTerm: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopCityNames: { 'type': 'array', 'itemType': 'string' },
      stopDepTerm: 'string',
      stopDepTime: 'string',
      stopTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos extends $tea.Model {
  airlineInfo?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo;
  arrAirportInfo?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  baggageDesc?: string;
  depAirportInfo?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @remarks
   * duration
   * 
   * @example
   * 140
   */
  duration?: number;
  extraInfo?: { [key: string]: any };
  /**
   * @example
   * MU5131
   */
  flightNo?: string;
  flightShareInfo?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo;
  flightSize?: string;
  flightStopInfo?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo;
  /**
   * @example
   * 320
   */
  flightType?: string;
  manufacturer?: string;
  mealDesc?: string;
  miles?: number;
  onTimeRate?: string;
  /**
   * @example
   * 0
   */
  oneMore?: number;
  oneMoreShow?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * false
   */
  share?: boolean;
  shortFlightSize?: string;
  /**
   * @example
   * false
   */
  stop?: boolean;
  totalTime?: string;
  transferTime?: string;
  transferTimeNumber?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      baggageDesc: 'baggage_desc',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      extraInfo: 'extra_info',
      flightNo: 'flight_no',
      flightShareInfo: 'flight_share_info',
      flightSize: 'flight_size',
      flightStopInfo: 'flight_stop_info',
      flightType: 'flight_type',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      miles: 'miles',
      onTimeRate: 'on_time_rate',
      oneMore: 'one_more',
      oneMoreShow: 'one_more_show',
      segmentIndex: 'segment_index',
      share: 'share',
      shortFlightSize: 'short_flight_size',
      stop: 'stop',
      totalTime: 'total_time',
      transferTime: 'transfer_time',
      transferTimeNumber: 'transfer_time_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo,
      arrAirportInfo: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo,
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      baggageDesc: 'string',
      depAirportInfo: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo,
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      flightNo: 'string',
      flightShareInfo: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo,
      flightSize: 'string',
      flightStopInfo: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo,
      flightType: 'string',
      manufacturer: 'string',
      mealDesc: 'string',
      miles: 'number',
      onTimeRate: 'string',
      oneMore: 'number',
      oneMoreShow: 'string',
      segmentIndex: 'number',
      share: 'boolean',
      shortFlightSize: 'string',
      stop: 'boolean',
      totalTime: 'string',
      transferTime: 'string',
      transferTimeNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @example
   * 140
   */
  duration?: number;
  extensions?: { [key: string]: string };
  flightSegmentInfos?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos[];
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  transferTime?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      extensions: 'extensions',
      flightSegmentInfos: 'flight_segment_infos',
      journeyIndex: 'journey_index',
      transferTime: 'transfer_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      extensions: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      flightSegmentInfos: { 'type': 'array', 'itemType': FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos },
      journeyIndex: 'number',
      transferTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems extends $tea.Model {
  shoppingItemMap?: { [key: string]: ModuleFlightItemListItemListSubItemsShoppingItemMapValue };
  tag?: string;
  /**
   * @example
   * 07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  uniqKey?: string;
  static names(): { [key: string]: string } {
    return {
      shoppingItemMap: 'shopping_item_map',
      tag: 'tag',
      uniqKey: 'uniq_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListItemListSubItemsShoppingItemMapValue },
      tag: 'string',
      uniqKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemListItemList extends $tea.Model {
  flightRuleInfos?: { [key: string]: ModuleFlightItemListItemListFlightRuleInfosValue };
  /**
   * @example
   * e50d380fc05942cc8ac57af8ae02f448_0
   */
  itemId?: string;
  shoppingItemMap?: { [key: string]: ModuleFlightItemListItemListShoppingItemMapValue };
  subItemPositionMap?: { [key: string]: ModuleFlightItemListItemListSubItemPositionMapValue[] };
  subItems?: FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems[];
  static names(): { [key: string]: string } {
    return {
      flightRuleInfos: 'flight_rule_infos',
      itemId: 'item_id',
      shoppingItemMap: 'shopping_item_map',
      subItemPositionMap: 'sub_item_position_map',
      subItems: 'sub_items',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightRuleInfos: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListItemListFlightRuleInfosValue },
      itemId: 'string',
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListItemListShoppingItemMapValue },
      subItemPositionMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleFlightItemListItemListSubItemPositionMapValue } },
      subItems: { 'type': 'array', 'itemType': FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModuleFlightItemList extends $tea.Model {
  bestPriceItem?: FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem;
  flightJourneyInfos?: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos[];
  itemList?: FlightListingSearchV2ResponseBodyModuleFlightItemListItemList[];
  static names(): { [key: string]: string } {
    return {
      bestPriceItem: 'best_price_item',
      flightJourneyInfos: 'flight_journey_infos',
      itemList: 'item_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bestPriceItem: FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem,
      flightJourneyInfos: { 'type': 'array', 'itemType': FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos },
      itemList: { 'type': 'array', 'itemType': FlightListingSearchV2ResponseBodyModuleFlightItemListItemList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightListingSearchV2ResponseBodyModule extends $tea.Model {
  flightItemList?: FlightListingSearchV2ResponseBodyModuleFlightItemList[];
  /**
   * @example
   * 0
   */
  searchMode?: number;
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      flightItemList: 'flight_item_list',
      searchMode: 'search_mode',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightItemList: { 'type': 'array', 'itemType': FlightListingSearchV2ResponseBodyModuleFlightItemList },
      searchMode: 'number',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyApplyV2RequestPassengerSegmentRelations extends $tea.Model {
  /**
   * @example
   * 3243028
   */
  passengerId?: string;
  segmentIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      segmentIdList: 'segment_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      segmentIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyApplyV2ResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1017002195370467138
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  outSubOrderId?: string;
  /**
   * @example
   * 1019195786853020
   */
  subOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      subOrderId: 'sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      subOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2RequestPassengerSegmentRelations extends $tea.Model {
  /**
   * @example
   * 3243028
   */
  passengerId?: string;
  segmentIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      segmentIdList: 'segment_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      segmentIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2RequestSelectedSegments extends $tea.Model {
  /**
   * @example
   * XIL
   */
  arrCityCode?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-09-17 18:15:00
   */
  depDateTime?: string;
  /**
   * @example
   * 0
   */
  journeySeq?: number;
  /**
   * @example
   * CA8625
   */
  marketingFlightNo?: string;
  /**
   * @example
   * MU8625
   */
  operatingFlightNo?: string;
  /**
   * @example
   * 0
   */
  segmentSeq?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      depCityCode: 'dep_city_code',
      depDateTime: 'dep_date_time',
      journeySeq: 'journey_seq',
      marketingFlightNo: 'marketing_flight_no',
      operatingFlightNo: 'operating_flight_no',
      segmentSeq: 'segment_seq',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      depCityCode: 'string',
      depDateTime: 'string',
      journeySeq: 'number',
      marketingFlightNo: 'string',
      operatingFlightNo: 'string',
      segmentSeq: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  /**
   * @example
   * //gw.alicdn.com/tfs/TB12fJAFHr1gK0jSZR0XXbP8XXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo extends $tea.Model {
  /**
   * @example
   * XIL
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * T2
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  airlineCode?: string;
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo extends $tea.Model {
  operatingAirlineInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo;
  operatingFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingAirlineInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo,
      operatingFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo extends $tea.Model {
  stopAirport?: string;
  stopArrTerm?: string;
  stopArrTime?: string;
  stopCityCode?: string;
  stopCityName?: string;
  stopDepTerm?: string;
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopArrTerm: 'stop_arr_term',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopDepTerm: 'stop_dep_term',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopArrTerm: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopDepTerm: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  airlineCode?: string;
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo extends $tea.Model {
  transferAirlineInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo;
  transferCityCode?: string;
  transferCityName?: string;
  transferDepTime?: string;
  transferFlightNo?: string;
  transferFlightSize?: string;
  /**
   * @example
   * false
   */
  transferShare?: boolean;
  /**
   * @example
   * 60
   */
  transferStopTime?: number;
  static names(): { [key: string]: string } {
    return {
      transferAirlineInfo: 'transfer_airline_info',
      transferCityCode: 'transfer_city_code',
      transferCityName: 'transfer_city_name',
      transferDepTime: 'transfer_dep_time',
      transferFlightNo: 'transfer_flight_no',
      transferFlightSize: 'transfer_flight_size',
      transferShare: 'transfer_share',
      transferStopTime: 'transfer_stop_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      transferAirlineInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo,
      transferCityCode: 'string',
      transferCityName: 'string',
      transferDepTime: 'string',
      transferFlightNo: 'string',
      transferFlightSize: 'string',
      transferShare: 'boolean',
      transferStopTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO extends $tea.Model {
  /**
   * @example
   * -1
   */
  reShopAdultChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopAdultPrice?: number;
  /**
   * @example
   * -1
   */
  reShopAdultPriceGap?: number;
  /**
   * @example
   * -1
   */
  reShopChildChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopChildPrice?: number;
  /**
   * @example
   * -1
   */
  reShopChildPriceGap?: number;
  /**
   * @example
   * -1
   */
  reShopInfChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopInfPrice?: number;
  /**
   * @example
   * -1
   */
  reShopInfPriceGap?: number;
  static names(): { [key: string]: string } {
    return {
      reShopAdultChangeFee: 're_shop_adult_change_fee',
      reShopAdultPrice: 're_shop_adult_price',
      reShopAdultPriceGap: 're_shop_adult_price_gap',
      reShopChildChangeFee: 're_shop_child_change_fee',
      reShopChildPrice: 're_shop_child_price',
      reShopChildPriceGap: 're_shop_child_price_gap',
      reShopInfChangeFee: 're_shop_inf_change_fee',
      reShopInfPrice: 're_shop_inf_price',
      reShopInfPriceGap: 're_shop_inf_price_gap',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reShopAdultChangeFee: 'number',
      reShopAdultPrice: 'number',
      reShopAdultPriceGap: 'number',
      reShopChildChangeFee: 'number',
      reShopChildPrice: 'number',
      reShopChildPriceGap: 'number',
      reShopInfChangeFee: 'number',
      reShopInfPrice: 'number',
      reShopInfPriceGap: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO extends $tea.Model {
  /**
   * @example
   * 126000
   */
  adultPrice?: number;
  /**
   * @example
   * 11000
   */
  adultTax?: number;
  /**
   * @example
   * 137000
   */
  adultTotalPrice?: number;
  /**
   * @example
   * 126000
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 64000
   */
  childPrice?: number;
  /**
   * @example
   * 2000
   */
  childTax?: number;
  /**
   * @example
   * 66000
   */
  childTotalPrice?: number;
  /**
   * @example
   * 12000
   */
  infantPrice?: number;
  /**
   * @example
   * 0
   */
  infantTax?: number;
  /**
   * @example
   * 12000
   */
  infantTotalPrice?: number;
  /**
   * @example
   * 1300
   */
  originalAdultPrice?: number;
  /**
   * @example
   * 12300
   */
  originalAdultTotalPrice?: number;
  reShopPriceInfoDTO?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO;
  static names(): { [key: string]: string } {
    return {
      adultPrice: 'adult_price',
      adultTax: 'adult_tax',
      adultTotalPrice: 'adult_total_price',
      beforeControlPrice: 'before_control_price',
      childPrice: 'child_price',
      childTax: 'child_tax',
      childTotalPrice: 'child_total_price',
      infantPrice: 'infant_price',
      infantTax: 'infant_tax',
      infantTotalPrice: 'infant_total_price',
      originalAdultPrice: 'original_adult_price',
      originalAdultTotalPrice: 'original_adult_total_price',
      reShopPriceInfoDTO: 're_shop_price_info_d_t_o',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultPrice: 'number',
      adultTax: 'number',
      adultTotalPrice: 'number',
      beforeControlPrice: 'number',
      childPrice: 'number',
      childTax: 'number',
      childTotalPrice: 'number',
      infantPrice: 'number',
      infantTax: 'number',
      infantTotalPrice: 'number',
      originalAdultPrice: 'number',
      originalAdultTotalPrice: 'number',
      reShopPriceInfoDTO: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList extends $tea.Model {
  airlineInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo;
  arrAirportInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  /**
   * @example
   * 2023-09-18 10:25:00
   */
  arrTime?: string;
  cabinClass?: string;
  cabinClassName?: string;
  depAirportInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo;
  /**
   * @example
   * XIL
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-09-18 09:10:00
   */
  depTime?: string;
  /**
   * @example
   * 240
   */
  duration?: number;
  /**
   * @example
   * CA1110
   */
  flightNo?: string;
  flightShareInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo;
  flightSize?: string;
  flightStopInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo;
  flightTransferInfo?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo;
  /**
   * @example
   * ARJ
   */
  flightType?: string;
  /**
   * @example
   * 0
   */
  journeySeq?: number;
  /**
   * @example
   * 8
   */
  leftNum?: string;
  manufacturer?: string;
  mealDesc?: string;
  priceInfoDTO?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO;
  /**
   * @example
   * 0
   */
  segmentSeq?: number;
  /**
   * @example
   * false
   */
  share?: boolean;
  shortFlightSize?: string;
  spanDay?: string;
  /**
   * @example
   * false
   */
  stop?: boolean;
  /**
   * @example
   * false
   */
  transfer?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrCityCode: 'arr_city_code',
      arrTime: 'arr_time',
      cabinClass: 'cabinClass',
      cabinClassName: 'cabinClassName',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depTime: 'dep_time',
      duration: 'duration',
      flightNo: 'flight_no',
      flightShareInfo: 'flight_share_info',
      flightSize: 'flight_size',
      flightStopInfo: 'flight_stop_info',
      flightTransferInfo: 'flight_transfer_info',
      flightType: 'flight_type',
      journeySeq: 'journey_seq',
      leftNum: 'left_num',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      priceInfoDTO: 'price_info_d_t_o',
      segmentSeq: 'segment_seq',
      share: 'share',
      shortFlightSize: 'short_flight_size',
      spanDay: 'span_day',
      stop: 'stop',
      transfer: 'transfer',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo,
      arrAirportInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo,
      arrCityCode: 'string',
      arrTime: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      depAirportInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo,
      depCityCode: 'string',
      depTime: 'string',
      duration: 'number',
      flightNo: 'string',
      flightShareInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo,
      flightSize: 'string',
      flightStopInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo,
      flightTransferInfo: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo,
      flightType: 'string',
      journeySeq: 'number',
      leftNum: 'string',
      manufacturer: 'string',
      mealDesc: 'string',
      priceInfoDTO: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO,
      segmentSeq: 'number',
      share: 'boolean',
      shortFlightSize: 'string',
      spanDay: 'string',
      stop: 'boolean',
      transfer: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  airlineCode?: string;
  airlineIcon?: string;
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo extends $tea.Model {
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo extends $tea.Model {
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  airlineCode?: string;
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo extends $tea.Model {
  operatingAirlineInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo;
  operatingFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingAirlineInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo,
      operatingFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo extends $tea.Model {
  stopAirport?: string;
  stopArrTerm?: string;
  stopArrTime?: string;
  stopCityCode?: string;
  stopCityName?: string;
  stopDepTerm?: string;
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopArrTerm: 'stop_arr_term',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopDepTerm: 'stop_dep_term',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopArrTerm: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopDepTerm: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  airlineCode?: string;
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo extends $tea.Model {
  transferAirlineInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo;
  transferCityCode?: string;
  transferCityName?: string;
  transferDepTime?: string;
  transferFlightNo?: string;
  transferFlightSize?: string;
  /**
   * @example
   * false
   */
  transferShare?: boolean;
  /**
   * @example
   * 20
   */
  transferStopTime?: number;
  static names(): { [key: string]: string } {
    return {
      transferAirlineInfo: 'transfer_airline_info',
      transferCityCode: 'transfer_city_code',
      transferCityName: 'transfer_city_name',
      transferDepTime: 'transfer_dep_time',
      transferFlightNo: 'transfer_flight_no',
      transferFlightSize: 'transfer_flight_size',
      transferShare: 'transfer_share',
      transferStopTime: 'transfer_stop_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      transferAirlineInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo,
      transferCityCode: 'string',
      transferCityName: 'string',
      transferDepTime: 'string',
      transferFlightNo: 'string',
      transferFlightSize: 'string',
      transferShare: 'boolean',
      transferStopTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO extends $tea.Model {
  /**
   * @example
   * -1
   */
  reShopAdultChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopAdultPrice?: number;
  /**
   * @example
   * -1
   */
  reShopAdultPriceGap?: number;
  /**
   * @example
   * -1
   */
  reShopChildChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopChildPrice?: number;
  /**
   * @example
   * -1
   */
  reShopChildPriceGap?: number;
  /**
   * @example
   * -1
   */
  reShopInfChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopInfPrice?: number;
  /**
   * @example
   * -1
   */
  reShopInfPriceGap?: number;
  static names(): { [key: string]: string } {
    return {
      reShopAdultChangeFee: 're_shop_adult_change_fee',
      reShopAdultPrice: 're_shop_adult_price',
      reShopAdultPriceGap: 're_shop_adult_price_gap',
      reShopChildChangeFee: 're_shop_child_change_fee',
      reShopChildPrice: 're_shop_child_price',
      reShopChildPriceGap: 're_shop_child_price_gap',
      reShopInfChangeFee: 're_shop_inf_change_fee',
      reShopInfPrice: 're_shop_inf_price',
      reShopInfPriceGap: 're_shop_inf_price_gap',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reShopAdultChangeFee: 'number',
      reShopAdultPrice: 'number',
      reShopAdultPriceGap: 'number',
      reShopChildChangeFee: 'number',
      reShopChildPrice: 'number',
      reShopChildPriceGap: 'number',
      reShopInfChangeFee: 'number',
      reShopInfPrice: 'number',
      reShopInfPriceGap: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO extends $tea.Model {
  /**
   * @example
   * 1000
   */
  adultPrice?: number;
  /**
   * @example
   * 1000
   */
  adultTax?: number;
  /**
   * @example
   * 1000
   */
  adultTotalPrice?: number;
  /**
   * @example
   * 1000
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 1000
   */
  childPrice?: number;
  /**
   * @example
   * 1000
   */
  childTax?: number;
  /**
   * @example
   * 1000
   */
  childTotalPrice?: number;
  /**
   * @example
   * 1000
   */
  infantPrice?: number;
  /**
   * @example
   * 1000
   */
  infantTax?: number;
  /**
   * @example
   * 1000
   */
  infantTotalPrice?: number;
  /**
   * @example
   * 1000
   */
  originalAdultPrice?: number;
  /**
   * @example
   * 1000
   */
  originalAdultTotalPrice?: number;
  reShopPriceInfoDTO?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO;
  static names(): { [key: string]: string } {
    return {
      adultPrice: 'adult_price',
      adultTax: 'adult_tax',
      adultTotalPrice: 'adult_total_price',
      beforeControlPrice: 'before_control_price',
      childPrice: 'child_price',
      childTax: 'child_tax',
      childTotalPrice: 'child_total_price',
      infantPrice: 'infant_price',
      infantTax: 'infant_tax',
      infantTotalPrice: 'infant_total_price',
      originalAdultPrice: 'original_adult_price',
      originalAdultTotalPrice: 'original_adult_total_price',
      reShopPriceInfoDTO: 're_shop_price_info_d_t_o',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultPrice: 'number',
      adultTax: 'number',
      adultTotalPrice: 'number',
      beforeControlPrice: 'number',
      childPrice: 'number',
      childTax: 'number',
      childTotalPrice: 'number',
      infantPrice: 'number',
      infantTax: 'number',
      infantTotalPrice: 'number',
      originalAdultPrice: 'number',
      originalAdultTotalPrice: 'number',
      reShopPriceInfoDTO: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList extends $tea.Model {
  airlineInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo;
  arrAirportInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo;
  arrCityCode?: string;
  arrTime?: string;
  cabinClass?: string;
  cabinClassName?: string;
  depAirportInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo;
  depCityCode?: string;
  depTime?: string;
  /**
   * @example
   * 240
   */
  duration?: number;
  flightNo?: string;
  flightShareInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo;
  flightSize?: string;
  flightStopInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo;
  flightTransferInfo?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo;
  flightType?: string;
  /**
   * @example
   * 0
   */
  journeySeq?: number;
  /**
   * @example
   * 7
   */
  leftNum?: string;
  manufacturer?: string;
  mealDesc?: string;
  priceInfoDTO?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO;
  /**
   * @example
   * 0
   */
  segmentSeq?: number;
  /**
   * @example
   * false
   */
  share?: boolean;
  shortFlightSize?: string;
  spanDay?: string;
  /**
   * @example
   * false
   */
  stop?: boolean;
  /**
   * @example
   * false
   */
  transfer?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrCityCode: 'arr_city_code',
      arrTime: 'arr_time',
      cabinClass: 'cabinClass',
      cabinClassName: 'cabinClassName',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depTime: 'dep_time',
      duration: 'duration',
      flightNo: 'flight_no',
      flightShareInfo: 'flight_share_info',
      flightSize: 'flight_size',
      flightStopInfo: 'flight_stop_info',
      flightTransferInfo: 'flight_transfer_info',
      flightType: 'flight_type',
      journeySeq: 'journey_seq',
      leftNum: 'left_num',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      priceInfoDTO: 'price_info_d_t_o',
      segmentSeq: 'segment_seq',
      share: 'share',
      shortFlightSize: 'short_flight_size',
      spanDay: 'span_day',
      stop: 'stop',
      transfer: 'transfer',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo,
      arrAirportInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo,
      arrCityCode: 'string',
      arrTime: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      depAirportInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo,
      depCityCode: 'string',
      depTime: 'string',
      duration: 'number',
      flightNo: 'string',
      flightShareInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo,
      flightSize: 'string',
      flightStopInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo,
      flightTransferInfo: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo,
      flightType: 'string',
      journeySeq: 'number',
      leftNum: 'string',
      manufacturer: 'string',
      mealDesc: 'string',
      priceInfoDTO: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO,
      segmentSeq: 'number',
      share: 'boolean',
      shortFlightSize: 'string',
      spanDay: 'string',
      stop: 'boolean',
      transfer: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyListingSearchV2ResponseBodyModule extends $tea.Model {
  directFlightList?: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList[];
  nextReqWaitTime?: number;
  retry?: boolean;
  searchRetryToken?: string;
  /**
   * @example
   * a2ffebfe733742aab5c491d960ba3d59
   */
  sessionId?: string;
  transferFlightList?: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList[];
  transferTitle?: string;
  static names(): { [key: string]: string } {
    return {
      directFlightList: 'direct_flight_list',
      nextReqWaitTime: 'next_req_wait_time',
      retry: 'retry',
      searchRetryToken: 'search_retry_token',
      sessionId: 'session_id',
      transferFlightList: 'transfer_flight_list',
      transferTitle: 'transfer_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directFlightList: { 'type': 'array', 'itemType': FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList },
      nextReqWaitTime: 'number',
      retry: 'boolean',
      searchRetryToken: 'string',
      sessionId: 'string',
      transferFlightList: { 'type': 'array', 'itemType': FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList },
      transferTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModuleAttributes extends $tea.Model {
  baggageRule?: string;
  changeRule?: string;
  latestPayTime?: any;
  latestPayTimeStr?: string;
  refundRule?: string;
  static names(): { [key: string]: string } {
    return {
      baggageRule: 'baggage_rule',
      changeRule: 'change_rule',
      latestPayTime: 'latest_pay_time',
      latestPayTimeStr: 'latest_pay_time_str',
      refundRule: 'refund_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageRule: 'string',
      changeRule: 'string',
      latestPayTime: 'any',
      latestPayTimeStr: 'string',
      refundRule: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO extends $tea.Model {
  /**
   * @example
   * 17816963077@163.com
   */
  contactEmail?: string;
  contactName?: string;
  /**
   * @example
   * 17816963077
   */
  contactPhone?: string;
  /**
   * @example
   * false
   */
  sendMsgToPassenger?: boolean;
  static names(): { [key: string]: string } {
    return {
      contactEmail: 'contact_email',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      sendMsgToPassenger: 'send_msg_to_passenger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactEmail: 'string',
      contactName: 'string',
      contactPhone: 'string',
      sendMsgToPassenger: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSFlightChange extends $tea.Model {
  changeDesc?: string;
  changeStatus?: string;
  changeStatusCode?: string;
  newSegment?: any;
  passengerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      changeDesc: 'change_desc',
      changeStatus: 'change_status',
      changeStatusCode: 'change_status_code',
      newSegment: 'new_segment',
      passengerNames: 'passenger_names',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeDesc: 'string',
      changeStatus: 'string',
      changeStatusCode: 'string',
      newSegment: 'any',
      passengerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineIconUrl?: string;
  airlineName?: string;
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  arrAirportName?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  arrCityName?: string;
  arrTerminal?: string;
  /**
   * @example
   * 2023-10-03 09:30:00
   */
  arrTime?: string;
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * 10
   */
  cabinDiscount?: number;
  carrierAirlineCode?: string;
  carrierAirlineIconUrl?: string;
  carrierAirlineName?: string;
  carrierFlightNo?: string;
  /**
   * @example
   * PKX
   */
  depAirportCode?: string;
  depAirportName?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  depTerminal?: string;
  /**
   * @example
   * 2023-10-03 07:30:00
   */
  depTime?: string;
  flightChange?: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSFlightChange;
  /**
   * @example
   * MU5193
   */
  flightNo?: string;
  flightType?: string;
  mealDesc?: string;
  /**
   * @example
   * 1194012
   */
  segmentIId?: string;
  segmentPosition?: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition;
  stopArrTime?: string;
  stopCity?: string;
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineIconUrl: 'airline_icon_url',
      airlineName: 'airline_name',
      arrAirportCode: 'arr_airport_code',
      arrAirportName: 'arr_airport_name',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinDiscount: 'cabin_discount',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineIconUrl: 'carrier_airline_icon_url',
      carrierAirlineName: 'carrier_airline_name',
      carrierFlightNo: 'carrier_flight_no',
      depAirportCode: 'dep_airport_code',
      depAirportName: 'dep_airport_name',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightChange: 'flight_change',
      flightNo: 'flight_no',
      flightType: 'flight_type',
      mealDesc: 'meal_desc',
      segmentIId: 'segmentI_id',
      segmentPosition: 'segment_position',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineIconUrl: 'string',
      airlineName: 'string',
      arrAirportCode: 'string',
      arrAirportName: 'string',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinDiscount: 'number',
      carrierAirlineCode: 'string',
      carrierAirlineIconUrl: 'string',
      carrierAirlineName: 'string',
      carrierFlightNo: 'string',
      depAirportCode: 'string',
      depAirportName: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightChange: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSFlightChange,
      flightNo: 'string',
      flightType: 'string',
      mealDesc: 'string',
      segmentIId: 'string',
      segmentPosition: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition,
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee extends $tea.Model {
  changeFee?: number;
  serviceFee?: number;
  upgradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      changeFee: 'change_fee',
      serviceFee: 'service_fee',
      upgradePrice: 'upgrade_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeFee: 'number',
      serviceFee: 'number',
      upgradePrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS extends $tea.Model {
  /**
   * @example
   * 2000-08-19
   */
  birthDate?: string;
  /**
   * @example
   * 430131413423435353
   */
  certNo?: string;
  /**
   * @example
   * 0
   */
  certType?: number;
  changeFee?: FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee;
  /**
   * @example
   * 1
   */
  gender?: number;
  originTicketNos?: string[];
  /**
   * @example
   * 12172819047252004460056
   */
  passengerId?: string;
  passengerName?: string;
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 17635462345
   */
  phone?: string;
  /**
   * @example
   * 3243028
   */
  pid?: number;
  ticketNos?: string[];
  static names(): { [key: string]: string } {
    return {
      birthDate: 'birth_date',
      certNo: 'cert_no',
      certType: 'cert_type',
      changeFee: 'change_fee',
      gender: 'gender',
      originTicketNos: 'origin_ticket_nos',
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
      passengerType: 'passenger_type',
      phone: 'phone',
      pid: 'pid',
      ticketNos: 'ticket_nos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthDate: 'string',
      certNo: 'string',
      certType: 'number',
      changeFee: FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee,
      gender: 'number',
      originTicketNos: { 'type': 'array', 'itemType': 'string' },
      passengerId: 'string',
      passengerName: 'string',
      passengerType: 'number',
      phone: 'string',
      pid: 'number',
      ticketNos: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOrderDetailV2ResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2023-08-14 11:28:01
   */
  applyTime?: string;
  attributes?: FlightModifyOrderDetailV2ResponseBodyModuleAttributes;
  /**
   * @example
   * 17635462345@163.com
   */
  bookUserEmail?: string;
  bookUserName?: string;
  /**
   * @example
   * 17635462345
   */
  bookuserPhone?: string;
  changeFailReason?: string;
  contactInfoDTO?: FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO;
  destFlightInfoDTOS?: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS[];
  /**
   * @example
   * 2023-08-14 11:48:01
   */
  lastPayTime?: string;
  /**
   * @example
   * 1017124195788186048
   */
  orderId?: number;
  /**
   * @example
   * 1017124195788186048
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195836916029
   */
  outSubOrderId?: string;
  /**
   * @example
   * 2023-08-14 11:38:01
   */
  payTime?: string;
  reason?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 1019195836916029
   */
  subOrderId?: number;
  /**
   * @example
   * 2023-08-19 15:24:08
   */
  ticketTime?: string;
  /**
   * @example
   * 100
   */
  totalPrice?: number;
  /**
   * @example
   * 0
   */
  totalServiceFeePrice?: number;
  travelerInfoDTOS?: FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS[];
  static names(): { [key: string]: string } {
    return {
      applyTime: 'apply_time',
      attributes: 'attributes',
      bookUserEmail: 'book_user_email',
      bookUserName: 'book_user_name',
      bookuserPhone: 'bookuser_phone',
      changeFailReason: 'change_fail_reason',
      contactInfoDTO: 'contact_info_d_t_o',
      destFlightInfoDTOS: 'dest_flight_info_d_t_o_s',
      lastPayTime: 'last_pay_time',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      payTime: 'pay_time',
      reason: 'reason',
      status: 'status',
      subOrderId: 'sub_order_id',
      ticketTime: 'ticket_time',
      totalPrice: 'total_price',
      totalServiceFeePrice: 'total_service_fee_price',
      travelerInfoDTOS: 'traveler_info_d_t_o_s',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyTime: 'string',
      attributes: FlightModifyOrderDetailV2ResponseBodyModuleAttributes,
      bookUserEmail: 'string',
      bookUserName: 'string',
      bookuserPhone: 'string',
      changeFailReason: 'string',
      contactInfoDTO: FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO,
      destFlightInfoDTOS: { 'type': 'array', 'itemType': FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS },
      lastPayTime: 'string',
      orderId: 'number',
      outOrderId: 'string',
      outSubOrderId: 'string',
      payTime: 'string',
      reason: 'string',
      status: 'number',
      subOrderId: 'number',
      ticketTime: 'string',
      totalPrice: 'number',
      totalServiceFeePrice: 'number',
      travelerInfoDTOS: { 'type': 'array', 'itemType': FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2RequestPassengerSegmentRelations extends $tea.Model {
  /**
   * @example
   * 3243028
   */
  passengerId?: string;
  segmentIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      segmentIdList: 'segment_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      segmentIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2RequestSelectedSegments extends $tea.Model {
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  /**
   * @example
   * XIL
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-09-18 09:10:00
   */
  depDateTime?: string;
  /**
   * @example
   * 0
   */
  journeySeq?: number;
  /**
   * @example
   * CA1110
   */
  marketingFlightNo?: string;
  /**
   * @example
   * MU8625
   */
  operatingFlightNo?: string;
  /**
   * @example
   * 0
   */
  segmentSeq?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      depCityCode: 'dep_city_code',
      depDateTime: 'dep_date_time',
      journeySeq: 'journey_seq',
      marketingFlightNo: 'marketing_flight_no',
      operatingFlightNo: 'operating_flight_no',
      segmentSeq: 'segment_seq',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      depCityCode: 'string',
      depDateTime: 'string',
      journeySeq: 'number',
      marketingFlightNo: 'string',
      operatingFlightNo: 'string',
      segmentSeq: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosCabinClassInfo extends $tea.Model {
  cabinClass?: string;
  className?: string;
  innerCabinClass?: number;
  quantity?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      className: 'class_name',
      innerCabinClass: 'inner_cabin_class',
      quantity: 'quantity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: 'string',
      className: 'string',
      innerCabinClass: 'number',
      quantity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTOReShopPriceInfoDTO extends $tea.Model {
  reShopAdultChangeFee?: number;
  reShopAdultPrice?: number;
  reShopAdultPriceGap?: number;
  reShopChildChangeFee?: number;
  reShopChildPrice?: number;
  reShopChildPriceGap?: number;
  reShopInfChangeFee?: number;
  reShopInfPrice?: number;
  reShopInfPriceGap?: number;
  static names(): { [key: string]: string } {
    return {
      reShopAdultChangeFee: 're_shop_adult_change_fee',
      reShopAdultPrice: 're_shop_adult_price',
      reShopAdultPriceGap: 're_shop_adult_price_gap',
      reShopChildChangeFee: 're_shop_child_change_fee',
      reShopChildPrice: 're_shop_child_price',
      reShopChildPriceGap: 're_shop_child_price_gap',
      reShopInfChangeFee: 're_shop_inf_change_fee',
      reShopInfPrice: 're_shop_inf_price',
      reShopInfPriceGap: 're_shop_inf_price_gap',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reShopAdultChangeFee: 'number',
      reShopAdultPrice: 'number',
      reShopAdultPriceGap: 'number',
      reShopChildChangeFee: 'number',
      reShopChildPrice: 'number',
      reShopChildPriceGap: 'number',
      reShopInfChangeFee: 'number',
      reShopInfPrice: 'number',
      reShopInfPriceGap: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTO extends $tea.Model {
  adultPrice?: number;
  adultTax?: number;
  adultTotalPrice?: number;
  beforeControlPrice?: number;
  childPrice?: number;
  childTax?: number;
  childTotalPrice?: number;
  infantPrice?: number;
  infantTax?: number;
  infantTotalPrice?: number;
  originalAdultPrice?: number;
  originalAdultTotalPrice?: number;
  reShopPriceInfoDTO?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTOReShopPriceInfoDTO;
  static names(): { [key: string]: string } {
    return {
      adultPrice: 'adult_price',
      adultTax: 'adult_tax',
      adultTotalPrice: 'adult_total_price',
      beforeControlPrice: 'before_control_price',
      childPrice: 'child_price',
      childTax: 'child_tax',
      childTotalPrice: 'child_total_price',
      infantPrice: 'infant_price',
      infantTax: 'infant_tax',
      infantTotalPrice: 'infant_total_price',
      originalAdultPrice: 'original_adult_price',
      originalAdultTotalPrice: 'original_adult_total_price',
      reShopPriceInfoDTO: 're_shop_price_info_d_t_o',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultPrice: 'number',
      adultTax: 'number',
      adultTotalPrice: 'number',
      beforeControlPrice: 'number',
      childPrice: 'number',
      childTax: 'number',
      childTotalPrice: 'number',
      infantPrice: 'number',
      infantTax: 'number',
      infantTotalPrice: 'number',
      originalAdultPrice: 'number',
      originalAdultTotalPrice: 'number',
      reShopPriceInfoDTO: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTOReShopPriceInfoDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfos extends $tea.Model {
  attributeShowInfoMap?: { [key: string]: ModuleAgentInfosAttributeShowInfoMapValue[] };
  bestDiscount?: number;
  cabinClassInfo?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosCabinClassInfo;
  cabinCode?: number;
  cabinName?: string;
  itemId?: string;
  modifyTypeDesc?: string;
  modifyTypeName?: string;
  priceInfoDTO?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTO;
  quantity?: number;
  supportChildTicket?: boolean;
  static names(): { [key: string]: string } {
    return {
      attributeShowInfoMap: 'attribute_show_info_map',
      bestDiscount: 'best_discount',
      cabinClassInfo: 'cabin_class_info',
      cabinCode: 'cabin_code',
      cabinName: 'cabin_name',
      itemId: 'item_id',
      modifyTypeDesc: 'modify_type_desc',
      modifyTypeName: 'modify_type_name',
      priceInfoDTO: 'price_info_d_t_o',
      quantity: 'quantity',
      supportChildTicket: 'support_child_ticket',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attributeShowInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleAgentInfosAttributeShowInfoMapValue } },
      bestDiscount: 'number',
      cabinClassInfo: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosCabinClassInfo,
      cabinCode: 'number',
      cabinName: 'string',
      itemId: 'string',
      modifyTypeDesc: 'string',
      modifyTypeName: 'string',
      priceInfoDTO: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTO,
      quantity: 'number',
      supportChildTicket: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo extends $tea.Model {
  cabinClass?: string;
  className?: string;
  /**
   * @remarks
   * inner_cabin_class
   * 
   * @example
   * 1
   */
  innerCabinClass?: number;
  quantity?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      className: 'class_name',
      innerCabinClass: 'inner_cabin_class',
      quantity: 'quantity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: 'string',
      className: 'string',
      innerCabinClass: 'number',
      quantity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO extends $tea.Model {
  /**
   * @example
   * -1
   */
  reShopAdultChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopAdultPrice?: number;
  /**
   * @example
   * -1
   */
  reShopAdultPriceGap?: number;
  /**
   * @example
   * -1
   */
  reShopChildChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopChildPrice?: number;
  /**
   * @example
   * -1
   */
  reShopChildPriceGap?: number;
  /**
   * @example
   * -1
   */
  reShopInfChangeFee?: number;
  /**
   * @example
   * -1
   */
  reShopInfPrice?: number;
  /**
   * @example
   * -1
   */
  reShopInfPriceGap?: number;
  static names(): { [key: string]: string } {
    return {
      reShopAdultChangeFee: 're_shop_adult_change_fee',
      reShopAdultPrice: 're_shop_adult_price',
      reShopAdultPriceGap: 're_shop_adult_price_gap',
      reShopChildChangeFee: 're_shop_child_change_fee',
      reShopChildPrice: 're_shop_child_price',
      reShopChildPriceGap: 're_shop_child_price_gap',
      reShopInfChangeFee: 're_shop_inf_change_fee',
      reShopInfPrice: 're_shop_inf_price',
      reShopInfPriceGap: 're_shop_inf_price_gap',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reShopAdultChangeFee: 'number',
      reShopAdultPrice: 'number',
      reShopAdultPriceGap: 'number',
      reShopChildChangeFee: 'number',
      reShopChildPrice: 'number',
      reShopChildPriceGap: 'number',
      reShopInfChangeFee: 'number',
      reShopInfPrice: 'number',
      reShopInfPriceGap: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO extends $tea.Model {
  /**
   * @example
   * 126000
   */
  adultPrice?: number;
  /**
   * @example
   * 11000
   */
  adultTax?: number;
  /**
   * @example
   * 137000
   */
  adultTotalPrice?: number;
  /**
   * @example
   * 126000
   */
  beforeControlPrice?: number;
  /**
   * @example
   * 64000
   */
  childPrice?: number;
  /**
   * @example
   * 2000
   */
  childTax?: number;
  /**
   * @example
   * 66000
   */
  childTotalPrice?: number;
  /**
   * @example
   * 120
   */
  infantPrice?: number;
  /**
   * @example
   * 0
   */
  infantTax?: number;
  /**
   * @example
   * 120
   */
  infantTotalPrice?: number;
  /**
   * @example
   * 1300
   */
  originalAdultPrice?: number;
  /**
   * @example
   * 12300
   */
  originalAdultTotalPrice?: number;
  reShopPriceInfoDTO?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO;
  static names(): { [key: string]: string } {
    return {
      adultPrice: 'adult_price',
      adultTax: 'adult_tax',
      adultTotalPrice: 'adult_total_price',
      beforeControlPrice: 'before_control_price',
      childPrice: 'child_price',
      childTax: 'child_tax',
      childTotalPrice: 'child_total_price',
      infantPrice: 'infant_price',
      infantTax: 'infant_tax',
      infantTotalPrice: 'infant_total_price',
      originalAdultPrice: 'original_adult_price',
      originalAdultTotalPrice: 'original_adult_total_price',
      reShopPriceInfoDTO: 're_shop_price_info_d_t_o',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultPrice: 'number',
      adultTax: 'number',
      adultTotalPrice: 'number',
      beforeControlPrice: 'number',
      childPrice: 'number',
      childTax: 'number',
      childTotalPrice: 'number',
      infantPrice: 'number',
      infantTax: 'number',
      infantTotalPrice: 'number',
      originalAdultPrice: 'number',
      originalAdultTotalPrice: 'number',
      reShopPriceInfoDTO: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo extends $tea.Model {
  attributeShowInfoMap?: { [key: string]: ModuleAgentInfoAttributeShowInfoMapValue[] };
  /**
   * @example
   * 10
   */
  bestDiscount?: number;
  cabinClassInfo?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo;
  /**
   * @example
   * 1
   */
  cabinCode?: number;
  cabinName?: string;
  /**
   * @remarks
   * item_id
   * 
   * @example
   * c85124c527fc4b26b86d0c043ddc08d3_0
   */
  itemId?: string;
  modifyTypeDesc?: string;
  modifyTypeName?: string;
  priceInfoDTO?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO;
  /**
   * @example
   * 8
   */
  quantity?: number;
  /**
   * @example
   * true
   */
  supportChildTicket?: boolean;
  static names(): { [key: string]: string } {
    return {
      attributeShowInfoMap: 'attribute_show_info_map',
      bestDiscount: 'best_discount',
      cabinClassInfo: 'cabin_class_info',
      cabinCode: 'cabin_code',
      cabinName: 'cabin_name',
      itemId: 'item_id',
      modifyTypeDesc: 'modify_type_desc',
      modifyTypeName: 'modify_type_name',
      priceInfoDTO: 'price_info_d_t_o',
      quantity: 'quantity',
      supportChildTicket: 'support_child_ticket',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attributeShowInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleAgentInfoAttributeShowInfoMapValue } },
      bestDiscount: 'number',
      cabinClassInfo: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo,
      cabinCode: 'number',
      cabinName: 'string',
      itemId: 'string',
      modifyTypeDesc: 'string',
      modifyTypeName: 'string',
      priceInfoDTO: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO,
      quantity: 'number',
      supportChildTicket: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo extends $tea.Model {
  /**
   * @example
   * XIL
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * T2
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * //gw.alicdn.com/tfs/TB12fJAFHr1gK0jSZR0XXbP8XXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo extends $tea.Model {
  airlineCode?: string;
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo extends $tea.Model {
  operatingFlightNo?: string;
  operatingAirlineInfo?: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo;
  static names(): { [key: string]: string } {
    return {
      operatingFlightNo: 'operating_flight_no',
      operatingAirlineInfo: 'operating_airline_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingFlightNo: 'string',
      operatingAirlineInfo: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo extends $tea.Model {
  stopCityName?: string;
  stopArrTime?: string;
  stopDepTime?: string;
  stopCityCode?: string;
  stopAirport?: string;
  stopArrTerm?: string;
  stopDepTerm?: string;
  static names(): { [key: string]: string } {
    return {
      stopCityName: 'stop_city_name',
      stopArrTime: 'stop_arr_time',
      stopDepTime: 'stop_dep_time',
      stopCityCode: 'stop_city_code',
      stopAirport: 'stop_airport',
      stopArrTerm: 'stop_arr_term',
      stopDepTerm: 'stop_dep_term',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopCityName: 'string',
      stopArrTime: 'string',
      stopDepTime: 'string',
      stopCityCode: 'string',
      stopAirport: 'string',
      stopArrTerm: 'string',
      stopDepTerm: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeySeq?: number;
  /**
   * @example
   * 0
   */
  segmentSeq?: number;
  /**
   * @example
   * CA1110
   */
  flightNo?: string;
  /**
   * @example
   * XIL
   */
  depCityCode?: string;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  depCityName?: string;
  arrCityName?: string;
  depAirportInfo?: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo;
  arrAirportInfo?: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo;
  /**
   * @example
   * 2023-09-18 09:10:00
   */
  depTime?: string;
  /**
   * @example
   * 2023-09-18 10:25:00
   */
  arrTime?: string;
  airlineInfo?: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo;
  /**
   * @example
   * false
   */
  share?: boolean;
  flightSharedInfo?: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo;
  /**
   * @example
   * false
   */
  stop?: boolean;
  flightStopInfo?: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo;
  /**
   * @example
   * 20
   */
  transferTime?: number;
  /**
   * @example
   * 75
   */
  duration?: number;
  manufacturer?: string;
  /**
   * @example
   * ARJ
   */
  flightType?: string;
  flightSize?: string;
  mealDesc?: string;
  onTimeRate?: string;
  static names(): { [key: string]: string } {
    return {
      journeySeq: 'journey_seq',
      segmentSeq: 'segment_seq',
      flightNo: 'flight_no',
      depCityCode: 'dep_city_code',
      arrCityCode: 'arr_city_code',
      depCityName: 'dep_city_name',
      arrCityName: 'arr_city_name',
      depAirportInfo: 'dep_airport_info',
      arrAirportInfo: 'arr_airport_info',
      depTime: 'dep_time',
      arrTime: 'arr_time',
      airlineInfo: 'airline_info',
      share: 'share',
      flightSharedInfo: 'flight_shared_info',
      stop: 'stop',
      flightStopInfo: 'flight_stop_info',
      transferTime: 'transfer_time',
      duration: 'duration',
      manufacturer: 'manufacturer',
      flightType: 'flight_type',
      flightSize: 'flight_size',
      mealDesc: 'meal_desc',
      onTimeRate: 'on_time_rate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeySeq: 'number',
      segmentSeq: 'number',
      flightNo: 'string',
      depCityCode: 'string',
      arrCityCode: 'string',
      depCityName: 'string',
      arrCityName: 'string',
      depAirportInfo: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo,
      arrAirportInfo: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo,
      depTime: 'string',
      arrTime: 'string',
      airlineInfo: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo,
      share: 'boolean',
      flightSharedInfo: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo,
      stop: 'boolean',
      flightStopInfo: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo,
      transferTime: 'number',
      duration: 'number',
      manufacturer: 'string',
      flightType: 'string',
      flightSize: 'string',
      mealDesc: 'string',
      onTimeRate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModulePassengerCount extends $tea.Model {
  /**
   * @example
   * 1
   */
  adultPassengerNum?: number;
  /**
   * @example
   * 0
   */
  childPassengerNum?: number;
  /**
   * @example
   * 0
   */
  infantPassengerNum?: number;
  static names(): { [key: string]: string } {
    return {
      adultPassengerNum: 'adult_passenger_num',
      childPassengerNum: 'child_passenger_num',
      infantPassengerNum: 'infant_passenger_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adultPassengerNum: 'number',
      childPassengerNum: 'number',
      infantPassengerNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightModifyOtaSearchV2ResponseBodyModule extends $tea.Model {
  agentInfos?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfos[];
  agentInfo?: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo;
  /**
   * @example
   * 2136019116915615639457351e06ee
   */
  cacheKey?: string;
  flightSegmentInfos?: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos[][];
  passengerCount?: FlightModifyOtaSearchV2ResponseBodyModulePassengerCount;
  /**
   * @example
   * a2ffebfe733742aab5c491d960ba3d59
   */
  sessionId?: string;
  static names(): { [key: string]: string } {
    return {
      agentInfos: 'agentInfos',
      agentInfo: 'agent_info',
      cacheKey: 'cache_key',
      flightSegmentInfos: 'flight_segment_infos',
      passengerCount: 'passenger_count',
      sessionId: 'session_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentInfos: { 'type': 'array', 'itemType': FlightModifyOtaSearchV2ResponseBodyModuleAgentInfos },
      agentInfo: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo,
      cacheKey: 'string',
      flightSegmentInfos: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos } },
      passengerCount: FlightModifyOtaSearchV2ResponseBodyModulePassengerCount,
      sessionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoResponseBodyModuleFlightInfoList extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  arrAirport?: string;
  /**
   * @example
   * LHW
   */
  arrAirportCode?: string;
  arrAirportCodeName?: string;
  /**
   * @example
   * HGH
   */
  arrCity?: string;
  /**
   * @example
   * LHW
   */
  arrCityCode?: string;
  arrTerminal?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  arrTime?: string;
  /**
   * @example
   * “”
   */
  baggage?: string;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  cabin?: string;
  cabinClass?: string;
  /**
   * @example
   * "CA1351_PEK_CAN_2000-00-00 08:00
   */
  carrier?: string;
  depAirport?: string;
  /**
   * @example
   * NGB
   */
  depAirportCode?: string;
  depAirportCodeName?: string;
  /**
   * @example
   * BJS
   */
  depCity?: string;
  /**
   * @example
   * NGB
   */
  depCityCode?: string;
  depTerminal?: string;
  /**
   * @example
   * 2000-01-01 00:00:00
   */
  depTime?: string;
  /**
   * @example
   * CA1351
   */
  flightNo?: string;
  /**
   * @example
   * Y
   */
  lastCabin?: string;
  /**
   * @example
   * CA1351
   */
  lastFlightNo?: string;
  meal?: string;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  /**
   * @example
   * 0
   */
  segmentType?: number;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  stopArrTime?: string;
  /**
   * @example
   * CAN
   */
  stopCity?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  stopDepTime?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * “”
   */
  tuigaiqianInfo?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
      arrAirport: 'arr_airport',
      arrAirportCode: 'arr_airport_code',
      arrAirportCodeName: 'arr_airport_code_name',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      baggage: 'baggage',
      buildPrice: 'build_price',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      carrier: 'carrier',
      depAirport: 'dep_airport',
      depAirportCode: 'dep_airport_code',
      depAirportCodeName: 'dep_airport_code_name',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      lastCabin: 'last_cabin',
      lastFlightNo: 'last_flight_no',
      meal: 'meal',
      oilPrice: 'oil_price',
      segmentType: 'segment_type',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
      ticketPrice: 'ticket_price',
      tuigaiqianInfo: 'tuigaiqian_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
      arrAirport: 'string',
      arrAirportCode: 'string',
      arrAirportCodeName: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      baggage: 'string',
      buildPrice: 'number',
      cabin: 'string',
      cabinClass: 'string',
      carrier: 'string',
      depAirport: 'string',
      depAirportCode: 'string',
      depAirportCodeName: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      lastCabin: 'string',
      lastFlightNo: 'string',
      meal: 'string',
      oilPrice: 'number',
      segmentType: 'number',
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
      ticketPrice: 'number',
      tuigaiqianInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoResponseBodyModuleTicketInfoList extends $tea.Model {
  /**
   * @example
   * 0
   */
  openTicketStatus?: string;
  /**
   * @example
   * KF0528
   */
  pnrCode?: string;
  /**
   * @example
   * 444-000000000
   */
  ticketNo?: string;
  /**
   * @example
   * 1
   */
  ticketStatus?: string;
  static names(): { [key: string]: string } {
    return {
      openTicketStatus: 'open_ticket_status',
      pnrCode: 'pnr_code',
      ticketNo: 'ticket_no',
      ticketStatus: 'ticket_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      openTicketStatus: 'string',
      pnrCode: 'string',
      ticketNo: 'string',
      ticketStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoResponseBodyModuleTravelerInfoList extends $tea.Model {
  /**
   * @example
   * 2000-01-01
   */
  birthDate?: string;
  /**
   * @example
   * 1234
   */
  certNo?: string;
  /**
   * @example
   * 0
   */
  certType?: string;
  /**
   * @example
   * 0
   */
  openTicketStatus?: number;
  passengerName?: string;
  /**
   * @example
   * 0
   */
  passengerType?: string;
  /**
   * @example
   * 12345678909
   */
  phone?: string;
  /**
   * @example
   * 444-000000000
   */
  ticketNo?: string;
  /**
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      birthDate: 'birth_date',
      certNo: 'cert_no',
      certType: 'cert_type',
      openTicketStatus: 'open_ticket_status',
      passengerName: 'passenger_name',
      passengerType: 'passenger_type',
      phone: 'phone',
      ticketNo: 'ticket_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthDate: 'string',
      certNo: 'string',
      certType: 'string',
      openTicketStatus: 'number',
      passengerName: 'string',
      passengerType: 'string',
      phone: 'string',
      ticketNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailInfoResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2389927372772
   */
  alipayTradeNo?: string;
  /**
   * @example
   * 1223
   */
  bookUserId?: string;
  /**
   * @example
   * 123
   */
  btripOrderId?: number;
  contactName?: string;
  /**
   * @example
   * 12345678909
   */
  contactPhone?: string;
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * {}
   */
  extra?: string;
  flightInfoList?: FlightOrderDetailInfoResponseBodyModuleFlightInfoList[];
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  lastPayTime?: string;
  /**
   * @example
   * 0
   */
  payStatus?: number;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  payTime?: string;
  /**
   * @example
   * 1000
   */
  promotionPrice?: number;
  /**
   * @example
   * 100
   */
  settleAmount?: number;
  /**
   * @example
   * 0
   */
  settleType?: number;
  /**
   * @example
   * 1
   */
  status?: number;
  ticketInfoList?: FlightOrderDetailInfoResponseBodyModuleTicketInfoList[];
  /**
   * @example
   * 1000
   */
  totalBuildPrice?: number;
  /**
   * @example
   * 1000
   */
  totalOilPrice?: number;
  /**
   * @example
   * 1000
   */
  totalOrderPrice?: number;
  travelerInfoList?: FlightOrderDetailInfoResponseBodyModuleTravelerInfoList[];
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      bookUserId: 'book_user_id',
      btripOrderId: 'btrip_order_id',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      disOrderId: 'dis_order_id',
      extra: 'extra',
      flightInfoList: 'flight_info_list',
      lastPayTime: 'last_pay_time',
      payStatus: 'pay_status',
      payTime: 'pay_time',
      promotionPrice: 'promotion_price',
      settleAmount: 'settle_amount',
      settleType: 'settle_type',
      status: 'status',
      ticketInfoList: 'ticket_info_list',
      totalBuildPrice: 'total_build_price',
      totalOilPrice: 'total_oil_price',
      totalOrderPrice: 'total_order_price',
      travelerInfoList: 'traveler_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      bookUserId: 'string',
      btripOrderId: 'number',
      contactName: 'string',
      contactPhone: 'string',
      disOrderId: 'string',
      extra: 'string',
      flightInfoList: { 'type': 'array', 'itemType': FlightOrderDetailInfoResponseBodyModuleFlightInfoList },
      lastPayTime: 'string',
      payStatus: 'number',
      payTime: 'string',
      promotionPrice: 'number',
      settleAmount: 'number',
      settleType: 'number',
      status: 'number',
      ticketInfoList: { 'type': 'array', 'itemType': FlightOrderDetailInfoResponseBodyModuleTicketInfoList },
      totalBuildPrice: 'number',
      totalOilPrice: 'number',
      totalOrderPrice: 'number',
      travelerInfoList: { 'type': 'array', 'itemType': FlightOrderDetailInfoResponseBodyModuleTravelerInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModuleContactInfoDTO extends $tea.Model {
  /**
   * @example
   * 178169630111@163.com
   */
  contactEmail?: string;
  contactName?: string;
  /**
   * @example
   * 178169630111
   */
  contactPhone?: string;
  /**
   * @example
   * true
   */
  sendMsgToPassenger?: boolean;
  static names(): { [key: string]: string } {
    return {
      contactEmail: 'contact_email',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      sendMsgToPassenger: 'send_msg_to_passenger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactEmail: 'string',
      contactName: 'string',
      contactPhone: 'string',
      sendMsgToPassenger: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange extends $tea.Model {
  changeDesc?: string;
  changeStatus?: string;
  changeStatusCode?: string;
  newSegment?: any;
  passengerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      changeDesc: 'change_desc',
      changeStatus: 'change_status',
      changeStatusCode: 'change_status_code',
      newSegment: 'new_segment',
      passengerNames: 'passenger_names',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeDesc: 'string',
      changeStatus: 'string',
      changeStatusCode: 'string',
      newSegment: 'any',
      passengerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList extends $tea.Model {
  /**
   * @example
   * CA
   */
  airLineCode?: string;
  /**
   * @example
   * Air China Limited
   */
  airLineEnglishName?: string;
  airLineName?: string;
  /**
   * @example
   * 95583
   */
  airLinePhone?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB12fJAFHr1gK0jSZR0XXbP8XXa-450-450.png
   */
  airlineIconUrl?: string;
  airlineShortName?: string;
  /**
   * @example
   * XIL
   */
  arrAirportCode?: string;
  arrAirportName?: string;
  /**
   * @example
   * XIL
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-07-20 08:25:00
   */
  arrTime?: string;
  arriveTerminal?: string;
  /**
   * @remarks
   * cabin
   */
  cabin?: string;
  cabinAndDiscount?: string;
  /**
   * @remarks
   * cabin_class
   * 
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @remarks
   * cabin_class_name
   */
  cabinClassName?: string;
  /**
   * @example
   * false
   */
  codeShare?: boolean;
  deadlineText?: string;
  /**
   * @example
   * PEK
   */
  depAirportCode?: string;
  depAirportName?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-07-29
   */
  depDate?: string;
  /**
   * @example
   * 2023-07-20 07:00:00
   */
  depTime?: string;
  departTerminal?: string;
  /**
   * @example
   * 0.4
   */
  discount?: number;
  flightChange?: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange;
  /**
   * @example
   * CA1110
   */
  flightNo?: string;
  /**
   * @example
   * ARJ
   */
  flightType?: string;
  flyDuration?: number;
  manufacturer?: string;
  mealDesc?: string;
  onTimeRate?: string;
  operatingAirShortName?: string;
  operatingAirlineCode?: string;
  operatingAirlineEnglishName?: string;
  operatingAirlineIconUrl?: string;
  operatingAirlineName?: string;
  operatingAirlinePhone?: string;
  operatingFlightNo?: string;
  planeType?: string;
  raisePrice?: number;
  segmentId?: string;
  /**
   * @remarks
   * segmentIndex
   * 
   * @example
   * 0
   */
  segmentIndex?: number;
  segmentPosition?: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition;
  stopAirport?: string;
  stopArrTime?: string;
  stopCity?: string;
  stopCityName?: string;
  stopDepTime?: string;
  stopQuantity?: number;
  static names(): { [key: string]: string } {
    return {
      airLineCode: 'air_line_code',
      airLineEnglishName: 'air_line_english_name',
      airLineName: 'air_line_name',
      airLinePhone: 'air_line_phone',
      airlineIconUrl: 'airline_icon_url',
      airlineShortName: 'airline_short_name',
      arrAirportCode: 'arr_airport_code',
      arrAirportName: 'arr_airport_name',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      arriveTerminal: 'arrive_terminal',
      cabin: 'cabin',
      cabinAndDiscount: 'cabin_and_discount',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      codeShare: 'code_share',
      deadlineText: 'deadline_text',
      depAirportCode: 'dep_airport_code',
      depAirportName: 'dep_airport_name',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depDate: 'dep_date',
      depTime: 'dep_time',
      departTerminal: 'depart_terminal',
      discount: 'discount',
      flightChange: 'flight_change',
      flightNo: 'flight_no',
      flightType: 'flight_type',
      flyDuration: 'fly_duration',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      onTimeRate: 'on_time_rate',
      operatingAirShortName: 'operating_air_short_name',
      operatingAirlineCode: 'operating_airline_code',
      operatingAirlineEnglishName: 'operating_airline_english_name',
      operatingAirlineIconUrl: 'operating_airline_icon_url',
      operatingAirlineName: 'operating_airline_name',
      operatingAirlinePhone: 'operating_airline_phone',
      operatingFlightNo: 'operating_flight_no',
      planeType: 'plane_type',
      raisePrice: 'raise_price',
      segmentId: 'segment_id',
      segmentIndex: 'segment_index',
      segmentPosition: 'segment_position',
      stopAirport: 'stop_airport',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopCityName: 'stop_city_name',
      stopDepTime: 'stop_dep_time',
      stopQuantity: 'stop_quantity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airLineCode: 'string',
      airLineEnglishName: 'string',
      airLineName: 'string',
      airLinePhone: 'string',
      airlineIconUrl: 'string',
      airlineShortName: 'string',
      arrAirportCode: 'string',
      arrAirportName: 'string',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      arriveTerminal: 'string',
      cabin: 'string',
      cabinAndDiscount: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      codeShare: 'boolean',
      deadlineText: 'string',
      depAirportCode: 'string',
      depAirportName: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depDate: 'string',
      depTime: 'string',
      departTerminal: 'string',
      discount: 'number',
      flightChange: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange,
      flightNo: 'string',
      flightType: 'string',
      flyDuration: 'number',
      manufacturer: 'string',
      mealDesc: 'string',
      onTimeRate: 'string',
      operatingAirShortName: 'string',
      operatingAirlineCode: 'string',
      operatingAirlineEnglishName: 'string',
      operatingAirlineIconUrl: 'string',
      operatingAirlineName: 'string',
      operatingAirlinePhone: 'string',
      operatingFlightNo: 'string',
      planeType: 'string',
      raisePrice: 'number',
      segmentId: 'string',
      segmentIndex: 'number',
      segmentPosition: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition,
      stopAirport: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopCityName: 'string',
      stopDepTime: 'string',
      stopQuantity: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys extends $tea.Model {
  /**
   * @example
   * 85
   */
  allFlyDuration?: number;
  /**
   * @example
   * 85
   */
  allFlyDurationAfterChange?: number;
  applyId?: number;
  /**
   * @example
   * XIL
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-07-20 08:25:00
   */
  arrTime?: string;
  baggageDetails?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-07-20 07:00:00
   */
  depTime?: string;
  flightStatus?: string;
  /**
   * @remarks
   * iata_no
   * 
   * @example
   * iata_no
   */
  iataNo?: string;
  isReshopJourney?: boolean;
  isTransfer?: boolean;
  journeyTitle?: string;
  refundChangeDetails?: string;
  segmentList?: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList[];
  static names(): { [key: string]: string } {
    return {
      allFlyDuration: 'all_fly_duration',
      allFlyDurationAfterChange: 'all_fly_duration_after_change',
      applyId: 'apply_id',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      baggageDetails: 'baggage_details',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      flightStatus: 'flight_status',
      iataNo: 'iata_no',
      isReshopJourney: 'is_reshop_journey',
      isTransfer: 'is_transfer',
      journeyTitle: 'journey_title',
      refundChangeDetails: 'refund_change_details',
      segmentList: 'segment_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allFlyDuration: 'number',
      allFlyDurationAfterChange: 'number',
      applyId: 'number',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      baggageDetails: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      flightStatus: 'string',
      iataNo: 'string',
      isReshopJourney: 'boolean',
      isTransfer: 'boolean',
      journeyTitle: 'string',
      refundChangeDetails: 'string',
      segmentList: { 'type': 'array', 'itemType': FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO extends $tea.Model {
  journeys?: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys[];
  noticeTips?: string;
  tripType?: string;
  /**
   * @example
   * 2
   */
  tripTypeCode?: number;
  static names(): { [key: string]: string } {
    return {
      journeys: 'journeys',
      noticeTips: 'notice_tips',
      tripType: 'trip_type',
      tripTypeCode: 'trip_type_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeys: { 'type': 'array', 'itemType': FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys },
      noticeTips: 'string',
      tripType: 'string',
      tripTypeCode: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModulePassengerListCredential extends $tea.Model {
  /**
   * @example
   * 1991-06-21 00:00:00
   */
  birthDate?: string;
  /**
   * @example
   * 1991-06-21 00:00:00
   */
  certIssueDate?: string;
  certIssuePlace?: string;
  credentialNo?: string;
  driveLicenceFirst?: string;
  driveLicenceType?: string;
  /**
   * @example
   * 1991-06-21 00:00:00
   */
  expireDate?: string;
  holderNationality?: string;
  /**
   * @example
   * 131332
   */
  id?: number;
  idCheckCode?: string;
  issueCountry?: string;
  /**
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      birthDate: 'birth_date',
      certIssueDate: 'cert_issue_date',
      certIssuePlace: 'cert_issue_place',
      credentialNo: 'credential_no',
      driveLicenceFirst: 'drive_licence_first',
      driveLicenceType: 'drive_licence_type',
      expireDate: 'expire_date',
      holderNationality: 'holder_nationality',
      id: 'id',
      idCheckCode: 'id_check_code',
      issueCountry: 'issue_country',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthDate: 'string',
      certIssueDate: 'string',
      certIssuePlace: 'string',
      credentialNo: 'string',
      driveLicenceFirst: 'string',
      driveLicenceType: 'string',
      expireDate: 'string',
      holderNationality: 'string',
      id: 'number',
      idCheckCode: 'string',
      issueCountry: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModulePassengerListCredentials extends $tea.Model {
  birthDate?: string;
  certIssueDate?: string;
  certIssuePlace?: string;
  credentialNo?: string;
  driveLicenceFirst?: string;
  driveLicenceType?: string;
  expireDate?: string;
  holderNationality?: string;
  /**
   * @example
   * 131332
   */
  id?: number;
  idCheckCode?: string;
  issueCountry?: string;
  /**
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      birthDate: 'birth_date',
      certIssueDate: 'cert_issue_date',
      certIssuePlace: 'cert_issue_place',
      credentialNo: 'credential_no',
      driveLicenceFirst: 'drive_licence_first',
      driveLicenceType: 'drive_licence_type',
      expireDate: 'expire_date',
      holderNationality: 'holder_nationality',
      id: 'id',
      idCheckCode: 'id_check_code',
      issueCountry: 'issue_country',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthDate: 'string',
      certIssueDate: 'string',
      certIssuePlace: 'string',
      credentialNo: 'string',
      driveLicenceFirst: 'string',
      driveLicenceType: 'string',
      expireDate: 'string',
      holderNationality: 'string',
      id: 'number',
      idCheckCode: 'string',
      issueCountry: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList extends $tea.Model {
  journeyIndex?: number;
  openTicketStatus?: number;
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      openTicketStatus: 'open_ticket_status',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      openTicketStatus: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModulePassengerListTickets extends $tea.Model {
  channel?: string;
  journeyTitle?: string;
  /**
   * @example
   * OPEN_FOR_USE
   */
  openTicketStatus?: string;
  /**
   * @remarks
   * pcc/office
   * 
   * @example
   * pcc/office
   */
  pcc?: string;
  segmentOpenTicketList?: FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList[];
  ticketAuthMemo?: string;
  /**
   * @example
   * 2
   */
  ticketAuthStatus?: number;
  /**
   * @example
   * 444-2023062999
   */
  ticketNo?: string;
  /**
   * @example
   * 4500
   */
  ticketPrice?: number;
  ticketStatus?: string;
  static names(): { [key: string]: string } {
    return {
      channel: 'channel',
      journeyTitle: 'journey_title',
      openTicketStatus: 'open_ticket_status',
      pcc: 'pcc',
      segmentOpenTicketList: 'segment_open_ticket_list',
      ticketAuthMemo: 'ticket_auth_memo',
      ticketAuthStatus: 'ticket_auth_status',
      ticketNo: 'ticket_no',
      ticketPrice: 'ticket_price',
      ticketStatus: 'ticket_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      channel: 'string',
      journeyTitle: 'string',
      openTicketStatus: 'string',
      pcc: 'string',
      segmentOpenTicketList: { 'type': 'array', 'itemType': FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList },
      ticketAuthMemo: 'string',
      ticketAuthStatus: 'number',
      ticketNo: 'string',
      ticketPrice: 'number',
      ticketStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModulePassengerList extends $tea.Model {
  /**
   * @example
   * 1991-06-21 00:00:00
   */
  birthday?: string;
  /**
   * @example
   * 12172819047252004460056
   */
  btripUserId?: string;
  code?: number;
  country?: string;
  /**
   * @example
   * CN
   */
  countryCode?: string;
  credential?: FlightOrderDetailV2ResponseBodyModulePassengerListCredential;
  credentials?: FlightOrderDetailV2ResponseBodyModulePassengerListCredentials[];
  /**
   * @example
   * 17800000001@163.com
   */
  email?: string;
  /**
   * @example
   * san
   */
  enFirstName?: string;
  /**
   * @example
   * zhang
   */
  enLastName?: string;
  /**
   * @example
   * zhangsan
   */
  englishName?: string;
  /**
   * @example
   * 1
   */
  gender?: number;
  /**
   * @example
   * 3243028
   */
  id?: string;
  /**
   * @example
   * true
   */
  isComplete?: boolean;
  /**
   * @example
   * false
   */
  isFrequently?: boolean;
  memo?: string;
  /**
   * @example
   * 86
   */
  mobileCountryCode?: string;
  /**
   * @example
   * 17800000001
   */
  mobilePhoneNumber?: string;
  name?: string;
  /**
   * @example
   * true
   */
  oneself?: boolean;
  orderName?: string;
  /**
   * @example
   * 1111
   */
  outPassengerId?: string;
  /**
   * @example
   * 17800000001
   */
  phone?: string;
  /**
   * @example
   * 111
   */
  shengPiPinyin?: string;
  ticketNos?: string[];
  tickets?: FlightOrderDetailV2ResponseBodyModulePassengerListTickets[];
  /**
   * @example
   * 0
   */
  type?: number;
  /**
   * @example
   * 312312
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      btripUserId: 'btrip_user_id',
      code: 'code',
      country: 'country',
      countryCode: 'country_code',
      credential: 'credential',
      credentials: 'credentials',
      email: 'email',
      enFirstName: 'en_first_name',
      enLastName: 'en_last_name',
      englishName: 'english_name',
      gender: 'gender',
      id: 'id',
      isComplete: 'is_complete',
      isFrequently: 'is_frequently',
      memo: 'memo',
      mobileCountryCode: 'mobile_country_code',
      mobilePhoneNumber: 'mobile_phone_number',
      name: 'name',
      oneself: 'oneself',
      orderName: 'order_name',
      outPassengerId: 'out_passenger_id',
      phone: 'phone',
      shengPiPinyin: 'sheng_pi_pinyin',
      ticketNos: 'ticket_nos',
      tickets: 'tickets',
      type: 'type',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      btripUserId: 'string',
      code: 'number',
      country: 'string',
      countryCode: 'string',
      credential: FlightOrderDetailV2ResponseBodyModulePassengerListCredential,
      credentials: { 'type': 'array', 'itemType': FlightOrderDetailV2ResponseBodyModulePassengerListCredentials },
      email: 'string',
      enFirstName: 'string',
      enLastName: 'string',
      englishName: 'string',
      gender: 'number',
      id: 'string',
      isComplete: 'boolean',
      isFrequently: 'boolean',
      memo: 'string',
      mobileCountryCode: 'string',
      mobilePhoneNumber: 'string',
      name: 'string',
      oneself: 'boolean',
      orderName: 'string',
      outPassengerId: 'string',
      phone: 'string',
      shengPiPinyin: 'string',
      ticketNos: { 'type': 'array', 'itemType': 'string' },
      tickets: { 'type': 'array', 'itemType': FlightOrderDetailV2ResponseBodyModulePassengerListTickets },
      type: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderDetailV2ResponseBodyModule extends $tea.Model {
  b2gVipCode?: string;
  /**
   * @example
   * 2023-06-29 15:28:44
   */
  bookSuccTime?: string;
  /**
   * @example
   * qingg1234
   */
  bookUserId?: string;
  bookUserName?: string;
  /**
   * @example
   * 0
   */
  buildPrice?: number;
  contactInfoDTO?: FlightOrderDetailV2ResponseBodyModuleContactInfoDTO;
  /**
   * @example
   * 2023-06-29 15:03:11
   */
  createTime?: string;
  /**
   * @example
   * 126000
   */
  facevalue?: number;
  flightTaleInfoDTO?: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO;
  /**
   * @example
   * false
   */
  isProtocol?: boolean;
  /**
   * @example
   * false
   */
  isemergency?: boolean;
  /**
   * @example
   * true
   */
  issendmessage?: boolean;
  /**
   * @example
   * 4000
   */
  oilPrice?: number;
  /**
   * @example
   * 1017002195370467200
   */
  orderId?: number;
  /**
   * @example
   * 8500
   */
  orderPrice?: number;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  passengerList?: FlightOrderDetailV2ResponseBodyModulePassengerList[];
  /**
   * @remarks
   * key :passengerId
   * 
   * value :segmentId
   */
  passengerSegmentMap?: { [key: string]: string };
  /**
   * @example
   * 2023-06-29 15:03:59
   */
  payTime?: string;
  /**
   * @example
   * 4500
   */
  saleprice?: number;
  /**
   * @example
   * true
   */
  sendcpsms?: boolean;
  /**
   * @example
   * 5
   */
  status?: number;
  /**
   * @example
   * 3
   */
  totalServiceFeePrice?: number;
  static names(): { [key: string]: string } {
    return {
      b2gVipCode: 'b2g_vip_code',
      bookSuccTime: 'book_succ_time',
      bookUserId: 'book_user_id',
      bookUserName: 'book_user_name',
      buildPrice: 'build_price',
      contactInfoDTO: 'contact_info_d_t_o',
      createTime: 'create_time',
      facevalue: 'facevalue',
      flightTaleInfoDTO: 'flight_tale_info_d_t_o',
      isProtocol: 'is_protocol',
      isemergency: 'isemergency',
      issendmessage: 'issendmessage',
      oilPrice: 'oil_price',
      orderId: 'order_id',
      orderPrice: 'order_price',
      outOrderId: 'out_order_id',
      passengerList: 'passenger_list',
      passengerSegmentMap: 'passenger_segment_map',
      payTime: 'pay_time',
      saleprice: 'saleprice',
      sendcpsms: 'sendcpsms',
      status: 'status',
      totalServiceFeePrice: 'total_service_fee_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      b2gVipCode: 'string',
      bookSuccTime: 'string',
      bookUserId: 'string',
      bookUserName: 'string',
      buildPrice: 'number',
      contactInfoDTO: FlightOrderDetailV2ResponseBodyModuleContactInfoDTO,
      createTime: 'string',
      facevalue: 'number',
      flightTaleInfoDTO: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO,
      isProtocol: 'boolean',
      isemergency: 'boolean',
      issendmessage: 'boolean',
      oilPrice: 'number',
      orderId: 'number',
      orderPrice: 'number',
      outOrderId: 'string',
      passengerList: { 'type': 'array', 'itemType': FlightOrderDetailV2ResponseBodyModulePassengerList },
      passengerSegmentMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      payTime: 'string',
      saleprice: 'number',
      sendcpsms: 'boolean',
      status: 'number',
      totalServiceFeePrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBodyModuleCostCenter extends $tea.Model {
  corpId?: string;
  /**
   * @example
   * 44632
   */
  id?: number;
  name?: string;
  /**
   * @example
   * NM98767
   */
  number?: string;
  static names(): { [key: string]: string } {
    return {
      corpId: 'corp_id',
      id: 'id',
      name: 'name',
      number: 'number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpId: 'string',
      id: 'number',
      name: 'string',
      number: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBodyModuleInsureInfoList extends $tea.Model {
  /**
   * @example
   * KJ-879657
   */
  insureNo?: string;
  name?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      insureNo: 'insure_no',
      name: 'name',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      insureNo: 'string',
      name: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBodyModuleInvoice extends $tea.Model {
  /**
   * @example
   * 7304
   */
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 1
   */
  categoryType?: number;
  /**
   * @example
   * MU5354
   */
  changeFlightNo?: string;
  /**
   * @example
   * 12%
   */
  discount?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  endTime?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 00-7687
   */
  originalTicketNo?: string;
  passengerName?: string;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  startTime?: string;
  /**
   * @example
   * A-135767
   */
  ticketNo?: string;
  /**
   * @example
   * f98236773
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      categoryType: 'category_type',
      changeFlightNo: 'change_flight_no',
      discount: 'discount',
      endTime: 'end_time',
      gmtCreate: 'gmt_create',
      originalTicketNo: 'original_ticket_no',
      passengerName: 'passenger_name',
      payType: 'pay_type',
      price: 'price',
      startTime: 'start_time',
      ticketNo: 'ticket_no',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      categoryType: 'number',
      changeFlightNo: 'string',
      discount: 'string',
      endTime: 'string',
      gmtCreate: 'string',
      originalTicketNo: 'string',
      passengerName: 'string',
      payType: 'number',
      price: 'number',
      startTime: 'string',
      ticketNo: 'string',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBodyModuleUserAffiliateList extends $tea.Model {
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 11774
   */
  applyId?: number;
  arrAirport?: string;
  arrCity?: string;
  arrCityAdCode?: string;
  btripTitle?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  contactName?: string;
  corpId?: string;
  corpName?: string;
  costCenter?: FlightOrderListQueryResponseBodyModuleCostCenter;
  depAirport?: string;
  depCity?: string;
  depCityAdCode?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depDate?: string;
  departId?: string;
  departName?: string;
  /**
   * @example
   * 30.12%
   */
  discount?: string;
  /**
   * @example
   * MU7854
   */
  flightNo?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtModified?: string;
  /**
   * @example
   * 200042
   */
  id?: number;
  insureInfoList?: FlightOrderListQueryResponseBodyModuleInsureInfoList[];
  invoice?: FlightOrderListQueryResponseBodyModuleInvoice;
  /**
   * @example
   * 4
   */
  passengerCount?: number;
  passengerName?: string;
  priceInfoList?: FlightOrderListQueryResponseBodyModulePriceInfoList[];
  /**
   * @example
   * CS-PROJECT
   */
  projectCode?: string;
  /**
   * @example
   * CS-PROJECT
   */
  projectId?: number;
  projectTitle?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  retDate?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  /**
   * @example
   * CS-PROJECT
   */
  thirdPartProjectId?: string;
  /**
   * @example
   * CS-UMN98989
   */
  thirdpartApplyId?: string;
  thirdpartBusinessId?: string;
  /**
   * @example
   * cs9897766
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * 0
   */
  tripType?: number;
  userAffiliateList?: FlightOrderListQueryResponseBodyModuleUserAffiliateList[];
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      arrAirport: 'arr_airport',
      arrCity: 'arr_city',
      arrCityAdCode: 'arr_city_ad_code',
      btripTitle: 'btrip_title',
      cabinClass: 'cabin_class',
      contactName: 'contact_name',
      corpId: 'corp_id',
      corpName: 'corp_name',
      costCenter: 'cost_center',
      depAirport: 'dep_airport',
      depCity: 'dep_city',
      depCityAdCode: 'dep_city_ad_code',
      depDate: 'dep_date',
      departId: 'depart_id',
      departName: 'depart_name',
      discount: 'discount',
      flightNo: 'flight_no',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      id: 'id',
      insureInfoList: 'insure_info_list',
      invoice: 'invoice',
      passengerCount: 'passenger_count',
      passengerName: 'passenger_name',
      priceInfoList: 'price_info_list',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      retDate: 'ret_date',
      status: 'status',
      thirdPartProjectId: 'third_part_project_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      tripType: 'trip_type',
      userAffiliateList: 'user_affiliate_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      arrAirport: 'string',
      arrCity: 'string',
      arrCityAdCode: 'string',
      btripTitle: 'string',
      cabinClass: 'string',
      contactName: 'string',
      corpId: 'string',
      corpName: 'string',
      costCenter: FlightOrderListQueryResponseBodyModuleCostCenter,
      depAirport: 'string',
      depCity: 'string',
      depCityAdCode: 'string',
      depDate: 'string',
      departId: 'string',
      departName: 'string',
      discount: 'string',
      flightNo: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      insureInfoList: { 'type': 'array', 'itemType': FlightOrderListQueryResponseBodyModuleInsureInfoList },
      invoice: FlightOrderListQueryResponseBodyModuleInvoice,
      passengerCount: 'number',
      passengerName: 'string',
      priceInfoList: { 'type': 'array', 'itemType': FlightOrderListQueryResponseBodyModulePriceInfoList },
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      retDate: 'string',
      status: 'number',
      thirdPartProjectId: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartItineraryId: 'string',
      tripType: 'number',
      userAffiliateList: { 'type': 'array', 'itemType': FlightOrderListQueryResponseBodyModuleUserAffiliateList },
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryResponseBodyPageInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalNumber?: number;
  static names(): { [key: string]: string } {
    return {
      page: 'page',
      pageSize: 'page_size',
      totalNumber: 'total_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      page: 'number',
      pageSize: 'number',
      totalNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleApprove extends $tea.Model {
  /**
   * @example
   * test1234
   */
  approveId?: number;
  btripTitle?: string;
  /**
   * @example
   * 1233544
   */
  exceedApproveId?: string;
  /**
   * @example
   * 100231431
   */
  thirdpartApproveId?: string;
  /**
   * @example
   * test123
   */
  thirdpartExceedApproveId?: string;
  static names(): { [key: string]: string } {
    return {
      approveId: 'approve_id',
      btripTitle: 'btrip_title',
      exceedApproveId: 'exceed_approve_id',
      thirdpartApproveId: 'thirdpart_approve_id',
      thirdpartExceedApproveId: 'thirdpart_exceed_approve_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approveId: 'number',
      btripTitle: 'string',
      exceedApproveId: 'string',
      thirdpartApproveId: 'string',
      thirdpartExceedApproveId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightOrderTicketListFlightList extends $tea.Model {
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  /**
   * @example
   * CA8572
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      depTime: 'dep_time',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      depTime: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightOrderTicketList extends $tea.Model {
  flightList?: FlightOrderListQueryV2ResponseBodyModuleFlightOrderTicketListFlightList[];
  ticketNoList?: string[];
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      flightList: 'flight_list',
      ticketNoList: 'ticket_no_list',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightOrderTicketListFlightList },
      ticketNoList: { 'type': 'array', 'itemType': 'string' },
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightOrderUserFeeList extends $tea.Model {
  buildFee?: number;
  corpPayAmount?: number;
  oilFee?: number;
  personPayAmount?: number;
  ticketPrice?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      buildFee: 'build_fee',
      corpPayAmount: 'corp_pay_amount',
      oilFee: 'oil_fee',
      personPayAmount: 'person_pay_amount',
      ticketPrice: 'ticket_price',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buildFee: 'number',
      corpPayAmount: 'number',
      oilFee: 'number',
      personPayAmount: 'number',
      ticketPrice: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundApplyTicketListFlightList extends $tea.Model {
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  /**
   * @example
   * HU7052
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      depTime: 'dep_time',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      depTime: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundApplyTicketList extends $tea.Model {
  flightList?: FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundApplyTicketListFlightList[];
  ticketNoList?: string[];
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      flightList: 'flight_list',
      ticketNoList: 'ticket_no_list',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundApplyTicketListFlightList },
      ticketNoList: { 'type': 'array', 'itemType': 'string' },
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundSegmentList extends $tea.Model {
  /**
   * @example
   * CZ
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * PKX
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  /**
   * @example
   * T1
   */
  arrTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  flightMile?: number;
  /**
   * @example
   * MU5619
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  stopCity?: string[];
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightMile: 'flight_mile',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      stopCity: 'stop_city',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightMile: 'number',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      stopCity: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundUserFeeList extends $tea.Model {
  alreadyUseAmount?: number;
  nonRefundableReshopChangeAmount?: number;
  nonRefundableReshopUpgradeAmount?: number;
  refundAmount?: number;
  refundCorpAmount?: number;
  refundHandFee?: number;
  refundPersonAmount?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      alreadyUseAmount: 'already_use_amount',
      nonRefundableReshopChangeAmount: 'non_refundable_reshop_change_amount',
      nonRefundableReshopUpgradeAmount: 'non_refundable_reshop_upgrade_amount',
      refundAmount: 'refund_amount',
      refundCorpAmount: 'refund_corp_amount',
      refundHandFee: 'refund_hand_fee',
      refundPersonAmount: 'refund_person_amount',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alreadyUseAmount: 'number',
      nonRefundableReshopChangeAmount: 'number',
      nonRefundableReshopUpgradeAmount: 'number',
      refundAmount: 'number',
      refundCorpAmount: 'number',
      refundHandFee: 'number',
      refundPersonAmount: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyList extends $tea.Model {
  flightRefundApplyTicketList?: FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundApplyTicketList[];
  flightRefundSegmentList?: FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundSegmentList[];
  flightRefundUserFeeList?: FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundUserFeeList[];
  /**
   * @example
   * 232213
   */
  refundApplyId?: string;
  /**
   * @example
   * 2024122312
   */
  refundApproveId?: string;
  refundCorpTotalAmount?: number;
  refundHandFee?: number;
  refundPersonTotalAmount?: number;
  refundReason?: string;
  /**
   * @example
   * 0
   */
  refundReasonCode?: string;
  refundTotalAmount?: number;
  /**
   * @example
   * 232218
   */
  relateRefundApplyId?: string;
  userIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      flightRefundApplyTicketList: 'flight_refund_apply_ticket_list',
      flightRefundSegmentList: 'flight_refund_segment_list',
      flightRefundUserFeeList: 'flight_refund_user_fee_list',
      refundApplyId: 'refund_apply_id',
      refundApproveId: 'refund_approve_id',
      refundCorpTotalAmount: 'refund_corp_total_amount',
      refundHandFee: 'refund_hand_fee',
      refundPersonTotalAmount: 'refund_person_total_amount',
      refundReason: 'refund_reason',
      refundReasonCode: 'refund_reason_code',
      refundTotalAmount: 'refund_total_amount',
      relateRefundApplyId: 'relate_refund_apply_id',
      userIdList: 'user_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightRefundApplyTicketList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundApplyTicketList },
      flightRefundSegmentList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundSegmentList },
      flightRefundUserFeeList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyListFlightRefundUserFeeList },
      refundApplyId: 'string',
      refundApproveId: 'string',
      refundCorpTotalAmount: 'number',
      refundHandFee: 'number',
      refundPersonTotalAmount: 'number',
      refundReason: 'string',
      refundReasonCode: 'string',
      refundTotalAmount: 'number',
      relateRefundApplyId: 'string',
      userIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopApplyTicketListFlightList extends $tea.Model {
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  /**
   * @example
   * MU1398
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      depTime: 'dep_time',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      depTime: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopApplyTicketList extends $tea.Model {
  flightList?: FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopApplyTicketListFlightList[];
  relateTicketNoList?: string[];
  ticketNoList?: string[];
  /**
   * @example
   * alitrip123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      flightList: 'flight_list',
      relateTicketNoList: 'relate_ticket_no_list',
      ticketNoList: 'ticket_no_list',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopApplyTicketListFlightList },
      relateTicketNoList: { 'type': 'array', 'itemType': 'string' },
      ticketNoList: { 'type': 'array', 'itemType': 'string' },
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopSegmentList extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * PEX
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  /**
   * @example
   * T1
   */
  arrTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  flightMile?: number;
  /**
   * @example
   * CA3358
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  stopCity?: string[];
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightMile: 'flight_mile',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      stopCity: 'stop_city',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightMile: 'number',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      stopCity: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopUserFeeList extends $tea.Model {
  changeFee?: number;
  reshopCorpAmount?: number;
  reshopPersonAmount?: number;
  upgradeFee?: number;
  /**
   * @example
   * alitrip123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      changeFee: 'change_fee',
      reshopCorpAmount: 'reshop_corp_amount',
      reshopPersonAmount: 'reshop_person_amount',
      upgradeFee: 'upgrade_fee',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeFee: 'number',
      reshopCorpAmount: 'number',
      reshopPersonAmount: 'number',
      upgradeFee: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyList extends $tea.Model {
  flightReshopApplyTicketList?: FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopApplyTicketList[];
  flightReshopSegmentList?: FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopSegmentList[];
  flightReshopUserFeeList?: FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopUserFeeList[];
  /**
   * @example
   * 100231231
   */
  relateReshopApplyId?: number;
  /**
   * @example
   * 123232323
   */
  reshopApplyId?: number;
  /**
   * @example
   * 122312
   */
  reshopApproveId?: string;
  reshopCorpTotalAmount?: number;
  reshopPersonTotalAmount?: number;
  reshopReason?: string;
  /**
   * @example
   * 1002
   */
  reshopReasonCode?: string;
  reshopTotalAmount?: number;
  userIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      flightReshopApplyTicketList: 'flight_reshop_apply_ticket_list',
      flightReshopSegmentList: 'flight_reshop_segment_list',
      flightReshopUserFeeList: 'flight_reshop_user_fee_list',
      relateReshopApplyId: 'relate_reshop_apply_id',
      reshopApplyId: 'reshop_apply_id',
      reshopApproveId: 'reshop_approve_id',
      reshopCorpTotalAmount: 'reshop_corp_total_amount',
      reshopPersonTotalAmount: 'reshop_person_total_amount',
      reshopReason: 'reshop_reason',
      reshopReasonCode: 'reshop_reason_code',
      reshopTotalAmount: 'reshop_total_amount',
      userIdList: 'user_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightReshopApplyTicketList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopApplyTicketList },
      flightReshopSegmentList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopSegmentList },
      flightReshopUserFeeList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyListFlightReshopUserFeeList },
      relateReshopApplyId: 'number',
      reshopApplyId: 'number',
      reshopApproveId: 'string',
      reshopCorpTotalAmount: 'number',
      reshopPersonTotalAmount: 'number',
      reshopReason: 'string',
      reshopReasonCode: 'string',
      reshopTotalAmount: 'number',
      userIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleFlightSegmentList extends $tea.Model {
  /**
   * @example
   * CZ
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * PEK
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  /**
   * @example
   * T1
   */
  arrTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  flightMile?: number;
  /**
   * @example
   * CZ2891
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  stopCity?: string[];
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightMile: 'flight_mile',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      stopCity: 'stop_city',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightMile: 'number',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      stopCity: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleInsureInfoList extends $tea.Model {
  /**
   * @example
   * 1002308231
   */
  insureId?: string;
  insureOrderAmount?: number;
  insurePrice?: number;
  insureType?: string;
  nameList?: string[];
  /**
   * @example
   * 5
   */
  number?: number;
  /**
   * @example
   * 0
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      insureId: 'insure_id',
      insureOrderAmount: 'insure_order_amount',
      insurePrice: 'insure_price',
      insureType: 'insure_type',
      nameList: 'name_list',
      number: 'number',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      insureId: 'string',
      insureOrderAmount: 'number',
      insurePrice: 'number',
      insureType: 'string',
      nameList: { 'type': 'array', 'itemType': 'string' },
      number: 'number',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 1
   */
  categoryType?: number;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  gmtCreate?: string;
  /**
   * @example
   * 1
   */
  payType?: number;
  price?: number;
  /**
   * @example
   * 175549295
   */
  subOrderId?: string;
  /**
   * @example
   * f98236773
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      categoryType: 'category_type',
      gmtCreate: 'gmt_create',
      payType: 'pay_type',
      price: 'price',
      subOrderId: 'sub_order_id',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      categoryType: 'number',
      gmtCreate: 'string',
      payType: 'number',
      price: 'number',
      subOrderId: 'string',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListCostCenter extends $tea.Model {
  /**
   * @example
   * alitrip
   */
  corpId?: string;
  /**
   * @example
   * alitripTest
   */
  id?: number;
  name?: string;
  /**
   * @example
   * test_cost_center
   */
  number?: string;
  static names(): { [key: string]: string } {
    return {
      corpId: 'corp_id',
      id: 'id',
      name: 'name',
      number: 'number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpId: 'string',
      id: 'number',
      name: 'string',
      number: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListDepartment extends $tea.Model {
  /**
   * @example
   * alitrip
   */
  departId?: string;
  departName?: string;
  static names(): { [key: string]: string } {
    return {
      departId: 'depart_id',
      departName: 'depart_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      departId: 'string',
      departName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListInvoice extends $tea.Model {
  /**
   * @example
   * test1233
   */
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListProject extends $tea.Model {
  /**
   * @example
   * test_project_id
   */
  projectId?: string;
  projectTitle?: string;
  /**
   * @example
   * test_third_part_project_id
   */
  thirdpartProjectId?: string;
  static names(): { [key: string]: string } {
    return {
      projectId: 'project_id',
      projectTitle: 'project_title',
      thirdpartProjectId: 'thirdpart_project_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      projectId: 'string',
      projectTitle: 'string',
      thirdpartProjectId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModuleUserAffiliateList extends $tea.Model {
  costCenter?: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListCostCenter;
  department?: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListDepartment;
  invoice?: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListInvoice;
  project?: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListProject;
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      costCenter: 'cost_center',
      department: 'department',
      invoice: 'invoice',
      project: 'project',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenter: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListCostCenter,
      department: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListDepartment,
      invoice: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListInvoice,
      project: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateListProject,
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyModule extends $tea.Model {
  approve?: FlightOrderListQueryV2ResponseBodyModuleApprove;
  corpId?: string;
  corpName?: string;
  departId?: string;
  departName?: string;
  flightOrderTicketList?: FlightOrderListQueryV2ResponseBodyModuleFlightOrderTicketList[];
  flightOrderUserFeeList?: FlightOrderListQueryV2ResponseBodyModuleFlightOrderUserFeeList[];
  flightRefundApplyList?: FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyList[];
  flightReshopApplyList?: FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyList[];
  flightSegmentList?: FlightOrderListQueryV2ResponseBodyModuleFlightSegmentList[];
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  gmtCreate?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  gmtModified?: string;
  /**
   * @example
   * 200042
   */
  id?: string;
  insureInfoList?: FlightOrderListQueryV2ResponseBodyModuleInsureInfoList[];
  /**
   * @example
   * true
   */
  mixPay?: boolean;
  orderReserveAmount?: number;
  /**
   * @example
   * 1
   */
  passengerCount?: number;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  payTime?: string;
  priceInfoList?: FlightOrderListQueryV2ResponseBodyModulePriceInfoList[];
  /**
   * @example
   * 0
   */
  status?: number;
  supplier?: string;
  /**
   * @example
   * cs9897766
   */
  thirdpartItineraryId?: string[];
  ticketCorpReserveAmount?: number;
  ticketPersonReserveAmount?: number;
  /**
   * @example
   * 1
   */
  tripMode?: number;
  /**
   * @example
   * 0
   */
  tripType?: number;
  userAffiliateList?: FlightOrderListQueryV2ResponseBodyModuleUserAffiliateList[];
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      approve: 'approve',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      flightOrderTicketList: 'flight_order_ticket_list',
      flightOrderUserFeeList: 'flight_order_user_fee_list',
      flightRefundApplyList: 'flight_refund_apply_list',
      flightReshopApplyList: 'flight_reshop_apply_list',
      flightSegmentList: 'flight_segment_list',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      id: 'id',
      insureInfoList: 'insure_info_list',
      mixPay: 'mix_pay',
      orderReserveAmount: 'order_reserve_amount',
      passengerCount: 'passenger_count',
      payTime: 'pay_time',
      priceInfoList: 'price_info_list',
      status: 'status',
      supplier: 'supplier',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      ticketCorpReserveAmount: 'ticket_corp_reserve_amount',
      ticketPersonReserveAmount: 'ticket_person_reserve_amount',
      tripMode: 'trip_mode',
      tripType: 'trip_type',
      userAffiliateList: 'user_affiliate_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approve: FlightOrderListQueryV2ResponseBodyModuleApprove,
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      flightOrderTicketList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightOrderTicketList },
      flightOrderUserFeeList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightOrderUserFeeList },
      flightRefundApplyList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightRefundApplyList },
      flightReshopApplyList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightReshopApplyList },
      flightSegmentList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleFlightSegmentList },
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'string',
      insureInfoList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleInsureInfoList },
      mixPay: 'boolean',
      orderReserveAmount: 'number',
      passengerCount: 'number',
      payTime: 'string',
      priceInfoList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModulePriceInfoList },
      status: 'number',
      supplier: 'string',
      thirdpartItineraryId: { 'type': 'array', 'itemType': 'string' },
      ticketCorpReserveAmount: 'number',
      ticketPersonReserveAmount: 'number',
      tripMode: 'number',
      tripType: 'number',
      userAffiliateList: { 'type': 'array', 'itemType': FlightOrderListQueryV2ResponseBodyModuleUserAffiliateList },
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderListQueryV2ResponseBodyPageInfo extends $tea.Model {
  number?: number;
  /**
   * @example
   * CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4
   */
  scrollId?: string;
  /**
   * @example
   * 100
   */
  totalNumber?: number;
  static names(): { [key: string]: string } {
    return {
      number: 'number',
      scrollId: 'scroll_id',
      totalNumber: 'total_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      number: 'number',
      scrollId: 'string',
      totalNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList extends $tea.Model {
  applyId?: string;
  arrAirport?: string;
  arrAirportCode?: string;
  arrCity?: string;
  arrCityCode?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  /**
   * @example
   * V
   */
  changeCabin?: string;
  /**
   * @example
   * Y
   */
  changeCabinLevel?: string;
  /**
   * @example
   * 100
   */
  changeFee?: number;
  /**
   * @example
   * MU7767
   */
  changeFlightNo?: string;
  /**
   * @example
   * 33576
   */
  changeOrderId?: number;
  changeReason?: string;
  /**
   * @example
   * 0
   */
  changeType?: number;
  depAirport?: string;
  depAirportCode?: string;
  depCity?: string;
  depCityCode?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  discount?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtModify?: string;
  journeyIndex?: number;
  /**
   * @example
   * 00-123123
   */
  originTicketNo?: string;
  outApplyId?: string;
  segmentIndex?: number;
  stopCity?: string;
  /**
   * @example
   * 000-123123
   */
  ticketNo?: string;
  ticketStatus?: string;
  ticketStatusCode?: number;
  /**
   * @example
   * 100
   */
  upgradeFee?: number;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      arrAirport: 'arr_airport',
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTime: 'arr_time',
      changeCabin: 'change_cabin',
      changeCabinLevel: 'change_cabin_level',
      changeFee: 'change_fee',
      changeFlightNo: 'change_flight_no',
      changeOrderId: 'change_order_id',
      changeReason: 'change_reason',
      changeType: 'change_type',
      depAirport: 'dep_airport',
      depAirportCode: 'dep_airport_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTime: 'dep_time',
      discount: 'discount',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      journeyIndex: 'journey_index',
      originTicketNo: 'origin_ticket_no',
      outApplyId: 'out_apply_id',
      segmentIndex: 'segment_index',
      stopCity: 'stop_city',
      ticketNo: 'ticket_no',
      ticketStatus: 'ticket_status',
      ticketStatusCode: 'ticket_status_code',
      upgradeFee: 'upgrade_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      arrAirport: 'string',
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTime: 'string',
      changeCabin: 'string',
      changeCabinLevel: 'string',
      changeFee: 'number',
      changeFlightNo: 'string',
      changeOrderId: 'number',
      changeReason: 'string',
      changeType: 'number',
      depAirport: 'string',
      depAirportCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTime: 'string',
      discount: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      journeyIndex: 'number',
      originTicketNo: 'string',
      outApplyId: 'string',
      segmentIndex: 'number',
      stopCity: 'string',
      ticketNo: 'string',
      ticketStatus: 'string',
      ticketStatusCode: 'number',
      upgradeFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModuleFlightInfoList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  /**
   * @example
   * LHW
   */
  arrAirportCode?: string;
  arrAirportName?: string;
  arrCityAdCode?: string;
  /**
   * @example
   * LHW
   */
  arrCityCode?: string;
  arrCityName?: string;
  arrTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  arrTime?: string;
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinLevel?: string;
  /**
   * @example
   * NGB
   */
  depAirportCode?: string;
  depAirportName?: string;
  depCityAdCode?: string;
  /**
   * @example
   * NGB
   */
  depCityCode?: string;
  depCityName?: string;
  depTerminal?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  depTime?: string;
  /**
   * @example
   * 900
   */
  flightMile?: number;
  /**
   * @example
   * MU3849
   */
  flightNo?: string;
  journeyIndex?: number;
  segmentIndex?: number;
  stopCity?: string[];
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrAirportCode: 'arr_airport_code',
      arrAirportName: 'arr_airport_name',
      arrCityAdCode: 'arr_city_ad_code',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinLevel: 'cabin_level',
      depAirportCode: 'dep_airport_code',
      depAirportName: 'dep_airport_name',
      depCityAdCode: 'dep_city_ad_code',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightMile: 'flight_mile',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      stopCity: 'stop_city',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrAirportCode: 'string',
      arrAirportName: 'string',
      arrCityAdCode: 'string',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      cabin: 'string',
      cabinLevel: 'string',
      depAirportCode: 'string',
      depAirportName: 'string',
      depCityAdCode: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightMile: 'number',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      stopCity: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList extends $tea.Model {
  applyId?: string;
  arrAirport?: string;
  arrAirportCode?: string;
  arrCity?: string;
  arrCityCode?: string;
  companyRefundTicketFee?: number;
  depAirport?: string;
  depAirportCode?: string;
  depCity?: string;
  depCityCode?: string;
  flightNo?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtModify?: string;
  journeyIndex?: number;
  outApplyId?: string;
  personalRefundTicketFee?: number;
  /**
   * @example
   * 43667
   */
  refundOrderId?: number;
  refundReason?: string;
  /**
   * @example
   * 100
   */
  refundTicketFee?: number;
  /**
   * @example
   * 0
   */
  refundType?: number;
  segmentIndex?: number;
  /**
   * @example
   * 000-13232
   */
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      arrAirport: 'arr_airport',
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      companyRefundTicketFee: 'company_refund_ticket_fee',
      depAirport: 'dep_airport',
      depAirportCode: 'dep_airport_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      flightNo: 'flight_no',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      journeyIndex: 'journey_index',
      outApplyId: 'out_apply_id',
      personalRefundTicketFee: 'personal_refund_ticket_fee',
      refundOrderId: 'refund_order_id',
      refundReason: 'refund_reason',
      refundTicketFee: 'refund_ticket_fee',
      refundType: 'refund_type',
      segmentIndex: 'segment_index',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      arrAirport: 'string',
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      companyRefundTicketFee: 'number',
      depAirport: 'string',
      depAirportCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      flightNo: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      journeyIndex: 'number',
      outApplyId: 'string',
      personalRefundTicketFee: 'number',
      refundOrderId: 'number',
      refundReason: 'string',
      refundTicketFee: 'number',
      refundType: 'number',
      segmentIndex: 'number',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModuleFlightTicketInfoList extends $tea.Model {
  arrAirport?: string;
  arrAirportCode?: string;
  arrCity?: string;
  arrCityCode?: string;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  /**
   * @example
   * false
   */
  changed?: boolean;
  depAirport?: string;
  depAirportCode?: string;
  depCity?: string;
  depCityCode?: string;
  /**
   * @example
   * 10
   */
  discount?: number;
  flightNo?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtModify?: string;
  journeyIndex?: number;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  /**
   * @example
   * 1
   */
  payType?: number;
  personalPrice?: number;
  segmentIndex?: number;
  /**
   * @example
   * 100
   */
  settlePrice?: number;
  /**
   * @example
   * 000-123
   */
  ticketNo?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * OPEN
   */
  ticketStatus?: string;
  /**
   * @example
   * 1
   */
  ticketStatusCode?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirport: 'arr_airport',
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      buildPrice: 'build_price',
      changed: 'changed',
      depAirport: 'dep_airport',
      depAirportCode: 'dep_airport_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      discount: 'discount',
      flightNo: 'flight_no',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      journeyIndex: 'journey_index',
      oilPrice: 'oil_price',
      payType: 'pay_type',
      personalPrice: 'personal_price',
      segmentIndex: 'segment_index',
      settlePrice: 'settle_price',
      ticketNo: 'ticket_no',
      ticketPrice: 'ticket_price',
      ticketStatus: 'ticket_status',
      ticketStatusCode: 'ticket_status_code',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirport: 'string',
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      buildPrice: 'number',
      changed: 'boolean',
      depAirport: 'string',
      depAirportCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      discount: 'number',
      flightNo: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      journeyIndex: 'number',
      oilPrice: 'number',
      payType: 'number',
      personalPrice: 'number',
      segmentIndex: 'number',
      settlePrice: 'number',
      ticketNo: 'string',
      ticketPrice: 'number',
      ticketStatus: 'string',
      ticketStatusCode: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModuleInsuranceInfoList extends $tea.Model {
  /**
   * @example
   * 100
   */
  amount?: number;
  /**
   * @example
   * 345-987-098
   */
  insuranceNo?: string;
  name?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      insuranceNo: 'insurance_no',
      name: 'name',
      status: 'status',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'number',
      insuranceNo: 'string',
      name: 'string',
      status: 'number',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModuleInvoiceInfo extends $tea.Model {
  /**
   * @example
   * 43316
   */
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModuleOrderBaseInfo extends $tea.Model {
  /**
   * @example
   * 175634
   */
  applyId?: string;
  btripTitle?: string;
  contactName?: string;
  corpId?: string;
  corpName?: string;
  departId?: string;
  departName?: string;
  exceedApplyId?: string;
  exceedThirdPartApplyId?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtModify?: string;
  /**
   * @example
   * 13628
   */
  itineraryId?: string;
  /**
   * @example
   * 146178
   */
  orderId?: number;
  /**
   * @example
   * 5
   */
  orderStatus?: number;
  supplier?: string;
  /**
   * @example
   * CS-FLIGHT
   */
  thirdpartApplyId?: string;
  thirdpartBusinessId?: string;
  thirdpartCorpId?: string;
  /**
   * @example
   * CS-FLIGHT
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * 0
   */
  tripType?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      btripTitle: 'btrip_title',
      contactName: 'contact_name',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      exceedApplyId: 'exceed_apply_id',
      exceedThirdPartApplyId: 'exceed_third_part_apply_id',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      itineraryId: 'itinerary_id',
      orderId: 'order_id',
      orderStatus: 'order_status',
      supplier: 'supplier',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartCorpId: 'thirdpart_corp_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      tripType: 'trip_type',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      btripTitle: 'string',
      contactName: 'string',
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      exceedApplyId: 'string',
      exceedThirdPartApplyId: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      itineraryId: 'string',
      orderId: 'number',
      orderStatus: 'number',
      supplier: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartCorpId: 'string',
      thirdpartItineraryId: 'string',
      tripType: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModulePassengerInfoList extends $tea.Model {
  /**
   * @example
   * 13446
   */
  costCenterId?: number;
  costCenterName?: string;
  /**
   * @example
   * CS-3345
   */
  costCenterNumber?: string;
  /**
   * @example
   * CS-PROJECT
   */
  projectCode?: string;
  /**
   * @example
   * 133576
   */
  projectId?: number;
  projectTitle?: string;
  /**
   * @example
   * CS-THIRDPROJECT
   */
  thirdpartProjectId?: string;
  userId?: string;
  userName?: string;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      thirdpartProjectId: 'thirdpart_project_id',
      userId: 'user_id',
      userName: 'user_name',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterId: 'number',
      costCenterName: 'string',
      costCenterNumber: 'string',
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      thirdpartProjectId: 'string',
      userId: 'string',
      userName: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  passengerName?: string;
  /**
   * @example
   * 4
   */
  payType?: number;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * CS73290
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      gmtCreate: 'gmt_create',
      passengerName: 'passenger_name',
      payType: 'pay_type',
      price: 'price',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      gmtCreate: 'string',
      passengerName: 'string',
      payType: 'number',
      price: 'number',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOrderQueryResponseBodyModule extends $tea.Model {
  flightChangeTicketInfoList?: FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList[];
  flightInfoList?: FlightOrderQueryResponseBodyModuleFlightInfoList[];
  flightRefundTicketInfoList?: FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList[];
  flightTicketInfoList?: FlightOrderQueryResponseBodyModuleFlightTicketInfoList[];
  insuranceInfoList?: FlightOrderQueryResponseBodyModuleInsuranceInfoList[];
  invoiceInfo?: FlightOrderQueryResponseBodyModuleInvoiceInfo;
  orderBaseInfo?: FlightOrderQueryResponseBodyModuleOrderBaseInfo;
  passengerInfoList?: FlightOrderQueryResponseBodyModulePassengerInfoList[];
  priceInfoList?: FlightOrderQueryResponseBodyModulePriceInfoList[];
  static names(): { [key: string]: string } {
    return {
      flightChangeTicketInfoList: 'flight_change_ticket_info_list',
      flightInfoList: 'flight_info_list',
      flightRefundTicketInfoList: 'flight_refund_ticket_info_list',
      flightTicketInfoList: 'flight_ticket_info_list',
      insuranceInfoList: 'insurance_info_list',
      invoiceInfo: 'invoice_info',
      orderBaseInfo: 'order_base_info',
      passengerInfoList: 'passenger_info_list',
      priceInfoList: 'price_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightChangeTicketInfoList: { 'type': 'array', 'itemType': FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList },
      flightInfoList: { 'type': 'array', 'itemType': FlightOrderQueryResponseBodyModuleFlightInfoList },
      flightRefundTicketInfoList: { 'type': 'array', 'itemType': FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList },
      flightTicketInfoList: { 'type': 'array', 'itemType': FlightOrderQueryResponseBodyModuleFlightTicketInfoList },
      insuranceInfoList: { 'type': 'array', 'itemType': FlightOrderQueryResponseBodyModuleInsuranceInfoList },
      invoiceInfo: FlightOrderQueryResponseBodyModuleInvoiceInfo,
      orderBaseInfo: FlightOrderQueryResponseBodyModuleOrderBaseInfo,
      passengerInfoList: { 'type': 'array', 'itemType': FlightOrderQueryResponseBodyModulePassengerInfoList },
      priceInfoList: { 'type': 'array', 'itemType': FlightOrderQueryResponseBodyModulePriceInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png
   */
  icon?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01kLt3m923XsUs6WVif_!!6000000007266-2-tps-280-300.png
   */
  image?: string;
  /**
   * @example
   * 55
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  /**
   * @remarks
   * baggage_desc
   */
  baggageDesc?: string[];
  /**
   * @example
   * 0
   */
  baggageSubContentType?: number;
  description?: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * false
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'image_d_o',
      isHighlight: 'is_highlight',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems extends $tea.Model {
  baggageSubContentVisualizes?: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes[];
  extraContentVisualizes?: any[];
  /**
   * @example
   * false
   */
  isStruct?: boolean;
  /**
   * @example
   * ADT
   */
  ptc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      extraContentVisualizes: 'extra_content_visualizes',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes },
      extraContentVisualizes: { 'type': 'array', 'itemType': 'any' },
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleBaggageRuleTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleBaggageRule extends $tea.Model {
  baggageSubItems?: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems[];
  /**
   * @example
   * 0
   */
  index?: number;
  /**
   * @example
   * tableHead
   */
  tableHead?: string;
  tips?: FlightOtaItemDetailResponseBodyModuleBaggageRuleTips;
  title?: string;
  /**
   * @example
   * 2
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: FlightOtaItemDetailResponseBodyModuleBaggageRuleTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents extends $tea.Model {
  content?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems extends $tea.Model {
  /**
   * @example
   * false
   */
  isStruct?: boolean;
  /**
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleChangeRule extends $tea.Model {
  extraContents?: FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents[];
  /**
   * @example
   * HO3925
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  freeBaggage?: number;
  /**
   * @example
   * 0
   */
  index?: number;
  /**
   * @example
   * 0
   */
  level?: number;
  refundSubItems?: FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems[];
  /**
   * @remarks
   * subTableHead
   */
  subTableHead?: string[];
  /**
   * @example
   * tableHead
   */
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      flightNo: 'flight_no',
      freeBaggage: 'free_baggage',
      index: 'index',
      level: 'level',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents },
      flightNo: 'string',
      freeBaggage: 'number',
      index: 'number',
      level: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents extends $tea.Model {
  content?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems extends $tea.Model {
  /**
   * @example
   * false
   */
  isStruct?: boolean;
  /**
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModuleRefundRule extends $tea.Model {
  extraContents?: FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents[];
  /**
   * @example
   * HO3925
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  freeBaggage?: number;
  /**
   * @example
   * 0
   */
  index?: number;
  /**
   * @example
   * 0
   */
  level?: number;
  refundSubItems?: FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems[];
  /**
   * @remarks
   * subTableHead
   */
  subTableHead?: string[];
  /**
   * @example
   * tableHead
   */
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      flightNo: 'flight_no',
      freeBaggage: 'free_baggage',
      index: 'index',
      level: 'level',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents },
      flightNo: 'string',
      freeBaggage: 'number',
      index: 'number',
      level: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaItemDetailResponseBodyModule extends $tea.Model {
  baggageRule?: FlightOtaItemDetailResponseBodyModuleBaggageRule[];
  changeRule?: FlightOtaItemDetailResponseBodyModuleChangeRule[];
  refundRule?: FlightOtaItemDetailResponseBodyModuleRefundRule[];
  /**
   * @example
   * 1830
   */
  sellPrice?: number;
  sellPriceList?: number[];
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      baggageRule: 'baggage_rule',
      changeRule: 'change_rule',
      refundRule: 'refund_rule',
      sellPrice: 'sell_price',
      sellPriceList: 'sell_price_list',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageRule: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleBaggageRule },
      changeRule: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleChangeRule },
      refundRule: { 'type': 'array', 'itemType': FlightOtaItemDetailResponseBodyModuleRefundRule },
      sellPrice: 'number',
      sellPriceList: { 'type': 'array', 'itemType': 'number' },
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListAirlineInfo extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * HGH
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png
   */
  icon?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * demo
   */
  image?: string;
  /**
   * @example
   * 50
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  baggageDesc?: string[];
  /**
   * @example
   * 0
   */
  baggageSubContentType?: number;
  description?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * true
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'image_d_o',
      isHighlight: 'is_highlight',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems extends $tea.Model {
  baggageSubContentVisualizes?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes[];
  extraContentVisualizes?: any[];
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      extraContentVisualizes: 'extra_content_visualizes',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes },
      extraContentVisualizes: { 'type': 'array', 'itemType': 'any' },
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem extends $tea.Model {
  baggageSubItems?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems[];
  /**
   * @example
   * 1
   */
  index?: number;
  tableHead?: string;
  tips?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem extends $tea.Model {
  extraContents?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem extends $tea.Model {
  extraContents?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents[];
  /**
   * @example
   * 1
   */
  index?: number;
  refundSubItems?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList extends $tea.Model {
  /**
   * @example
   * demo
   */
  baggageInfo?: string;
  baggageItem?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem;
  changeRule?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule;
  changeRuleItem?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem;
  /**
   * @example
   * {}
   */
  extra?: string;
  refundRule?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule;
  refundRuleItem?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem;
  signRule?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule;
  tuigaiqianInfo?: string;
  upgradeRule?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule;
  static names(): { [key: string]: string } {
    return {
      baggageInfo: 'baggage_info',
      baggageItem: 'baggage_item',
      changeRule: 'change_rule',
      changeRuleItem: 'change_rule_item',
      extra: 'extra',
      refundRule: 'refund_rule',
      refundRuleItem: 'refund_rule_item',
      signRule: 'sign_rule',
      tuigaiqianInfo: 'tuigaiqian_info',
      upgradeRule: 'upgrade_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageInfo: 'string',
      baggageItem: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem,
      changeRule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule,
      changeRuleItem: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem,
      extra: 'string',
      refundRule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule,
      refundRuleItem: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem,
      signRule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule,
      tuigaiqianInfo: 'string',
      upgradeRule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListCabinInfoList extends $tea.Model {
  agentId?: number;
  /**
   * @example
   * 12456
   */
  basicCabinPrice?: number;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  /**
   * @example
   * G
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * G
   */
  childCabin?: string;
  className?: string;
  /**
   * @example
   * demo
   */
  classRule?: string;
  /**
   * @example
   * 10
   */
  discount?: string;
  flightRuleList?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList[];
  /**
   * @example
   * demo
   */
  flightRuleListStr?: string;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  /**
   * @example
   * 1000_1_0
   */
  orderParams?: string;
  /**
   * @example
   * 97f64e2d6f61408a827dd523817fefd6_0
   */
  otaItemId?: string;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 1
   */
  productType?: number;
  /**
   * @example
   * demo
   */
  productTypeDesc?: string;
  /**
   * @example
   * 100
   */
  promotionPrice?: string;
  /**
   * @example
   * 1
   */
  remainedSeatCount?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      agentId: 'agent_id',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      childCabin: 'child_cabin',
      className: 'class_name',
      classRule: 'class_rule',
      discount: 'discount',
      flightRuleList: 'flight_rule_list',
      flightRuleListStr: 'flight_rule_list_str',
      invoiceType: 'invoice_type',
      isProtocol: 'is_protocol',
      oilPrice: 'oil_price',
      orderParams: 'order_params',
      otaItemId: 'ota_item_id',
      price: 'price',
      productType: 'product_type',
      productTypeDesc: 'product_type_desc',
      promotionPrice: 'promotion_price',
      remainedSeatCount: 'remained_seat_count',
      ticketPrice: 'ticket_price',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      childCabin: 'string',
      className: 'string',
      classRule: 'string',
      discount: 'string',
      flightRuleList: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList },
      flightRuleListStr: 'string',
      invoiceType: 'number',
      isProtocol: 'boolean',
      oilPrice: 'number',
      orderParams: 'string',
      otaItemId: 'string',
      price: 'number',
      productType: 'number',
      productTypeDesc: 'string',
      promotionPrice: 'string',
      remainedSeatCount: 'string',
      ticketPrice: 'number',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * BJS
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png
   */
  icon?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * demo
   */
  image?: string;
  /**
   * @example
   * 50
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  baggageDesc?: string[];
  /**
   * @example
   * 1
   */
  baggageSubContentType?: number;
  description?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * true
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'image_d_o',
      isHighlight: 'is_highlight',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems extends $tea.Model {
  baggageSubContentVisualizes?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes[];
  extraContentVisualizes?: any[];
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      extraContentVisualizes: 'extra_content_visualizes',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes },
      extraContentVisualizes: { 'type': 'array', 'itemType': 'any' },
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem extends $tea.Model {
  baggageSubItems?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems[];
  /**
   * @example
   * 1
   */
  index?: number;
  tableHead?: string;
  tips?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents extends $tea.Model {
  content?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems extends $tea.Model {
  /**
   * @remarks
   * isStruct : true
   * 
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem extends $tea.Model {
  extraContents?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem extends $tea.Model {
  extraContents?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents[];
  /**
   * @example
   * 1
   */
  index?: number;
  refundSubItems?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightListFlightRuleList extends $tea.Model {
  /**
   * @example
   * demo
   */
  baggageInfo?: string;
  baggageItem?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem;
  changeRule?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule;
  changeRuleItem?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem;
  /**
   * @example
   * {}
   */
  extra?: string;
  refundRule?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule;
  refundRuleItem?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem;
  signRule?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule;
  tuigaiqianInfo?: string;
  upgradeRule?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule;
  static names(): { [key: string]: string } {
    return {
      baggageInfo: 'baggage_info',
      baggageItem: 'baggage_item',
      changeRule: 'change_rule',
      changeRuleItem: 'change_rule_item',
      extra: 'extra',
      refundRule: 'refund_rule',
      refundRuleItem: 'refund_rule_item',
      signRule: 'sign_rule',
      tuigaiqianInfo: 'tuigaiqian_info',
      upgradeRule: 'upgrade_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageInfo: 'string',
      baggageItem: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem,
      changeRule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule,
      changeRuleItem: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem,
      extra: 'string',
      refundRule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule,
      refundRuleItem: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem,
      signRule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule,
      tuigaiqianInfo: 'string',
      upgradeRule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModuleFlightList extends $tea.Model {
  airlineInfo?: FlightOtaSearchResponseBodyModuleFlightListAirlineInfo;
  arrAirportInfo?: FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  arrDate?: string;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * 2
   */
  cabinClass?: string;
  cabinInfoList?: FlightOtaSearchResponseBodyModuleFlightListCabinInfoList[];
  /**
   * @example
   * FM
   */
  carrierAirline?: string;
  /**
   * @example
   * FM9152
   */
  carrierNo?: string;
  depAirportInfo?: FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  depDate?: string;
  /**
   * @example
   * 1
   */
  discount?: number;
  /**
   * @example
   * CA1234
   */
  flightNo?: string;
  flightRuleList?: FlightOtaSearchResponseBodyModuleFlightListFlightRuleList[];
  /**
   * @example
   * demo
   */
  flightRuleListStr?: string;
  flightSize?: string;
  /**
   * @example
   * demo
   */
  flightType?: string;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * false
   */
  isShare?: boolean;
  /**
   * @example
   * false
   */
  isStop?: boolean;
  /**
   * @example
   * false
   */
  isTransfer?: boolean;
  mealDesc?: string;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  /**
   * @example
   * 6669c8e53b684105b8687bad0331988a_41
   */
  otaItemId?: string;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 1
   */
  productType?: number;
  productTypeDesc?: string;
  /**
   * @example
   * 100
   */
  promotionPrice?: string;
  /**
   * @example
   * 1
   */
  remainedSeatCount?: string;
  /**
   * @example
   * 1000_1_0
   */
  secretParams?: string;
  /**
   * @example
   * 1
   */
  segmentNumber?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCity?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  stopDepTime?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  totalPrice?: string;
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrDate: 'arr_date',
      buildPrice: 'build_price',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinInfoList: 'cabin_info_list',
      carrierAirline: 'carrier_airline',
      carrierNo: 'carrier_no',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      discount: 'discount',
      flightNo: 'flight_no',
      flightRuleList: 'flight_rule_list',
      flightRuleListStr: 'flight_rule_list_str',
      flightSize: 'flight_size',
      flightType: 'flight_type',
      invoiceType: 'invoice_type',
      isProtocol: 'is_protocol',
      isShare: 'is_share',
      isStop: 'is_stop',
      isTransfer: 'is_transfer',
      mealDesc: 'meal_desc',
      oilPrice: 'oil_price',
      otaItemId: 'ota_item_id',
      price: 'price',
      productType: 'product_type',
      productTypeDesc: 'product_type_desc',
      promotionPrice: 'promotion_price',
      remainedSeatCount: 'remained_seat_count',
      secretParams: 'secret_params',
      segmentNumber: 'segment_number',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
      ticketPrice: 'ticket_price',
      totalPrice: 'total_price',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: FlightOtaSearchResponseBodyModuleFlightListAirlineInfo,
      arrAirportInfo: FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo,
      arrDate: 'string',
      buildPrice: 'number',
      cabin: 'string',
      cabinClass: 'string',
      cabinInfoList: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListCabinInfoList },
      carrierAirline: 'string',
      carrierNo: 'string',
      depAirportInfo: FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo,
      depCityCode: 'string',
      depDate: 'string',
      discount: 'number',
      flightNo: 'string',
      flightRuleList: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightListFlightRuleList },
      flightRuleListStr: 'string',
      flightSize: 'string',
      flightType: 'string',
      invoiceType: 'number',
      isProtocol: 'boolean',
      isShare: 'boolean',
      isStop: 'boolean',
      isTransfer: 'boolean',
      mealDesc: 'string',
      oilPrice: 'number',
      otaItemId: 'string',
      price: 'number',
      productType: 'number',
      productTypeDesc: 'string',
      promotionPrice: 'string',
      remainedSeatCount: 'string',
      secretParams: 'string',
      segmentNumber: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
      ticketPrice: 'number',
      totalPrice: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchResponseBodyModule extends $tea.Model {
  flightList?: FlightOtaSearchResponseBodyModuleFlightList[];
  static names(): { [key: string]: string } {
    return {
      flightList: 'flight_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightList: { 'type': 'array', 'itemType': FlightOtaSearchResponseBodyModuleFlightList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2RequestSearchJourneysSelectedFlights extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * PKX
   */
  depAirportCode?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-09-01 07:10:00
   */
  flightTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HO3925
   */
  marketFlightNo?: string;
  /**
   * @example
   * CX601
   */
  operateFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCityCode: 'arr_city_code',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      flightTime: 'flight_time',
      marketFlightNo: 'market_flight_no',
      operateFlightNo: 'operate_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCityCode: 'string',
      depAirportCode: 'string',
      depCityCode: 'string',
      flightTime: 'string',
      marketFlightNo: 'string',
      operateFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2RequestSearchJourneys extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-09-01
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  selectedFlights?: FlightOtaSearchV2RequestSearchJourneysSelectedFlights[];
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      selectedFlights: 'selected_flights',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      depCityCode: 'string',
      depDate: 'string',
      selectedFlights: { 'type': 'array', 'itemType': FlightOtaSearchV2RequestSearchJourneysSelectedFlights },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo extends $tea.Model {
  /**
   * @example
   * PKX
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * #FF7300
   */
  airportNameColor?: string;
  airportShortName?: string;
  /**
   * @example
   * --
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportNameColor: 'airport_name_color',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportNameColor: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * #FF7300
   */
  airportNameColor?: string;
  airportShortName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportNameColor: 'airport_name_color',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportNameColor: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * DR
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo extends $tea.Model {
  operatingAirlineInfo?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo;
  /**
   * @example
   * CX601
   */
  operatingFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingAirlineInfo: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo,
      operatingFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  stopAirport?: string;
  stopAirportName?: string;
  /**
   * @example
   * T3
   */
  stopArrTerm?: string;
  /**
   * @example
   * BJS
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCityCode?: string;
  /**
   * @example
   * HGH
   */
  stopCityName?: string;
  stopCityNames?: string[];
  /**
   * @example
   * T4
   */
  stopDepTerm?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  stopDepTime?: string;
  stopTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopAirportName: 'stop_airport_name',
      stopArrTerm: 'stop_arr_term',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopCityNames: 'stop_city_names',
      stopDepTerm: 'stop_dep_term',
      stopDepTime: 'stop_dep_time',
      stopTime: 'stop_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopAirportName: 'string',
      stopArrTerm: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopCityNames: { 'type': 'array', 'itemType': 'string' },
      stopDepTerm: 'string',
      stopDepTime: 'string',
      stopTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos extends $tea.Model {
  airlineInfo?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo;
  arrAirportInfo?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  baggageDesc?: string;
  depAirportInfo?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @remarks
   * duration
   * 
   * @example
   * 140
   */
  duration?: number;
  extraInfo?: { [key: string]: any };
  /**
   * @example
   * MU5131
   */
  flightNo?: string;
  flightShareInfo?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo;
  flightSize?: string;
  flightStopInfo?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo;
  /**
   * @example
   * 320
   */
  flightType?: string;
  manufacturer?: string;
  mealDesc?: string;
  miles?: number;
  onTimeRate?: string;
  /**
   * @example
   * 0
   */
  oneMore?: number;
  oneMoreShow?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * false
   */
  share?: boolean;
  shortFlightSize?: string;
  /**
   * @example
   * false
   */
  stop?: boolean;
  totalTime?: string;
  transferTime?: string;
  transferTimeNumber?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      baggageDesc: 'baggage_desc',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      extraInfo: 'extra_info',
      flightNo: 'flight_no',
      flightShareInfo: 'flight_share_info',
      flightSize: 'flight_size',
      flightStopInfo: 'flight_stop_info',
      flightType: 'flight_type',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      miles: 'miles',
      onTimeRate: 'on_time_rate',
      oneMore: 'one_more',
      oneMoreShow: 'one_more_show',
      segmentIndex: 'segment_index',
      share: 'share',
      shortFlightSize: 'short_flight_size',
      stop: 'stop',
      totalTime: 'total_time',
      transferTime: 'transfer_time',
      transferTimeNumber: 'transfer_time_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo,
      arrAirportInfo: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo,
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      baggageDesc: 'string',
      depAirportInfo: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo,
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      flightNo: 'string',
      flightShareInfo: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo,
      flightSize: 'string',
      flightStopInfo: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo,
      flightType: 'string',
      manufacturer: 'string',
      mealDesc: 'string',
      miles: 'number',
      onTimeRate: 'string',
      oneMore: 'number',
      oneMoreShow: 'string',
      segmentIndex: 'number',
      share: 'boolean',
      shortFlightSize: 'string',
      stop: 'boolean',
      totalTime: 'string',
      transferTime: 'string',
      transferTimeNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @example
   * 140
   */
  duration?: number;
  extensions?: { [key: string]: string };
  flightSegmentInfos?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos[];
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  transferTime?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      extensions: 'extensions',
      flightSegmentInfos: 'flight_segment_infos',
      journeyIndex: 'journey_index',
      transferTime: 'transfer_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      extensions: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      flightSegmentInfos: { 'type': 'array', 'itemType': FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos },
      journeyIndex: 'number',
      transferTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleItemListSubItems extends $tea.Model {
  shoppingItemMap?: { [key: string]: ModuleItemListSubItemsShoppingItemMapValue };
  tag?: string;
  /**
   * @example
   * 07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  uniqKey?: string;
  static names(): { [key: string]: string } {
    return {
      shoppingItemMap: 'shopping_item_map',
      tag: 'tag',
      uniqKey: 'uniq_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListSubItemsShoppingItemMapValue },
      tag: 'string',
      uniqKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModuleItemList extends $tea.Model {
  flightRuleInfos?: { [key: string]: ModuleItemListFlightRuleInfosValue };
  /**
   * @example
   * e50d380fc05942cc8ac57af8ae02f448_0
   */
  itemId?: string;
  shoppingItemMap?: { [key: string]: ModuleItemListShoppingItemMapValue };
  subItemPositionMap?: { [key: string]: ModuleItemListSubItemPositionMapValue[] };
  subItems?: FlightOtaSearchV2ResponseBodyModuleItemListSubItems[];
  static names(): { [key: string]: string } {
    return {
      flightRuleInfos: 'flight_rule_infos',
      itemId: 'item_id',
      shoppingItemMap: 'shopping_item_map',
      subItemPositionMap: 'sub_item_position_map',
      subItems: 'sub_items',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightRuleInfos: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListFlightRuleInfosValue },
      itemId: 'string',
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListShoppingItemMapValue },
      subItemPositionMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleItemListSubItemPositionMapValue } },
      subItems: { 'type': 'array', 'itemType': FlightOtaSearchV2ResponseBodyModuleItemListSubItems },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightOtaSearchV2ResponseBodyModule extends $tea.Model {
  flightJourneyInfos?: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos[];
  itemList?: FlightOtaSearchV2ResponseBodyModuleItemList[];
  /**
   * @example
   * 2
   */
  searchMode?: number;
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      flightJourneyInfos: 'flight_journey_infos',
      itemList: 'item_list',
      searchMode: 'search_mode',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightJourneyInfos: { 'type': 'array', 'itemType': FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos },
      itemList: { 'type': 'array', 'itemType': FlightOtaSearchV2ResponseBodyModuleItemList },
      searchMode: 'number',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1000
   */
  actualPayPrice?: number;
  /**
   * @example
   * 12989127316726531726
   */
  alipayTradeNo?: string;
  /**
   * @example
   * 0000-00-00 00:00:00
   */
  lastPayTime?: string;
  /**
   * @example
   * 0
   */
  payStatus?: number;
  static names(): { [key: string]: string } {
    return {
      actualPayPrice: 'actual_pay_price',
      alipayTradeNo: 'alipay_trade_no',
      lastPayTime: 'last_pay_time',
      payStatus: 'pay_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualPayPrice: 'number',
      alipayTradeNo: 'string',
      lastPayTime: 'string',
      payStatus: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightPayOrderV2ResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 51000
   */
  price?: number;
  static names(): { [key: string]: string } {
    return {
      price: 'price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyRequestPassengerSegmentInfoList extends $tea.Model {
  flightNo?: string;
  passengerName?: string;
  /**
   * @example
   * 1245
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      flightNo: 'flight_no',
      passengerName: 'passenger_name',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightNo: 'string',
      passengerName: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyResponseBodyModule extends $tea.Model {
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * refun1234
   */
  disSubOrderId?: string;
  /**
   * @example
   * 1231231
   */
  refundApplyId?: number;
  /**
   * @example
   * 1000
   */
  refundFee?: number;
  /**
   * @example
   * 100
   */
  refundMoney?: number;
  static names(): { [key: string]: string } {
    return {
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      refundApplyId: 'refund_apply_id',
      refundFee: 'refund_fee',
      refundMoney: 'refund_money',
    };
  }

  static types(): { [key: string]: any } {
    return {
      disOrderId: 'string',
      disSubOrderId: 'string',
      refundApplyId: 'number',
      refundFee: 'number',
      refundMoney: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyV2RequestPassengerSegmentRelations extends $tea.Model {
  /**
   * @example
   * 1075004
   */
  passengerId?: string;
  segmentIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      segmentIdList: 'segment_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      segmentIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundApplyV2ResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1683901850297448200
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467200
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195836916039
   */
  outSubOrderId?: string;
  /**
   * @example
   * 1000000000297003
   */
  subOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      subOrderId: 'sub_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
      outSubOrderId: 'string',
      subOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailResponseBodyModuleRefundFeeList extends $tea.Model {
  /**
   * @example
   * 293982882881999
   */
  alipayTradeNo?: string;
  /**
   * @example
   * 100
   */
  refundFee?: number;
  /**
   * @example
   * 100
   */
  refundPrice?: number;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      refundFee: 'refund_fee',
      refundPrice: 'refund_price',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      refundFee: 'number',
      refundPrice: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 123
   */
  btripOrderId?: number;
  /**
   * @example
   * 123
   */
  btripSubOrderId?: number;
  /**
   * @example
   * dis1234
   */
  disOrderId?: string;
  /**
   * @example
   * refun123
   */
  disSubOrderId?: string;
  /**
   * @example
   * 1
   */
  isVoluntary?: number;
  reason?: string;
  /**
   * @example
   * 100
   */
  refundFee?: number;
  refundFeeList?: FlightRefundDetailResponseBodyModuleRefundFeeList[];
  /**
   * @example
   * 100
   */
  refundPrice?: number;
  /**
   * @example
   * 0
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      btripOrderId: 'btrip_order_id',
      btripSubOrderId: 'btrip_sub_order_id',
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      isVoluntary: 'is_voluntary',
      reason: 'reason',
      refundFee: 'refund_fee',
      refundFeeList: 'refund_fee_list',
      refundPrice: 'refund_price',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripOrderId: 'number',
      btripSubOrderId: 'number',
      disOrderId: 'string',
      disSubOrderId: 'string',
      isVoluntary: 'number',
      reason: 'string',
      refundFee: 'number',
      refundFeeList: { 'type': 'array', 'itemType': FlightRefundDetailResponseBodyModuleRefundFeeList },
      refundPrice: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2ResponseBodyModuleContactInfoDTO extends $tea.Model {
  /**
   * @example
   * 17685764353@163.com
   */
  contactEmail?: string;
  contactName?: string;
  /**
   * @example
   * 17685764353
   */
  contactPhone?: string;
  /**
   * @example
   * true
   */
  sendMsgToPassenger?: boolean;
  static names(): { [key: string]: string } {
    return {
      contactEmail: 'contact_email',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      sendMsgToPassenger: 'send_msg_to_passenger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactEmail: 'string',
      contactName: 'string',
      contactPhone: 'string',
      sendMsgToPassenger: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineIconUrl?: string;
  airlineName?: string;
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  arrAirportName?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  arrCityName?: string;
  arrTerminal?: string;
  /**
   * @example
   * 2023-10-03 09:30:00
   */
  arrTime?: string;
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * 10
   */
  cabinDiscount?: number;
  carrierAirlineCode?: string;
  carrierAirlineIconUrl?: string;
  carrierAirlineName?: string;
  carrierFlightNo?: string;
  /**
   * @example
   * PKX
   */
  depAirportCode?: string;
  depAirportName?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  depTerminal?: string;
  /**
   * @example
   * 2023-10-03 07:30:00
   */
  depTime?: string;
  /**
   * @example
   * MU5193
   */
  flightNo?: string;
  flightType?: string;
  mealDesc?: string;
  /**
   * @example
   * 1194012
   */
  segmentId?: string;
  segmentPosition?: FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition;
  stopArrTime?: string;
  stopCity?: string;
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineIconUrl: 'airline_icon_url',
      airlineName: 'airline_name',
      arrAirportCode: 'arr_airport_code',
      arrAirportName: 'arr_airport_name',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      cabinDiscount: 'cabin_discount',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineIconUrl: 'carrier_airline_icon_url',
      carrierAirlineName: 'carrier_airline_name',
      carrierFlightNo: 'carrier_flight_no',
      depAirportCode: 'dep_airport_code',
      depAirportName: 'dep_airport_name',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      flightType: 'flight_type',
      mealDesc: 'meal_desc',
      segmentId: 'segment_id',
      segmentPosition: 'segment_position',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineIconUrl: 'string',
      airlineName: 'string',
      arrAirportCode: 'string',
      arrAirportName: 'string',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      cabinDiscount: 'number',
      carrierAirlineCode: 'string',
      carrierAirlineIconUrl: 'string',
      carrierAirlineName: 'string',
      carrierFlightNo: 'string',
      depAirportCode: 'string',
      depAirportName: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      flightType: 'string',
      mealDesc: 'string',
      segmentId: 'string',
      segmentPosition: FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition,
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS extends $tea.Model {
  /**
   * @example
   * 2000-08-19
   */
  birthDate?: string;
  /**
   * @example
   * 430131413423435353
   */
  certNo?: string;
  /**
   * @example
   * 0
   */
  certType?: number;
  /**
   * @example
   * 1
   */
  gender?: number;
  originTicketNos?: string[];
  /**
   * @example
   * 12172819047252004460056
   */
  passengerId?: string;
  passengerName?: string;
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 17635462345
   */
  phone?: string;
  /**
   * @example
   * 3243028
   */
  pid?: number;
  ticketNos?: string[];
  static names(): { [key: string]: string } {
    return {
      birthDate: 'birth_date',
      certNo: 'cert_no',
      certType: 'cert_type',
      gender: 'gender',
      originTicketNos: 'origin_ticket_nos',
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
      passengerType: 'passenger_type',
      phone: 'phone',
      pid: 'pid',
      ticketNos: 'ticket_nos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthDate: 'string',
      certNo: 'string',
      certType: 'number',
      gender: 'number',
      originTicketNos: { 'type': 'array', 'itemType': 'string' },
      passengerId: 'string',
      passengerName: 'string',
      passengerType: 'number',
      phone: 'string',
      pid: 'number',
      ticketNos: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundDetailV2ResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2023-08-19 17:18:19
   */
  applyTime?: string;
  contactInfoDTO?: FlightRefundDetailV2ResponseBodyModuleContactInfoDTO;
  flightInfoDTOS?: FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS[];
  nonRefundableChangeServicePrice?: number;
  nonRefundableChangeUpgradePrice?: number;
  /**
   * @example
   * 1002039195025156700
   */
  orderId?: number;
  /**
   * @example
   * 1002039195025156700
   */
  outOrderId?: string;
  /**
   * @example
   * 1019195836916039
   */
  outSubOrderId?: string;
  reason?: string;
  /**
   * @example
   * 1
   */
  reasonCode?: string;
  refundFailReason?: string;
  /**
   * @example
   * 100
   */
  refundHandlingFee?: number;
  /**
   * @example
   * 10000
   */
  refundMoney?: number;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 1000000000297003
   */
  subOrderId?: number;
  travelerInfoDTOS?: FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS[];
  static names(): { [key: string]: string } {
    return {
      applyTime: 'apply_time',
      contactInfoDTO: 'contact_info_d_t_o',
      flightInfoDTOS: 'flight_info_d_t_o_s',
      nonRefundableChangeServicePrice: 'non_refundable_change_service_price',
      nonRefundableChangeUpgradePrice: 'non_refundable_change_upgrade_price',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      outSubOrderId: 'out_sub_order_id',
      reason: 'reason',
      reasonCode: 'reason_code',
      refundFailReason: 'refund_fail_reason',
      refundHandlingFee: 'refund_handling_fee',
      refundMoney: 'refund_money',
      status: 'status',
      subOrderId: 'sub_order_id',
      travelerInfoDTOS: 'traveler_info_d_t_o_s',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyTime: 'string',
      contactInfoDTO: FlightRefundDetailV2ResponseBodyModuleContactInfoDTO,
      flightInfoDTOS: { 'type': 'array', 'itemType': FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS },
      nonRefundableChangeServicePrice: 'number',
      nonRefundableChangeUpgradePrice: 'number',
      orderId: 'number',
      outOrderId: 'string',
      outSubOrderId: 'string',
      reason: 'string',
      reasonCode: 'string',
      refundFailReason: 'string',
      refundHandlingFee: 'number',
      refundMoney: 'number',
      status: 'number',
      subOrderId: 'number',
      travelerInfoDTOS: { 'type': 'array', 'itemType': FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalRequestPassengerSegmentInfoList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * CA1982
   */
  flightNo?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 23112
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      flightNo: 'flight_no',
      passengerName: 'passenger_name',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightNo: 'string',
      passengerName: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalResponseBodyModuleMultiRefundCalList extends $tea.Model {
  /**
   * @example
   * true
   */
  canApplyRefund?: boolean;
  name?: string;
  /**
   * @example
   * 1000
   */
  preRefundMoney?: number;
  /**
   * @example
   * 1000
   */
  refundFee?: number;
  /**
   * @example
   * 124
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      canApplyRefund: 'can_apply_refund',
      name: 'name',
      preRefundMoney: 'pre_refund_money',
      refundFee: 'refund_fee',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      canApplyRefund: 'boolean',
      name: 'string',
      preRefundMoney: 'number',
      refundFee: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalResponseBodyModuleReturnReason extends $tea.Model {
  extendDesc?: string;
  /**
   * @example
   * 0
   */
  person?: number;
  /**
   * @example
   * 0
   */
  reasonCode?: number;
  reasonShow?: string;
  /**
   * @example
   * 1
   */
  reasonType?: number;
  /**
   * @example
   * 0
   */
  volunteer?: number;
  static names(): { [key: string]: string } {
    return {
      extendDesc: 'extend_desc',
      person: 'person',
      reasonCode: 'reason_code',
      reasonShow: 'reason_show',
      reasonType: 'reason_type',
      volunteer: 'volunteer',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extendDesc: 'string',
      person: 'number',
      reasonCode: 'number',
      reasonShow: 'string',
      reasonType: 'number',
      volunteer: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalResponseBodyModule extends $tea.Model {
  /**
   * @example
   * false
   */
  flightChange?: boolean;
  /**
   * @example
   * FlightItem_996677504
   */
  itemUnitId?: string;
  multiRefundCalList?: FlightRefundPreCalResponseBodyModuleMultiRefundCalList[];
  /**
   * @example
   * 1000
   */
  preRefundMoney?: number;
  /**
   * @example
   * 1000
   */
  refundFee?: number;
  returnReason?: FlightRefundPreCalResponseBodyModuleReturnReason[];
  /**
   * @example
   * 882sudu23s923j9d2
   */
  sessionId?: string;
  tips?: string;
  static names(): { [key: string]: string } {
    return {
      flightChange: 'flight_change',
      itemUnitId: 'item_unit_id',
      multiRefundCalList: 'multi_refund_cal_list',
      preRefundMoney: 'pre_refund_money',
      refundFee: 'refund_fee',
      returnReason: 'return_reason',
      sessionId: 'session_id',
      tips: 'tips',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightChange: 'boolean',
      itemUnitId: 'string',
      multiRefundCalList: { 'type': 'array', 'itemType': FlightRefundPreCalResponseBodyModuleMultiRefundCalList },
      preRefundMoney: 'number',
      refundFee: 'number',
      returnReason: { 'type': 'array', 'itemType': FlightRefundPreCalResponseBodyModuleReturnReason },
      sessionId: 'string',
      tips: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2RequestPassengerSegmentRelations extends $tea.Model {
  /**
   * @example
   * 3243028
   */
  passengerId?: string;
  segmentIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      segmentIdList: 'segment_id_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      segmentIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS extends $tea.Model {
  /**
   * @example
   * 3243028
   */
  passengerId?: string;
  passengerName?: string;
  /**
   * @example
   * 10000
   */
  preRefundMoney?: number;
  /**
   * @example
   * 100
   */
  refundChargeFee?: number;
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
      preRefundMoney: 'pre_refund_money',
      refundChargeFee: 'refund_charge_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      passengerName: 'string',
      preRefundMoney: 'number',
      refundChargeFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS extends $tea.Model {
  reason?: string;
  /**
   * @example
   * 2
   */
  reasonType?: number;
  /**
   * @example
   * true
   */
  volunteer?: boolean;
  static names(): { [key: string]: string } {
    return {
      reason: 'reason',
      reasonType: 'reason_type',
      volunteer: 'volunteer',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reason: 'string',
      reasonType: 'number',
      volunteer: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightRefundPreCalV2ResponseBodyModule extends $tea.Model {
  multiRefundFeeDTOS?: FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS[];
  /**
   * @example
   * 10000
   */
  preRefundMoney?: number;
  /**
   * @example
   * 100
   */
  refundChargeFee?: number;
  refundReasonOptionDTOS?: FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS[];
  /**
   * @example
   * 100
   */
  serviceChargeFee?: number;
  static names(): { [key: string]: string } {
    return {
      multiRefundFeeDTOS: 'multi_refund_fee_d_t_o_s',
      preRefundMoney: 'pre_refund_money',
      refundChargeFee: 'refund_charge_fee',
      refundReasonOptionDTOS: 'refund_reason_option_d_t_o_s',
      serviceChargeFee: 'service_charge_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      multiRefundFeeDTOS: { 'type': 'array', 'itemType': FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS },
      preRefundMoney: 'number',
      refundChargeFee: 'number',
      refundReasonOptionDTOS: { 'type': 'array', 'itemType': FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS },
      serviceChargeFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListAirlineInfo extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListArrAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * HGH
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png
   */
  icon?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * demo
   */
  image?: string;
  /**
   * @example
   * 50
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  baggageDesc?: string[];
  /**
   * @example
   * 0
   */
  baggageSubContentType?: number;
  description?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * true
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'image_d_o',
      isHighlight: 'is_highlight',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems extends $tea.Model {
  baggageSubContentVisualizes?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes[];
  extraContentVisualizes?: any[];
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      extraContentVisualizes: 'extra_content_visualizes',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes },
      extraContentVisualizes: { 'type': 'array', 'itemType': 'any' },
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem extends $tea.Model {
  baggageSubItems?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems[];
  /**
   * @example
   * 1
   */
  index?: number;
  tableHead?: string;
  tips?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem extends $tea.Model {
  extraContents?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem extends $tea.Model {
  extraContents?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents[];
  /**
   * @example
   * 1
   */
  index?: number;
  refundSubItems?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList extends $tea.Model {
  /**
   * @example
   * demo
   */
  baggageInfo?: string;
  baggageItem?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem;
  changeRule?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule;
  changeRuleItem?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem;
  /**
   * @example
   * {}
   */
  extra?: string;
  refundRule?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule;
  refundRuleItem?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem;
  signRule?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule;
  tuigaiqianInfo?: string;
  upgradeRule?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule;
  static names(): { [key: string]: string } {
    return {
      baggageInfo: 'baggage_info',
      baggageItem: 'baggage_item',
      changeRule: 'change_rule',
      changeRuleItem: 'change_rule_item',
      extra: 'extra',
      refundRule: 'refund_rule',
      refundRuleItem: 'refund_rule_item',
      signRule: 'sign_rule',
      tuigaiqianInfo: 'tuigaiqian_info',
      upgradeRule: 'upgrade_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageInfo: 'string',
      baggageItem: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem,
      changeRule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule,
      changeRuleItem: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem,
      extra: 'string',
      refundRule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule,
      refundRuleItem: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem,
      signRule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule,
      tuigaiqianInfo: 'string',
      upgradeRule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListCabinInfoList extends $tea.Model {
  agentId?: number;
  basicCabinPrice?: number;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  /**
   * @example
   * G
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinClassName?: string;
  /**
   * @example
   * G
   */
  childCabin?: string;
  className?: string;
  /**
   * @example
   * demo
   */
  classRule?: string;
  /**
   * @example
   * 10
   */
  discount?: string;
  flightRuleList?: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList[];
  /**
   * @example
   * demo
   */
  flightRuleListStr?: string;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * {"key":"value"}
   */
  memo?: string;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  /**
   * @example
   * 1000_1_0
   */
  orderParams?: string;
  /**
   * @example
   * wisdiii2ii22ii2
   */
  otaItemId?: string;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 1
   */
  productType?: number;
  /**
   * @example
   * demo
   */
  productTypeDesc?: string;
  /**
   * @example
   * 100
   */
  promotionPrice?: string;
  /**
   * @example
   * 1
   */
  remainedSeatCount?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      agentId: 'agent_id',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinClassName: 'cabin_class_name',
      childCabin: 'child_cabin',
      className: 'class_name',
      classRule: 'class_rule',
      discount: 'discount',
      flightRuleList: 'flight_rule_list',
      flightRuleListStr: 'flight_rule_list_str',
      invoiceType: 'invoice_type',
      isProtocol: 'is_protocol',
      memo: 'memo',
      oilPrice: 'oil_price',
      orderParams: 'order_params',
      otaItemId: 'ota_item_id',
      price: 'price',
      productType: 'product_type',
      productTypeDesc: 'product_type_desc',
      promotionPrice: 'promotion_price',
      remainedSeatCount: 'remained_seat_count',
      ticketPrice: 'ticket_price',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'number',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      cabin: 'string',
      cabinClass: 'string',
      cabinClassName: 'string',
      childCabin: 'string',
      className: 'string',
      classRule: 'string',
      discount: 'string',
      flightRuleList: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList },
      flightRuleListStr: 'string',
      invoiceType: 'number',
      isProtocol: 'boolean',
      memo: 'string',
      oilPrice: 'number',
      orderParams: 'string',
      otaItemId: 'string',
      price: 'number',
      productType: 'number',
      productTypeDesc: 'string',
      promotionPrice: 'string',
      remainedSeatCount: 'string',
      ticketPrice: 'number',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListDepAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * BJS
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png
   */
  icon?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * demo
   */
  image?: string;
  /**
   * @example
   * 50
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  baggageDesc?: string[];
  /**
   * @example
   * 1
   */
  baggageSubContentType?: number;
  description?: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * true
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'image_d_o',
      isHighlight: 'is_highlight',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems extends $tea.Model {
  baggageSubContentVisualizes?: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes[];
  extraContentVisualizes?: any[];
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      extraContentVisualizes: 'extra_content_visualizes',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes },
      extraContentVisualizes: { 'type': 'array', 'itemType': 'any' },
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem extends $tea.Model {
  baggageSubItems?: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems[];
  /**
   * @example
   * 1
   */
  index?: number;
  tableHead?: string;
  tips?: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents extends $tea.Model {
  content?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem extends $tea.Model {
  extraContents?: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem extends $tea.Model {
  extraContents?: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents[];
  /**
   * @example
   * 1
   */
  index?: number;
  refundSubItems?: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListFlightRuleList extends $tea.Model {
  /**
   * @example
   * demo
   */
  baggageInfo?: string;
  baggageItem?: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem;
  changeRule?: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule;
  changeRuleItem?: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem;
  /**
   * @example
   * {}
   */
  extra?: string;
  refundRule?: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule;
  refundRuleItem?: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem;
  signRule?: FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule;
  tuigaiqianInfo?: string;
  upgradeRule?: FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule;
  static names(): { [key: string]: string } {
    return {
      baggageInfo: 'baggage_info',
      baggageItem: 'baggage_item',
      changeRule: 'change_rule',
      changeRuleItem: 'change_rule_item',
      extra: 'extra',
      refundRule: 'refund_rule',
      refundRuleItem: 'refund_rule_item',
      signRule: 'sign_rule',
      tuigaiqianInfo: 'tuigaiqian_info',
      upgradeRule: 'upgrade_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageInfo: 'string',
      baggageItem: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem,
      changeRule: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule,
      changeRuleItem: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem,
      extra: 'string',
      refundRule: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule,
      refundRuleItem: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem,
      signRule: FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule,
      tuigaiqianInfo: 'string',
      upgradeRule: FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo extends $tea.Model {
  /**
   * @example
   * ZH
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * HGH
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T4
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * BJS
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png
   */
  icon?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * demo
   */
  image?: string;
  /**
   * @example
   * 50
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  baggageDesc?: string[];
  /**
   * @example
   * 1
   */
  baggageSubContentType?: number;
  description?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * true
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'image_d_o',
      isHighlight: 'is_highlight',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems extends $tea.Model {
  baggageSubContentVisualizes?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes[];
  extraContentVisualizes?: any[];
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  /**
   * @example
   * 1
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      extraContentVisualizes: 'extra_content_visualizes',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes },
      extraContentVisualizes: { 'type': 'array', 'itemType': 'any' },
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem extends $tea.Model {
  baggageSubItems?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems[];
  /**
   * @example
   * 1
   */
  index?: number;
  tableHead?: string;
  tips?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 100
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem extends $tea.Model {
  extraContents?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 100
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 1
   */
  style?: number;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems extends $tea.Model {
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @remarks
   * PTC
   * 
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem extends $tea.Model {
  extraContents?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents[];
  /**
   * @example
   * 1
   */
  index?: number;
  refundSubItems?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems[];
  subTableHead?: string[];
  tableHead?: string;
  /**
   * @example
   * demo
   */
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      subTableHead: 'sub_table_head',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems },
      subTableHead: { 'type': 'array', 'itemType': 'string' },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo extends $tea.Model {
  content?: string;
  /**
   * @example
   * 100
   */
  cost?: number;
  /**
   * @example
   * 10
   */
  costPercent?: number;
  /**
   * @example
   * 1675036500000
   */
  timeStamp?: number;
  /**
   * @example
   * demo
   */
  timeType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      cost: 'cost',
      costPercent: 'cost_percent',
      timeStamp: 'time_stamp',
      timeType: 'time_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      cost: 'number',
      costPercent: 'number',
      timeStamp: 'number',
      timeType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule extends $tea.Model {
  /**
   * @example
   * true
   */
  able?: boolean;
  info?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo[];
  static names(): { [key: string]: string } {
    return {
      able: 'able',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      able: 'boolean',
      info: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList extends $tea.Model {
  /**
   * @example
   * demo
   */
  baggageInfo?: string;
  baggageItem?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem;
  changeRule?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule;
  changeRuleItem?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem;
  /**
   * @example
   * {}
   */
  extra?: string;
  refundRule?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule;
  refundRuleItem?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem;
  signRule?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule;
  /**
   * @example
   * demo
   */
  tuigaiqianInfo?: string;
  upgradeRule?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule;
  static names(): { [key: string]: string } {
    return {
      baggageInfo: 'baggage_info',
      baggageItem: 'baggage_item',
      changeRule: 'change_rule',
      changeRuleItem: 'change_rule_item',
      extra: 'extra',
      refundRule: 'refund_rule',
      refundRuleItem: 'refund_rule_item',
      signRule: 'sign_rule',
      tuigaiqianInfo: 'tuigaiqian_info',
      upgradeRule: 'upgrade_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageInfo: 'string',
      baggageItem: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem,
      changeRule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule,
      changeRuleItem: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem,
      extra: 'string',
      refundRule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule,
      refundRuleItem: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem,
      signRule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule,
      tuigaiqianInfo: 'string',
      upgradeRule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightListTransferInfo extends $tea.Model {
  flightSize?: string;
  /**
   * @example
   * demo
   */
  flightType?: string;
  transferAirlineInfo?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo;
  transferArrAirportInfo?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  transferArrDate?: string;
  transferDepAirportInfo?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  transferDepDate?: string;
  /**
   * @example
   * CA1234
   */
  transferFlightNo?: string;
  transferFlightRuleList?: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList[];
  static names(): { [key: string]: string } {
    return {
      flightSize: 'flight_size',
      flightType: 'flight_type',
      transferAirlineInfo: 'transfer_airline_info',
      transferArrAirportInfo: 'transfer_arr_airport_info',
      transferArrDate: 'transfer_arr_date',
      transferDepAirportInfo: 'transfer_dep_airport_info',
      transferDepDate: 'transfer_dep_date',
      transferFlightNo: 'transfer_flight_no',
      transferFlightRuleList: 'transfer_flight_rule_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightSize: 'string',
      flightType: 'string',
      transferAirlineInfo: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo,
      transferArrAirportInfo: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo,
      transferArrDate: 'string',
      transferDepAirportInfo: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo,
      transferDepDate: 'string',
      transferFlightNo: 'string',
      transferFlightRuleList: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModuleFlightList extends $tea.Model {
  airlineInfo?: FlightSearchListResponseBodyModuleFlightListAirlineInfo;
  arrAirportInfo?: FlightSearchListResponseBodyModuleFlightListArrAirportInfo;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  arrDate?: string;
  basicCabinPrice?: number;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @example
   * 2
   */
  cabinClass?: string;
  cabinInfoList?: FlightSearchListResponseBodyModuleFlightListCabinInfoList[];
  /**
   * @example
   * FM
   */
  carrierAirline?: string;
  /**
   * @example
   * FM9152
   */
  carrierNo?: string;
  classRule?: string;
  depAirportInfo?: FlightSearchListResponseBodyModuleFlightListDepAirportInfo;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  depDate?: string;
  /**
   * @example
   * 1
   */
  discount?: number;
  /**
   * @example
   * CA1234
   */
  flightNo?: string;
  flightRuleList?: FlightSearchListResponseBodyModuleFlightListFlightRuleList[];
  /**
   * @example
   * demo
   */
  flightRuleListStr?: string;
  flightSize?: string;
  /**
   * @example
   * demo
   */
  flightType?: string;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * false
   */
  isShare?: boolean;
  /**
   * @example
   * false
   */
  isStop?: boolean;
  /**
   * @example
   * false
   */
  isTransfer?: boolean;
  mealDesc?: string;
  /**
   * @example
   * {"key":"value"}
   */
  memo?: string;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  /**
   * @example
   * wisdiii2ii22ii2
   */
  otaItemId?: string;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 1
   */
  productType?: number;
  productTypeDesc?: string;
  /**
   * @example
   * 100
   */
  promotionPrice?: string;
  /**
   * @example
   * 1
   */
  remainedSeatCount?: string;
  /**
   * @example
   * 1000_1_0
   */
  secretParams?: string;
  /**
   * @example
   * 1
   */
  segmentNumber?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCity?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  stopDepTime?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  totalPrice?: string;
  transferInfo?: FlightSearchListResponseBodyModuleFlightListTransferInfo;
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrDate: 'arr_date',
      basicCabinPrice: 'basic_cabin_price',
      buildPrice: 'build_price',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinInfoList: 'cabin_info_list',
      carrierAirline: 'carrier_airline',
      carrierNo: 'carrier_no',
      classRule: 'class_rule',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      discount: 'discount',
      flightNo: 'flight_no',
      flightRuleList: 'flight_rule_list',
      flightRuleListStr: 'flight_rule_list_str',
      flightSize: 'flight_size',
      flightType: 'flight_type',
      invoiceType: 'invoice_type',
      isProtocol: 'is_protocol',
      isShare: 'is_share',
      isStop: 'is_stop',
      isTransfer: 'is_transfer',
      mealDesc: 'meal_desc',
      memo: 'memo',
      oilPrice: 'oil_price',
      otaItemId: 'ota_item_id',
      price: 'price',
      productType: 'product_type',
      productTypeDesc: 'product_type_desc',
      promotionPrice: 'promotion_price',
      remainedSeatCount: 'remained_seat_count',
      secretParams: 'secret_params',
      segmentNumber: 'segment_number',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
      ticketPrice: 'ticket_price',
      totalPrice: 'total_price',
      transferInfo: 'transfer_info',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: FlightSearchListResponseBodyModuleFlightListAirlineInfo,
      arrAirportInfo: FlightSearchListResponseBodyModuleFlightListArrAirportInfo,
      arrDate: 'string',
      basicCabinPrice: 'number',
      buildPrice: 'number',
      cabin: 'string',
      cabinClass: 'string',
      cabinInfoList: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListCabinInfoList },
      carrierAirline: 'string',
      carrierNo: 'string',
      classRule: 'string',
      depAirportInfo: FlightSearchListResponseBodyModuleFlightListDepAirportInfo,
      depCityCode: 'string',
      depDate: 'string',
      discount: 'number',
      flightNo: 'string',
      flightRuleList: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightListFlightRuleList },
      flightRuleListStr: 'string',
      flightSize: 'string',
      flightType: 'string',
      invoiceType: 'number',
      isProtocol: 'boolean',
      isShare: 'boolean',
      isStop: 'boolean',
      isTransfer: 'boolean',
      mealDesc: 'string',
      memo: 'string',
      oilPrice: 'number',
      otaItemId: 'string',
      price: 'number',
      productType: 'number',
      productTypeDesc: 'string',
      promotionPrice: 'string',
      remainedSeatCount: 'string',
      secretParams: 'string',
      segmentNumber: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
      ticketPrice: 'number',
      totalPrice: 'string',
      transferInfo: FlightSearchListResponseBodyModuleFlightListTransferInfo,
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FlightSearchListResponseBodyModule extends $tea.Model {
  flightList?: FlightSearchListResponseBodyModuleFlightList[];
  /**
   * @example
   * false
   */
  isReplacePnr?: boolean;
  static names(): { [key: string]: string } {
    return {
      flightList: 'flight_list',
      isReplacePnr: 'is_replace_pnr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightList: { 'type': 'array', 'itemType': FlightSearchListResponseBodyModuleFlightList },
      isReplacePnr: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupCorpTokenResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 70000
   */
  expire?: number;
  /**
   * @example
   * 1652410740914
   */
  start?: number;
  /**
   * @example
   * *0*37j76df
   */
  token?: string;
  static names(): { [key: string]: string } {
    return {
      expire: 'expire',
      start: 'start',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expire: 'number',
      start: 'number',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupUserSaveRequestCertList extends $tea.Model {
  certExpiredTime?: string;
  certNation?: string;
  certNo?: string;
  certType?: number;
  nationality?: string;
  static names(): { [key: string]: string } {
    return {
      certExpiredTime: 'cert_expired_time',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      nationality: 'nationality',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certExpiredTime: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      nationality: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GroupUserSaveRequestSubCorpIdList extends $tea.Model {
  departIds?: string[];
  email?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  leaveStatus?: number;
  /**
   * @example
   * 123
   */
  managerUserId?: string;
  /**
   * @example
   * 10
   */
  positionLevel?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * btrip123
   */
  subCorpId?: string;
  static names(): { [key: string]: string } {
    return {
      departIds: 'depart_ids',
      email: 'email',
      leaveStatus: 'leave_status',
      managerUserId: 'manager_user_id',
      positionLevel: 'position_level',
      subCorpId: 'sub_corp_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      departIds: { 'type': 'array', 'itemType': 'string' },
      email: 'string',
      leaveStatus: 'number',
      managerUserId: 'string',
      positionLevel: 'string',
      subCorpId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails extends $tea.Model {
  /**
   * @example
   * 652302
   */
  cityCode?: string;
  hotelAddress?: string;
  /**
   * @example
   * 55335212
   */
  hotelCode?: string;
  hotelName?: string;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * 100
   */
  minPrice?: number;
  /**
   * @example
   * 100
   */
  originalMinPrice?: number;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      hotelAddress: 'hotel_address',
      hotelCode: 'hotel_code',
      hotelName: 'hotel_name',
      isProtocol: 'is_protocol',
      minPrice: 'min_price',
      originalMinPrice: 'original_min_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      hotelAddress: 'string',
      hotelCode: 'string',
      hotelName: 'string',
      isProtocol: 'boolean',
      minPrice: 'number',
      originalMinPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelAskingPriceResponseBodyModule extends $tea.Model {
  hotelAskingPriceDetails?: HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails[];
  static names(): { [key: string]: string } {
    return {
      hotelAskingPriceDetails: 'hotel_asking_price_details',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelAskingPriceDetails: { 'type': 'array', 'itemType': HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelBillSettlementQueryResponseBodyModuleDataList extends $tea.Model {
  agreementPromotionFee?: number;
  /**
   * @example
   * 234432432
   */
  alipayTradeNo?: string;
  applyArrCityCode?: string;
  applyArrCityName?: string;
  applyDepCityCode?: string;
  applyDepCityName?: string;
  /**
   * @remarks
   * 审批扩展自定义字段
   */
  applyExtendField?: string;
  /**
   * @example
   * 103208648
   */
  applyId?: string;
  averageNights?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  billRecordTime?: string;
  billingEntity?: string;
  bookMode?: string;
  bookReason?: string;
  /**
   * @example
   * 2021-10-12 23:58:48
   */
  bookTime?: string;
  bookerId?: string;
  bookerJobNo?: string;
  bookerName?: string;
  brandGroup?: string;
  brandName?: string;
  businessTripResult?: string;
  cancelOrModifyReason?: string;
  cancelOrModifyScene?: string;
  /**
   * @example
   * 1
   */
  capitalDirection?: string;
  cascadeDepartment?: string;
  /**
   * @example
   * 2021-10-14 00:00:00
   */
  checkInDate?: string;
  /**
   * @example
   * 2021-10-16 00:00:00
   */
  checkoutDate?: string;
  city?: string;
  /**
   * @example
   * 110100
   */
  cityCode?: string;
  cityCounty?: string;
  cityCountyCode?: string;
  /**
   * @example
   * 12
   */
  corpRefundFee?: number;
  /**
   * @example
   * 1000
   */
  corpTotalFee?: number;
  costCenter?: string;
  /**
   * @example
   * 8b7f3cd-24324-097
   */
  costCenterNumber?: string;
  deductibleTax?: number;
  department?: string;
  departmentId?: string;
  exceedReason?: string;
  /**
   * @example
   * 20101
   */
  feeType?: string;
  /**
   * @example
   * 0
   */
  fees?: number;
  fines?: number;
  /**
   * @example
   * 12
   */
  fuPointFee?: number;
  hotelName?: string;
  /**
   * @example
   * 5038018
   */
  index?: string;
  insOrderId?: string;
  insuranceNumber?: string;
  insurancePrice?: number;
  insuranceProductName?: string;
  invoiceTitle?: string;
  isEarlyDeparture?: string;
  isNegotiation?: string;
  isShareStr?: string;
  /**
   * @example
   * 2
   */
  nights?: number;
  /**
   * @example
   * 223423423432422
   */
  orderId?: string;
  /**
   * @example
   * 1088.96
   */
  orderPrice?: number;
  orderType?: string;
  originalReserveRule?: string;
  /**
   * @example
   * 4234324
   */
  overApplyId?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 34
   */
  personRefundFee?: number;
  /**
   * @example
   * 88.96
   */
  personSettlePrice?: number;
  /**
   * @example
   * 5038018
   */
  primaryId?: number;
  /**
   * @example
   * 223423432
   */
  projectCode?: string;
  projectName?: string;
  /**
   * @example
   * 113.02
   */
  promotionFee?: number;
  recoverMoneyReceiptAmt?: number;
  remark?: string;
  reserveRule?: string;
  roomNo?: string;
  /**
   * @example
   * 1
   */
  roomNumber?: number;
  /**
   * @example
   * 1201.98
   */
  roomPrice?: number;
  roomType?: string;
  sceneId?: string;
  sceneName?: string;
  /**
   * @example
   * 0
   */
  serviceFee?: number;
  /**
   * @example
   * 1000
   */
  settlementFee?: number;
  /**
   * @example
   * 5.68
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2021-10-12 23:58:56
   */
  settlementTime?: string;
  /**
   * @example
   * 4
   */
  settlementType?: string;
  star?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * 税率
   * 
   * @example
   * 6%
   */
  taxRate?: string;
  thirdItineraryId?: string;
  /**
   * @example
   * 2
   */
  totalNights?: number;
  travelerId?: string;
  /**
   * @example
   * 326246
   */
  travelerJobNo?: string;
  travelerMemberTypeName?: string;
  travelerName?: string;
  unbookedLowestPriceReason?: string;
  /**
   * @example
   * 11
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      agreementPromotionFee: 'agreement_promotion_fee',
      alipayTradeNo: 'alipay_trade_no',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      averageNights: 'average_nights',
      billRecordTime: 'bill_record_time',
      billingEntity: 'billing_entity',
      bookMode: 'book_mode',
      bookReason: 'book_reason',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      brandGroup: 'brand_group',
      brandName: 'brand_name',
      businessTripResult: 'business_trip_result',
      cancelOrModifyReason: 'cancel_or_modify_reason',
      cancelOrModifyScene: 'cancel_or_modify_scene',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      checkInDate: 'check_in_date',
      checkoutDate: 'checkout_date',
      city: 'city',
      cityCode: 'city_code',
      cityCounty: 'city_county',
      cityCountyCode: 'city_county_code',
      corpRefundFee: 'corp_refund_fee',
      corpTotalFee: 'corp_total_fee',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      deductibleTax: 'deductible_tax',
      department: 'department',
      departmentId: 'department_id',
      exceedReason: 'exceed_reason',
      feeType: 'fee_type',
      fees: 'fees',
      fines: 'fines',
      fuPointFee: 'fu_point_fee',
      hotelName: 'hotel_name',
      index: 'index',
      insOrderId: 'ins_order_id',
      insuranceNumber: 'insurance_number',
      insurancePrice: 'insurance_price',
      insuranceProductName: 'insurance_product_name',
      invoiceTitle: 'invoice_title',
      isEarlyDeparture: 'is_early_departure',
      isNegotiation: 'is_negotiation',
      isShareStr: 'is_share_str',
      nights: 'nights',
      orderId: 'order_id',
      orderPrice: 'order_price',
      orderType: 'order_type',
      originalReserveRule: 'original_reserve_rule',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      personRefundFee: 'person_refund_fee',
      personSettlePrice: 'person_settle_price',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      promotionFee: 'promotion_fee',
      recoverMoneyReceiptAmt: 'recover_money_receipt_amt',
      remark: 'remark',
      reserveRule: 'reserve_rule',
      roomNo: 'room_no',
      roomNumber: 'room_number',
      roomPrice: 'room_price',
      roomType: 'room_type',
      sceneId: 'scene_id',
      sceneName: 'scene_name',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      star: 'star',
      status: 'status',
      taxRate: 'tax_rate',
      thirdItineraryId: 'third_itinerary_id',
      totalNights: 'total_nights',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberTypeName: 'traveler_member_type_name',
      travelerName: 'traveler_name',
      unbookedLowestPriceReason: 'unbooked_lowest_price_reason',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agreementPromotionFee: 'number',
      alipayTradeNo: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      averageNights: 'string',
      billRecordTime: 'string',
      billingEntity: 'string',
      bookMode: 'string',
      bookReason: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      brandGroup: 'string',
      brandName: 'string',
      businessTripResult: 'string',
      cancelOrModifyReason: 'string',
      cancelOrModifyScene: 'string',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      checkInDate: 'string',
      checkoutDate: 'string',
      city: 'string',
      cityCode: 'string',
      cityCounty: 'string',
      cityCountyCode: 'string',
      corpRefundFee: 'number',
      corpTotalFee: 'number',
      costCenter: 'string',
      costCenterNumber: 'string',
      deductibleTax: 'number',
      department: 'string',
      departmentId: 'string',
      exceedReason: 'string',
      feeType: 'string',
      fees: 'number',
      fines: 'number',
      fuPointFee: 'number',
      hotelName: 'string',
      index: 'string',
      insOrderId: 'string',
      insuranceNumber: 'string',
      insurancePrice: 'number',
      insuranceProductName: 'string',
      invoiceTitle: 'string',
      isEarlyDeparture: 'string',
      isNegotiation: 'string',
      isShareStr: 'string',
      nights: 'number',
      orderId: 'string',
      orderPrice: 'number',
      orderType: 'string',
      originalReserveRule: 'string',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      personRefundFee: 'number',
      personSettlePrice: 'number',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      promotionFee: 'number',
      recoverMoneyReceiptAmt: 'number',
      remark: 'string',
      reserveRule: 'string',
      roomNo: 'string',
      roomNumber: 'number',
      roomPrice: 'number',
      roomType: 'string',
      sceneId: 'string',
      sceneName: 'string',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      star: 'string',
      status: 'number',
      taxRate: 'string',
      thirdItineraryId: 'string',
      totalNights: 'number',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberTypeName: 'string',
      travelerName: 'string',
      unbookedLowestPriceReason: 'string',
      voucherType: 'number',
      voucherTypeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2
   */
  category?: number;
  corpId?: string;
  dataList?: HotelBillSettlementQueryResponseBodyModuleDataList[];
  /**
   * @example
   * 2021-10-14
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-13
   */
  periodStart?: string;
  /**
   * @example
   * 1402
   */
  totalNum?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      dataList: 'data_list',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalNum: 'total_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      dataList: { 'type': 'array', 'itemType': HotelBillSettlementQueryResponseBodyModuleDataList },
      periodEnd: 'string',
      periodStart: 'string',
      totalNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelCityCodeListResponseBodyModuleCitysDistricts extends $tea.Model {
  /**
   * @example
   * 330000
   */
  districtCode?: string;
  districtName?: string;
  static names(): { [key: string]: string } {
    return {
      districtCode: 'district_code',
      districtName: 'district_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      districtCode: 'string',
      districtName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelCityCodeListResponseBodyModuleCitys extends $tea.Model {
  /**
   * @example
   * 445222
   */
  cityCode?: string;
  cityName?: string;
  districts?: HotelCityCodeListResponseBodyModuleCitysDistricts[];
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      districts: 'districts',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      districts: { 'type': 'array', 'itemType': HotelCityCodeListResponseBodyModuleCitysDistricts },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelCityCodeListResponseBodyModule extends $tea.Model {
  citys?: HotelCityCodeListResponseBodyModuleCitys[];
  /**
   * @example
   * 108800
   */
  proviceCode?: string;
  provinceName?: string;
  static names(): { [key: string]: string } {
    return {
      citys: 'citys',
      proviceCode: 'provice_code',
      provinceName: 'province_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      citys: { 'type': 'array', 'itemType': HotelCityCodeListResponseBodyModuleCitys },
      proviceCode: 'string',
      provinceName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo extends $tea.Model {
  /**
   * @example
   * 2021-07-08
   */
  checkIn?: string;
  /**
   * @example
   * 2021-07-08
   */
  checkOut?: string;
  /**
   * @example
   * SHA
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 10000
   */
  price?: number;
  /**
   * @example
   * true
   */
  together?: boolean;
  /**
   * @example
   * 16
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      checkIn: 'check_in',
      checkOut: 'check_out',
      cityCode: 'city_code',
      cityName: 'city_name',
      price: 'price',
      together: 'together',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkIn: 'string',
      checkOut: 'string',
      cityCode: 'string',
      cityName: 'string',
      price: 'number',
      together: 'boolean',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelExceedApplyQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 27238197
   */
  applyId?: number;
  applyIntentionInfoDo?: HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo;
  btripCause?: string;
  /**
   * @example
   * corp1
   */
  corpId?: string;
  exceedReason?: string;
  /**
   * @example
   * 16
   */
  exceedType?: number;
  /**
   * @example
   * 10000
   */
  originStandard?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 2022-02-11T16:25Z
   */
  submitTime?: string;
  /**
   * @example
   * 0001A1100000007EX08O
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * test_corp
   */
  thirdpartCorpId?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      applyIntentionInfoDo: 'apply_intention_info_do',
      btripCause: 'btrip_cause',
      corpId: 'corp_id',
      exceedReason: 'exceed_reason',
      exceedType: 'exceed_type',
      originStandard: 'origin_standard',
      status: 'status',
      submitTime: 'submit_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartCorpId: 'thirdpart_corp_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      applyIntentionInfoDo: HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo,
      btripCause: 'string',
      corpId: 'string',
      exceedReason: 'string',
      exceedType: 'number',
      originStandard: 'string',
      status: 'number',
      submitTime: 'string',
      thirdpartApplyId: 'string',
      thirdpartCorpId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList extends $tea.Model {
  /**
   * @example
   * 1
   */
  hour?: number;
  /**
   * @example
   * 20
   */
  value?: number;
  static names(): { [key: string]: string } {
    return {
      hour: 'hour',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hour: 'number',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO extends $tea.Model {
  btripHotelCancelPolicyInfoDTOList?: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList[];
  /**
   * @example
   * 1
   */
  cancelPolicyType?: number;
  static names(): { [key: string]: string } {
    return {
      btripHotelCancelPolicyInfoDTOList: 'btrip_hotel_cancel_policy_info_d_t_o_list',
      cancelPolicyType: 'cancel_policy_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripHotelCancelPolicyInfoDTOList: { 'type': 'array', 'itemType': HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList },
      cancelPolicyType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule extends $tea.Model {
  btripHotelCancelPolicyDTO?: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO;
  cancelPolicyTitle?: string;
  /**
   * @example
   * 2023-02-27
   */
  checkIn?: string;
  static names(): { [key: string]: string } {
    return {
      btripHotelCancelPolicyDTO: 'btrip_hotel_cancel_policy_d_t_o',
      cancelPolicyTitle: 'cancel_policy_title',
      checkIn: 'check_in',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripHotelCancelPolicyDTO: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO,
      cancelPolicyTitle: 'string',
      checkIn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc extends $tea.Model {
  desc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail extends $tea.Model {
  labelName?: string[];
  moneyDesc?: string;
  static names(): { [key: string]: string } {
    return {
      labelName: 'label_name',
      moneyDesc: 'money_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      labelName: { 'type': 'array', 'itemType': 'string' },
      moneyDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc extends $tea.Model {
  cashReduceTotal?: string;
  dinamicLabel?: string;
  discountDetail?: HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail[];
  subTitle?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      cashReduceTotal: 'cash_reduce_total',
      dinamicLabel: 'dinamic_label',
      discountDetail: 'discount_detail',
      subTitle: 'sub_title',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cashReduceTotal: 'string',
      dinamicLabel: 'string',
      discountDetail: { 'type': 'array', 'itemType': HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail },
      subTitle: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO extends $tea.Model {
  /**
   * @example
   * 100
   */
  beforeDiscountPrice?: number;
  /**
   * @example
   * demo
   */
  breakfast?: string;
  /**
   * @example
   * 1000
   */
  discountPrice?: number;
  /**
   * @example
   * 100
   */
  lastDiscountsPrice?: number;
  lastDiscountsRoundingPrice?: number;
  /**
   * @example
   * 1
   */
  lastNum?: number;
  /**
   * @example
   * 2023-03-25
   */
  rateStartTime?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      beforeDiscountPrice: 'before_discount_price',
      breakfast: 'breakfast',
      discountPrice: 'discount_price',
      lastDiscountsPrice: 'last_discounts_price',
      lastDiscountsRoundingPrice: 'last_discounts_rounding_price',
      lastNum: 'last_num',
      rateStartTime: 'rate_start_time',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beforeDiscountPrice: 'number',
      breakfast: 'string',
      discountPrice: 'number',
      lastDiscountsPrice: 'number',
      lastDiscountsRoundingPrice: 'number',
      lastNum: 'number',
      rateStartTime: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRates extends $tea.Model {
  bedDesc?: string;
  bedType?: string;
  breakfast?: string;
  btripCancelRule?: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule;
  btripHotelCancelDesc?: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc[];
  /**
   * @example
   * true
   */
  canSmoking?: boolean;
  cancelPolicyDesc?: string;
  /**
   * @example
   * 1
   */
  cancelPolicyType?: number;
  /**
   * @example
   * 0
   */
  companyAassist?: string;
  /**
   * @example
   * 0
   */
  confirmType?: number;
  /**
   * @example
   * cny
   */
  currencyCode?: string;
  /**
   * @example
   * demo
   */
  dailyPriceFormatYuan?: string;
  /**
   * @example
   * 400
   */
  dailyPriceView?: string;
  discountDesc?: HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc;
  /**
   * @example
   * demo
   */
  endTimeDaily?: string;
  hotelDetailRatePriceDTO?: HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO[];
  /**
   * @example
   * true
   */
  instantConfirm?: boolean;
  inventoryDesc?: string;
  /**
   * @example
   * 100
   */
  inventoryPrice?: string;
  /**
   * @example
   * true
   */
  isBusinessPay4Goods?: boolean;
  isGuarantee?: number;
  /**
   * @example
   * true
   */
  isNeedEmail?: boolean;
  /**
   * @example
   * 612673015638
   */
  itemId?: number;
  /**
   * @example
   * demo
   */
  lastCancelTime?: string;
  /**
   * @example
   * 2
   */
  maxOccupancy?: number;
  /**
   * @example
   * 2
   */
  minAdvHours?: number;
  /**
   * @example
   * 3
   */
  minDays?: number;
  /**
   * @example
   * 1
   */
  nod?: number;
  /**
   * @example
   * 2
   */
  nop?: number;
  /**
   * @example
   * 0
   */
  orderShipTime?: number;
  /**
   * @example
   * 1
   */
  paymentType?: number;
  /**
   * @example
   * 0
   */
  priceType?: number;
  /**
   * @example
   * demo
   */
  promotionInfo?: string;
  /**
   * @example
   * 4509447432148
   */
  rateId?: number;
  ratePlanName?: string;
  /**
   * @example
   * 4509447432148
   */
  rpId?: number;
  /**
   * @example
   * 4011822148
   */
  sellerId?: number;
  /**
   * @example
   * demo
   */
  startTimeDaily?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 2321
   */
  supplierCode?: string;
  /**
   * @example
   * demo
   */
  supplierName?: string;
  /**
   * @example
   * true
   */
  supportSpecialInvoice?: boolean;
  /**
   * @example
   * 40000
   */
  unroundingDailyPriceFormatYuan?: string;
  static names(): { [key: string]: string } {
    return {
      bedDesc: 'bed_desc',
      bedType: 'bed_type',
      breakfast: 'breakfast',
      btripCancelRule: 'btrip_cancel_rule',
      btripHotelCancelDesc: 'btrip_hotel_cancel_desc',
      canSmoking: 'can_smoking',
      cancelPolicyDesc: 'cancel_policy_desc',
      cancelPolicyType: 'cancel_policy_type',
      companyAassist: 'company_aassist',
      confirmType: 'confirm_type',
      currencyCode: 'currency_code',
      dailyPriceFormatYuan: 'daily_price_format_yuan',
      dailyPriceView: 'daily_price_view',
      discountDesc: 'discount_desc',
      endTimeDaily: 'end_time_daily',
      hotelDetailRatePriceDTO: 'hotel_detail_rate_price_d_t_o',
      instantConfirm: 'instant_confirm',
      inventoryDesc: 'inventory_desc',
      inventoryPrice: 'inventory_price',
      isBusinessPay4Goods: 'is_business_pay4_goods',
      isGuarantee: 'is_guarantee',
      isNeedEmail: 'is_need_email',
      itemId: 'item_id',
      lastCancelTime: 'last_cancel_time',
      maxOccupancy: 'max_occupancy',
      minAdvHours: 'min_adv_hours',
      minDays: 'min_days',
      nod: 'nod',
      nop: 'nop',
      orderShipTime: 'order_ship_time',
      paymentType: 'payment_type',
      priceType: 'price_type',
      promotionInfo: 'promotion_info',
      rateId: 'rate_id',
      ratePlanName: 'rate_plan_name',
      rpId: 'rp_id',
      sellerId: 'seller_id',
      startTimeDaily: 'start_time_daily',
      status: 'status',
      supplierCode: 'supplier_code',
      supplierName: 'supplier_name',
      supportSpecialInvoice: 'support_special_invoice',
      unroundingDailyPriceFormatYuan: 'unrounding_daily_price_format_yuan',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedDesc: 'string',
      bedType: 'string',
      breakfast: 'string',
      btripCancelRule: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule,
      btripHotelCancelDesc: { 'type': 'array', 'itemType': HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc },
      canSmoking: 'boolean',
      cancelPolicyDesc: 'string',
      cancelPolicyType: 'number',
      companyAassist: 'string',
      confirmType: 'number',
      currencyCode: 'string',
      dailyPriceFormatYuan: 'string',
      dailyPriceView: 'string',
      discountDesc: HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc,
      endTimeDaily: 'string',
      hotelDetailRatePriceDTO: { 'type': 'array', 'itemType': HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO },
      instantConfirm: 'boolean',
      inventoryDesc: 'string',
      inventoryPrice: 'string',
      isBusinessPay4Goods: 'boolean',
      isGuarantee: 'number',
      isNeedEmail: 'boolean',
      itemId: 'number',
      lastCancelTime: 'string',
      maxOccupancy: 'number',
      minAdvHours: 'number',
      minDays: 'number',
      nod: 'number',
      nop: 'number',
      orderShipTime: 'number',
      paymentType: 'number',
      priceType: 'number',
      promotionInfo: 'string',
      rateId: 'number',
      ratePlanName: 'string',
      rpId: 'number',
      sellerId: 'number',
      startTimeDaily: 'string',
      status: 'number',
      supplierCode: 'string',
      supplierName: 'string',
      supportSpecialInvoice: 'boolean',
      unroundingDailyPriceFormatYuan: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRoomsRoomService extends $tea.Model {
  /**
   * @example
   * #000000
   */
  color?: string;
  desc?: string;
  /**
   * @example
   * #4AA900
   */
  highlightColorColor?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      color: 'color',
      desc: 'desc',
      highlightColorColor: 'highlight_color_color',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      color: 'string',
      desc: 'string',
      highlightColorColor: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModuleRooms extends $tea.Model {
  /**
   * @example
   * 27
   */
  area?: string;
  bedTypeString?: string;
  /**
   * @example
   * true
   */
  extraBed?: boolean;
  facility?: string;
  /**
   * @example
   * 1,2,3,4,5,6
   */
  floor?: string;
  /**
   * @example
   * 1
   */
  maxOccupancy?: number;
  name?: string;
  /**
   * @example
   * 0
   */
  networkService?: string;
  pics?: string;
  rates?: HotelGoodsQueryResponseBodyModuleRoomsRates[];
  /**
   * @example
   * demo
   */
  roomDasc?: string;
  roomFacility?: string[];
  roomService?: HotelGoodsQueryResponseBodyModuleRoomsRoomService[];
  /**
   * @example
   * 100929
   */
  srid?: number;
  /**
   * @example
   * 1
   */
  status?: number;
  windowType?: string;
  static names(): { [key: string]: string } {
    return {
      area: 'area',
      bedTypeString: 'bed_type_string',
      extraBed: 'extra_bed',
      facility: 'facility',
      floor: 'floor',
      maxOccupancy: 'max_occupancy',
      name: 'name',
      networkService: 'network_service',
      pics: 'pics',
      rates: 'rates',
      roomDasc: 'room_dasc',
      roomFacility: 'room_facility',
      roomService: 'room_service',
      srid: 'srid',
      status: 'status',
      windowType: 'window_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      area: 'string',
      bedTypeString: 'string',
      extraBed: 'boolean',
      facility: 'string',
      floor: 'string',
      maxOccupancy: 'number',
      name: 'string',
      networkService: 'string',
      pics: 'string',
      rates: { 'type': 'array', 'itemType': HotelGoodsQueryResponseBodyModuleRoomsRates },
      roomDasc: 'string',
      roomFacility: { 'type': 'array', 'itemType': 'string' },
      roomService: { 'type': 'array', 'itemType': HotelGoodsQueryResponseBodyModuleRoomsRoomService },
      srid: 'number',
      status: 'number',
      windowType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelGoodsQueryResponseBodyModule extends $tea.Model {
  address?: string;
  bookingInstructions?: { [key: string]: string };
  /**
   * @example
   * true
   */
  canForeigner?: boolean;
  /**
   * @example
   * 2022-05-15
   */
  checkIn?: string;
  /**
   * @example
   * 2022-05-15
   */
  checkOut?: string;
  descriptions?: string[];
  dinamicBannerPicUrls?: string[];
  /**
   * @example
   * 17:00
   */
  earlyArrivalTime?: string;
  /**
   * @example
   * 29382
   */
  hotelId?: number;
  hotelName?: string;
  /**
   * @example
   * 12:00
   */
  lateArrivalTime?: string;
  rooms?: HotelGoodsQueryResponseBodyModuleRooms[];
  /**
   * @example
   * demo
   */
  searchId?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      bookingInstructions: 'booking_instructions',
      canForeigner: 'can_foreigner',
      checkIn: 'check_in',
      checkOut: 'check_out',
      descriptions: 'descriptions',
      dinamicBannerPicUrls: 'dinamic_banner_pic_urls',
      earlyArrivalTime: 'early_arrival_time',
      hotelId: 'hotel_id',
      hotelName: 'hotel_name',
      lateArrivalTime: 'late_arrival_time',
      rooms: 'rooms',
      searchId: 'search_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      bookingInstructions: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      canForeigner: 'boolean',
      checkIn: 'string',
      checkOut: 'string',
      descriptions: { 'type': 'array', 'itemType': 'string' },
      dinamicBannerPicUrls: { 'type': 'array', 'itemType': 'string' },
      earlyArrivalTime: 'string',
      hotelId: 'number',
      hotelName: 'string',
      lateArrivalTime: 'string',
      rooms: { 'type': 'array', 'itemType': HotelGoodsQueryResponseBodyModuleRooms },
      searchId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelIndexInfoResponseBodyModuleItems extends $tea.Model {
  /**
   * @example
   * 182873
   */
  hotelId?: string;
  /**
   * @example
   * 0
   */
  hotelStatus?: string;
  static names(): { [key: string]: string } {
    return {
      hotelId: 'hotel_id',
      hotelStatus: 'hotel_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelId: 'string',
      hotelStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelIndexInfoResponseBodyModule extends $tea.Model {
  items?: HotelIndexInfoResponseBodyModuleItems[];
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 182873
   */
  pageToken?: string;
  static names(): { [key: string]: string } {
    return {
      items: 'items',
      pageSize: 'page_size',
      pageToken: 'page_token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': HotelIndexInfoResponseBodyModuleItems },
      pageSize: 'number',
      pageToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCancelResponseBodyModule extends $tea.Model {
  /**
   * @example
   * true
   */
  cancelSuccess?: boolean;
  code?: string;
  desc?: string;
  /**
   * @example
   * 100
   */
  forfeitFee?: number;
  static names(): { [key: string]: string } {
    return {
      cancelSuccess: 'cancel_success',
      code: 'code',
      desc: 'desc',
      forfeitFee: 'forfeit_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelSuccess: 'boolean',
      code: 'string',
      desc: 'string',
      forfeitFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeApplyRequestRoomInfoList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  cancelDate?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 112
   */
  roomNo?: number;
  static names(): { [key: string]: string } {
    return {
      cancelDate: 'cancel_date',
      roomNo: 'room_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelDate: { 'type': 'array', 'itemType': 'string' },
      roomNo: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeApplyResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 123445443444
   */
  changeOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeOrderId: 'change_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeDetailResponseBodyModuleRoomInfoListRoomDailyRefundInfos extends $tea.Model {
  /**
   * @example
   * 2024-02-10
   */
  checkInDate?: string;
  /**
   * @example
   * 71000
   */
  penaltyPrice?: number;
  /**
   * @example
   * 71000
   */
  price?: number;
  /**
   * @example
   * 71000
   */
  refundPrice?: number;
  static names(): { [key: string]: string } {
    return {
      checkInDate: 'check_in_date',
      penaltyPrice: 'penalty_price',
      price: 'price',
      refundPrice: 'refund_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkInDate: 'string',
      penaltyPrice: 'number',
      price: 'number',
      refundPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeDetailResponseBodyModuleRoomInfoList extends $tea.Model {
  cancelDate?: string[];
  roomDailyRefundInfos?: HotelOrderChangeDetailResponseBodyModuleRoomInfoListRoomDailyRefundInfos[];
  /**
   * @example
   * 1
   */
  roomNo?: number;
  static names(): { [key: string]: string } {
    return {
      cancelDate: 'cancel_date',
      roomDailyRefundInfos: 'room_daily_refund_infos',
      roomNo: 'room_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelDate: { 'type': 'array', 'itemType': 'string' },
      roomDailyRefundInfos: { 'type': 'array', 'itemType': HotelOrderChangeDetailResponseBodyModuleRoomInfoListRoomDailyRefundInfos },
      roomNo: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderChangeDetailResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1234
   */
  changeOrderId?: string;
  /**
   * @example
   * 0
   */
  changeType?: number;
  /**
   * @example
   * open12ih3c8jb8o47v10B4r4josN00
   */
  corpId?: string;
  /**
   * @example
   * dis1234
   */
  disOrderId?: string;
  /**
   * @example
   * 2024-07-07 13:42:49
   */
  gmtCreate?: string;
  /**
   * @example
   * 2024-07-07 13:42:49
   */
  gmtModified?: string;
  reason?: string;
  remarks?: string;
  roomInfoList?: HotelOrderChangeDetailResponseBodyModuleRoomInfoList[];
  /**
   * @example
   * 1402002197440511306
   */
  saleOrderId?: string;
  /**
   * @example
   * 0
   */
  source?: number;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 2505048378320666
   */
  workOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeOrderId: 'change_order_id',
      changeType: 'change_type',
      corpId: 'corp_id',
      disOrderId: 'dis_order_id',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      reason: 'reason',
      remarks: 'remarks',
      roomInfoList: 'room_info_list',
      saleOrderId: 'sale_order_id',
      source: 'source',
      status: 'status',
      workOrderId: 'work_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeOrderId: 'string',
      changeType: 'number',
      corpId: 'string',
      disOrderId: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      reason: 'string',
      remarks: 'string',
      roomInfoList: { 'type': 'array', 'itemType': HotelOrderChangeDetailResponseBodyModuleRoomInfoList },
      saleOrderId: 'string',
      source: 'number',
      status: 'number',
      workOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateRequestInvoiceInfo extends $tea.Model {
  /**
   * @example
   * demo
   */
  buyerAdd?: string;
  /**
   * @example
   * demo
   */
  buyerBankAcc?: string;
  /**
   * @example
   * demo
   */
  buyerBankAdd?: string;
  /**
   * @example
   * 0571-82321777
   */
  buyerPhone?: string;
  /**
   * @example
   * 1
   */
  buyerTaxNum?: string;
  deliveryAddress?: string;
  deliveryArea?: string;
  deliveryCity?: string;
  deliveryProvince?: string;
  deliveryStreet?: string;
  /**
   * @example
   * demo
   */
  email?: string;
  /**
   * @example
   * 1
   */
  invoiceMaterial?: number;
  /**
   * @example
   * demo
   */
  invoiceTitle?: string;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  receiverName?: string;
  /**
   * @example
   * 0571-82321777
   */
  receiverPhone?: string;
  /**
   * @example
   * demo
   */
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      buyerAdd: 'buyer_add',
      buyerBankAcc: 'buyer_bank_acc',
      buyerBankAdd: 'buyer_bank_add',
      buyerPhone: 'buyer_phone',
      buyerTaxNum: 'buyer_tax_num',
      deliveryAddress: 'delivery_address',
      deliveryArea: 'delivery_area',
      deliveryCity: 'delivery_city',
      deliveryProvince: 'delivery_province',
      deliveryStreet: 'delivery_street',
      email: 'email',
      invoiceMaterial: 'invoice_material',
      invoiceTitle: 'invoice_title',
      invoiceType: 'invoice_type',
      receiverName: 'receiver_name',
      receiverPhone: 'receiver_phone',
      remark: 'remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buyerAdd: 'string',
      buyerBankAcc: 'string',
      buyerBankAdd: 'string',
      buyerPhone: 'string',
      buyerTaxNum: 'string',
      deliveryAddress: 'string',
      deliveryArea: 'string',
      deliveryCity: 'string',
      deliveryProvince: 'string',
      deliveryStreet: 'string',
      email: 'string',
      invoiceMaterial: 'number',
      invoiceTitle: 'string',
      invoiceType: 'number',
      receiverName: 'string',
      receiverPhone: 'string',
      remark: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateRequestOccupantInfoList extends $tea.Model {
  /**
   * @example
   * 124231213
   */
  cardNo?: string;
  /**
   * @example
   * 1
   */
  cardType?: number;
  /**
   * @example
   * 1
   */
  customerType?: number;
  /**
   * @example
   * 123112
   */
  departmentId?: string;
  departmentName?: string;
  /**
   * @example
   * demo
   */
  email?: string;
  /**
   * @example
   * 1
   */
  employeeType?: number;
  /**
   * @example
   * san
   */
  firstName?: string;
  /**
   * @example
   * zhang
   */
  lastName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  name?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 18277123451
   */
  phone?: string;
  roomNo?: number;
  /**
   * @example
   * 87817182
   */
  staffNo?: string;
  /**
   * @example
   * 1
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      cardNo: 'card_no',
      cardType: 'card_type',
      customerType: 'customer_type',
      departmentId: 'department_id',
      departmentName: 'department_name',
      email: 'email',
      employeeType: 'employee_type',
      firstName: 'first_name',
      lastName: 'last_name',
      name: 'name',
      phone: 'phone',
      roomNo: 'room_no',
      staffNo: 'staff_no',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cardNo: 'string',
      cardType: 'number',
      customerType: 'number',
      departmentId: 'string',
      departmentName: 'string',
      email: 'string',
      employeeType: 'number',
      firstName: 'string',
      lastName: 'string',
      name: 'string',
      phone: 'string',
      roomNo: 'number',
      staffNo: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList extends $tea.Model {
  /**
   * @example
   * true
   */
  checkStatus?: boolean;
  /**
   * @example
   * true
   */
  needCheck?: boolean;
  promotionCode?: string;
  /**
   * @example
   * 23778127
   */
  promotionId?: string;
  promotionName?: string;
  /**
   * @example
   * 100
   */
  promotionPrice?: number;
  /**
   * @example
   * 1
   */
  promotionType?: string;
  static names(): { [key: string]: string } {
    return {
      checkStatus: 'check_status',
      needCheck: 'need_check',
      promotionCode: 'promotion_code',
      promotionId: 'promotion_id',
      promotionName: 'promotion_name',
      promotionPrice: 'promotion_price',
      promotionType: 'promotion_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkStatus: 'boolean',
      needCheck: 'boolean',
      promotionCode: 'string',
      promotionId: 'string',
      promotionName: 'string',
      promotionPrice: 'number',
      promotionType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateRequestPromotionInfo extends $tea.Model {
  promotionDetailInfoList?: HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList[];
  /**
   * @example
   * 100
   */
  promotionTotalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      promotionDetailInfoList: 'promotion_detail_info_list',
      promotionTotalPrice: 'promotion_total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      promotionDetailInfoList: { 'type': 'array', 'itemType': HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList },
      promotionTotalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderCreateResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 123
   */
  btripOrderId?: number;
  paymentNo?: string;
  /**
   * @example
   * 100
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      btripOrderId: 'btrip_order_id',
      paymentNo: 'payment_no',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripOrderId: 'number',
      paymentNo: 'string',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList extends $tea.Model {
  /**
   * @example
   * 1
   */
  hour?: number;
  /**
   * @example
   * 1
   */
  value?: number;
  static names(): { [key: string]: string } {
    return {
      hour: 'hour',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hour: 'number',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO extends $tea.Model {
  btripHotelCancelPolicyInfoDTOList?: HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList[];
  cancelPolicyType?: number;
  static names(): { [key: string]: string } {
    return {
      btripHotelCancelPolicyInfoDTOList: 'btrip_hotel_cancel_policy_info_d_t_o_list',
      cancelPolicyType: 'cancel_policy_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripHotelCancelPolicyInfoDTOList: { 'type': 'array', 'itemType': HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList },
      cancelPolicyType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleCancelInfo extends $tea.Model {
  /**
   * @example
   * 2022-01-29
   */
  cancelEndTime?: string;
  /**
   * @example
   * 2022-01-29
   */
  cancelStartTime?: string;
  static names(): { [key: string]: string } {
    return {
      cancelEndTime: 'cancel_end_time',
      cancelStartTime: 'cancel_start_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelEndTime: 'string',
      cancelStartTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo extends $tea.Model {
  address?: string;
  cityName?: string;
  hotelName?: string;
  /**
   * @example
   * 0571-87217
   */
  hotelTel?: string;
  /**
   * @example
   * 2198781
   */
  shid?: number;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      cityName: 'city_name',
      hotelName: 'hotel_name',
      hotelTel: 'hotel_tel',
      shid: 'shid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      cityName: 'string',
      hotelName: 'string',
      hotelTel: 'string',
      shid: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleHotelSaleOrderRoomInfos extends $tea.Model {
  checkinDate?: string;
  checkoutDate?: string;
  penalSum?: number;
  realCheckoutDate?: string;
  refundStatus?: number;
  roomNo?: number;
  roomPrice?: number;
  roomRefundPrice?: number;
  travelerId?: string;
  travelerName?: string;
  static names(): { [key: string]: string } {
    return {
      checkinDate: 'checkin_date',
      checkoutDate: 'checkout_date',
      penalSum: 'penal_sum',
      realCheckoutDate: 'real_checkout_date',
      refundStatus: 'refund_status',
      roomNo: 'room_no',
      roomPrice: 'room_price',
      roomRefundPrice: 'room_refund_price',
      travelerId: 'traveler_id',
      travelerName: 'traveler_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkinDate: 'string',
      checkoutDate: 'string',
      penalSum: 'number',
      realCheckoutDate: 'string',
      refundStatus: 'number',
      roomNo: 'number',
      roomPrice: 'number',
      roomRefundPrice: 'number',
      travelerId: 'string',
      travelerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleInvoiceInfo extends $tea.Model {
  /**
   * @example
   * 100
   */
  billingMoney?: number;
  /**
   * @example
   * demo
   */
  buyerAdd?: string;
  /**
   * @example
   * demo
   */
  buyerBankAcc?: string;
  /**
   * @example
   * demo
   */
  buyerBankAdd?: string;
  /**
   * @example
   * 0571-82321777
   */
  buyerPhone?: string;
  /**
   * @example
   * 1
   */
  buyerTaxNum?: string;
  deliveryAddress?: string;
  deliveryArea?: string;
  deliveryCity?: string;
  deliveryProvince?: string;
  deliveryStreet?: string;
  /**
   * @example
   * demo
   */
  email?: string;
  /**
   * @example
   * 1
   */
  invoiceMaterial?: number;
  /**
   * @example
   * demo
   */
  invoiceTitle?: string;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  /**
   * @example
   * 100
   */
  postage?: number;
  receiverName?: string;
  /**
   * @example
   * 0571-82321777
   */
  receiverPhone?: string;
  /**
   * @example
   * tmf closeCloneTask
   */
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      billingMoney: 'billing_money',
      buyerAdd: 'buyer_add',
      buyerBankAcc: 'buyer_bank_acc',
      buyerBankAdd: 'buyer_bank_add',
      buyerPhone: 'buyer_phone',
      buyerTaxNum: 'buyer_tax_num',
      deliveryAddress: 'delivery_address',
      deliveryArea: 'delivery_area',
      deliveryCity: 'delivery_city',
      deliveryProvince: 'delivery_province',
      deliveryStreet: 'delivery_street',
      email: 'email',
      invoiceMaterial: 'invoice_material',
      invoiceTitle: 'invoice_title',
      invoiceType: 'invoice_type',
      postage: 'postage',
      receiverName: 'receiver_name',
      receiverPhone: 'receiver_phone',
      remark: 'remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billingMoney: 'number',
      buyerAdd: 'string',
      buyerBankAcc: 'string',
      buyerBankAdd: 'string',
      buyerPhone: 'string',
      buyerTaxNum: 'string',
      deliveryAddress: 'string',
      deliveryArea: 'string',
      deliveryCity: 'string',
      deliveryProvince: 'string',
      deliveryStreet: 'string',
      email: 'string',
      invoiceMaterial: 'number',
      invoiceTitle: 'string',
      invoiceType: 'number',
      postage: 'number',
      receiverName: 'string',
      receiverPhone: 'string',
      remark: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList extends $tea.Model {
  /**
   * @example
   * demo
   */
  costCenterId?: string;
  /**
   * @example
   * demo
   */
  costCenterName?: string;
  /**
   * @example
   * demo
   */
  costCenterNo?: string;
  /**
   * @example
   * demo
   */
  costCenterPrices?: number;
  /**
   * @example
   * demo
   */
  costCenterRatios?: number;
  /**
   * @example
   * demo
   */
  costCenterSubjectCode?: string;
  /**
   * @example
   * demo
   */
  costCenterSubjectName?: string;
  /**
   * @example
   * demo
   */
  settleSubjectId?: string;
  /**
   * @example
   * demo
   */
  settleSubjectName?: string;
  /**
   * @example
   * demo
   */
  settleSubjectNo?: string;
  static names(): { [key: string]: string } {
    return {
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNo: 'cost_center_no',
      costCenterPrices: 'cost_center_prices',
      costCenterRatios: 'cost_center_ratios',
      costCenterSubjectCode: 'cost_center_subject_code',
      costCenterSubjectName: 'cost_center_subject_name',
      settleSubjectId: 'settle_subject_id',
      settleSubjectName: 'settle_subject_name',
      settleSubjectNo: 'settle_subject_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterId: 'string',
      costCenterName: 'string',
      costCenterNo: 'string',
      costCenterPrices: 'number',
      costCenterRatios: 'number',
      costCenterSubjectCode: 'string',
      costCenterSubjectName: 'string',
      settleSubjectId: 'string',
      settleSubjectName: 'string',
      settleSubjectNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleOccupantInfoList extends $tea.Model {
  /**
   * @example
   * 1235615612424222
   */
  cardNo?: string;
  /**
   * @example
   * 1
   */
  cardType?: number;
  costCenterInfoList?: HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList[];
  /**
   * @example
   * 1
   */
  customerType?: number;
  /**
   * @example
   * 123112
   */
  departmentId?: string;
  /**
   * @example
   * demo
   */
  departmentName?: string;
  /**
   * @example
   * demo
   */
  email?: string;
  /**
   * @example
   * 1
   */
  employeeType?: number;
  /**
   * @example
   * zhangsan
   */
  firstName?: string;
  /**
   * @example
   * true
   */
  isBooker?: boolean;
  /**
   * @example
   * zhang
   */
  lastName?: string;
  name?: string;
  /**
   * @example
   * 0571-872237
   */
  phone?: string;
  roomNo?: number;
  /**
   * @example
   * true
   */
  selected?: boolean;
  /**
   * @example
   * 12817218
   */
  staffNo?: string;
  /**
   * @example
   * 1
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      cardNo: 'card_no',
      cardType: 'card_type',
      costCenterInfoList: 'cost_center_info_list',
      customerType: 'customer_type',
      departmentId: 'department_id',
      departmentName: 'department_name',
      email: 'email',
      employeeType: 'employee_type',
      firstName: 'first_name',
      isBooker: 'is_booker',
      lastName: 'last_name',
      name: 'name',
      phone: 'phone',
      roomNo: 'room_no',
      selected: 'selected',
      staffNo: 'staff_no',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cardNo: 'string',
      cardType: 'number',
      costCenterInfoList: { 'type': 'array', 'itemType': HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList },
      customerType: 'number',
      departmentId: 'string',
      departmentName: 'string',
      email: 'string',
      employeeType: 'number',
      firstName: 'string',
      isBooker: 'boolean',
      lastName: 'string',
      name: 'string',
      phone: 'string',
      roomNo: 'number',
      selected: 'boolean',
      staffNo: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList extends $tea.Model {
  board?: string;
  /**
   * @example
   * 2
   */
  boardNum?: number;
  /**
   * @example
   * 1677600000000
   */
  checkIn?: string;
  /**
   * @example
   * 1399417428510
   */
  ratePlanId?: string;
  ratePlanName?: string;
  /**
   * @example
   * 545993154510
   */
  roomId?: string;
  roomName?: string;
  /**
   * @example
   * 50000
   */
  roomPrice?: number;
  static names(): { [key: string]: string } {
    return {
      board: 'board',
      boardNum: 'board_num',
      checkIn: 'check_in',
      ratePlanId: 'rate_plan_id',
      ratePlanName: 'rate_plan_name',
      roomId: 'room_id',
      roomName: 'room_name',
      roomPrice: 'room_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      board: 'string',
      boardNum: 'number',
      checkIn: 'string',
      ratePlanId: 'string',
      ratePlanName: 'string',
      roomId: 'string',
      roomName: 'string',
      roomPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderDetailInfoResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2022-01-29
   */
  actualCheckInTime?: string;
  /**
   * @example
   * 2022-01-29
   */
  actualCheckOutTime?: string;
  btripHotelCancelPolicyDTO?: HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO;
  /**
   * @example
   * 123
   */
  btripOrderId?: string;
  /**
   * @example
   * 100
   */
  cancelFine?: number;
  cancelInfo?: HotelOrderDetailInfoResponseBodyModuleCancelInfo;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkIn?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkOut?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  confirmOrderTime?: string;
  contractName?: string;
  /**
   * @example
   * 12316261873
   */
  contractTel?: string;
  /**
   * @example
   * 2020-01-21
   */
  createOrderTime?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  earlyArrivalTime?: string;
  /**
   * @example
   * true
   */
  earlyDeparture?: boolean;
  /**
   * @example
   * 2
   */
  guestCount?: number;
  hotelDetailInfo?: HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo;
  hotelSaleOrderRoomInfos?: HotelOrderDetailInfoResponseBodyModuleHotelSaleOrderRoomInfos[];
  invoiceInfo?: HotelOrderDetailInfoResponseBodyModuleInvoiceInfo;
  /**
   * @example
   * 1289918
   */
  itemId?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  lastArrivalTime?: string;
  occupantInfoList?: HotelOrderDetailInfoResponseBodyModuleOccupantInfoList[];
  /**
   * @example
   * 1
   */
  orderStatus?: number;
  orderStatusDesc?: string;
  outConfirmCode?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  payTime?: string;
  /**
   * @example
   * 1
   */
  productType?: number;
  /**
   * @example
   * 100328718728171
   */
  purchaseOrderId?: string;
  /**
   * @example
   * 100
   */
  refundPrice?: number;
  /**
   * @example
   * demo
   */
  refundReason?: string;
  /**
   * @example
   * 100
   */
  refundServiceFee?: number;
  roomNightPriceInfoList?: HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList[];
  /**
   * @example
   * 1
   */
  roomNumber?: number;
  roomTypeName?: string;
  /**
   * @example
   * 2088441675613762
   */
  sellerId?: string;
  /**
   * @example
   * taobao
   */
  sellerName?: string;
  /**
   * @example
   * 1.02
   */
  serviceFee?: number;
  /**
   * @example
   * 0
   */
  settleType?: string;
  /**
   * @example
   * dis123
   */
  supplierOrderId?: string;
  /**
   * @example
   * 100
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      actualCheckInTime: 'actual_check_in_time',
      actualCheckOutTime: 'actual_check_out_time',
      btripHotelCancelPolicyDTO: 'btrip_hotel_cancel_policy_d_t_o',
      btripOrderId: 'btrip_order_id',
      cancelFine: 'cancel_fine',
      cancelInfo: 'cancel_info',
      checkIn: 'check_in',
      checkOut: 'check_out',
      confirmOrderTime: 'confirm_order_time',
      contractName: 'contract_name',
      contractTel: 'contract_tel',
      createOrderTime: 'create_order_time',
      earlyArrivalTime: 'early_arrival_time',
      earlyDeparture: 'early_departure',
      guestCount: 'guest_count',
      hotelDetailInfo: 'hotel_detail_info',
      hotelSaleOrderRoomInfos: 'hotel_sale_order_room_infos',
      invoiceInfo: 'invoice_info',
      itemId: 'item_id',
      lastArrivalTime: 'last_arrival_time',
      occupantInfoList: 'occupant_info_list',
      orderStatus: 'order_status',
      orderStatusDesc: 'order_status_desc',
      outConfirmCode: 'out_confirm_code',
      payTime: 'pay_time',
      productType: 'product_type',
      purchaseOrderId: 'purchase_order_id',
      refundPrice: 'refund_price',
      refundReason: 'refund_reason',
      refundServiceFee: 'refund_service_fee',
      roomNightPriceInfoList: 'room_night_price_info_list',
      roomNumber: 'room_number',
      roomTypeName: 'room_type_name',
      sellerId: 'seller_id',
      sellerName: 'seller_name',
      serviceFee: 'service_fee',
      settleType: 'settle_type',
      supplierOrderId: 'supplier_order_id',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualCheckInTime: 'string',
      actualCheckOutTime: 'string',
      btripHotelCancelPolicyDTO: HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO,
      btripOrderId: 'string',
      cancelFine: 'number',
      cancelInfo: HotelOrderDetailInfoResponseBodyModuleCancelInfo,
      checkIn: 'string',
      checkOut: 'string',
      confirmOrderTime: 'string',
      contractName: 'string',
      contractTel: 'string',
      createOrderTime: 'string',
      earlyArrivalTime: 'string',
      earlyDeparture: 'boolean',
      guestCount: 'number',
      hotelDetailInfo: HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo,
      hotelSaleOrderRoomInfos: { 'type': 'array', 'itemType': HotelOrderDetailInfoResponseBodyModuleHotelSaleOrderRoomInfos },
      invoiceInfo: HotelOrderDetailInfoResponseBodyModuleInvoiceInfo,
      itemId: 'string',
      lastArrivalTime: 'string',
      occupantInfoList: { 'type': 'array', 'itemType': HotelOrderDetailInfoResponseBodyModuleOccupantInfoList },
      orderStatus: 'number',
      orderStatusDesc: 'string',
      outConfirmCode: 'string',
      payTime: 'string',
      productType: 'number',
      purchaseOrderId: 'string',
      refundPrice: 'number',
      refundReason: 'string',
      refundServiceFee: 'number',
      roomNightPriceInfoList: { 'type': 'array', 'itemType': HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList },
      roomNumber: 'number',
      roomTypeName: 'string',
      sellerId: 'string',
      sellerName: 'string',
      serviceFee: 'number',
      settleType: 'string',
      supplierOrderId: 'string',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleBaseOrderInfo extends $tea.Model {
  /**
   * @example
   * 0
   */
  bookMode?: string;
  /**
   * @example
   * 1430378
   */
  bookerId?: string;
  bookerName?: string;
  /**
   * @example
   * btripkvxtn1321g49wtul
   */
  btripCorpId?: string;
  /**
   * @example
   * 2
   */
  category?: number;
  /**
   * @example
   * 1721145600000
   */
  checkInTime?: number;
  /**
   * @example
   * 1721145600000
   */
  checkOutTime?: number;
  /**
   * @example
   * true
   */
  isAgreementPrice?: boolean;
  /**
   * @example
   * 4
   */
  nights?: number;
  /**
   * @example
   * 1721145600000
   */
  orderCreateTime?: number;
  /**
   * @example
   * 1012053198307958626
   */
  orderId?: number;
  /**
   * @example
   * 2
   */
  orderStatus?: number;
  orderStatusDesc?: string;
  /**
   * @example
   * 1
   */
  payStatus?: number;
  /**
   * @example
   * 1721145600000
   */
  payTime?: number;
  /**
   * @example
   * 2
   */
  roomNum?: number;
  /**
   * @example
   * 4
   */
  settleType?: number;
  /**
   * @example
   * 1
   */
  tripMode?: number;
  static names(): { [key: string]: string } {
    return {
      bookMode: 'book_mode',
      bookerId: 'booker_id',
      bookerName: 'booker_name',
      btripCorpId: 'btrip_corp_id',
      category: 'category',
      checkInTime: 'check_in_time',
      checkOutTime: 'check_out_time',
      isAgreementPrice: 'is_agreement_price',
      nights: 'nights',
      orderCreateTime: 'order_create_time',
      orderId: 'order_id',
      orderStatus: 'order_status',
      orderStatusDesc: 'order_status_desc',
      payStatus: 'pay_status',
      payTime: 'pay_time',
      roomNum: 'room_num',
      settleType: 'settle_type',
      tripMode: 'trip_mode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bookMode: 'string',
      bookerId: 'string',
      bookerName: 'string',
      btripCorpId: 'string',
      category: 'number',
      checkInTime: 'number',
      checkOutTime: 'number',
      isAgreementPrice: 'boolean',
      nights: 'number',
      orderCreateTime: 'number',
      orderId: 'number',
      orderStatus: 'number',
      orderStatusDesc: 'string',
      payStatus: 'number',
      payTime: 'number',
      roomNum: 'number',
      settleType: 'number',
      tripMode: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleBookerInfoDepartment extends $tea.Model {
  /**
   * @example
   * 0rCUI20hjOsk0sTwlu
   */
  cascadeDeptMask?: string;
  cascadeDeptName?: string;
  /**
   * @example
   * 35
   */
  departId?: string;
  departName?: string;
  /**
   * @example
   * 330000001815
   */
  outDepartId?: string;
  static names(): { [key: string]: string } {
    return {
      cascadeDeptMask: 'cascade_dept_mask',
      cascadeDeptName: 'cascade_dept_name',
      departId: 'depart_id',
      departName: 'depart_name',
      outDepartId: 'out_depart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cascadeDeptMask: 'string',
      cascadeDeptName: 'string',
      departId: 'string',
      departName: 'string',
      outDepartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleBookerInfo extends $tea.Model {
  /**
   * @example
   * UN_APPLY
   */
  bookerRole?: string;
  /**
   * @example
   * 13311112222@qq.com
   */
  contactEmail?: string;
  /**
   * @example
   * 13311112222
   */
  contactPhone?: string;
  /**
   * @example
   * open12gddn2kn1i47v10wRJNkMFx00
   */
  corpId?: string;
  department?: HotelOrderInfoQueryResponseBodyModuleBookerInfoDepartment;
  /**
   * @example
   * Tom
   */
  enName?: string;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * true
   */
  needApply?: boolean;
  realName?: string;
  /**
   * @example
   * 1430378
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      bookerRole: 'booker_role',
      contactEmail: 'contact_email',
      contactPhone: 'contact_phone',
      corpId: 'corp_id',
      department: 'department',
      enName: 'en_name',
      jobNo: 'job_no',
      needApply: 'need_apply',
      realName: 'real_name',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bookerRole: 'string',
      contactEmail: 'string',
      contactPhone: 'string',
      corpId: 'string',
      department: HotelOrderInfoQueryResponseBodyModuleBookerInfoDepartment,
      enName: 'string',
      jobNo: 'string',
      needApply: 'boolean',
      realName: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleHotelInfo extends $tea.Model {
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * 1
   */
  countryCode?: string;
  countryName?: string;
  /**
   * @example
   * 330183
   */
  districtCode?: string;
  districtName?: string;
  hotelAddress?: string;
  /**
   * @example
   * 3
   */
  hotelBrandCode?: string;
  hotelBrandName?: string;
  /**
   * @example
   * huazhu
   */
  hotelGroup?: string;
  /**
   * @example
   * 55335212
   */
  hotelId?: string;
  hotelName?: string;
  /**
   * @example
   * Test Hotel Name
   */
  hotelNameEn?: string;
  /**
   * @example
   * 5
   */
  star?: string;
  static names(): { [key: string]: string } {
    return {
      cityCode: 'city_code',
      cityName: 'city_name',
      countryCode: 'country_code',
      countryName: 'country_name',
      districtCode: 'district_code',
      districtName: 'district_name',
      hotelAddress: 'hotel_address',
      hotelBrandCode: 'hotel_brand_code',
      hotelBrandName: 'hotel_brand_name',
      hotelGroup: 'hotel_group',
      hotelId: 'hotel_id',
      hotelName: 'hotel_name',
      hotelNameEn: 'hotel_name_en',
      star: 'star',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cityCode: 'string',
      cityName: 'string',
      countryCode: 'string',
      countryName: 'string',
      districtCode: 'string',
      districtName: 'string',
      hotelAddress: 'string',
      hotelBrandCode: 'string',
      hotelBrandName: 'string',
      hotelGroup: 'string',
      hotelId: 'string',
      hotelName: 'string',
      hotelNameEn: 'string',
      star: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleHotelOrderFeeInfo extends $tea.Model {
  /**
   * @example
   * 35000
   */
  orderAmount?: number;
  /**
   * @example
   * 0
   */
  otherFee?: number;
  /**
   * @example
   * 35000
   */
  payAmount?: number;
  /**
   * @example
   * 5000
   */
  promotionAmount?: number;
  /**
   * @example
   * 35000
   */
  totalRoomAmount?: number;
  static names(): { [key: string]: string } {
    return {
      orderAmount: 'order_amount',
      otherFee: 'other_fee',
      payAmount: 'pay_amount',
      promotionAmount: 'promotion_amount',
      totalRoomAmount: 'total_room_amount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderAmount: 'number',
      otherFee: 'number',
      payAmount: 'number',
      promotionAmount: 'number',
      totalRoomAmount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleHotelOrderRefundInfo extends $tea.Model {
  /**
   * @example
   * 1000
   */
  cancelFine?: number;
  /**
   * @example
   * 1000000002578096
   */
  refundApplyId?: number;
  /**
   * @example
   * 1721702353700
   */
  refundEndTime?: number;
  /**
   * @example
   * 34000
   */
  refundPrice?: number;
  refundReason?: string;
  /**
   * @example
   * 1721702353700
   */
  refundStartTime?: number;
  /**
   * @example
   * 5
   */
  refundType?: number;
  static names(): { [key: string]: string } {
    return {
      cancelFine: 'cancel_fine',
      refundApplyId: 'refund_apply_id',
      refundEndTime: 'refund_end_time',
      refundPrice: 'refund_price',
      refundReason: 'refund_reason',
      refundStartTime: 'refund_start_time',
      refundType: 'refund_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelFine: 'number',
      refundApplyId: 'number',
      refundEndTime: 'number',
      refundPrice: 'number',
      refundReason: 'string',
      refundStartTime: 'number',
      refundType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfoExceedApply extends $tea.Model {
  exceedReason?: string;
  /**
   * @example
   * 16
   */
  exceedType?: number;
  /**
   * @example
   * 3321
   */
  flowNo?: number;
  /**
   * @example
   * 60853
   */
  id?: number;
  static names(): { [key: string]: string } {
    return {
      exceedReason: 'exceed_reason',
      exceedType: 'exceed_type',
      flowNo: 'flow_no',
      id: 'id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      exceedReason: 'string',
      exceedType: 'number',
      flowNo: 'number',
      id: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfo extends $tea.Model {
  /**
   * @example
   * 1001
   */
  applyBusinessId?: string;
  applyBusinessName?: string;
  /**
   * @example
   * 1424031910085891196
   */
  applyId?: string;
  exceedApply?: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfoExceedApply[];
  /**
   * @example
   * ef5e74dc1f1640b08858fb043f64e477-8
   */
  itineraryNo?: string;
  static names(): { [key: string]: string } {
    return {
      applyBusinessId: 'apply_business_id',
      applyBusinessName: 'apply_business_name',
      applyId: 'apply_id',
      exceedApply: 'exceed_apply',
      itineraryNo: 'itinerary_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyBusinessId: 'string',
      applyBusinessName: 'string',
      applyId: 'string',
      exceedApply: { 'type': 'array', 'itemType': HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfoExceedApply },
      itineraryNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosDepartment extends $tea.Model {
  /**
   * @example
   * 0rCUI20hjOsk0sTwlu
   */
  cascadeDeptMask?: string;
  cascadeDeptName?: string;
  /**
   * @example
   * 35
   */
  departId?: string;
  departName?: string;
  /**
   * @example
   * 330000001815
   */
  outDepartId?: string;
  static names(): { [key: string]: string } {
    return {
      cascadeDeptMask: 'cascade_dept_mask',
      cascadeDeptName: 'cascade_dept_name',
      departId: 'depart_id',
      departName: 'depart_name',
      outDepartId: 'out_depart_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cascadeDeptMask: 'string',
      cascadeDeptName: 'string',
      departId: 'string',
      departName: 'string',
      outDepartId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosTripCostCenter extends $tea.Model {
  /**
   * @example
   * 323431
   */
  costCenterCode?: string;
  /**
   * @example
   * 2312
   */
  costCenterId?: string;
  costCenterName?: string;
  /**
   * @example
   * {"extraKey":"extraVal"}
   */
  externalExtField?: string;
  /**
   * @example
   * 1
   */
  feeType?: number;
  /**
   * @example
   * 123332
   */
  invoiceId?: number;
  invoiceTitle?: string;
  /**
   * @example
   * 1002
   */
  projectCode?: string;
  projectTitle?: string;
  static names(): { [key: string]: string } {
    return {
      costCenterCode: 'cost_center_code',
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      externalExtField: 'external_ext_field',
      feeType: 'fee_type',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      projectCode: 'project_code',
      projectTitle: 'project_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterCode: 'string',
      costCenterId: 'string',
      costCenterName: 'string',
      externalExtField: 'string',
      feeType: 'number',
      invoiceId: 'number',
      invoiceTitle: 'string',
      projectCode: 'string',
      projectTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfos extends $tea.Model {
  applyInfo?: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfo;
  /**
   * @example
   * 342229200801010023
   */
  certNo?: string;
  /**
   * @example
   * 0
   */
  certType?: number;
  department?: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosDepartment;
  /**
   * @example
   * 1001
   */
  jobNo?: string;
  /**
   * @example
   * 13311112222
   */
  telephone?: string;
  /**
   * @example
   * 1430378
   */
  travelerId?: string;
  travelerName?: string;
  /**
   * @example
   * 1
   */
  travelerType?: number;
  tripCostCenter?: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosTripCostCenter;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      applyInfo: 'apply_info',
      certNo: 'cert_no',
      certType: 'cert_type',
      department: 'department',
      jobNo: 'job_no',
      telephone: 'telephone',
      travelerId: 'traveler_id',
      travelerName: 'traveler_name',
      travelerType: 'traveler_type',
      tripCostCenter: 'trip_cost_center',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyInfo: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfo,
      certNo: 'string',
      certType: 'number',
      department: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosDepartment,
      jobNo: 'string',
      telephone: 'string',
      travelerId: 'string',
      travelerName: 'string',
      travelerType: 'number',
      tripCostCenter: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosTripCostCenter,
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  liveRoomNo?: string;
  roomTypeName?: string;
  traverInfos?: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfos[];
  static names(): { [key: string]: string } {
    return {
      liveRoomNo: 'live_room_no',
      roomTypeName: 'room_type_name',
      traverInfos: 'traver_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      liveRoomNo: 'string',
      roomTypeName: 'string',
      traverInfos: { 'type': 'array', 'itemType': HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderInfoQueryResponseBodyModule extends $tea.Model {
  baseOrderInfo?: HotelOrderInfoQueryResponseBodyModuleBaseOrderInfo;
  bookerInfo?: HotelOrderInfoQueryResponseBodyModuleBookerInfo;
  hotelInfo?: HotelOrderInfoQueryResponseBodyModuleHotelInfo;
  hotelOrderFeeInfo?: HotelOrderInfoQueryResponseBodyModuleHotelOrderFeeInfo;
  hotelOrderRefundInfo?: HotelOrderInfoQueryResponseBodyModuleHotelOrderRefundInfo[];
  roomTraverInfo?: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfo[];
  static names(): { [key: string]: string } {
    return {
      baseOrderInfo: 'base_order_info',
      bookerInfo: 'booker_info',
      hotelInfo: 'hotel_info',
      hotelOrderFeeInfo: 'hotel_order_fee_info',
      hotelOrderRefundInfo: 'hotel_order_refund_info',
      roomTraverInfo: 'room_traver_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baseOrderInfo: HotelOrderInfoQueryResponseBodyModuleBaseOrderInfo,
      bookerInfo: HotelOrderInfoQueryResponseBodyModuleBookerInfo,
      hotelInfo: HotelOrderInfoQueryResponseBodyModuleHotelInfo,
      hotelOrderFeeInfo: HotelOrderInfoQueryResponseBodyModuleHotelOrderFeeInfo,
      hotelOrderRefundInfo: { 'type': 'array', 'itemType': HotelOrderInfoQueryResponseBodyModuleHotelOrderRefundInfo },
      roomTraverInfo: { 'type': 'array', 'itemType': HotelOrderInfoQueryResponseBodyModuleRoomTraverInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponseBodyModuleCostCenter extends $tea.Model {
  corpId?: string;
  /**
   * @example
   * 14668
   */
  id?: number;
  name?: string;
  /**
   * @example
   * CS-PNUY
   */
  number?: string;
  static names(): { [key: string]: string } {
    return {
      corpId: 'corp_id',
      id: 'id',
      name: 'name',
      number: 'number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpId: 'string',
      id: 'number',
      name: 'string',
      number: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponseBodyModuleInvoice extends $tea.Model {
  /**
   * @example
   * 133568
   */
  id?: number;
  /**
   * @example
   * 1
   */
  invoiceType?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      invoiceType: 'invoice_type',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      invoiceType: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponseBodyModulePriceInfoList extends $tea.Model {
  category?: string;
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 1
   */
  categoryType?: number;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  passengerName?: string;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * cs1546728
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      categoryCode: 'category_code',
      categoryType: 'category_type',
      gmtCreate: 'gmt_create',
      passengerName: 'passenger_name',
      payType: 'pay_type',
      price: 'price',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      categoryCode: 'number',
      categoryType: 'number',
      gmtCreate: 'string',
      passengerName: 'string',
      payType: 'number',
      price: 'number',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponseBodyModuleUserAffiliateList extends $tea.Model {
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 22678
   */
  applyId?: number;
  btripTitle?: string;
  category?: number;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkIn?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkOut?: string;
  city?: string;
  cityAdCode?: string;
  contactName?: string;
  corpId?: string;
  corpName?: string;
  costCenter?: HotelOrderListQueryResponseBodyModuleCostCenter;
  countryCode?: string;
  countryName?: string;
  departId?: string;
  departName?: string;
  extendField?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtModified?: string;
  guest?: string;
  hotelName?: string;
  /**
   * @example
   * 11
   */
  hotelSupportVatInvoiceType?: number;
  /**
   * @example
   * 13764
   */
  id?: number;
  invoice?: HotelOrderListQueryResponseBodyModuleInvoice;
  /**
   * @example
   * 4
   */
  night?: number;
  /**
   * @example
   * 1
   */
  orderStatus?: number;
  orderStatusDesc?: string;
  /**
   * @example
   * 1
   */
  orderType?: number;
  orderTypeDesc?: string;
  priceInfoList?: HotelOrderListQueryResponseBodyModulePriceInfoList[];
  /**
   * @example
   * CS-PROJECTCODE
   */
  projectCode?: string;
  /**
   * @example
   * 13631
   */
  projectId?: number;
  projectTitle?: string;
  /**
   * @example
   * 4
   */
  roomNum?: number;
  roomType?: string;
  supplier?: string;
  /**
   * @example
   * CS-THIRDAPPLY
   */
  thirdpartApplyId?: string;
  thirdpartBusinessId?: string;
  /**
   * @example
   * CS-ITINEARY
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * CS-THIRDPROJECT
   */
  thirdpartProjectId?: string;
  userAffiliateList?: HotelOrderListQueryResponseBodyModuleUserAffiliateList[];
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      btripTitle: 'btrip_title',
      category: 'category',
      checkIn: 'check_in',
      checkOut: 'check_out',
      city: 'city',
      cityAdCode: 'city_ad_code',
      contactName: 'contact_name',
      corpId: 'corp_id',
      corpName: 'corp_name',
      costCenter: 'cost_center',
      countryCode: 'country_code',
      countryName: 'country_name',
      departId: 'depart_id',
      departName: 'depart_name',
      extendField: 'extend_field',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      guest: 'guest',
      hotelName: 'hotel_name',
      hotelSupportVatInvoiceType: 'hotel_support_vat_invoice_type',
      id: 'id',
      invoice: 'invoice',
      night: 'night',
      orderStatus: 'order_status',
      orderStatusDesc: 'order_status_desc',
      orderType: 'order_type',
      orderTypeDesc: 'order_type_desc',
      priceInfoList: 'price_info_list',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      roomNum: 'room_num',
      roomType: 'room_type',
      supplier: 'supplier',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      thirdpartProjectId: 'thirdpart_project_id',
      userAffiliateList: 'user_affiliate_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      btripTitle: 'string',
      category: 'number',
      checkIn: 'string',
      checkOut: 'string',
      city: 'string',
      cityAdCode: 'string',
      contactName: 'string',
      corpId: 'string',
      corpName: 'string',
      costCenter: HotelOrderListQueryResponseBodyModuleCostCenter,
      countryCode: 'string',
      countryName: 'string',
      departId: 'string',
      departName: 'string',
      extendField: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      guest: 'string',
      hotelName: 'string',
      hotelSupportVatInvoiceType: 'number',
      id: 'number',
      invoice: HotelOrderListQueryResponseBodyModuleInvoice,
      night: 'number',
      orderStatus: 'number',
      orderStatusDesc: 'string',
      orderType: 'number',
      orderTypeDesc: 'string',
      priceInfoList: { 'type': 'array', 'itemType': HotelOrderListQueryResponseBodyModulePriceInfoList },
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      roomNum: 'number',
      roomType: 'string',
      supplier: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartItineraryId: 'string',
      thirdpartProjectId: 'string',
      userAffiliateList: { 'type': 'array', 'itemType': HotelOrderListQueryResponseBodyModuleUserAffiliateList },
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderListQueryResponseBodyPageInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 50
   */
  totalNumber?: number;
  static names(): { [key: string]: string } {
    return {
      page: 'page',
      pageSize: 'page_size',
      totalNumber: 'total_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      page: 'number',
      pageSize: 'number',
      totalNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateRequestDailyList extends $tea.Model {
  /**
   * @example
   * 1
   */
  board?: string;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 2022-05-15
   */
  rateStartTime?: string;
  /**
   * @example
   * 10
   */
  roomCount?: number;
  static names(): { [key: string]: string } {
    return {
      board: 'board',
      price: 'price',
      rateStartTime: 'rate_start_time',
      roomCount: 'room_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      board: 'string',
      price: 'number',
      rateStartTime: 'string',
      roomCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateRequestOccupantInfoList extends $tea.Model {
  /**
   * @example
   * 232871871822
   */
  cardNo?: string;
  /**
   * @example
   * 1
   */
  cardType?: number;
  name?: string;
  /**
   * @example
   * 12392827121
   */
  phone?: string;
  /**
   * @example
   * 128918
   */
  staffNo?: string;
  /**
   * @example
   * 1
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      cardNo: 'card_no',
      cardType: 'card_type',
      name: 'name',
      phone: 'phone',
      staffNo: 'staff_no',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cardNo: 'string',
      cardType: 'number',
      name: 'string',
      phone: 'string',
      staffNo: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList extends $tea.Model {
  /**
   * @example
   * true
   */
  checkStatus?: boolean;
  /**
   * @example
   * true
   */
  needCheck?: boolean;
  promotionCode?: string;
  /**
   * @example
   * 12893
   */
  promotionId?: string;
  /**
   * @example
   * demo
   */
  promotionName?: string;
  /**
   * @example
   * 100
   */
  promotionPrice?: number;
  /**
   * @example
   * 1
   */
  promotionType?: string;
  static names(): { [key: string]: string } {
    return {
      checkStatus: 'check_status',
      needCheck: 'need_check',
      promotionCode: 'promotion_code',
      promotionId: 'promotion_id',
      promotionName: 'promotion_name',
      promotionPrice: 'promotion_price',
      promotionType: 'promotion_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkStatus: 'boolean',
      needCheck: 'boolean',
      promotionCode: 'string',
      promotionId: 'string',
      promotionName: 'string',
      promotionPrice: 'number',
      promotionType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBodyModulePromotionInfo extends $tea.Model {
  extAttrMap?: { [key: string]: string };
  promotionDetailInfoList?: HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList[];
  /**
   * @example
   * 100
   */
  promotionTotalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      extAttrMap: 'ext_attr_map',
      promotionDetailInfoList: 'promotion_detail_info_list',
      promotionTotalPrice: 'promotion_total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extAttrMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      promotionDetailInfoList: { 'type': 'array', 'itemType': HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList },
      promotionTotalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBodyModuleRatePlanDaily extends $tea.Model {
  board?: string;
  discountPrice?: string;
  maxBookingNum?: number;
  /**
   * @example
   * 100
   */
  price?: number;
  /**
   * @example
   * 2023-01-19
   */
  rateStartTime?: string;
  /**
   * @example
   * 1
   */
  roomCount?: number;
  roundingDiscountPrice?: string;
  roundingPrice?: string;
  /**
   * @example
   * 100
   */
  serviceFee?: number;
  static names(): { [key: string]: string } {
    return {
      board: 'board',
      discountPrice: 'discount_price',
      maxBookingNum: 'max_booking_num',
      price: 'price',
      rateStartTime: 'rate_start_time',
      roomCount: 'room_count',
      roundingDiscountPrice: 'rounding_discount_price',
      roundingPrice: 'rounding_price',
      serviceFee: 'service_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      board: 'string',
      discountPrice: 'string',
      maxBookingNum: 'number',
      price: 'number',
      rateStartTime: 'string',
      roomCount: 'number',
      roundingDiscountPrice: 'string',
      roundingPrice: 'string',
      serviceFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList extends $tea.Model {
  /**
   * @example
   * 1
   */
  hour?: number;
  /**
   * @example
   * 1
   */
  value?: number;
  static names(): { [key: string]: string } {
    return {
      hour: 'hour',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hour: 'number',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO extends $tea.Model {
  btripHotelCancelPolicyInfoDTOList?: HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList[];
  cancelPolicyType?: number;
  content?: string;
  shortDesc?: string;
  static names(): { [key: string]: string } {
    return {
      btripHotelCancelPolicyInfoDTOList: 'btrip_hotel_cancel_policy_info_d_t_o_list',
      cancelPolicyType: 'cancel_policy_type',
      content: 'content',
      shortDesc: 'short_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripHotelCancelPolicyInfoDTOList: { 'type': 'array', 'itemType': HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList },
      cancelPolicyType: 'number',
      content: 'string',
      shortDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBodyModuleRatePlanInfo extends $tea.Model {
  bedDesc?: string;
  btripHotelCancelPolicyDTO?: HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO;
  /**
   * @example
   * 12:00
   */
  earliestCheckInTime?: string;
  /**
   * @example
   * 17:00
   */
  latestCheckOutTime?: string;
  maxBookingNum?: number;
  /**
   * @example
   * 1
   */
  maxOccupancyNum?: number;
  /**
   * @example
   * false
   */
  needCertificate?: boolean;
  /**
   * @example
   * false
   */
  needEmail?: boolean;
  /**
   * @example
   * false
   */
  needEnglishName?: boolean;
  /**
   * @example
   * 100
   */
  totalOrderPrice?: number;
  /**
   * @example
   * 100
   */
  totalRoomPrice?: number;
  static names(): { [key: string]: string } {
    return {
      bedDesc: 'bed_desc',
      btripHotelCancelPolicyDTO: 'btrip_hotel_cancel_policy_d_t_o',
      earliestCheckInTime: 'earliest_check_in_time',
      latestCheckOutTime: 'latest_check_out_time',
      maxBookingNum: 'max_booking_num',
      maxOccupancyNum: 'max_occupancy_num',
      needCertificate: 'need_certificate',
      needEmail: 'need_email',
      needEnglishName: 'need_english_name',
      totalOrderPrice: 'total_order_price',
      totalRoomPrice: 'total_room_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedDesc: 'string',
      btripHotelCancelPolicyDTO: HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO,
      earliestCheckInTime: 'string',
      latestCheckOutTime: 'string',
      maxBookingNum: 'number',
      maxOccupancyNum: 'number',
      needCertificate: 'boolean',
      needEmail: 'boolean',
      needEnglishName: 'boolean',
      totalOrderPrice: 'number',
      totalRoomPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderPreValidateResponseBodyModule extends $tea.Model {
  /**
   * @example
   * demo
   */
  extendInfo?: string;
  /**
   * @example
   * fb5e1abf33924b6c912bd6d80deec0eb-4
   */
  itineraryNo?: string;
  promotionInfo?: HotelOrderPreValidateResponseBodyModulePromotionInfo;
  ratePlanDaily?: HotelOrderPreValidateResponseBodyModuleRatePlanDaily[];
  /**
   * @example
   * 5314280514218
   */
  ratePlanId?: number;
  ratePlanInfo?: HotelOrderPreValidateResponseBodyModuleRatePlanInfo;
  /**
   * @example
   * nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82
   */
  validateResKey?: string;
  static names(): { [key: string]: string } {
    return {
      extendInfo: 'extend_info',
      itineraryNo: 'itinerary_no',
      promotionInfo: 'promotion_info',
      ratePlanDaily: 'rate_plan_daily',
      ratePlanId: 'rate_plan_id',
      ratePlanInfo: 'rate_plan_info',
      validateResKey: 'validate_res_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extendInfo: 'string',
      itineraryNo: 'string',
      promotionInfo: HotelOrderPreValidateResponseBodyModulePromotionInfo,
      ratePlanDaily: { 'type': 'array', 'itemType': HotelOrderPreValidateResponseBodyModuleRatePlanDaily },
      ratePlanId: 'number',
      ratePlanInfo: HotelOrderPreValidateResponseBodyModuleRatePlanInfo,
      validateResKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponseBodyModuleHotelInfo extends $tea.Model {
  brandCode?: string;
  brandGroup?: string;
  brandName?: string;
  /**
   * @example
   * 1669344020
   */
  checkIn?: number;
  /**
   * @example
   * 1669344020
   */
  checkOut?: number;
  city?: string;
  cityAdCode?: string;
  countryCode?: string;
  countryName?: string;
  hotelAddress?: string;
  hotelName?: string;
  hotelPhone?: string;
  /**
   * @example
   * 11
   */
  hotelSupportVatInvoiceType?: number;
  /**
   * @example
   * 1
   */
  night?: number;
  /**
   * @example
   * 1
   */
  roomNum?: number;
  roomType?: string;
  static names(): { [key: string]: string } {
    return {
      brandCode: 'brand_code',
      brandGroup: 'brand_group',
      brandName: 'brand_name',
      checkIn: 'check_in',
      checkOut: 'check_out',
      city: 'city',
      cityAdCode: 'city_ad_code',
      countryCode: 'country_code',
      countryName: 'country_name',
      hotelAddress: 'hotel_address',
      hotelName: 'hotel_name',
      hotelPhone: 'hotel_phone',
      hotelSupportVatInvoiceType: 'hotel_support_vat_invoice_type',
      night: 'night',
      roomNum: 'room_num',
      roomType: 'room_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      brandCode: 'string',
      brandGroup: 'string',
      brandName: 'string',
      checkIn: 'number',
      checkOut: 'number',
      city: 'string',
      cityAdCode: 'string',
      countryCode: 'string',
      countryName: 'string',
      hotelAddress: 'string',
      hotelName: 'string',
      hotelPhone: 'string',
      hotelSupportVatInvoiceType: 'number',
      night: 'number',
      roomNum: 'number',
      roomType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponseBodyModuleInvoiceInfo extends $tea.Model {
  /**
   * @example
   * 12345678
   */
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponseBodyModuleOrderBaseInfo extends $tea.Model {
  /**
   * @example
   * 12345678
   */
  applyId?: string;
  btripTitle?: string;
  category?: number;
  /**
   * @example
   * iscorpId
   */
  corpId?: string;
  corpName?: string;
  /**
   * @example
   * 12345678
   */
  departId?: string;
  departName?: string;
  exceedApplyNos?: string[];
  extendField?: string;
  /**
   * @example
   * 1669344020
   */
  gmtCreate?: number;
  /**
   * @example
   * 1669344020
   */
  gmtModified?: number;
  /**
   * @example
   * 1002145190081005400
   */
  id?: number;
  /**
   * @example
   * 12345678
   */
  itineraryId?: string;
  /**
   * @example
   * 1
   */
  orderStatus?: number;
  /**
   * @example
   * 1
   */
  orderType?: number;
  supplier?: string;
  /**
   * @example
   * 12345678
   */
  thirdpartApplyId?: string;
  thirdpartBusinessId?: string;
  /**
   * @example
   * 12345678
   */
  thirdpartDepartId?: string;
  /**
   * @example
   * 12345678
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * 12345678
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      btripTitle: 'btrip_title',
      category: 'category',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      exceedApplyNos: 'exceed_apply_nos',
      extendField: 'extend_field',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      id: 'id',
      itineraryId: 'itinerary_id',
      orderStatus: 'order_status',
      orderType: 'order_type',
      supplier: 'supplier',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartBusinessId: 'thirdpart_business_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      btripTitle: 'string',
      category: 'number',
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      exceedApplyNos: { 'type': 'array', 'itemType': 'string' },
      extendField: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      itineraryId: 'string',
      orderStatus: 'number',
      orderType: 'number',
      supplier: 'string',
      thirdpartApplyId: 'string',
      thirdpartBusinessId: 'string',
      thirdpartDepartId: 'string',
      thirdpartItineraryId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponseBodyModulePassengerList extends $tea.Model {
  applyId?: string;
  /**
   * @example
   * 12345678
   */
  costCenterId?: number;
  costCenterName?: string;
  /**
   * @example
   * 12345678
   */
  costCenterNumber?: string;
  itineraryId?: string;
  occupantType?: number;
  projectCode?: string;
  /**
   * @example
   * 12345678
   */
  projectId?: number;
  projectTitle?: string;
  thirdpartApplyId?: string;
  /**
   * @example
   * 12345678
   */
  thirdpartCostCenterId?: string;
  /**
   * @example
   * 12345678
   */
  thirdpartProjectId?: string;
  /**
   * @example
   * 12345678
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      itineraryId: 'itinerary_id',
      occupantType: 'occupant_type',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartProjectId: 'thirdpart_project_id',
      userId: 'user_id',
      userName: 'user_name',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      costCenterId: 'number',
      costCenterName: 'string',
      costCenterNumber: 'string',
      itineraryId: 'string',
      occupantType: 'number',
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      thirdpartApplyId: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartProjectId: 'string',
      userId: 'string',
      userName: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 1669344020
   */
  gmtCreate?: number;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * 200
   */
  price?: number;
  /**
   * @example
   * 12345678910987654321
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      gmtCreate: 'gmt_create',
      payType: 'pay_type',
      price: 'price',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      gmtCreate: 'number',
      payType: 'number',
      price: 'number',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelOrderQueryResponseBodyModule extends $tea.Model {
  hotelInfo?: HotelOrderQueryResponseBodyModuleHotelInfo;
  invoiceInfo?: HotelOrderQueryResponseBodyModuleInvoiceInfo;
  orderBaseInfo?: HotelOrderQueryResponseBodyModuleOrderBaseInfo;
  passengerList?: HotelOrderQueryResponseBodyModulePassengerList[];
  priceInfoList?: HotelOrderQueryResponseBodyModulePriceInfoList[];
  static names(): { [key: string]: string } {
    return {
      hotelInfo: 'hotel_info',
      invoiceInfo: 'invoice_info',
      orderBaseInfo: 'order_base_info',
      passengerList: 'passenger_list',
      priceInfoList: 'price_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelInfo: HotelOrderQueryResponseBodyModuleHotelInfo,
      invoiceInfo: HotelOrderQueryResponseBodyModuleInvoiceInfo,
      orderBaseInfo: HotelOrderQueryResponseBodyModuleOrderBaseInfo,
      passengerList: { 'type': 'array', 'itemType': HotelOrderQueryResponseBodyModulePassengerList },
      priceInfoList: { 'type': 'array', 'itemType': HotelOrderQueryResponseBodyModulePriceInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList extends $tea.Model {
  /**
   * @example
   * 1
   */
  hour?: number;
  /**
   * @example
   * 20
   */
  value?: number;
  static names(): { [key: string]: string } {
    return {
      hour: 'hour',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hour: 'number',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy extends $tea.Model {
  btripHotelCancelPolicyInfoDTOList?: HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList[];
  /**
   * @example
   * 1
   */
  cancelPolicyType?: number;
  static names(): { [key: string]: string } {
    return {
      btripHotelCancelPolicyInfoDTOList: 'btrip_hotel_cancel_policy_info_d_t_o_list',
      cancelPolicyType: 'cancel_policy_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      btripHotelCancelPolicyInfoDTOList: { 'type': 'array', 'itemType': HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList },
      cancelPolicyType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys extends $tea.Model {
  /**
   * @example
   * 30000
   */
  discountPrice?: number;
  /**
   * @example
   * 62800
   */
  lastDiscountsPrice?: number;
  /**
   * @example
   * 62800
   */
  price?: number;
  /**
   * @example
   * 2023-10-17
   */
  startDate?: string;
  static names(): { [key: string]: string } {
    return {
      discountPrice: 'discount_price',
      lastDiscountsPrice: 'last_discounts_price',
      price: 'price',
      startDate: 'start_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discountPrice: 'number',
      lastDiscountsPrice: 'number',
      price: 'number',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates extends $tea.Model {
  /**
   * @example
   * demo
   */
  breakfast?: string;
  /**
   * @example
   * 1
   */
  breakfastCount?: number;
  btripHotelCancelPolicy?: HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy;
  cancelPolicyDesc?: string;
  /**
   * @example
   * 1
   */
  companyAassist?: string;
  /**
   * @example
   * CNY
   */
  currencyCode?: string;
  /**
   * @example
   * true
   */
  instantConfirm?: boolean;
  /**
   * @example
   * 721700504622
   */
  itemId?: string;
  /**
   * @example
   * 4
   */
  maxAdvHours?: number;
  /**
   * @example
   * 4344
   */
  maxDays?: number;
  /**
   * @example
   * 0
   */
  minAdvHours?: number;
  /**
   * @example
   * 0
   */
  minDays?: number;
  /**
   * @example
   * 0
   */
  nod?: number;
  /**
   * @example
   * 1
   */
  nop?: number;
  /**
   * @example
   * 1
   */
  paymentType?: number;
  /**
   * @example
   * 30000
   */
  price?: number;
  /**
   * @example
   * demo
   */
  promotionInfo?: string;
  /**
   * @example
   * 4
   */
  quota?: number;
  rateDailys?: HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys[];
  /**
   * @example
   * 4509447432148
   */
  rateId?: string;
  ratePlanName?: string;
  /**
   * @example
   * 4509447432148
   */
  rpId?: string;
  /**
   * @example
   * 2829486701
   */
  sellerId?: string;
  /**
   * @example
   * true
   */
  supportSpecialInvoice?: boolean;
  static names(): { [key: string]: string } {
    return {
      breakfast: 'breakfast',
      breakfastCount: 'breakfast_count',
      btripHotelCancelPolicy: 'btrip_hotel_cancel_policy',
      cancelPolicyDesc: 'cancel_policy_desc',
      companyAassist: 'company_aassist',
      currencyCode: 'currency_code',
      instantConfirm: 'instant_confirm',
      itemId: 'item_id',
      maxAdvHours: 'max_adv_hours',
      maxDays: 'max_days',
      minAdvHours: 'min_adv_hours',
      minDays: 'min_days',
      nod: 'nod',
      nop: 'nop',
      paymentType: 'payment_type',
      price: 'price',
      promotionInfo: 'promotion_info',
      quota: 'quota',
      rateDailys: 'rate_dailys',
      rateId: 'rate_id',
      ratePlanName: 'rate_plan_name',
      rpId: 'rp_id',
      sellerId: 'seller_id',
      supportSpecialInvoice: 'support_special_invoice',
    };
  }

  static types(): { [key: string]: any } {
    return {
      breakfast: 'string',
      breakfastCount: 'number',
      btripHotelCancelPolicy: HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy,
      cancelPolicyDesc: 'string',
      companyAassist: 'string',
      currencyCode: 'string',
      instantConfirm: 'boolean',
      itemId: 'string',
      maxAdvHours: 'number',
      maxDays: 'number',
      minAdvHours: 'number',
      minDays: 'number',
      nod: 'number',
      nop: 'number',
      paymentType: 'number',
      price: 'number',
      promotionInfo: 'string',
      quota: 'number',
      rateDailys: { 'type': 'array', 'itemType': HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys },
      rateId: 'string',
      ratePlanName: 'string',
      rpId: 'string',
      sellerId: 'string',
      supportSpecialInvoice: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBodyModuleHotelPriceInfosRooms extends $tea.Model {
  /**
   * @example
   * 32
   */
  area?: string;
  bed?: string;
  bedTypeString?: string;
  /**
   * @example
   * {\\"bathtub\\":true}
   */
  facility?: string;
  /**
   * @example
   * 1,2,3,4,5,6
   */
  floor?: string;
  /**
   * @example
   * 2
   */
  maxOccupancy?: number;
  /**
   * @example
   * 0
   */
  networkService?: string;
  pics?: string[];
  rates?: HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates[];
  /**
   * @example
   * 64681618
   */
  roomId?: string;
  roomName?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  /**
   * @example
   * 1
   */
  windowType?: string;
  static names(): { [key: string]: string } {
    return {
      area: 'area',
      bed: 'bed',
      bedTypeString: 'bed_type_string',
      facility: 'facility',
      floor: 'floor',
      maxOccupancy: 'max_occupancy',
      networkService: 'network_service',
      pics: 'pics',
      rates: 'rates',
      roomId: 'room_id',
      roomName: 'room_name',
      status: 'status',
      windowType: 'window_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      area: 'string',
      bed: 'string',
      bedTypeString: 'string',
      facility: 'string',
      floor: 'string',
      maxOccupancy: 'number',
      networkService: 'string',
      pics: { 'type': 'array', 'itemType': 'string' },
      rates: { 'type': 'array', 'itemType': HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates },
      roomId: 'string',
      roomName: 'string',
      status: 'number',
      windowType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBodyModuleHotelPriceInfos extends $tea.Model {
  address?: string;
  /**
   * @example
   * 64389015
   */
  hotelId?: string;
  hotelName?: string;
  rooms?: HotelPricePullResponseBodyModuleHotelPriceInfosRooms[];
  /**
   * @example
   * 9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56
   */
  searchId?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      hotelId: 'hotel_id',
      hotelName: 'hotel_name',
      rooms: 'rooms',
      searchId: 'search_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      hotelId: 'string',
      hotelName: 'string',
      rooms: { 'type': 'array', 'itemType': HotelPricePullResponseBodyModuleHotelPriceInfosRooms },
      searchId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelPricePullResponseBodyModule extends $tea.Model {
  hotelPriceInfos?: HotelPricePullResponseBodyModuleHotelPriceInfos[];
  static names(): { [key: string]: string } {
    return {
      hotelPriceInfos: 'hotel_price_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelPriceInfos: { 'type': 'array', 'itemType': HotelPricePullResponseBodyModuleHotelPriceInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoResponseBodyModuleBedInfoGroupListBedInfos extends $tea.Model {
  bedDesc?: string;
  bedNum?: number;
  bedSize?: string;
  bedType?: string;
  length?: string;
  width?: string;
  static names(): { [key: string]: string } {
    return {
      bedDesc: 'bed_desc',
      bedNum: 'bed_num',
      bedSize: 'bed_size',
      bedType: 'bed_type',
      length: 'length',
      width: 'width',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedDesc: 'string',
      bedNum: 'number',
      bedSize: 'string',
      bedType: 'string',
      length: 'string',
      width: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoResponseBodyModuleBedInfoGroupList extends $tea.Model {
  bedInfos?: HotelRoomInfoResponseBodyModuleBedInfoGroupListBedInfos[];
  static names(): { [key: string]: string } {
    return {
      bedInfos: 'bed_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedInfos: { 'type': 'array', 'itemType': HotelRoomInfoResponseBodyModuleBedInfoGroupListBedInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoResponseBodyModuleBedInfos extends $tea.Model {
  bedDesc?: string;
  /**
   * @example
   * 2
   */
  bedNum?: number;
  /**
   * @example
   * 1.8*2.0m
   */
  bedSize?: string;
  /**
   * @example
   * 1
   */
  bedType?: string;
  length?: string;
  width?: string;
  static names(): { [key: string]: string } {
    return {
      bedDesc: 'bed_desc',
      bedNum: 'bed_num',
      bedSize: 'bed_size',
      bedType: 'bed_type',
      length: 'length',
      width: 'width',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedDesc: 'string',
      bedNum: 'number',
      bedSize: 'string',
      bedType: 'string',
      length: 'string',
      width: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoResponseBodyModuleRoomImages extends $tea.Model {
  bedInfos2?: string;
  tag?: number;
  /**
   * @example
   * https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      bedInfos2: 'bed_infos2',
      tag: 'tag',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedInfos2: 'string',
      tag: 'number',
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelRoomInfoResponseBodyModule extends $tea.Model {
  bedInfoGroupList?: HotelRoomInfoResponseBodyModuleBedInfoGroupList[];
  bedInfos?: HotelRoomInfoResponseBodyModuleBedInfos[];
  /**
   * @example
   * 1
   */
  extraBed?: number;
  /**
   * @example
   * demo
   */
  extraBedDesc?: string;
  /**
   * @example
   * 2
   */
  floor?: string;
  /**
   * @example
   * 0
   */
  internetWay?: string;
  /**
   * @example
   * 3
   */
  maxOccupancy?: number;
  roomDesc?: string;
  roomFacilities?: string;
  roomFacilityList?: string[];
  /**
   * @example
   * 84536009
   */
  roomId?: string;
  /**
   * @example
   * //img.alicdn.com/imgextra/i2/6000000007493/O1CN010Vmxaz25DqUblX82A_!!6000000007493-2-hotel.png
   */
  roomImage?: string;
  roomImages?: HotelRoomInfoResponseBodyModuleRoomImages[];
  roomName?: string;
  roomType?: number;
  roomarea?: string;
  /**
   * @example
   * 3
   */
  rooms?: number;
  smoke?: string;
  /**
   * @example
   * 2
   */
  window?: string;
  /**
   * @example
   * 0
   */
  windowBad?: string;
  /**
   * @example
   * demo
   */
  windowView?: string;
  static names(): { [key: string]: string } {
    return {
      bedInfoGroupList: 'bed_info_group_list',
      bedInfos: 'bed_infos',
      extraBed: 'extra_bed',
      extraBedDesc: 'extra_bed_desc',
      floor: 'floor',
      internetWay: 'internet_way',
      maxOccupancy: 'max_occupancy',
      roomDesc: 'room_desc',
      roomFacilities: 'room_facilities',
      roomFacilityList: 'room_facility_list',
      roomId: 'room_id',
      roomImage: 'room_image',
      roomImages: 'room_images',
      roomName: 'room_name',
      roomType: 'room_type',
      roomarea: 'roomarea',
      rooms: 'rooms',
      smoke: 'smoke',
      window: 'window',
      windowBad: 'window_bad',
      windowView: 'window_view',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedInfoGroupList: { 'type': 'array', 'itemType': HotelRoomInfoResponseBodyModuleBedInfoGroupList },
      bedInfos: { 'type': 'array', 'itemType': HotelRoomInfoResponseBodyModuleBedInfos },
      extraBed: 'number',
      extraBedDesc: 'string',
      floor: 'string',
      internetWay: 'string',
      maxOccupancy: 'number',
      roomDesc: 'string',
      roomFacilities: 'string',
      roomFacilityList: { 'type': 'array', 'itemType': 'string' },
      roomId: 'string',
      roomImage: 'string',
      roomImages: { 'type': 'array', 'itemType': HotelRoomInfoResponseBodyModuleRoomImages },
      roomName: 'string',
      roomType: 'number',
      roomarea: 'string',
      rooms: 'number',
      smoke: 'string',
      window: 'string',
      windowBad: 'string',
      windowView: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail extends $tea.Model {
  labelName?: string[];
  moneyDesc?: string;
  static names(): { [key: string]: string } {
    return {
      labelName: 'label_name',
      moneyDesc: 'money_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      labelName: { 'type': 'array', 'itemType': 'string' },
      moneyDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchResponseBodyModuleItemsDiscountDesc extends $tea.Model {
  cashReduceTotal?: string;
  dinamicLabel?: string;
  discountDetail?: HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail[];
  subTitle?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      cashReduceTotal: 'cash_reduce_total',
      dinamicLabel: 'dinamic_label',
      discountDetail: 'discount_detail',
      subTitle: 'sub_title',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cashReduceTotal: 'string',
      dinamicLabel: 'string',
      discountDetail: { 'type': 'array', 'itemType': HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail },
      subTitle: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchResponseBodyModuleItems extends $tea.Model {
  brandName?: string;
  /**
   * @example
   * 1902
   */
  btandCode?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  discountDesc?: HotelSearchResponseBodyModuleItemsDiscountDesc;
  /**
   * @example
   * 100
   */
  distance?: number;
  /**
   * @example
   * 330100
   */
  districtCode?: string;
  hotelAddress?: string;
  /**
   * @example
   * 55335212
   */
  hotelCode?: string;
  /**
   * @example
   * Business travel hotel
   */
  hotelEnName?: string;
  hotelName?: string;
  /**
   * @example
   * 3
   */
  hotelStar?: string;
  /**
   * @example
   * https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg
   */
  imageUrl?: string;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * 119.844005,30.054384
   */
  location?: string;
  /**
   * @example
   * 100
   */
  minPrice?: number;
  originalMinPrice?: number;
  /**
   * @example
   * 3.2
   */
  score?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  /**
   * @example
   * 0571-88886784-8888
   */
  tel?: string;
  static names(): { [key: string]: string } {
    return {
      brandName: 'brand_name',
      btandCode: 'btand_code',
      cityCode: 'city_code',
      discountDesc: 'discount_desc',
      distance: 'distance',
      districtCode: 'district_code',
      hotelAddress: 'hotel_address',
      hotelCode: 'hotel_code',
      hotelEnName: 'hotel_en_name',
      hotelName: 'hotel_name',
      hotelStar: 'hotel_star',
      imageUrl: 'image_url',
      isProtocol: 'is_protocol',
      location: 'location',
      minPrice: 'min_price',
      originalMinPrice: 'original_min_price',
      score: 'score',
      status: 'status',
      tel: 'tel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      brandName: 'string',
      btandCode: 'string',
      cityCode: 'string',
      discountDesc: HotelSearchResponseBodyModuleItemsDiscountDesc,
      distance: 'number',
      districtCode: 'string',
      hotelAddress: 'string',
      hotelCode: 'string',
      hotelEnName: 'string',
      hotelName: 'string',
      hotelStar: 'string',
      imageUrl: 'string',
      isProtocol: 'boolean',
      location: 'string',
      minPrice: 'number',
      originalMinPrice: 'number',
      score: 'string',
      status: 'number',
      tel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSearchResponseBodyModule extends $tea.Model {
  items?: HotelSearchResponseBodyModuleItems[];
  static names(): { [key: string]: string } {
    return {
      items: 'items',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': HotelSearchResponseBodyModuleItems },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo extends $tea.Model {
  /**
   * @example
   * 17:00
   */
  checkIn?: string;
  /**
   * @example
   * 12:00
   */
  checkOut?: string;
  /**
   * @example
   * 2020
   */
  decorateTime?: string;
  floors?: string;
  hotelFacilities?: string[];
  /**
   * @example
   * 0
   */
  hotelType?: number;
  /**
   * @example
   * 2020
   */
  openingTime?: string;
  roomFacilities?: string[];
  /**
   * @example
   * 1
   */
  rooms?: number;
  service?: string[];
  /**
   * @example
   * 1
   */
  themeTag?: string;
  static names(): { [key: string]: string } {
    return {
      checkIn: 'check_in',
      checkOut: 'check_out',
      decorateTime: 'decorate_time',
      floors: 'floors',
      hotelFacilities: 'hotel_facilities',
      hotelType: 'hotel_type',
      openingTime: 'opening_time',
      roomFacilities: 'room_facilities',
      rooms: 'rooms',
      service: 'service',
      themeTag: 'theme_tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkIn: 'string',
      checkOut: 'string',
      decorateTime: 'string',
      floors: 'string',
      hotelFacilities: { 'type': 'array', 'itemType': 'string' },
      hotelType: 'number',
      openingTime: 'string',
      roomFacilities: { 'type': 'array', 'itemType': 'string' },
      rooms: 'number',
      service: { 'type': 'array', 'itemType': 'string' },
      themeTag: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos extends $tea.Model {
  desc?: string;
  tag?: number;
  /**
   * @example
   * https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      tag: 'tag',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      tag: 'number',
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupListBedInfos extends $tea.Model {
  bedDesc?: string;
  bedNum?: number;
  bedSize?: string;
  bedType?: string;
  length?: string;
  width?: string;
  static names(): { [key: string]: string } {
    return {
      bedDesc: 'bed_desc',
      bedNum: 'bed_num',
      bedSize: 'bed_size',
      bedType: 'bed_type',
      length: 'length',
      width: 'width',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedDesc: 'string',
      bedNum: 'number',
      bedSize: 'string',
      bedType: 'string',
      length: 'string',
      width: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupList extends $tea.Model {
  bedInfos?: HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupListBedInfos[];
  static names(): { [key: string]: string } {
    return {
      bedInfos: 'bed_Infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedInfos: { 'type': 'array', 'itemType': HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupListBedInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos extends $tea.Model {
  bedDesc?: string;
  /**
   * @example
   * 1
   */
  bedNum?: number;
  /**
   * @example
   * 1.8m
   */
  bedSize?: string;
  /**
   * @example
   * 0
   */
  bedType?: string;
  length?: string;
  width?: string;
  static names(): { [key: string]: string } {
    return {
      bedDesc: 'bed_desc',
      bedNum: 'bed_num',
      bedSize: 'bed_size',
      bedType: 'bed_type',
      length: 'length',
      width: 'width',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedDesc: 'string',
      bedNum: 'number',
      bedSize: 'string',
      bedType: 'string',
      length: 'string',
      width: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos extends $tea.Model {
  bedInfoGroupList?: HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupList[];
  bedInfos?: HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos[];
  /**
   * @example
   * 1
   */
  extraBed?: number;
  /**
   * @example
   * demo
   */
  extraBedDesc?: string;
  /**
   * @example
   * 1,2,3,4,5,6
   */
  floor?: string;
  /**
   * @example
   * 0
   */
  internetWay?: string;
  /**
   * @example
   * 1
   */
  maxOccupancy?: number;
  roomFacilities?: string;
  roomFacilityList?: string[];
  /**
   * @example
   * 71652158
   */
  roomId?: string;
  /**
   * @example
   * //img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg
   */
  roomImage?: string;
  roomImages?: string[];
  roomName?: string;
  roomType?: number;
  roomarea?: string;
  /**
   * @example
   * 1
   */
  rooms?: number;
  /**
   * @example
   * 0
   */
  window?: string;
  windowBad?: string;
  windowView?: string;
  static names(): { [key: string]: string } {
    return {
      bedInfoGroupList: 'bed_info_group_list',
      bedInfos: 'bed_infos',
      extraBed: 'extra_bed',
      extraBedDesc: 'extra_bed_desc',
      floor: 'floor',
      internetWay: 'internet_way',
      maxOccupancy: 'max_occupancy',
      roomFacilities: 'room_facilities',
      roomFacilityList: 'room_facility_list',
      roomId: 'room_id',
      roomImage: 'room_image',
      roomImages: 'room_images',
      roomName: 'room_name',
      roomType: 'room_type',
      roomarea: 'roomarea',
      rooms: 'rooms',
      window: 'window',
      windowBad: 'window_bad',
      windowView: 'window_view',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bedInfoGroupList: { 'type': 'array', 'itemType': HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupList },
      bedInfos: { 'type': 'array', 'itemType': HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos },
      extraBed: 'number',
      extraBedDesc: 'string',
      floor: 'string',
      internetWay: 'string',
      maxOccupancy: 'number',
      roomFacilities: 'string',
      roomFacilityList: { 'type': 'array', 'itemType': 'string' },
      roomId: 'string',
      roomImage: 'string',
      roomImages: { 'type': 'array', 'itemType': 'string' },
      roomName: 'string',
      roomType: 'number',
      roomarea: 'string',
      rooms: 'number',
      window: 'string',
      windowBad: 'string',
      windowView: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModuleHotelStaticInfos extends $tea.Model {
  blockRoomTypeInformation?: { [key: string]: string };
  /**
   * @example
   * 19039
   */
  brand?: string;
  brandName?: string;
  /**
   * @example
   * 330100
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * CN
   */
  country?: string;
  /**
   * @example
   * CN
   */
  countryCode?: string;
  description?: string;
  /**
   * @example
   * 330183
   */
  district?: string;
  districtName?: string;
  expandInfo?: HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo;
  hotelAddress?: string;
  /**
   * @example
   * Building 5, Haichuang Building, 998 Wenyi West Road
   */
  hotelEnAddress?: string;
  /**
   * @example
   * Business travel hotel
   */
  hotelEnName?: string;
  /**
   * @example
   * 55335212
   */
  hotelId?: string;
  hotelName?: string;
  /**
   * @example
   * 2020
   */
  hotelOpenTime?: string;
  /**
   * @example
   * 0086#0571#28350117
   */
  hotelPhones?: string;
  /**
   * @example
   * demo
   */
  hotelPolicies?: string;
  /**
   * @example
   * 0086#0571#28350117
   */
  hotelfax?: string;
  hotelpics?: string;
  imageinfos?: HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos[];
  /**
   * @example
   * 1
   */
  invoiceProviderMethod?: string;
  invoiceTypes?: number[];
  /**
   * @example
   * 119.844005,30.054384
   */
  location?: string;
  /**
   * @example
   * 330000
   */
  province?: string;
  provinceName?: string;
  /**
   * @example
   * 2
   */
  ratingAverage?: string;
  roomInfos?: HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos[];
  /**
   * @example
   * 0
   */
  star?: string;
  /**
   * @example
   * 2
   */
  starRate?: string;
  /**
   * @example
   * 1
   */
  status?: string;
  /**
   * @example
   * demo
   */
  themes?: string;
  /**
   * @example
   * demo
   */
  visaReminding?: boolean;
  static names(): { [key: string]: string } {
    return {
      blockRoomTypeInformation: 'block_room_type_information',
      brand: 'brand',
      brandName: 'brand_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      country: 'country',
      countryCode: 'country_code',
      description: 'description',
      district: 'district',
      districtName: 'district_name',
      expandInfo: 'expand_info',
      hotelAddress: 'hotel_address',
      hotelEnAddress: 'hotel_en_address',
      hotelEnName: 'hotel_en_name',
      hotelId: 'hotel_id',
      hotelName: 'hotel_name',
      hotelOpenTime: 'hotel_open_time',
      hotelPhones: 'hotel_phones',
      hotelPolicies: 'hotel_policies',
      hotelfax: 'hotelfax',
      hotelpics: 'hotelpics',
      imageinfos: 'imageinfos',
      invoiceProviderMethod: 'invoice_provider_method',
      invoiceTypes: 'invoice_types',
      location: 'location',
      province: 'province',
      provinceName: 'province_name',
      ratingAverage: 'rating_average',
      roomInfos: 'room_infos',
      star: 'star',
      starRate: 'star_rate',
      status: 'status',
      themes: 'themes',
      visaReminding: 'visa_reminding',
    };
  }

  static types(): { [key: string]: any } {
    return {
      blockRoomTypeInformation: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      brand: 'string',
      brandName: 'string',
      cityCode: 'string',
      cityName: 'string',
      country: 'string',
      countryCode: 'string',
      description: 'string',
      district: 'string',
      districtName: 'string',
      expandInfo: HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo,
      hotelAddress: 'string',
      hotelEnAddress: 'string',
      hotelEnName: 'string',
      hotelId: 'string',
      hotelName: 'string',
      hotelOpenTime: 'string',
      hotelPhones: 'string',
      hotelPolicies: 'string',
      hotelfax: 'string',
      hotelpics: 'string',
      imageinfos: { 'type': 'array', 'itemType': HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos },
      invoiceProviderMethod: 'string',
      invoiceTypes: { 'type': 'array', 'itemType': 'number' },
      location: 'string',
      province: 'string',
      provinceName: 'string',
      ratingAverage: 'string',
      roomInfos: { 'type': 'array', 'itemType': HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos },
      star: 'string',
      starRate: 'string',
      status: 'string',
      themes: 'string',
      visaReminding: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelStaticInfoResponseBodyModule extends $tea.Model {
  hotelStaticInfos?: HotelStaticInfoResponseBodyModuleHotelStaticInfos[];
  static names(): { [key: string]: string } {
    return {
      hotelStaticInfos: 'hotel_static_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotelStaticInfos: { 'type': 'array', 'itemType': HotelStaticInfoResponseBodyModuleHotelStaticInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2ResponseBodyModuleGuessSuggestInfos extends $tea.Model {
  address?: string;
  /**
   * @example
   * 300100
   */
  cityCode?: number;
  cityName?: string;
  displayName?: string;
  /**
   * @example
   * 53853318
   */
  hotelId?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01qKg25r1rKLOKxT3vB_!!6000000005612-2-tps-32-32.png
   */
  icon?: string;
  point?: string;
  /**
   * @example
   * 524
   */
  price?: string;
  /**
   * @example
   * 0
   */
  region?: number;
  /**
   * @example
   * 10
   */
  type?: number;
  typeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      cityCode: 'city_code',
      cityName: 'city_name',
      displayName: 'display_name',
      hotelId: 'hotel_id',
      icon: 'icon',
      point: 'point',
      price: 'price',
      region: 'region',
      type: 'type',
      typeDesc: 'type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      cityCode: 'number',
      cityName: 'string',
      displayName: 'string',
      hotelId: 'string',
      icon: 'string',
      point: 'string',
      price: 'string',
      region: 'number',
      type: 'number',
      typeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2ResponseBodyModuleKeywordSuggestInfosBusinessAreaWithCity extends $tea.Model {
  address?: string;
  /**
   * @example
   * 300100
   */
  cityCode?: number;
  cityName?: string;
  displayName?: string;
  /**
   * @example
   * 57140953
   */
  hotelId?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01qKg25r1rKLOKxT3vB_!!6000000005612-2-tps-32-32.png
   */
  icon?: string;
  point?: string;
  /**
   * @example
   * 524
   */
  price?: string;
  /**
   * @example
   * 0
   */
  region?: number;
  /**
   * @example
   * 5
   */
  type?: number;
  typeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      cityCode: 'city_code',
      cityName: 'city_name',
      displayName: 'display_name',
      hotelId: 'hotel_id',
      icon: 'icon',
      point: 'point',
      price: 'price',
      region: 'region',
      type: 'type',
      typeDesc: 'type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      cityCode: 'number',
      cityName: 'string',
      displayName: 'string',
      hotelId: 'string',
      icon: 'string',
      point: 'string',
      price: 'string',
      region: 'number',
      type: 'number',
      typeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2ResponseBodyModuleKeywordSuggestInfos extends $tea.Model {
  address?: string;
  businessAreaWithCity?: HotelSuggestV2ResponseBodyModuleKeywordSuggestInfosBusinessAreaWithCity[];
  /**
   * @example
   * 300100
   */
  cityCode?: number;
  cityName?: string;
  displayName?: string;
  /**
   * @example
   * 53853318
   */
  hotelId?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01qKg25r1rKLOKxT3vB_!!6000000005612-2-tps-32-32.png
   */
  icon?: string;
  point?: string;
  /**
   * @example
   * 524
   */
  price?: string;
  /**
   * @example
   * 0
   */
  region?: number;
  /**
   * @example
   * 10
   */
  type?: number;
  typeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      businessAreaWithCity: 'business_area_with_city',
      cityCode: 'city_code',
      cityName: 'city_name',
      displayName: 'display_name',
      hotelId: 'hotel_id',
      icon: 'icon',
      point: 'point',
      price: 'price',
      region: 'region',
      type: 'type',
      typeDesc: 'type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      businessAreaWithCity: { 'type': 'array', 'itemType': HotelSuggestV2ResponseBodyModuleKeywordSuggestInfosBusinessAreaWithCity },
      cityCode: 'number',
      cityName: 'string',
      displayName: 'string',
      hotelId: 'string',
      icon: 'string',
      point: 'string',
      price: 'string',
      region: 'number',
      type: 'number',
      typeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2ResponseBodyModulePopularSuggestInfosPopularInfos extends $tea.Model {
  displayName?: string;
  static names(): { [key: string]: string } {
    return {
      displayName: 'display_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      displayName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2ResponseBodyModulePopularSuggestInfos extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN01x0q19E1QZSqLHVVNh_!!6000000001990-2-tps-54-54.png
   */
  icon?: string;
  popularInfos?: HotelSuggestV2ResponseBodyModulePopularSuggestInfosPopularInfos[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      icon: 'icon',
      popularInfos: 'popular_infos',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      icon: 'string',
      popularInfos: { 'type': 'array', 'itemType': HotelSuggestV2ResponseBodyModulePopularSuggestInfosPopularInfos },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HotelSuggestV2ResponseBodyModule extends $tea.Model {
  guessSuggestInfos?: HotelSuggestV2ResponseBodyModuleGuessSuggestInfos[];
  keywordSuggestInfos?: HotelSuggestV2ResponseBodyModuleKeywordSuggestInfos[];
  popularSuggestInfos?: HotelSuggestV2ResponseBodyModulePopularSuggestInfos[];
  tips?: string;
  static names(): { [key: string]: string } {
    return {
      guessSuggestInfos: 'guess_suggest_infos',
      keywordSuggestInfos: 'keyword_suggest_infos',
      popularSuggestInfos: 'popular_suggest_infos',
      tips: 'tips',
    };
  }

  static types(): { [key: string]: any } {
    return {
      guessSuggestInfos: { 'type': 'array', 'itemType': HotelSuggestV2ResponseBodyModuleGuessSuggestInfos },
      keywordSuggestInfos: { 'type': 'array', 'itemType': HotelSuggestV2ResponseBodyModuleKeywordSuggestInfos },
      popularSuggestInfos: { 'type': 'array', 'itemType': HotelSuggestV2ResponseBodyModulePopularSuggestInfos },
      tips: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightModifySegmentList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * HGH
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  /**
   * @example
   * T2
   */
  arrTerminal?: string;
  /**
   * @example
   * 2024-10-28 14:26:00
   */
  arrTime?: string;
  /**
   * @example
   * CA
   */
  carrierAirlineCode?: string;
  carrierAirlineName?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2024-10-25 12:25:00
   */
  depTime?: string;
  /**
   * @example
   * MU7384
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  share?: boolean;
  /**
   * @example
   * KIX
   */
  stopAptCode?: string;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  stopArrTime?: string;
  stopCity?: string;
  /**
   * @example
   * OSA
   */
  stopCityCode?: string;
  /**
   * @example
   * 2024-10-27 11:26:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineName: 'carrier_airline_name',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      share: 'share',
      stopAptCode: 'stop_apt_code',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopCityCode: 'stop_city_code',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      carrierAirlineCode: 'string',
      carrierAirlineName: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      share: 'boolean',
      stopAptCode: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopCityCode: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketListCabinClass extends $tea.Model {
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * MU5236
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketList extends $tea.Model {
  cabinClass?: IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketListCabinClass[];
  /**
   * @example
   * MU5236
   */
  flightNo?: string;
  /**
   * @example
   * 781-6605285563
   */
  ticketNo?: string;
  /**
   * @example
   * 0132
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
      ticketNo: 'ticket_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketListCabinClass },
      flightNo: 'string',
      ticketNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListModifyFee extends $tea.Model {
  modifyHandFee?: number;
  modifyUpgradeFee?: number;
  taxGap?: number;
  /**
   * @example
   * 0132
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      modifyHandFee: 'modify_hand_fee',
      modifyUpgradeFee: 'modify_upgrade_fee',
      taxGap: 'tax_gap',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      modifyHandFee: 'number',
      modifyUpgradeFee: 'number',
      taxGap: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderList extends $tea.Model {
  corpPayPrice?: number;
  flightModifySegmentList?: IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightModifySegmentList[];
  flightOrderModifyTicketList?: IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketList[];
  /**
   * @example
   * 1005200138736000
   */
  modifyApplyId?: number;
  modifyFee?: IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListModifyFee[];
  /**
   * @example
   * 1
   */
  modifyOrderStatus?: number;
  modifyTotalFee?: number;
  passengerList?: string[];
  personPayPrice?: number;
  /**
   * @example
   * 1005200138736028
   */
  relateModifyApplyId?: number;
  serviceFee?: number;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  submitModifyTime?: string;
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      corpPayPrice: 'corp_pay_price',
      flightModifySegmentList: 'flight_modify_segment_list',
      flightOrderModifyTicketList: 'flight_order_modify_ticket_list',
      modifyApplyId: 'modify_apply_id',
      modifyFee: 'modify_fee',
      modifyOrderStatus: 'modify_order_status',
      modifyTotalFee: 'modify_total_fee',
      passengerList: 'passenger_list',
      personPayPrice: 'person_pay_price',
      relateModifyApplyId: 'relate_modify_apply_id',
      serviceFee: 'service_fee',
      submitModifyTime: 'submit_modify_time',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpPayPrice: 'number',
      flightModifySegmentList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightModifySegmentList },
      flightOrderModifyTicketList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketList },
      modifyApplyId: 'number',
      modifyFee: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderListModifyFee },
      modifyOrderStatus: 'number',
      modifyTotalFee: 'number',
      passengerList: { 'type': 'array', 'itemType': 'string' },
      personPayPrice: 'number',
      relateModifyApplyId: 'number',
      serviceFee: 'number',
      submitModifyTime: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketListCabinClass extends $tea.Model {
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * MU5236
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketList extends $tea.Model {
  cabinClass?: IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketListCabinClass[];
  /**
   * @example
   * MU5236
   */
  flightNo?: string;
  /**
   * @example
   * 018-6605785754
   */
  ticketNo?: string;
  /**
   * @example
   * 0132
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
      ticketNo: 'ticket_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketListCabinClass },
      flightNo: 'string',
      ticketNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightPassengerFee extends $tea.Model {
  noRefundModifyHandFee?: number;
  noRefundModifyUpgradeFee?: number;
  refundAmount?: number;
  refundHandFee?: number;
  refundModifyAmount?: number;
  refundModifyHandAmount?: number;
  refundModifyUpgradeAmount?: number;
  refundTaxHandFee?: number;
  /**
   * @example
   * 0132
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      noRefundModifyHandFee: 'no_refund_modify_hand_fee',
      noRefundModifyUpgradeFee: 'no_refund_modify_upgrade_fee',
      refundAmount: 'refund_amount',
      refundHandFee: 'refund_hand_fee',
      refundModifyAmount: 'refund_modify_amount',
      refundModifyHandAmount: 'refund_modify_hand_amount',
      refundModifyUpgradeAmount: 'refund_modify_upgrade_amount',
      refundTaxHandFee: 'refund_tax_hand_fee',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      noRefundModifyHandFee: 'number',
      noRefundModifyUpgradeFee: 'number',
      refundAmount: 'number',
      refundHandFee: 'number',
      refundModifyAmount: 'number',
      refundModifyHandAmount: 'number',
      refundModifyUpgradeAmount: 'number',
      refundTaxHandFee: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightRefundSegmentList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * HKG
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  /**
   * @example
   * T1
   */
  arrTerminal?: string;
  /**
   * @example
   * 2024-10-28 14:26:00
   */
  arrTime?: string;
  /**
   * @example
   * CA
   */
  carrierAirlineCode?: string;
  carrierAirlineName?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2024-10-25 11:24:00
   */
  depTime?: string;
  /**
   * @example
   * MU5334
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  share?: boolean;
  /**
   * @example
   * KIX
   */
  stopAptCode?: string;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  stopArrTime?: string;
  stopCity?: string;
  /**
   * @example
   * OSA
   */
  stopCityCode?: string;
  /**
   * @example
   * 2024-10-27 11:26:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineName: 'carrier_airline_name',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      share: 'share',
      stopAptCode: 'stop_apt_code',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopCityCode: 'stop_city_code',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      carrierAirlineCode: 'string',
      carrierAirlineName: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      share: 'boolean',
      stopAptCode: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopCityCode: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderList extends $tea.Model {
  corpRefundAmount?: number;
  flightOrderRefundTicketList?: IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketList[];
  flightPassengerFee?: IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightPassengerFee[];
  flightRefundSegmentList?: IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightRefundSegmentList[];
  passengerList?: string[];
  personRefundAmount?: number;
  /**
   * @example
   * 1006200138737069
   */
  refundApplyId?: number;
  refundHandFee?: number;
  /**
   * @example
   * 3
   */
  refundOrderStatus?: number;
  refundServiceFee?: number;
  refundTotalAmount?: number;
  relateModifyApplyId?: number[];
  /**
   * @example
   * 10062001387370
   */
  relateRefundApplyId?: number;
  repeatRefund?: boolean;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  submitRefundTime?: string;
  voluntary?: boolean;
  static names(): { [key: string]: string } {
    return {
      corpRefundAmount: 'corp_refund_Amount',
      flightOrderRefundTicketList: 'flight_order_refund_ticket_list',
      flightPassengerFee: 'flight_passenger_fee',
      flightRefundSegmentList: 'flight_refund_segment_list',
      passengerList: 'passenger_list',
      personRefundAmount: 'person_refund_Amount',
      refundApplyId: 'refund_apply_id',
      refundHandFee: 'refund_hand_fee',
      refundOrderStatus: 'refund_order_status',
      refundServiceFee: 'refund_service_fee',
      refundTotalAmount: 'refund_total_Amount',
      relateModifyApplyId: 'relate_modify_apply_id',
      relateRefundApplyId: 'relate_refund_apply_id',
      repeatRefund: 'repeat_refund',
      submitRefundTime: 'submit_refund_time',
      voluntary: 'voluntary',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpRefundAmount: 'number',
      flightOrderRefundTicketList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketList },
      flightPassengerFee: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightPassengerFee },
      flightRefundSegmentList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderListFlightRefundSegmentList },
      passengerList: { 'type': 'array', 'itemType': 'string' },
      personRefundAmount: 'number',
      refundApplyId: 'number',
      refundHandFee: 'number',
      refundOrderStatus: 'number',
      refundServiceFee: 'number',
      refundTotalAmount: 'number',
      relateModifyApplyId: { 'type': 'array', 'itemType': 'number' },
      relateRefundApplyId: 'number',
      repeatRefund: 'boolean',
      submitRefundTime: 'string',
      voluntary: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderBookerInfo extends $tea.Model {
  /**
   * @example
   * 01323
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderInsureList extends $tea.Model {
  /**
   * @example
   * 17060573244016310
   */
  insOrderId?: string;
  insPayType?: string;
  insTotalPrice?: number;
  /**
   * @example
   * 1
   */
  tradeAction?: string;
  static names(): { [key: string]: string } {
    return {
      insOrderId: 'ins_order_id',
      insPayType: 'ins_pay_type',
      insTotalPrice: 'ins_total_price',
      tradeAction: 'trade_action',
    };
  }

  static types(): { [key: string]: any } {
    return {
      insOrderId: 'string',
      insPayType: 'string',
      insTotalPrice: 'number',
      tradeAction: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketListCabinClass extends $tea.Model {
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * MF8765
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketList extends $tea.Model {
  cabinClass?: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketListCabinClass[];
  tax?: number;
  /**
   * @example
   * 018-6605785754
   */
  ticketNo?: string;
  ticketPrice?: number;
  /**
   * @example
   * 01323
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      tax: 'tax',
      ticketNo: 'ticket_no',
      ticketPrice: 'ticket_price',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketListCabinClass },
      tax: 'number',
      ticketNo: 'string',
      ticketPrice: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightSegmentList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * HKG
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  /**
   * @example
   * T2
   */
  arrTerminal?: string;
  /**
   * @example
   * 2024-10-25 15:26:00
   */
  arrTime?: string;
  /**
   * @example
   * CA
   */
  carrierAirlineCode?: string;
  carrierAirlineName?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2024-10-24 15:26:00
   */
  depTime?: string;
  /**
   * @example
   * MU5925
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  share?: boolean;
  /**
   * @example
   * KIX
   */
  stopAptCode?: string;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  stopArrTime?: string;
  stopCity?: string;
  /**
   * @example
   * OSA
   */
  stopCityCode?: string;
  /**
   * @example
   * 2024-10-27 11:26:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineName: 'carrier_airline_name',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      share: 'share',
      stopAptCode: 'stop_apt_code',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopCityCode: 'stop_city_code',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      carrierAirlineCode: 'string',
      carrierAirlineName: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      share: 'boolean',
      stopAptCode: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopCityCode: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderPassengerList extends $tea.Model {
  /**
   * @example
   * 0111
   */
  costCenterId?: string;
  costCenterName?: string;
  /**
   * @example
   * 1002
   */
  departmentId?: string;
  departmentName?: string;
  /**
   * @example
   * 01112
   */
  invoiceId?: string;
  invoiceTitle?: string;
  /**
   * @example
   * 100757
   */
  jobNo?: string;
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 1111
   */
  projectCode?: string;
  projectTitle?: string;
  /**
   * @example
   * 01323
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      departmentId: 'department_id',
      departmentName: 'department_name',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      jobNo: 'job_no',
      passengerType: 'passenger_type',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterId: 'string',
      costCenterName: 'string',
      departmentId: 'string',
      departmentName: 'string',
      invoiceId: 'string',
      invoiceTitle: 'string',
      jobNo: 'string',
      passengerType: 'number',
      projectCode: 'string',
      projectTitle: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrder extends $tea.Model {
  /**
   * @example
   * 82587500
   */
  applyId?: number;
  /**
   * @example
   * 0
   */
  bookType?: number;
  bookerInfo?: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderBookerInfo;
  corpPayPrice?: number;
  /**
   * @example
   * 123
   */
  exceedApplyId?: string;
  flightOrderInsureList?: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderInsureList[];
  flightOrderTicketList?: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketList[];
  flightSegmentList?: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightSegmentList[];
  mixPay?: boolean;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  orderCreateTime?: string;
  /**
   * @example
   * 1003038200110661039
   */
  orderId?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  orderPayTime?: string;
  orderReservePrice?: number;
  /**
   * @example
   * 5
   */
  orderStatus?: number;
  orderStatusDesc?: string;
  /**
   * @example
   * 1
   */
  orderType?: number;
  passengerList?: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderPassengerList[];
  /**
   * @example
   * 2
   */
  payType?: number;
  personPayPrice?: number;
  serviceFee?: number;
  /**
   * @example
   * business_trip_api_000001
   */
  thirdPartApplyId?: string;
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      bookType: 'book_type',
      bookerInfo: 'booker_info',
      corpPayPrice: 'corp_pay_price',
      exceedApplyId: 'exceed_apply_id',
      flightOrderInsureList: 'flight_order_insure_list',
      flightOrderTicketList: 'flight_order_ticket_list',
      flightSegmentList: 'flight_segment_list',
      mixPay: 'mix_pay',
      orderCreateTime: 'order_create_time',
      orderId: 'order_id',
      orderPayTime: 'order_pay_time',
      orderReservePrice: 'order_reserve_price',
      orderStatus: 'order_status',
      orderStatusDesc: 'order_status_desc',
      orderType: 'order_type',
      passengerList: 'passenger_list',
      payType: 'pay_type',
      personPayPrice: 'person_pay_price',
      serviceFee: 'service_fee',
      thirdPartApplyId: 'third_part_apply_id',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      bookType: 'number',
      bookerInfo: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderBookerInfo,
      corpPayPrice: 'number',
      exceedApplyId: 'string',
      flightOrderInsureList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderInsureList },
      flightOrderTicketList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketList },
      flightSegmentList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderFlightSegmentList },
      mixPay: 'boolean',
      orderCreateTime: 'string',
      orderId: 'string',
      orderPayTime: 'string',
      orderReservePrice: 'number',
      orderStatus: 'number',
      orderStatusDesc: 'string',
      orderType: 'number',
      passengerList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrderPassengerList },
      payType: 'number',
      personPayPrice: 'number',
      serviceFee: 'number',
      thirdPartApplyId: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderDetailQueryResponseBodyModule extends $tea.Model {
  flightModifyOrderList?: IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderList[];
  flightRefundOrderList?: IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderList[];
  flightSaleOrder?: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrder;
  static names(): { [key: string]: string } {
    return {
      flightModifyOrderList: 'flight_modify_order_list',
      flightRefundOrderList: 'flight_refund_order_list',
      flightSaleOrder: 'flight_sale_order',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightModifyOrderList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightModifyOrderList },
      flightRefundOrderList: { 'type': 'array', 'itemType': IFlightOrderDetailQueryResponseBodyModuleFlightRefundOrderList },
      flightSaleOrder: IFlightOrderDetailQueryResponseBodyModuleFlightSaleOrder,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightModifySegmentList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * HGH
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  /**
   * @example
   * T2
   */
  arrTerminal?: string;
  /**
   * @example
   * 2024-10-28 14:26:00
   */
  arrTime?: string;
  /**
   * @example
   * CA
   */
  carrierAirlineCode?: string;
  carrierAirlineName?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2024-10-25 12:25:00
   */
  depTime?: string;
  /**
   * @example
   * MU7384
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  share?: boolean;
  /**
   * @example
   * KIX
   */
  stopAptCode?: string;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  stopArrTime?: string;
  stopCity?: string;
  /**
   * @example
   * OSA
   */
  stopCityCode?: string;
  /**
   * @example
   * 2024-10-27 11:26:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineName: 'carrier_airline_name',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      share: 'share',
      stopAptCode: 'stop_apt_code',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopCityCode: 'stop_city_code',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      carrierAirlineCode: 'string',
      carrierAirlineName: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      share: 'boolean',
      stopAptCode: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopCityCode: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketListCabinClass extends $tea.Model {
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * MU5236
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketList extends $tea.Model {
  cabinClass?: IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketListCabinClass[];
  /**
   * @example
   * MU5236
   */
  flightNo?: string;
  /**
   * @example
   * 781-6605714721
   */
  ticketNo?: string;
  /**
   * @example
   * 01332
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
      ticketNo: 'ticket_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketListCabinClass },
      flightNo: 'string',
      ticketNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListPassengerFee extends $tea.Model {
  modifyHandFee?: number;
  modifyUpgradeFee?: number;
  taxGap?: number;
  /**
   * @example
   * 01332
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      modifyHandFee: 'modify_hand_fee',
      modifyUpgradeFee: 'modify_upgrade_fee',
      taxGap: 'tax_gap',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      modifyHandFee: 'number',
      modifyUpgradeFee: 'number',
      taxGap: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightModifyOrderList extends $tea.Model {
  corpPayPrice?: number;
  flightModifySegmentList?: IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightModifySegmentList[];
  flightOrderModifyTicketList?: IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketList[];
  /**
   * @example
   * 1005200138736000
   */
  modifyApplyId?: number;
  passengerFee?: IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListPassengerFee[];
  passengerList?: string[];
  personPayPrice?: number;
  /**
   * @example
   * 1005200138736028
   */
  relateModifyApplyId?: number;
  serviceFee?: number;
  totalFee?: number;
  static names(): { [key: string]: string } {
    return {
      corpPayPrice: 'corp_pay_price',
      flightModifySegmentList: 'flight_modify_segment_list',
      flightOrderModifyTicketList: 'flight_order_modify_ticket_list',
      modifyApplyId: 'modify_apply_id',
      passengerFee: 'passenger_fee',
      passengerList: 'passenger_list',
      personPayPrice: 'person_pay_price',
      relateModifyApplyId: 'relate_modify_apply_id',
      serviceFee: 'service_fee',
      totalFee: 'total_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpPayPrice: 'number',
      flightModifySegmentList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightModifySegmentList },
      flightOrderModifyTicketList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListFlightOrderModifyTicketList },
      modifyApplyId: 'number',
      passengerFee: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightModifyOrderListPassengerFee },
      passengerList: { 'type': 'array', 'itemType': 'string' },
      personPayPrice: 'number',
      relateModifyApplyId: 'number',
      serviceFee: 'number',
      totalFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketListCabinClass extends $tea.Model {
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * BK3162
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketList extends $tea.Model {
  cabinClass?: IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketListCabinClass[];
  /**
   * @example
   * BK3162
   */
  flightNo?: string;
  /**
   * @example
   * 999-6605133193
   */
  ticketNo?: string;
  /**
   * @example
   * 01332
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
      ticketNo: 'ticket_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketListCabinClass },
      flightNo: 'string',
      ticketNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightRefundSegmentList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * HKG
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  /**
   * @example
   * T1
   */
  arrTerminal?: string;
  /**
   * @example
   * 2024-10-28 14:26:00
   */
  arrTime?: string;
  /**
   * @example
   * CA
   */
  carrierAirlineCode?: string;
  carrierAirlineName?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2024-10-25 11:24:00
   */
  depTime?: string;
  /**
   * @example
   * MU5334
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  share?: boolean;
  /**
   * @example
   * KIX
   */
  stopAptCode?: string;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  stopArrTime?: string;
  stopCity?: string;
  /**
   * @example
   * OSA
   */
  stopCityCode?: string;
  /**
   * @example
   * 2024-10-27 11:26:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineName: 'carrier_airline_name',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      share: 'share',
      stopAptCode: 'stop_apt_code',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopCityCode: 'stop_city_code',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      carrierAirlineCode: 'string',
      carrierAirlineName: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      share: 'boolean',
      stopAptCode: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopCityCode: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListPassengerFee extends $tea.Model {
  noRefundModifyHandFee?: number;
  noRefundModifyUpgradeFee?: number;
  refundAmount?: number;
  refundHandFee?: number;
  refundModifyAmount?: number;
  refundModifyHandAmount?: number;
  refundModifyUpgradeAmount?: number;
  refundTaxHandFee?: number;
  /**
   * @example
   * 01332
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      noRefundModifyHandFee: 'no_refund_modify_hand_fee',
      noRefundModifyUpgradeFee: 'no_refund_modify_upgrade_fee',
      refundAmount: 'refund_amount',
      refundHandFee: 'refund_hand_fee',
      refundModifyAmount: 'refund_modify_amount',
      refundModifyHandAmount: 'refund_modify_hand_amount',
      refundModifyUpgradeAmount: 'refund_modify_upgrade_amount',
      refundTaxHandFee: 'refund_tax_hand_fee',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      noRefundModifyHandFee: 'number',
      noRefundModifyUpgradeFee: 'number',
      refundAmount: 'number',
      refundHandFee: 'number',
      refundModifyAmount: 'number',
      refundModifyHandAmount: 'number',
      refundModifyUpgradeAmount: 'number',
      refundTaxHandFee: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightRefundOrderList extends $tea.Model {
  corpRefundAmount?: number;
  flightOrderRefundTicketList?: IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketList[];
  flightRefundSegmentList?: IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightRefundSegmentList[];
  passengerFee?: IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListPassengerFee[];
  passengerInfo?: string[];
  personRefundAmount?: number;
  refundAmount?: number;
  /**
   * @example
   * 1006200138737069
   */
  refundApplyId?: number;
  refundHandFee?: number;
  serviceFee?: number;
  static names(): { [key: string]: string } {
    return {
      corpRefundAmount: 'corp_refund_Amount',
      flightOrderRefundTicketList: 'flight_order_refund_ticket_list',
      flightRefundSegmentList: 'flight_refund_segment_list',
      passengerFee: 'passenger_fee',
      passengerInfo: 'passenger_info',
      personRefundAmount: 'person_refund_Amount',
      refundAmount: 'refund_Amount',
      refundApplyId: 'refund_apply_id',
      refundHandFee: 'refund_hand_fee',
      serviceFee: 'service_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpRefundAmount: 'number',
      flightOrderRefundTicketList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightOrderRefundTicketList },
      flightRefundSegmentList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListFlightRefundSegmentList },
      passengerFee: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightRefundOrderListPassengerFee },
      passengerInfo: { 'type': 'array', 'itemType': 'string' },
      personRefundAmount: 'number',
      refundAmount: 'number',
      refundApplyId: 'number',
      refundHandFee: 'number',
      serviceFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightSaleOrderBookerInfo extends $tea.Model {
  /**
   * @example
   * 01323
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderInsureList extends $tea.Model {
  /**
   * @example
   * 17060573244016310
   */
  insOrderId?: string;
  insPayType?: string;
  insTotalPrice?: number;
  /**
   * @example
   * 1
   */
  tradeAction?: string;
  static names(): { [key: string]: string } {
    return {
      insOrderId: 'ins_order_id',
      insPayType: 'ins_pay_type',
      insTotalPrice: 'ins_total_price',
      tradeAction: 'trade_action',
    };
  }

  static types(): { [key: string]: any } {
    return {
      insOrderId: 'string',
      insPayType: 'string',
      insTotalPrice: 'number',
      tradeAction: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketListCabinClass extends $tea.Model {
  /**
   * @example
   * V
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * MF8765
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketList extends $tea.Model {
  cabinClass?: IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketListCabinClass[];
  tax?: number;
  /**
   * @example
   * 018-6605785754
   */
  ticketNo?: string;
  ticketPrice?: number;
  /**
   * @example
   * 01323
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      cabinClass: 'cabin_class',
      tax: 'tax',
      ticketNo: 'ticket_no',
      ticketPrice: 'ticket_price',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabinClass: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketListCabinClass },
      tax: 'number',
      ticketNo: 'string',
      ticketPrice: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightSegmentList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  arrApt?: string;
  /**
   * @example
   * HKG
   */
  arrAptCode?: string;
  arrCity?: string;
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  /**
   * @example
   * T2
   */
  arrTerminal?: string;
  /**
   * @example
   * 2024-10-25 15:26:00
   */
  arrTime?: string;
  /**
   * @example
   * CA
   */
  carrierAirlineCode?: string;
  carrierAirlineName?: string;
  depApt?: string;
  /**
   * @example
   * HGH
   */
  depAptCode?: string;
  depCity?: string;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2024-10-24 15:26:00
   */
  depTime?: string;
  /**
   * @example
   * MU5925
   */
  flightNo?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  share?: boolean;
  /**
   * @example
   * KIX
   */
  stopAptCode?: string;
  /**
   * @example
   * 2024-10-26 11:25:00
   */
  stopArrTime?: string;
  stopCity?: string;
  /**
   * @example
   * OSA
   */
  stopCityCode?: string;
  /**
   * @example
   * 2024-10-27 11:26:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      arrApt: 'arr_apt',
      arrAptCode: 'arr_apt_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      carrierAirlineCode: 'carrier_airline_code',
      carrierAirlineName: 'carrier_airline_name',
      depApt: 'dep_apt',
      depAptCode: 'dep_apt_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
      share: 'share',
      stopAptCode: 'stop_apt_code',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopCityCode: 'stop_city_code',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      arrApt: 'string',
      arrAptCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      carrierAirlineCode: 'string',
      carrierAirlineName: 'string',
      depApt: 'string',
      depAptCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      journeyIndex: 'number',
      segmentIndex: 'number',
      share: 'boolean',
      stopAptCode: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopCityCode: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightSaleOrderPassengerList extends $tea.Model {
  /**
   * @example
   * 0111
   */
  costCenterId?: string;
  costCenterName?: string;
  /**
   * @example
   * 1002
   */
  departmentId?: string;
  departmentName?: string;
  /**
   * @example
   * 01112
   */
  invoiceId?: string;
  invoiceTitle?: string;
  /**
   * @example
   * 100757
   */
  jobNo?: string;
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 1111
   */
  projectCode?: string;
  projectTitle?: string;
  /**
   * @example
   * 01323
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      departmentId: 'department_id',
      departmentName: 'department_name',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      jobNo: 'job_no',
      passengerType: 'passenger_type',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterId: 'string',
      costCenterName: 'string',
      departmentId: 'string',
      departmentName: 'string',
      invoiceId: 'string',
      invoiceTitle: 'string',
      jobNo: 'string',
      passengerType: 'number',
      projectCode: 'string',
      projectTitle: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModuleFlightSaleOrder extends $tea.Model {
  /**
   * @example
   * 82587500
   */
  applyId?: number;
  /**
   * @example
   * 0
   */
  bookType?: number;
  bookerInfo?: IFlightOrderListQueryResponseBodyModuleFlightSaleOrderBookerInfo;
  corpPayPrice?: number;
  /**
   * @example
   * 123
   */
  exceedApplyId?: string;
  flightOrderInsureList?: IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderInsureList[];
  flightOrderTicketList?: IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketList[];
  flightSegmentList?: IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightSegmentList[];
  mixPay?: boolean;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  orderCreateTime?: string;
  /**
   * @example
   * 1003038200110661039
   */
  orderId?: string;
  /**
   * @example
   * yyyy-MM-dd HH:mm:ss
   */
  orderPayTime?: string;
  orderReservePrice?: number;
  /**
   * @example
   * 5
   */
  orderStatus?: number;
  orderStatusDesc?: string;
  /**
   * @example
   * 1
   */
  orderType?: number;
  passengerList?: IFlightOrderListQueryResponseBodyModuleFlightSaleOrderPassengerList[];
  /**
   * @example
   * 2
   */
  payType?: number;
  personPayPrice?: number;
  serviceFee?: number;
  /**
   * @example
   * business_trip_api_000001
   */
  thirdPartApplyId?: string;
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      bookType: 'book_type',
      bookerInfo: 'booker_info',
      corpPayPrice: 'corp_pay_price',
      exceedApplyId: 'exceed_apply_id',
      flightOrderInsureList: 'flight_order_insure_list',
      flightOrderTicketList: 'flight_order_ticket_list',
      flightSegmentList: 'flight_segment_list',
      mixPay: 'mix_pay',
      orderCreateTime: 'order_create_time',
      orderId: 'order_id',
      orderPayTime: 'order_pay_time',
      orderReservePrice: 'order_reserve_price',
      orderStatus: 'order_status',
      orderStatusDesc: 'order_status_desc',
      orderType: 'order_type',
      passengerList: 'passenger_list',
      payType: 'pay_type',
      personPayPrice: 'person_pay_price',
      serviceFee: 'service_fee',
      thirdPartApplyId: 'third_part_apply_id',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      bookType: 'number',
      bookerInfo: IFlightOrderListQueryResponseBodyModuleFlightSaleOrderBookerInfo,
      corpPayPrice: 'number',
      exceedApplyId: 'string',
      flightOrderInsureList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderInsureList },
      flightOrderTicketList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightOrderTicketList },
      flightSegmentList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightSaleOrderFlightSegmentList },
      mixPay: 'boolean',
      orderCreateTime: 'string',
      orderId: 'string',
      orderPayTime: 'string',
      orderReservePrice: 'number',
      orderStatus: 'number',
      orderStatusDesc: 'string',
      orderType: 'number',
      passengerList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightSaleOrderPassengerList },
      payType: 'number',
      personPayPrice: 'number',
      serviceFee: 'number',
      thirdPartApplyId: 'string',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyModule extends $tea.Model {
  flightModifyOrderList?: IFlightOrderListQueryResponseBodyModuleFlightModifyOrderList[];
  flightRefundOrderList?: IFlightOrderListQueryResponseBodyModuleFlightRefundOrderList[];
  flightSaleOrder?: IFlightOrderListQueryResponseBodyModuleFlightSaleOrder;
  static names(): { [key: string]: string } {
    return {
      flightModifyOrderList: 'flight_modify_order_list',
      flightRefundOrderList: 'flight_refund_order_list',
      flightSaleOrder: 'flight_sale_order',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightModifyOrderList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightModifyOrderList },
      flightRefundOrderList: { 'type': 'array', 'itemType': IFlightOrderListQueryResponseBodyModuleFlightRefundOrderList },
      flightSaleOrder: IFlightOrderListQueryResponseBodyModuleFlightSaleOrder,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IFlightOrderListQueryResponseBodyPageInfo extends $tea.Model {
  number?: number;
  /**
   * @example
   * CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4
   */
  scrollId?: string;
  /**
   * @example
   * 100
   */
  totalNumber?: number;
  static names(): { [key: string]: string } {
    return {
      number: 'number',
      scrollId: 'scroll_id',
      totalNumber: 'total_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      number: 'number',
      scrollId: 'string',
      totalNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeFlightBillSettlementQueryResponseBodyModuleDataList extends $tea.Model {
  /**
   * @example
   * 1
   */
  advanceDay?: number;
  /**
   * @example
   * MU
   */
  airlineCorpCode?: string;
  airlineCorpName?: string;
  /**
   * @example
   * 2021123432260
   */
  alipayTradeNo?: string;
  applyArrCityCode?: string;
  applyArrCityName?: string;
  applyDepCityCode?: string;
  applyDepCityName?: string;
  /**
   * @remarks
   * 审批扩展自定义字段
   */
  applyExtendField?: string;
  /**
   * @example
   * 103189557
   */
  applyId?: string;
  /**
   * @example
   * CAN
   */
  arrAirportCode?: string;
  arrCity?: string;
  arrCityCode?: string;
  arrCountry?: string;
  arrCountryCode?: string;
  /**
   * @example
   * 2021-10-02
   */
  arrDate?: string;
  arrStation?: string;
  /**
   * @example
   * 13:30:00
   */
  arrTime?: string;
  /**
   * @example
   * 2020-12-23T20:18Z
   */
  billRecordTime?: string;
  bookMode?: string;
  /**
   * @example
   * 2021-10-01 00:17:05
   */
  bookTime?: string;
  /**
   * @example
   * al_xinuan.zsy
   */
  bookerId?: string;
  /**
   * @example
   * 70022164
   */
  bookerJobNo?: string;
  bookerName?: string;
  /**
   * @example
   * 23.9
   */
  btripCouponFee?: number;
  businessTripResult?: string;
  /**
   * @example
   * R
   */
  cabin?: string;
  cabinClass?: string;
  /**
   * @example
   * 1
   */
  capitalDirection?: string;
  cascadeDepartment?: string;
  /**
   * @example
   * 23.0
   */
  changeFee?: number;
  changeResult?: string;
  /**
   * @example
   * 460
   */
  corpPayOrderFee?: number;
  costCenter?: string;
  /**
   * @example
   * 8b7f3cd-24324-097
   */
  costCenterNumber?: string;
  /**
   * @example
   * 1
   */
  coupon?: number;
  deductibleTax?: number;
  /**
   * @example
   * KHN
   */
  depAirportCode?: string;
  depCityCode?: string;
  depCountry?: string;
  depCountryCode?: string;
  department?: string;
  /**
   * @example
   * 2345866
   */
  departmentId?: string;
  deptCity?: string;
  /**
   * @example
   * 2021-10-02
   */
  deptDate?: string;
  deptStation?: string;
  /**
   * @example
   * 12:00:00
   */
  deptTime?: string;
  /**
   * @example
   * 51%
   */
  discount?: string;
  exceedReason?: string;
  /**
   * @example
   * 20101
   */
  feeType?: string;
  /**
   * @example
   * MU9684
   */
  flightNo?: string;
  /**
   * @example
   * 4564547
   */
  index?: string;
  insOrderId?: string;
  /**
   * @example
   * 23.9
   */
  insuranceFee?: number;
  /**
   * @example
   * 15548214852
   */
  insuranceNumber?: string;
  insuranceProductName?: string;
  invoiceTitle?: string;
  /**
   * @example
   * 2021-10-01 00:17:13
   */
  mostDifferenceDeptTime?: string;
  /**
   * @example
   * 23%
   */
  mostDifferenceDiscount?: string;
  /**
   * @example
   * MU9684
   */
  mostDifferenceFlightNo?: string;
  /**
   * @example
   * 23.9
   */
  mostDifferencePrice?: number;
  mostDifferenceReason?: string;
  /**
   * @example
   * 23.9
   */
  mostPrice?: number;
  /**
   * @example
   * 23.9
   */
  negotiationCouponFee?: number;
  /**
   * @example
   * 234223423423
   */
  orderId?: string;
  /**
   * @example
   * null
   */
  orderStatusDesc?: string;
  /**
   * @example
   * 234324324423
   */
  overApplyId?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 4564547
   */
  primaryId?: number;
  /**
   * @example
   * 23423432423
   */
  projectCode?: string;
  projectName?: string;
  refundChangeCost?: number;
  /**
   * @example
   * 23.9
   */
  refundFee?: number;
  refundResult?: string;
  remark?: string;
  repeatRefund?: string;
  /**
   * @example
   * 410
   */
  sealPrice?: number;
  segmentType?: string;
  /**
   * @example
   * 23.9
   */
  serviceFee?: number;
  /**
   * @example
   * 350
   */
  settlementFee?: number;
  /**
   * @example
   * 6.11
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2021-10-08 23:39:01
   */
  settlementTime?: string;
  /**
   * @example
   * 4
   */
  settlementType?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 123123232
   */
  subOrderId?: string;
  /**
   * @example
   * 125.6
   */
  taxFee?: number;
  /**
   * @remarks
   * 税率
   * 
   * @example
   * 6%
   */
  taxRate?: string;
  thirdItineraryId?: string;
  /**
   * @example
   * 781-6586234234324
   */
  ticketId?: string;
  /**
   * @example
   * CAN-KUL-BKK
   */
  trade?: string;
  /**
   * @example
   * 54463464
   */
  travelerId?: string;
  /**
   * @example
   * 326246
   */
  travelerJobNo?: string;
  travelerName?: string;
  /**
   * @example
   * 11
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  voyageName?: string;
  static names(): { [key: string]: string } {
    return {
      advanceDay: 'advance_day',
      airlineCorpCode: 'airline_corp_code',
      airlineCorpName: 'airline_corp_name',
      alipayTradeNo: 'alipay_trade_no',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrCountry: 'arr_country',
      arrCountryCode: 'arr_country_code',
      arrDate: 'arr_date',
      arrStation: 'arr_station',
      arrTime: 'arr_time',
      billRecordTime: 'bill_record_time',
      bookMode: 'book_mode',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      btripCouponFee: 'btrip_coupon_fee',
      businessTripResult: 'business_trip_result',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      changeFee: 'change_fee',
      changeResult: 'change_result',
      corpPayOrderFee: 'corp_pay_order_fee',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      coupon: 'coupon',
      deductibleTax: 'deductible_tax',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      depCountry: 'dep_country',
      depCountryCode: 'dep_country_code',
      department: 'department',
      departmentId: 'department_id',
      deptCity: 'dept_city',
      deptDate: 'dept_date',
      deptStation: 'dept_station',
      deptTime: 'dept_time',
      discount: 'discount',
      exceedReason: 'exceed_reason',
      feeType: 'fee_type',
      flightNo: 'flight_no',
      index: 'index',
      insOrderId: 'ins_order_id',
      insuranceFee: 'insurance_fee',
      insuranceNumber: 'insurance_number',
      insuranceProductName: 'insurance_product_name',
      invoiceTitle: 'invoice_title',
      mostDifferenceDeptTime: 'most_difference_dept_time',
      mostDifferenceDiscount: 'most_difference_discount',
      mostDifferenceFlightNo: 'most_difference_flight_no',
      mostDifferencePrice: 'most_difference_price',
      mostDifferenceReason: 'most_difference_reason',
      mostPrice: 'most_price',
      negotiationCouponFee: 'negotiation_coupon_fee',
      orderId: 'order_id',
      orderStatusDesc: 'order_status_desc',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      refundChangeCost: 'refund_change_cost',
      refundFee: 'refund_fee',
      refundResult: 'refund_result',
      remark: 'remark',
      repeatRefund: 'repeat_refund',
      sealPrice: 'seal_price',
      segmentType: 'segment_type',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      status: 'status',
      subOrderId: 'sub_order_id',
      taxFee: 'tax_fee',
      taxRate: 'tax_rate',
      thirdItineraryId: 'third_itinerary_id',
      ticketId: 'ticket_id',
      trade: 'trade',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerName: 'traveler_name',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
      voyageName: 'voyage_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      advanceDay: 'number',
      airlineCorpCode: 'string',
      airlineCorpName: 'string',
      alipayTradeNo: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrCountry: 'string',
      arrCountryCode: 'string',
      arrDate: 'string',
      arrStation: 'string',
      arrTime: 'string',
      billRecordTime: 'string',
      bookMode: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      btripCouponFee: 'number',
      businessTripResult: 'string',
      cabin: 'string',
      cabinClass: 'string',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      changeFee: 'number',
      changeResult: 'string',
      corpPayOrderFee: 'number',
      costCenter: 'string',
      costCenterNumber: 'string',
      coupon: 'number',
      deductibleTax: 'number',
      depAirportCode: 'string',
      depCityCode: 'string',
      depCountry: 'string',
      depCountryCode: 'string',
      department: 'string',
      departmentId: 'string',
      deptCity: 'string',
      deptDate: 'string',
      deptStation: 'string',
      deptTime: 'string',
      discount: 'string',
      exceedReason: 'string',
      feeType: 'string',
      flightNo: 'string',
      index: 'string',
      insOrderId: 'string',
      insuranceFee: 'number',
      insuranceNumber: 'string',
      insuranceProductName: 'string',
      invoiceTitle: 'string',
      mostDifferenceDeptTime: 'string',
      mostDifferenceDiscount: 'string',
      mostDifferenceFlightNo: 'string',
      mostDifferencePrice: 'number',
      mostDifferenceReason: 'string',
      mostPrice: 'number',
      negotiationCouponFee: 'number',
      orderId: 'string',
      orderStatusDesc: 'string',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      refundChangeCost: 'number',
      refundFee: 'number',
      refundResult: 'string',
      remark: 'string',
      repeatRefund: 'string',
      sealPrice: 'number',
      segmentType: 'string',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      status: 'number',
      subOrderId: 'string',
      taxFee: 'number',
      taxRate: 'string',
      thirdItineraryId: 'string',
      ticketId: 'string',
      trade: 'string',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerName: 'string',
      voucherType: 'number',
      voucherTypeDesc: 'string',
      voyageName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeFlightBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 11
   */
  category?: number;
  /**
   * @example
   * corp1
   */
  corpId?: string;
  dataList?: IeFlightBillSettlementQueryResponseBodyModuleDataList[];
  /**
   * @example
   * 2021-10-14
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-13
   */
  periodStart?: string;
  /**
   * @example
   * 1402
   */
  totalNum?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      dataList: 'data_list',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalNum: 'total_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      dataList: { 'type': 'array', 'itemType': IeFlightBillSettlementQueryResponseBodyModuleDataList },
      periodEnd: 'string',
      periodStart: 'string',
      totalNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeHotelBillSettlementQueryResponseBodyModuleDataList extends $tea.Model {
  /**
   * @example
   * 2021123432260
   */
  alipayTradeNo?: string;
  /**
   * @example
   * AUD
   */
  amountCurrency?: string;
  /**
   * @example
   * MDG
   */
  applyArrCityCode?: string;
  applyArrCityName?: string;
  /**
   * @example
   * HRB
   */
  applyDepCityCode?: string;
  applyDepCityName?: string;
  applyExtendField?: string;
  /**
   * @example
   * 103189557
   */
  applyId?: string;
  /**
   * @example
   * 1.0
   */
  averageNights?: number;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  billRecordTime?: string;
  bookMode?: string;
  bookReason?: string;
  /**
   * @example
   * 2021-10-08 23:38:55
   */
  bookTime?: string;
  /**
   * @example
   * al_xinuan.zsy
   */
  bookerId?: string;
  /**
   * @example
   * 70022164
   */
  bookerJobNo?: string;
  bookerName?: string;
  brandGroup?: string;
  /**
   * @example
   * XXX
   */
  brandName?: string;
  /**
   * @example
   * 1345
   */
  businessExpense?: number;
  businessTripResult?: string;
  /**
   * @example
   * 1
   */
  capitalDirection?: string;
  cascadeDepartment?: string;
  /**
   * @example
   * 2021-10-14 00:00:00
   */
  checkInDate?: string;
  /**
   * @example
   * 2021-10-16 00:00:00
   */
  checkoutDate?: string;
  city?: string;
  /**
   * @example
   * 110100
   */
  cityCode?: string;
  /**
   * @example
   * 12
   */
  corpRefundFee?: number;
  /**
   * @example
   * 1000
   */
  corpTotalFee?: number;
  costCenter?: string;
  /**
   * @example
   * 8b7f3cd-24324-097
   */
  costCenterNumber?: string;
  country?: string;
  /**
   * @example
   * 1454567
   */
  countryCode?: string;
  deductibleTax?: number;
  department?: string;
  departmentId?: string;
  exceedReason?: string;
  /**
   * @example
   * 20101
   */
  feeType?: string;
  /**
   * @example
   * 10.1
   */
  fines?: number;
  /**
   * @example
   * 345
   */
  foreignBusinessExpense?: number;
  hotelName?: string;
  /**
   * @example
   * 5
   */
  hotelStar?: string;
  /**
   * @example
   * 4564547
   */
  index?: string;
  invoiceTitle?: string;
  isEarlyDeparture?: string;
  isNegotiation?: string;
  isShareStr?: string;
  /**
   * @example
   * 132143534543
   */
  mainApplyId?: string;
  /**
   * @example
   * 2
   */
  nights?: number;
  /**
   * @example
   * 110285961234324
   */
  orderId?: string;
  /**
   * @example
   * 1088.96
   */
  orderPrice?: number;
  /**
   * @example
   * null
   */
  orderStatusDesc?: string;
  orderType?: string;
  originalReserveRule?: string;
  /**
   * @example
   * 534545345
   */
  overApplyId?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 34
   */
  personRefundFee?: number;
  /**
   * @example
   * 88.96
   */
  personSettlePrice?: number;
  /**
   * @example
   * 4564547
   */
  primaryId?: number;
  /**
   * @example
   * 2345235435
   */
  projectCode?: string;
  projectName?: string;
  /**
   * @example
   * 113.02
   */
  promotionFee?: number;
  /**
   * @example
   * 1.0d
   */
  rate?: string;
  remark?: string;
  /**
   * @example
   * 1
   */
  reserveRule?: number;
  roomNo?: string;
  /**
   * @example
   * 1
   */
  roomNumber?: number;
  /**
   * @example
   * 1201.98
   */
  roomPrice?: number;
  roomType?: string;
  /**
   * @example
   * 23.9
   */
  serviceFee?: number;
  /**
   * @example
   * 350
   */
  settlementFee?: number;
  /**
   * @example
   * 6.11
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  settlementTime?: string;
  /**
   * @example
   * 4
   */
  settlementType?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 123123232
   */
  subOrderId?: string;
  /**
   * @example
   * 6%
   */
  taxRate?: string;
  /**
   * @example
   * 1321445511345
   */
  thirdInvoiceId?: string;
  /**
   * @example
   * AB0-CDE-1-F-1234567891011
   */
  thirdItineraryId?: string;
  /**
   * @example
   * 202311081011000348578
   */
  thirdPartBusinessId?: string;
  /**
   * @example
   * MGI18000230221072483
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 2
   */
  totalNights?: number;
  /**
   * @example
   * al_xinuan.zsy
   */
  travelerId?: string;
  /**
   * @example
   * 345345
   */
  travelerJobNo?: string;
  travelerMemberType?: string;
  travelerName?: string;
  /**
   * @example
   * 11
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      amountCurrency: 'amount_currency',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      averageNights: 'average_nights',
      billRecordTime: 'bill_record_time',
      bookMode: 'book_mode',
      bookReason: 'book_reason',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      brandGroup: 'brand_group',
      brandName: 'brand_name',
      businessExpense: 'business_expense',
      businessTripResult: 'business_trip_result',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      checkInDate: 'check_in_date',
      checkoutDate: 'checkout_date',
      city: 'city',
      cityCode: 'city_code',
      corpRefundFee: 'corp_refund_fee',
      corpTotalFee: 'corp_total_fee',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      country: 'country',
      countryCode: 'country_code',
      deductibleTax: 'deductible_tax',
      department: 'department',
      departmentId: 'department_id',
      exceedReason: 'exceed_reason',
      feeType: 'fee_type',
      fines: 'fines',
      foreignBusinessExpense: 'foreign_business_expense',
      hotelName: 'hotel_name',
      hotelStar: 'hotel_star',
      index: 'index',
      invoiceTitle: 'invoice_title',
      isEarlyDeparture: 'is_early_departure',
      isNegotiation: 'is_negotiation',
      isShareStr: 'is_share_str',
      mainApplyId: 'main_apply_id',
      nights: 'nights',
      orderId: 'order_id',
      orderPrice: 'order_price',
      orderStatusDesc: 'order_status_desc',
      orderType: 'order_type',
      originalReserveRule: 'original_reserve_rule',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      personRefundFee: 'person_refund_fee',
      personSettlePrice: 'person_settle_price',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      promotionFee: 'promotion_fee',
      rate: 'rate',
      remark: 'remark',
      reserveRule: 'reserve_rule',
      roomNo: 'room_no',
      roomNumber: 'room_number',
      roomPrice: 'room_price',
      roomType: 'room_type',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      status: 'status',
      subOrderId: 'sub_order_id',
      taxRate: 'tax_rate',
      thirdInvoiceId: 'third_invoice_id',
      thirdItineraryId: 'third_itinerary_id',
      thirdPartBusinessId: 'third_part_business_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      totalNights: 'total_nights',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberType: 'traveler_member_type',
      travelerName: 'traveler_name',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      amountCurrency: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      averageNights: 'number',
      billRecordTime: 'string',
      bookMode: 'string',
      bookReason: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      brandGroup: 'string',
      brandName: 'string',
      businessExpense: 'number',
      businessTripResult: 'string',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      checkInDate: 'string',
      checkoutDate: 'string',
      city: 'string',
      cityCode: 'string',
      corpRefundFee: 'number',
      corpTotalFee: 'number',
      costCenter: 'string',
      costCenterNumber: 'string',
      country: 'string',
      countryCode: 'string',
      deductibleTax: 'number',
      department: 'string',
      departmentId: 'string',
      exceedReason: 'string',
      feeType: 'string',
      fines: 'number',
      foreignBusinessExpense: 'number',
      hotelName: 'string',
      hotelStar: 'string',
      index: 'string',
      invoiceTitle: 'string',
      isEarlyDeparture: 'string',
      isNegotiation: 'string',
      isShareStr: 'string',
      mainApplyId: 'string',
      nights: 'number',
      orderId: 'string',
      orderPrice: 'number',
      orderStatusDesc: 'string',
      orderType: 'string',
      originalReserveRule: 'string',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      personRefundFee: 'number',
      personSettlePrice: 'number',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      promotionFee: 'number',
      rate: 'string',
      remark: 'string',
      reserveRule: 'number',
      roomNo: 'string',
      roomNumber: 'number',
      roomPrice: 'number',
      roomType: 'string',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      status: 'number',
      subOrderId: 'string',
      taxRate: 'string',
      thirdInvoiceId: 'string',
      thirdItineraryId: 'string',
      thirdPartBusinessId: 'string',
      thirdpartApplyId: 'string',
      totalNights: 'number',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberType: 'string',
      travelerName: 'string',
      voucherType: 'number',
      voucherTypeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IeHotelBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 12
   */
  category?: number;
  /**
   * @example
   * corp1
   */
  corpId?: string;
  dataList?: IeHotelBillSettlementQueryResponseBodyModuleDataList[];
  /**
   * @example
   * 1012039195340093034
   */
  orderId?: string;
  /**
   * @example
   * 2022-11-02
   */
  periodEnd?: string;
  /**
   * @example
   * 2022-11-01
   */
  periodStart?: string;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      dataList: 'data_list',
      orderId: 'order_id',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      dataList: { 'type': 'array', 'itemType': IeHotelBillSettlementQueryResponseBodyModuleDataList },
      orderId: 'string',
      periodEnd: 'string',
      periodStart: 'string',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails extends $tea.Model {
  /**
   * @remarks
   * 金额
   * 
   * @example
   * 75.21
   */
  amount?: string;
  /**
   * @remarks
   * 行号
   * 
   * @example
   * 0
   */
  index?: string;
  /**
   * @remarks
   * 货物或应税劳务、服务名称
   */
  itemName?: string;
  /**
   * @remarks
   * 数量
   * 
   * @example
   * 1
   */
  quantity?: string;
  /**
   * @remarks
   * 规格型号
   * 
   * @example
   * 66PT11230069
   */
  specification?: string;
  /**
   * @remarks
   * 税额
   * 
   * @example
   * 12.79
   */
  tax?: string;
  /**
   * @remarks
   * 税率
   * 
   * @example
   * 17%
   */
  taxRate?: string;
  /**
   * @remarks
   * 单位
   */
  unit?: string;
  /**
   * @remarks
   * 单价
   * 
   * @example
   * 75.21
   */
  unitPrice?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      index: 'index',
      itemName: 'item_name',
      quantity: 'quantity',
      specification: 'specification',
      tax: 'tax',
      taxRate: 'tax_rate',
      unit: 'unit',
      unitPrice: 'unit_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'string',
      index: 'string',
      itemName: 'string',
      quantity: 'string',
      specification: 'string',
      tax: 'string',
      taxRate: 'string',
      unit: 'string',
      unitPrice: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsInvoiceScanQueryResponseBodyModuleItems extends $tea.Model {
  /**
   * @example
   * 20
   */
  amountWithTax?: string;
  /**
   * @example
   * 18.87
   */
  amountWithoutTax?: string;
  /**
   * @example
   * 2022-12-01
   */
  billDate?: string;
  category?: number;
  /**
   * @remarks
   * 校验码
   * 
   * @example
   * 07122942791187744475
   */
  checkCode?: string;
  costCenter?: string;
  department?: string;
  /**
   * @remarks
   * 开票人
   */
  drawer?: string;
  /**
   * @remarks
   * 应用ID
   * 
   * @example
   * 566
   */
  id?: string;
  insuranceCompany?: string;
  /**
   * @example
   * T123343234242323232
   */
  insuranceOrderId?: string;
  insuranceType?: string;
  /**
   * @example
   * 3300111303
   */
  invoiceCode?: string;
  /**
   * @example
   * 2022-12-01
   */
  invoiceDay?: string;
  /**
   * @remarks
   * 发票明细
   */
  invoiceDetails?: InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails[];
  /**
   * @remarks
   * 发票地区
   */
  invoiceLocation?: string;
  /**
   * @example
   * 24021111
   */
  invoiceNo?: string;
  /**
   * @remarks
   * 发票抬头
   */
  invoiceTitle?: string;
  invoiceType?: number;
  /**
   * @remarks
   * 机器码
   * 
   * @example
   * 661619906841
   */
  machineCode?: string;
  ofdOssUrl?: string;
  /**
   * @example
   * 3137168772101111000
   */
  orderId?: number;
  /**
   * @example
   * https://www.testurl.com
   */
  ossUrl?: string;
  passenger?: string;
  /**
   * @remarks
   * 密码区
   * 
   * @example
   * <87*>>53>5023>-446>/4+83/5* *>5/81<75/1931>4>>
   */
  passwordArea?: string;
  project?: string;
  /**
   * @remarks
   * 购方银行信息
   */
  purchaserBankAccountInfo?: string;
  /**
   * @remarks
   * 购方联系方式
   */
  purchaserContactInfo?: string;
  purchaserName?: string;
  /**
   * @example
   * 91441111111111111S
   */
  purchaserTaxNo?: string;
  /**
   * @remarks
   * 收款人
   */
  recipient?: string;
  /**
   * @remarks
   * 备注
   */
  remarks?: string;
  /**
   * @remarks
   * 复核人
   */
  reviewer?: string;
  /**
   * @remarks
   * 销售方银行信息
   */
  sellerBankAccountInfo?: string;
  /**
   * @remarks
   * 销售方联系方式
   */
  sellerContactInfo?: string;
  sellerName?: string;
  /**
   * @example
   * 91441111111111111N
   */
  sellerTaxNo?: string;
  /**
   * @remarks
   * 校验码
   * 
   * @example
   * 4475
   */
  smartCheckCode?: string;
  /**
   * @example
   * 1.13
   */
  taxAmount?: string;
  /**
   * @example
   * 6%
   */
  taxRate?: string;
  /**
   * @remarks
   * 大写金额
   */
  totalAmountInWords?: string;
  xmlOssUrl?: string;
  static names(): { [key: string]: string } {
    return {
      amountWithTax: 'amount_with_tax',
      amountWithoutTax: 'amount_without_tax',
      billDate: 'bill_date',
      category: 'category',
      checkCode: 'check_code',
      costCenter: 'cost_center',
      department: 'department',
      drawer: 'drawer',
      id: 'id',
      insuranceCompany: 'insurance_company',
      insuranceOrderId: 'insurance_order_id',
      insuranceType: 'insurance_type',
      invoiceCode: 'invoice_code',
      invoiceDay: 'invoice_day',
      invoiceDetails: 'invoice_details',
      invoiceLocation: 'invoice_location',
      invoiceNo: 'invoice_no',
      invoiceTitle: 'invoice_title',
      invoiceType: 'invoice_type',
      machineCode: 'machine_code',
      ofdOssUrl: 'ofd_oss_url',
      orderId: 'order_id',
      ossUrl: 'oss_url',
      passenger: 'passenger',
      passwordArea: 'password_area',
      project: 'project',
      purchaserBankAccountInfo: 'purchaser_bank_account_info',
      purchaserContactInfo: 'purchaser_contact_info',
      purchaserName: 'purchaser_name',
      purchaserTaxNo: 'purchaser_tax_no',
      recipient: 'recipient',
      remarks: 'remarks',
      reviewer: 'reviewer',
      sellerBankAccountInfo: 'seller_bank_account_info',
      sellerContactInfo: 'seller_contact_info',
      sellerName: 'seller_name',
      sellerTaxNo: 'seller_tax_no',
      smartCheckCode: 'smart_check_code',
      taxAmount: 'tax_amount',
      taxRate: 'tax_rate',
      totalAmountInWords: 'total_amount_in_words',
      xmlOssUrl: 'xml_oss_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amountWithTax: 'string',
      amountWithoutTax: 'string',
      billDate: 'string',
      category: 'number',
      checkCode: 'string',
      costCenter: 'string',
      department: 'string',
      drawer: 'string',
      id: 'string',
      insuranceCompany: 'string',
      insuranceOrderId: 'string',
      insuranceType: 'string',
      invoiceCode: 'string',
      invoiceDay: 'string',
      invoiceDetails: { 'type': 'array', 'itemType': InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails },
      invoiceLocation: 'string',
      invoiceNo: 'string',
      invoiceTitle: 'string',
      invoiceType: 'number',
      machineCode: 'string',
      ofdOssUrl: 'string',
      orderId: 'number',
      ossUrl: 'string',
      passenger: 'string',
      passwordArea: 'string',
      project: 'string',
      purchaserBankAccountInfo: 'string',
      purchaserContactInfo: 'string',
      purchaserName: 'string',
      purchaserTaxNo: 'string',
      recipient: 'string',
      remarks: 'string',
      reviewer: 'string',
      sellerBankAccountInfo: 'string',
      sellerContactInfo: 'string',
      sellerName: 'string',
      sellerTaxNo: 'string',
      smartCheckCode: 'string',
      taxAmount: 'string',
      taxRate: 'string',
      totalAmountInWords: 'string',
      xmlOssUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsInvoiceScanQueryResponseBodyModule extends $tea.Model {
  items?: InsInvoiceScanQueryResponseBodyModuleItems[];
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 2
   */
  totalPage?: number;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      items: 'items',
      pageNo: 'page_no',
      pageSize: 'page_size',
      totalPage: 'total_page',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': InsInvoiceScanQueryResponseBodyModuleItems },
      pageNo: 'number',
      pageSize: 'number',
      totalPage: 'number',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderApplyResponseBodyModuleInsOrderPolicyList extends $tea.Model {
  /**
   * @example
   * 1022196500378006
   */
  outSubInsOrderId?: string;
  /**
   * @example
   * po10002300201
   */
  policyNo?: string;
  /**
   * @example
   * INIT
   */
  status?: string;
  /**
   * @example
   * 1022196500378003
   */
  subInsOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      outSubInsOrderId: 'out_sub_ins_order_id',
      policyNo: 'policy_no',
      status: 'status',
      subInsOrderId: 'sub_ins_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      outSubInsOrderId: 'string',
      policyNo: 'string',
      status: 'string',
      subInsOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderApplyResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1021000196500370003
   */
  insOrderId?: string;
  insOrderPolicyList?: InsureOrderApplyResponseBodyModuleInsOrderPolicyList[];
  static names(): { [key: string]: string } {
    return {
      insOrderId: 'ins_order_id',
      insOrderPolicyList: 'ins_order_policy_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      insOrderId: 'string',
      insOrderPolicyList: { 'type': 'array', 'itemType': InsureOrderApplyResponseBodyModuleInsOrderPolicyList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateRequestApplicant extends $tea.Model {
  /**
   * @example
   * 2000-11-01
   */
  birthday?: string;
  /**
   * @example
   * 20202109390122
   */
  btripUserId?: string;
  certName?: string;
  /**
   * @example
   * 110102200011018872
   */
  certNo?: string;
  /**
   * @example
   * 100
   */
  certType?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * 1000000
   */
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      btripUserId: 'btrip_user_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      gender: 'gender',
      phone: 'phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      btripUserId: 'string',
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      gender: 'string',
      phone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateRequestInsPersonAndSegmentListInsureSegment extends $tea.Model {
  /**
   * @example
   * YNT
   */
  arrAirportCode?: string;
  /**
   * @example
   * CKG
   */
  arrCity?: string;
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  /**
   * @example
   * 2023-10-31 13:10:00
   */
  arrTime?: string;
  /**
   * @example
   * HGH
   */
  depAirportCode?: string;
  /**
   * @example
   * HGH
   */
  depCity?: string;
  /**
   * @example
   * CAN
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-10-31 10:55:00
   */
  depTime?: string;
  /**
   * @example
   * ZH9891
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTime: 'arr_time',
      depAirportCode: 'dep_airport_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTime: 'dep_time',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTime: 'string',
      depAirportCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTime: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateRequestInsPersonAndSegmentListInsured extends $tea.Model {
  /**
   * @example
   * 2000-11-01
   */
  birthday?: string;
  /**
   * @example
   * 20202109390122
   */
  btripUserId?: string;
  certName?: string;
  /**
   * @example
   * 110102200011018872
   */
  certNo?: string;
  /**
   * @example
   * 100
   */
  certType?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * 1000000
   */
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      btripUserId: 'btrip_user_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      gender: 'gender',
      phone: 'phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      btripUserId: 'string',
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      gender: 'string',
      phone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateRequestInsPersonAndSegmentList extends $tea.Model {
  insureSegment?: InsureOrderCreateRequestInsPersonAndSegmentListInsureSegment;
  insured?: InsureOrderCreateRequestInsPersonAndSegmentListInsured;
  /**
   * @example
   * 12399992002002010
   */
  outSubInsOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      insureSegment: 'insure_segment',
      insured: 'insured',
      outSubInsOrderId: 'out_sub_ins_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      insureSegment: InsureOrderCreateRequestInsPersonAndSegmentListInsureSegment,
      insured: InsureOrderCreateRequestInsPersonAndSegmentListInsured,
      outSubInsOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateResponseBodyModuleInsureOrderDetailList extends $tea.Model {
  /**
   * @example
   * 1992939412431231
   */
  outSubInsOrderId?: string;
  /**
   * @example
   * 121234444
   */
  policyNo?: string;
  /**
   * @example
   * INIT
   */
  status?: string;
  /**
   * @example
   * 1022196500378001
   */
  subInsOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      outSubInsOrderId: 'out_sub_ins_order_id',
      policyNo: 'policy_no',
      status: 'status',
      subInsOrderId: 'sub_ins_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      outSubInsOrderId: 'string',
      policyNo: 'string',
      status: 'string',
      subInsOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderCreateResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  copies?: number;
  insureOrderDetailList?: InsureOrderCreateResponseBodyModuleInsureOrderDetailList[];
  /**
   * @example
   * 1021000196500370001
   */
  insureOrderId?: string;
  /**
   * @example
   * 3000
   */
  premium?: number;
  static names(): { [key: string]: string } {
    return {
      copies: 'copies',
      insureOrderDetailList: 'insure_order_detail_list',
      insureOrderId: 'insure_order_id',
      premium: 'premium',
    };
  }

  static types(): { [key: string]: any } {
    return {
      copies: 'number',
      insureOrderDetailList: { 'type': 'array', 'itemType': InsureOrderCreateResponseBodyModuleInsureOrderDetailList },
      insureOrderId: 'string',
      premium: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailResponseBodyModuleApplicant extends $tea.Model {
  certName?: string;
  /**
   * @example
   * 3300000000000
   */
  certNo?: string;
  /**
   * @example
   * 100
   */
  certType?: string;
  /**
   * @example
   * 13000000000
   */
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      phone: 'phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      phone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsureSegment extends $tea.Model {
  /**
   * @example
   * TYN
   */
  arrAirportCode?: string;
  /**
   * @example
   * HYN
   */
  arrCity?: string;
  /**
   * @example
   * SYX
   */
  arrCityCode?: string;
  /**
   * @example
   * 2023-10-11 11:30:00
   */
  arrTime?: string;
  /**
   * @example
   * TYN
   */
  depAirportCode?: string;
  /**
   * @example
   * CTU
   */
  depCity?: string;
  /**
   * @example
   * LXA
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-10-11 11:30:00
   */
  depTime?: string;
  /**
   * @example
   * CZ3501
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTime: 'arr_time',
      depAirportCode: 'dep_airport_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTime: 'dep_time',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTime: 'string',
      depAirportCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTime: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsured extends $tea.Model {
  /**
   * @example
   * 1983-11-25
   */
  birthday?: string;
  /**
   * @example
   * 100001
   */
  btripUserId?: string;
  certName?: string;
  /**
   * @example
   * 30000000000
   */
  certNo?: string;
  /**
   * @example
   * 100
   */
  certType?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * 130000000
   */
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      btripUserId: 'btrip_user_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      gender: 'gender',
      phone: 'phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      btripUserId: 'string',
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      gender: 'string',
      phone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailResponseBodyModuleInsureOrderDetailList extends $tea.Model {
  /**
   * @example
   * 2023-10-12 10:00:00
   */
  effectiveEndTime?: string;
  /**
   * @example
   * 2023-10-11 10:00:00
   */
  effectiveStartTime?: string;
  insureSegment?: InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsureSegment;
  /**
   * @example
   * 2023-10-11 11:30:00
   */
  insureTime?: string;
  insured?: InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsured;
  /**
   * @example
   * 1021000196440356922
   */
  outSubInsOrderId?: string;
  /**
   * @example
   * 22222222222
   */
  policyNo?: string;
  /**
   * @example
   * 30
   */
  price?: number;
  productName?: string;
  /**
   * @example
   * 008801.accident.flight.104000
   */
  productNo?: string;
  /**
   * @example
   * CLOSED
   */
  status?: string;
  /**
   * @example
   * 1021000196440356901
   */
  subInsOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      effectiveEndTime: 'effective_end_time',
      effectiveStartTime: 'effective_start_time',
      insureSegment: 'insure_segment',
      insureTime: 'insure_time',
      insured: 'insured',
      outSubInsOrderId: 'out_sub_ins_order_id',
      policyNo: 'policy_no',
      price: 'price',
      productName: 'product_name',
      productNo: 'product_no',
      status: 'status',
      subInsOrderId: 'sub_ins_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      effectiveEndTime: 'string',
      effectiveStartTime: 'string',
      insureSegment: InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsureSegment,
      insureTime: 'string',
      insured: InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsured,
      outSubInsOrderId: 'string',
      policyNo: 'string',
      price: 'number',
      productName: 'string',
      productNo: 'string',
      status: 'string',
      subInsOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderDetailResponseBodyModule extends $tea.Model {
  applicant?: InsureOrderDetailResponseBodyModuleApplicant;
  /**
   * @example
   * 1021000196440356901
   */
  insOrderId?: string;
  insureOrderDetailList?: InsureOrderDetailResponseBodyModuleInsureOrderDetailList[];
  /**
   * @example
   * CLOSED
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      applicant: 'applicant',
      insOrderId: 'ins_order_id',
      insureOrderDetailList: 'insure_order_detail_list',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicant: InsureOrderDetailResponseBodyModuleApplicant,
      insOrderId: 'string',
      insureOrderDetailList: { 'type': 'array', 'itemType': InsureOrderDetailResponseBodyModuleInsureOrderDetailList },
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderRefundResponseBodyModuleInsRefundList extends $tea.Model {
  /**
   * @example
   * po102000399221
   */
  policyRefundNo?: string;
  /**
   * @example
   * REFUND_SUCCESS
   */
  refundStatus?: string;
  /**
   * @example
   * 1230012499921
   */
  subInsOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      policyRefundNo: 'policy_refund_no',
      refundStatus: 'refund_status',
      subInsOrderId: 'sub_ins_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyRefundNo: 'string',
      refundStatus: 'string',
      subInsOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureOrderRefundResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 118526587
   */
  applyId?: string;
  /**
   * @example
   * 1423041410342678003
   */
  insOrderId?: string;
  insRefundList?: InsureOrderRefundResponseBodyModuleInsRefundList[];
  /**
   * @example
   * 1423041410342678022
   */
  outApplyId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      insOrderId: 'ins_order_id',
      insRefundList: 'ins_refund_list',
      outApplyId: 'out_apply_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      insOrderId: 'string',
      insRefundList: { 'type': 'array', 'itemType': InsureOrderRefundResponseBodyModuleInsRefundList },
      outApplyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponseBodyModuleInsureOrderApplicant extends $tea.Model {
  certName?: string;
  /**
   * @example
   * 300000000000000001
   */
  certNo?: string;
  /**
   * @example
   * 102
   */
  certType?: string;
  /**
   * @example
   * 10000000
   */
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      phone: 'phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      phone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponseBodyModuleInsureOrder extends $tea.Model {
  applicant?: InsureRefundDetailResponseBodyModuleInsureOrderApplicant;
  /**
   * @example
   * 5142701029379
   */
  bizOrderId?: string;
  /**
   * @example
   * 1
   */
  bizType?: number;
  /**
   * @example
   * 2023-04-11T21:21Z
   */
  closeTime?: string;
  /**
   * @example
   * 100000000001
   */
  insOrderId?: string;
  /**
   * @example
   * 200300333333
   */
  outInsOrderId?: string;
  /**
   * @example
   * 2023-04-11T21:21Z
   */
  payTime?: string;
  /**
   * @example
   * 83000
   */
  price?: number;
  /**
   * @example
   * 4
   */
  settleType?: number;
  /**
   * @example
   * PAID
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      applicant: 'applicant',
      bizOrderId: 'biz_order_id',
      bizType: 'biz_type',
      closeTime: 'close_time',
      insOrderId: 'ins_order_id',
      outInsOrderId: 'out_ins_order_id',
      payTime: 'pay_time',
      price: 'price',
      settleType: 'settle_type',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicant: InsureRefundDetailResponseBodyModuleInsureOrderApplicant,
      bizOrderId: 'string',
      bizType: 'number',
      closeTime: 'string',
      insOrderId: 'string',
      outInsOrderId: 'string',
      payTime: 'string',
      price: 'number',
      settleType: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponseBodyModuleSubOrderRefundListInsureSegment extends $tea.Model {
  /**
   * @example
   * WHA
   */
  arrAirportCode?: string;
  arrCity?: string;
  /**
   * @example
   * YTY
   */
  arrCityCode?: string;
  /**
   * @example
   * 2023-05-27 23:00:00
   */
  arrTime?: string;
  /**
   * @example
   * NGB
   */
  depAirportCode?: string;
  depCity?: string;
  /**
   * @example
   * NGB
   */
  depCityCode?: string;
  /**
   * @example
   * 2023-05-27 20:30:00
   */
  depTime?: string;
  /**
   * @example
   * CZ3501
   */
  flightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTime: 'arr_time',
      depAirportCode: 'dep_airport_code',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTime: 'dep_time',
      flightNo: 'flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTime: 'string',
      depAirportCode: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTime: 'string',
      flightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponseBodyModuleSubOrderRefundListInsured extends $tea.Model {
  /**
   * @example
   * 1996-07-25
   */
  birthday?: string;
  /**
   * @example
   * 10000001
   */
  btripUserId?: string;
  certName?: string;
  /**
   * @example
   * 300000000000000000
   */
  certNo?: string;
  /**
   * @example
   * 102
   */
  certType?: string;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * 1000000
   */
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      btripUserId: 'btrip_user_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      gender: 'gender',
      phone: 'phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      btripUserId: 'string',
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      gender: 'string',
      phone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponseBodyModuleSubOrderRefundList extends $tea.Model {
  /**
   * @example
   * 2023-04-17T20:25Z
   */
  effectiveEndTime?: string;
  /**
   * @example
   * 2023-04-17T20:25Z
   */
  effectiveStartTime?: string;
  insureSegment?: InsureRefundDetailResponseBodyModuleSubOrderRefundListInsureSegment;
  /**
   * @example
   * 2023-04-17T20:07Z
   */
  insureTime?: string;
  insured?: InsureRefundDetailResponseBodyModuleSubOrderRefundListInsured;
  /**
   * @example
   * OUT123333444
   */
  outSubInsOrderId?: string;
  /**
   * @example
   * T230411000000140183629
   */
  policyNo?: string;
  /**
   * @example
   * 1024194640018002
   */
  policyRefundNo?: string;
  /**
   * @example
   * 73000
   */
  price?: number;
  productName?: string;
  /**
   * @example
   * 008801.accident.flight.104000
   */
  productNo?: string;
  /**
   * @example
   * REFUND_SUCCESS
   */
  refundStatus?: string;
  /**
   * @example
   * 2023-04-17T20:25Z
   */
  refundTime?: string;
  /**
   * @example
   * REFUND_SUCCESS
   */
  status?: string;
  /**
   * @example
   * s1231231344
   */
  subInsOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      effectiveEndTime: 'effective_end_time',
      effectiveStartTime: 'effective_start_time',
      insureSegment: 'insure_segment',
      insureTime: 'insure_time',
      insured: 'insured',
      outSubInsOrderId: 'out_sub_ins_order_id',
      policyNo: 'policy_no',
      policyRefundNo: 'policy_refund_no',
      price: 'price',
      productName: 'product_name',
      productNo: 'product_no',
      refundStatus: 'refund_status',
      refundTime: 'refund_time',
      status: 'status',
      subInsOrderId: 'sub_ins_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      effectiveEndTime: 'string',
      effectiveStartTime: 'string',
      insureSegment: InsureRefundDetailResponseBodyModuleSubOrderRefundListInsureSegment,
      insureTime: 'string',
      insured: InsureRefundDetailResponseBodyModuleSubOrderRefundListInsured,
      outSubInsOrderId: 'string',
      policyNo: 'string',
      policyRefundNo: 'string',
      price: 'number',
      productName: 'string',
      productNo: 'string',
      refundStatus: 'string',
      refundTime: 'string',
      status: 'string',
      subInsOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InsureRefundDetailResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1423050918202760437
   */
  applyId?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-04T16:13Z
   */
  gmtModified?: string;
  /**
   * @example
   * 100000000001
   */
  insOrderId?: string;
  insureOrder?: InsureRefundDetailResponseBodyModuleInsureOrder;
  /**
   * @example
   * 23102301010
   */
  outApplyId?: string;
  subOrderRefundList?: InsureRefundDetailResponseBodyModuleSubOrderRefundList[];
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      insOrderId: 'ins_order_id',
      insureOrder: 'insure_order',
      outApplyId: 'out_apply_id',
      subOrderRefundList: 'sub_order_refund_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      insOrderId: 'string',
      insureOrder: InsureRefundDetailResponseBodyModuleInsureOrder,
      outApplyId: 'string',
      subOrderRefundList: { 'type': 'array', 'itemType': InsureRefundDetailResponseBodyModuleSubOrderRefundList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderRequestContactInfo extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * XXX@aliyun.com
   */
  contactEmail?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  contactName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 13812341234
   */
  contactPhone?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * true
   */
  sendMsgToPassenger?: boolean;
  static names(): { [key: string]: string } {
    return {
      contactEmail: 'contact_email',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      sendMsgToPassenger: 'send_msg_to_passenger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactEmail: 'string',
      contactName: 'string',
      contactPhone: 'string',
      sendMsgToPassenger: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderRequestCostCenter extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  costCenterName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 312434
   */
  costCenterNumber?: string;
  static names(): { [key: string]: string } {
    return {
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterName: 'string',
      costCenterNumber: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderRequestPassengerListCertInfo extends $tea.Model {
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * H123456
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  certType?: number;
  /**
   * @example
   * 2030-01-01
   */
  certValidDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ZHANG/SAN
   */
  name?: string;
  static names(): { [key: string]: string } {
    return {
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      certValidDate: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderRequestPassengerListSubsidiaryCertInfoList extends $tea.Model {
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * H123456
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  certType?: number;
  /**
   * @example
   * 2030-01-01
   */
  certValidDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ZHANG/SAN
   */
  name?: string;
  static names(): { [key: string]: string } {
    return {
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      certValidDate: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderRequestPassengerList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2020-01-01
   */
  birthday?: string;
  /**
   * @example
   * 100/12131231
   */
  cascadeDeptMask?: string;
  cascadeDeptName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  certInfo?: IntlFlightCreateOrderRequestPassengerListCertInfo;
  costCenterName?: string;
  /**
   * @example
   * 312434
   */
  costCenterNumber?: string;
  /**
   * @example
   * 12131231
   */
  deptId?: string;
  deptName?: string;
  /**
   * @example
   * 0
   */
  gender?: number;
  /**
   * @example
   * 10001313
   */
  invoiceId?: string;
  invoiceTitle?: string;
  /**
   * @example
   * ZNW0525
   */
  jobNo?: string;
  /**
   * @example
   * 086
   */
  mobileCountryCode?: string;
  nationality?: string;
  /**
   * @example
   * CN
   */
  nationalityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 18012341234
   */
  phone?: string;
  /**
   * @example
   * 10123143
   */
  projectCode?: string;
  projectTitle?: string;
  subsidiaryCertInfoList?: IntlFlightCreateOrderRequestPassengerListSubsidiaryCertInfoList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 13123123212
   */
  userId?: string;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      cascadeDeptMask: 'cascade_dept_mask',
      cascadeDeptName: 'cascade_dept_name',
      certInfo: 'cert_info',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      deptId: 'dept_id',
      deptName: 'dept_name',
      gender: 'gender',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      jobNo: 'job_no',
      mobileCountryCode: 'mobile_country_code',
      nationality: 'nationality',
      nationalityCode: 'nationality_code',
      passengerType: 'passenger_type',
      phone: 'phone',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      subsidiaryCertInfoList: 'subsidiary_cert_info_list',
      userId: 'user_id',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      cascadeDeptMask: 'string',
      cascadeDeptName: 'string',
      certInfo: IntlFlightCreateOrderRequestPassengerListCertInfo,
      costCenterName: 'string',
      costCenterNumber: 'string',
      deptId: 'string',
      deptName: 'string',
      gender: 'number',
      invoiceId: 'string',
      invoiceTitle: 'string',
      jobNo: 'string',
      mobileCountryCode: 'string',
      nationality: 'string',
      nationalityCode: 'string',
      passengerType: 'number',
      phone: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      subsidiaryCertInfoList: { 'type': 'array', 'itemType': IntlFlightCreateOrderRequestPassengerListSubsidiaryCertInfoList },
      userId: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightCreateOrderResponseBodyModule extends $tea.Model {
  /**
   * @example
   * deb6372db8194f1c94c23bc4fadc508d
   */
  asyncCreateOrderKey?: string;
  /**
   * @example
   * 2023-08-10 17:42:32
   */
  latestPayTime?: string;
  /**
   * @example
   * 1003038197806523003
   */
  orderId?: number;
  /**
   * @example
   * F11378244642107293696
   */
  outOrderId?: string;
  /**
   * @example
   * 0
   */
  payStatus?: number;
  /**
   * @example
   * -1
   */
  status?: number;
  /**
   * @example
   * 22300
   */
  totalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      asyncCreateOrderKey: 'async_create_order_key',
      latestPayTime: 'latest_pay_time',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      payStatus: 'pay_status',
      status: 'status',
      totalPrice: 'total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncCreateOrderKey: 'string',
      latestPayTime: 'string',
      orderId: 'number',
      outOrderId: 'string',
      payStatus: 'number',
      status: 'number',
      totalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckRequestPassengerListCertInfo extends $tea.Model {
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * H123456
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  certType?: number;
  /**
   * @example
   * 2033-01-09
   */
  certValidDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ZHANG/SAN
   */
  name?: string;
  static names(): { [key: string]: string } {
    return {
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      certValidDate: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckRequestPassengerListSubsidiaryCertInfoList extends $tea.Model {
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @example
   * H123456
   */
  certNo?: string;
  /**
   * @example
   * 1
   */
  certType?: number;
  /**
   * @example
   * 2033-01-09
   */
  certValidDate?: string;
  /**
   * @example
   * ZHANG/SAN
   */
  name?: string;
  static names(): { [key: string]: string } {
    return {
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      certValidDate: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckRequestPassengerList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2020-01-01
   */
  birthday?: string;
  /**
   * @example
   * 100/1001
   */
  cascadeDeptMask?: string;
  cascadeDeptName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  certInfo?: IntlFlightInventoryPriceCheckRequestPassengerListCertInfo;
  costCenterName?: string;
  /**
   * @example
   * 100231
   */
  costCenterNumber?: string;
  /**
   * @example
   * 1001
   */
  deptId?: string;
  deptName?: string;
  /**
   * @example
   * 0
   */
  gender?: number;
  /**
   * @example
   * 10001313
   */
  invoiceId?: string;
  invoiceTitle?: string;
  /**
   * @example
   * L5000924
   */
  jobNo?: string;
  /**
   * @example
   * 086
   */
  mobileCountryCode?: string;
  nationality?: string;
  /**
   * @example
   * CN
   */
  nationalityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 18012341234
   */
  phone?: string;
  /**
   * @example
   * 10123143
   */
  projectCode?: string;
  projectTitle?: string;
  subsidiaryCertInfoList?: IntlFlightInventoryPriceCheckRequestPassengerListSubsidiaryCertInfoList[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10001
   */
  userId?: string;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      cascadeDeptMask: 'cascade_dept_mask',
      cascadeDeptName: 'cascade_dept_name',
      certInfo: 'cert_info',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      deptId: 'dept_id',
      deptName: 'dept_name',
      gender: 'gender',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      jobNo: 'job_no',
      mobileCountryCode: 'mobile_country_code',
      nationality: 'nationality',
      nationalityCode: 'nationality_code',
      passengerType: 'passenger_type',
      phone: 'phone',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      subsidiaryCertInfoList: 'subsidiary_cert_info_list',
      userId: 'user_id',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      cascadeDeptMask: 'string',
      cascadeDeptName: 'string',
      certInfo: IntlFlightInventoryPriceCheckRequestPassengerListCertInfo,
      costCenterName: 'string',
      costCenterNumber: 'string',
      deptId: 'string',
      deptName: 'string',
      gender: 'number',
      invoiceId: 'string',
      invoiceTitle: 'string',
      jobNo: 'string',
      mobileCountryCode: 'string',
      nationality: 'string',
      nationalityCode: 'string',
      passengerType: 'number',
      phone: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      subsidiaryCertInfoList: { 'type': 'array', 'itemType': IntlFlightInventoryPriceCheckRequestPassengerListSubsidiaryCertInfoList },
      userId: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListChangedPrice extends $tea.Model {
  /**
   * @example
   * 9000
   */
  buildPrice?: number;
  /**
   * @example
   * 5000
   */
  oilPrice?: number;
  /**
   * @example
   * 12000
   */
  taxPrice?: number;
  /**
   * @example
   * 90000
   */
  ticketPrice?: number;
  static names(): { [key: string]: string } {
    return {
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      taxPrice: 'tax_price',
      ticketPrice: 'ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buildPrice: 'number',
      oilPrice: 'number',
      taxPrice: 'number',
      ticketPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListOriginalPrice extends $tea.Model {
  /**
   * @example
   * 9000
   */
  buildPrice?: number;
  /**
   * @example
   * 5000
   */
  oilPrice?: number;
  /**
   * @example
   * 12000
   */
  taxPrice?: number;
  /**
   * @example
   * 80000
   */
  ticketPrice?: number;
  static names(): { [key: string]: string } {
    return {
      buildPrice: 'build_price',
      oilPrice: 'oil_price',
      taxPrice: 'tax_price',
      ticketPrice: 'ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buildPrice: 'number',
      oilPrice: 'number',
      taxPrice: 'number',
      ticketPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoList extends $tea.Model {
  /**
   * @example
   * false
   */
  changed?: boolean;
  changedPrice?: IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListChangedPrice;
  originalPrice?: IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListOriginalPrice;
  /**
   * @example
   * 0
   */
  passengerType?: number;
  static names(): { [key: string]: string } {
    return {
      changed: 'changed',
      changedPrice: 'changed_price',
      originalPrice: 'original_price',
      passengerType: 'passenger_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changed: 'boolean',
      changedPrice: IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListChangedPrice,
      originalPrice: IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListOriginalPrice,
      passengerType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightInventoryPriceCheckResponseBodyModule extends $tea.Model {
  /**
   * @example
   * true
   */
  checkSuccess?: boolean;
  /**
   * @example
   * 0
   */
  failType?: number;
  passengerChangedPriceInfoList?: IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoList[];
  /**
   * @example
   * fcoid_deb6372db8194f1c94c23bc4fadc508d
   */
  renderKey?: string;
  static names(): { [key: string]: string } {
    return {
      checkSuccess: 'check_success',
      failType: 'fail_type',
      passengerChangedPriceInfoList: 'passenger_changed_price_info_list',
      renderKey: 'render_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkSuccess: 'boolean',
      failType: 'number',
      passengerChangedPriceInfoList: { 'type': 'array', 'itemType': IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoList },
      renderKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchRequestSearchJourneysSelectedFlights extends $tea.Model {
  /**
   * @example
   * HNY
   */
  arrAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * MEL
   */
  arrCityCode?: string;
  /**
   * @example
   * 0
   */
  cabinType?: number;
  /**
   * @example
   * SZX
   */
  depAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HKG
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-12-28 12:00:00
   */
  flightTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * KA5809
   */
  marketFlightNo?: string;
  /**
   * @example
   * CX601
   */
  operateFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCityCode: 'arr_city_code',
      cabinType: 'cabin_type',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      flightTime: 'flight_time',
      marketFlightNo: 'market_flight_no',
      operateFlightNo: 'operate_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCityCode: 'string',
      cabinType: 'number',
      depAirportCode: 'string',
      depCityCode: 'string',
      flightTime: 'string',
      marketFlightNo: 'string',
      operateFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchRequestSearchJourneys extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * MEL
   */
  arrCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HKG
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-12-28
   */
  depDate?: string;
  selectedFlights?: IntlFlightListingSearchRequestSearchJourneysSelectedFlights[];
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      selectedFlights: 'selected_flights',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      depCityCode: 'string',
      depDate: 'string',
      selectedFlights: { 'type': 'array', 'itemType': IntlFlightListingSearchRequestSearchJourneysSelectedFlights },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchRequestSearchPassengerList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10012301201
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  certType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ZHANGSAN
   */
  fullName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      certNo: 'cert_no',
      certType: 'cert_type',
      fullName: 'full_name',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNo: 'string',
      certType: 'number',
      fullName: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListBestPriceItem extends $tea.Model {
  agreementPriceCodes?: string[];
  itemType?: string;
  shoppingItemMap?: { [key: string]: ModuleFlightItemListBestPriceItemShoppingItemMapValue };
  static names(): { [key: string]: string } {
    return {
      agreementPriceCodes: 'agreement_price_codes',
      itemType: 'item_type',
      shoppingItemMap: 'shopping_item_map',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agreementPriceCodes: { 'type': 'array', 'itemType': 'string' },
      itemType: 'string',
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleFlightItemListBestPriceItemShoppingItemMapValue },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * 9H
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo extends $tea.Model {
  /**
   * @example
   * PKX
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * --
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * DR
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo extends $tea.Model {
  operatingAirlineInfo?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo;
  /**
   * @example
   * CX601
   */
  operatingFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingAirlineInfo: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo,
      operatingFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  stopAirport?: string;
  stopAirportName?: string;
  /**
   * @example
   * T3
   */
  stopArrTerm?: string;
  /**
   * @example
   * BJS
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCityCode?: string;
  /**
   * @example
   * HGH
   */
  stopCityName?: string;
  stopCityNames?: string[];
  /**
   * @example
   * T4
   */
  stopDepTerm?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  stopDepTime?: string;
  stopTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopAirportName: 'stop_airport_name',
      stopArrTerm: 'stop_arr_term',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopCityNames: 'stop_city_names',
      stopDepTerm: 'stop_dep_term',
      stopDepTime: 'stop_dep_time',
      stopTime: 'stop_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopAirportName: 'string',
      stopArrTerm: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopCityNames: { 'type': 'array', 'itemType': 'string' },
      stopDepTerm: 'string',
      stopDepTime: 'string',
      stopTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos extends $tea.Model {
  airlineInfo?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo;
  arrAirportInfo?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  baggageDesc?: string;
  depAirportInfo?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @remarks
   * duration
   * 
   * @example
   * 140
   */
  duration?: number;
  /**
   * @example
   * HO1116
   */
  flightNo?: string;
  flightShareInfo?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo;
  flightSize?: string;
  flightStopInfo?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo;
  /**
   * @example
   * 320
   */
  flightType?: string;
  manufacturer?: string;
  mealDesc?: string;
  /**
   * @example
   * 100099
   */
  miles?: number;
  /**
   * @example
   * 80.20%
   */
  onTimeRate?: string;
  /**
   * @example
   * 0
   */
  oneMore?: number;
  oneMoreShow?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * KN6728HGHPKX0725
   */
  segmentKey?: string;
  /**
   * @example
   * false
   */
  share?: boolean;
  shortFlightSize?: string;
  /**
   * @example
   * false
   */
  stop?: boolean;
  totalTime?: string;
  transferTime?: string;
  /**
   * @example
   * 150
   */
  transferTimeNumber?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      baggageDesc: 'baggage_desc',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      flightNo: 'flight_no',
      flightShareInfo: 'flight_share_info',
      flightSize: 'flight_size',
      flightStopInfo: 'flight_stop_info',
      flightType: 'flight_type',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      miles: 'miles',
      onTimeRate: 'on_time_rate',
      oneMore: 'one_more',
      oneMoreShow: 'one_more_show',
      segmentIndex: 'segment_index',
      segmentKey: 'segment_key',
      share: 'share',
      shortFlightSize: 'short_flight_size',
      stop: 'stop',
      totalTime: 'total_time',
      transferTime: 'transfer_time',
      transferTimeNumber: 'transfer_time_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo,
      arrAirportInfo: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo,
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      baggageDesc: 'string',
      depAirportInfo: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo,
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      flightNo: 'string',
      flightShareInfo: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo,
      flightSize: 'string',
      flightStopInfo: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo,
      flightType: 'string',
      manufacturer: 'string',
      mealDesc: 'string',
      miles: 'number',
      onTimeRate: 'string',
      oneMore: 'number',
      oneMoreShow: 'string',
      segmentIndex: 'number',
      segmentKey: 'string',
      share: 'boolean',
      shortFlightSize: 'string',
      stop: 'boolean',
      totalTime: 'string',
      transferTime: 'string',
      transferTimeNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfos extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @example
   * 60
   */
  duration?: number;
  flightSegmentInfos?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos[];
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  transferTime?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      flightSegmentInfos: 'flight_segment_infos',
      journeyIndex: 'journey_index',
      transferTime: 'transfer_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      flightSegmentInfos: { 'type': 'array', 'itemType': IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos },
      journeyIndex: 'number',
      transferTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModuleFlightItemList extends $tea.Model {
  bestPriceItem?: IntlFlightListingSearchResponseBodyModuleFlightItemListBestPriceItem;
  flightJourneyInfos?: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfos[];
  static names(): { [key: string]: string } {
    return {
      bestPriceItem: 'best_price_item',
      flightJourneyInfos: 'flight_journey_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bestPriceItem: IntlFlightListingSearchResponseBodyModuleFlightItemListBestPriceItem,
      flightJourneyInfos: { 'type': 'array', 'itemType': IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightListingSearchResponseBodyModule extends $tea.Model {
  flightItemList?: IntlFlightListingSearchResponseBodyModuleFlightItemList[];
  /**
   * @example
   * false
   */
  needContinue?: boolean;
  /**
   * @example
   * ASDFASDFASDFASDFASDF
   */
  queryRecordId?: string;
  /**
   * @example
   * ee229f2d-1835-4199-bfe6-fd14afe8645e
   */
  token?: string;
  static names(): { [key: string]: string } {
    return {
      flightItemList: 'flight_item_list',
      needContinue: 'need_continue',
      queryRecordId: 'query_record_id',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightItemList: { 'type': 'array', 'itemType': IntlFlightListingSearchResponseBodyModuleFlightItemList },
      needContinue: 'boolean',
      queryRecordId: 'string',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderCancelResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2023-08-10 17:45:32
   */
  cancelTime?: string;
  static names(): { [key: string]: string } {
    return {
      cancelTime: 'cancel_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleContactInfo extends $tea.Model {
  /**
   * @example
   * test@cainiao.com
   */
  contactEmail?: string;
  contactName?: string;
  /**
   * @example
   * 185006022345
   */
  contactPhone?: string;
  /**
   * @example
   * false
   */
  sendMsgToPassenger?: boolean;
  static names(): { [key: string]: string } {
    return {
      contactEmail: 'contact_email',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      sendMsgToPassenger: 'send_msg_to_passenger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactEmail: 'string',
      contactName: 'string',
      contactPhone: 'string',
      sendMsgToPassenger: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListFlightOtherInfo extends $tea.Model {
  /**
   * @example
   * 100
   */
  aircraftAge?: string;
  /**
   * @example
   * 10
   */
  avgDelayTime?: string;
  /**
   * @example
   * 32Q
   */
  equipType?: string;
  /**
   * @example
   * 20
   */
  flightCancelRate?: string;
  /**
   * @example
   * 195
   */
  flightDistance?: number;
  /**
   * @example
   * 165
   */
  flightDuration?: number;
  flightSize?: string;
  /**
   * @example
   * 70
   */
  jetBridgeRate?: string;
  manufacturer?: string;
  /**
   * @example
   * 0
   */
  meal?: number;
  mealDesc?: string;
  /**
   * @example
   * 80
   */
  onTimeRate?: string;
  /**
   * @example
   * true
   */
  wifi?: boolean;
  static names(): { [key: string]: string } {
    return {
      aircraftAge: 'aircraft_age',
      avgDelayTime: 'avg_delay_time',
      equipType: 'equip_type',
      flightCancelRate: 'flight_cancel_rate',
      flightDistance: 'flight_distance',
      flightDuration: 'flight_duration',
      flightSize: 'flight_size',
      jetBridgeRate: 'jet_bridge_rate',
      manufacturer: 'manufacturer',
      meal: 'meal',
      mealDesc: 'meal_desc',
      onTimeRate: 'on_time_rate',
      wifi: 'wifi',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aircraftAge: 'string',
      avgDelayTime: 'string',
      equipType: 'string',
      flightCancelRate: 'string',
      flightDistance: 'number',
      flightDuration: 'number',
      flightSize: 'string',
      jetBridgeRate: 'string',
      manufacturer: 'string',
      meal: 'number',
      mealDesc: 'string',
      onTimeRate: 'string',
      wifi: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListLuggageDirectInfo extends $tea.Model {
  /**
   * @example
   * 0
   */
  depCityLuggageDirect?: number;
  /**
   * @example
   * 0
   */
  stopCityLuggageDirect?: number;
  static names(): { [key: string]: string } {
    return {
      depCityLuggageDirect: 'dep_city_luggage_direct',
      stopCityLuggageDirect: 'stop_city_luggage_direct',
    };
  }

  static types(): { [key: string]: any } {
    return {
      depCityLuggageDirect: 'number',
      stopCityLuggageDirect: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListMarketingAirlineInfo extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  allianceName?: string;
  /**
   * @example
   * false
   */
  cheapAirline?: boolean;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png
   */
  iconUrl?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png
   */
  logoUrl?: string;
  shortName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      allianceName: 'alliance_name',
      cheapAirline: 'cheap_airline',
      iconUrl: 'icon_url',
      logoUrl: 'logo_url',
      shortName: 'short_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      allianceName: 'string',
      cheapAirline: 'boolean',
      iconUrl: 'string',
      logoUrl: 'string',
      shortName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListOperatingAirlineInfo extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  allianceName?: string;
  /**
   * @example
   * false
   */
  cheapAirline?: boolean;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png
   */
  iconUrl?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png
   */
  logoUrl?: string;
  shortName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      allianceName: 'alliance_name',
      cheapAirline: 'cheap_airline',
      iconUrl: 'icon_url',
      logoUrl: 'logo_url',
      shortName: 'short_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      allianceName: 'string',
      cheapAirline: 'boolean',
      iconUrl: 'string',
      logoUrl: 'string',
      shortName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListSegmentVisaRemark extends $tea.Model {
  depCityVisaRemark?: string;
  /**
   * @example
   * 0
   */
  depCityVisaType?: number;
  stopCityVisaRemarks?: string[];
  stopCityVisaTypes?: number[];
  static names(): { [key: string]: string } {
    return {
      depCityVisaRemark: 'dep_city_visa_remark',
      depCityVisaType: 'dep_city_visa_type',
      stopCityVisaRemarks: 'stop_city_visa_remarks',
      stopCityVisaTypes: 'stop_city_visa_types',
    };
  }

  static types(): { [key: string]: any } {
    return {
      depCityVisaRemark: 'string',
      depCityVisaType: 'number',
      stopCityVisaRemarks: { 'type': 'array', 'itemType': 'string' },
      stopCityVisaTypes: { 'type': 'array', 'itemType': 'number' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListStopCityList extends $tea.Model {
  /**
   * @example
   * PVG
   */
  stopAirport?: string;
  stopAirportName?: string;
  /**
   * @example
   * T1
   */
  stopArrTerminal?: string;
  /**
   * @example
   * 2024-07-06 11:10:00
   */
  stopArrTime?: string;
  /**
   * @example
   * SHA
   */
  stopCityCode?: string;
  stopCityName?: string;
  /**
   * @example
   * T1
   */
  stopDepTerminal?: string;
  /**
   * @example
   * 2024-07-06 11:10:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopAirportName: 'stop_airport_name',
      stopArrTerminal: 'stop_arr_terminal',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopDepTerminal: 'stop_dep_terminal',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopAirportName: 'string',
      stopArrTerminal: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopDepTerminal: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentList extends $tea.Model {
  /**
   * @example
   * HKG
   */
  arrAirportCode?: string;
  arrAirportName?: string;
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * T1
   */
  arrTerminal?: string;
  /**
   * @example
   * 2024-07-06 14:05:00
   */
  arrTime?: string;
  /**
   * @example
   * false
   */
  codeShare?: boolean;
  /**
   * @example
   * PVG
   */
  depAirportCode?: string;
  depAirportName?: string;
  /**
   * @example
   * SHA
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * T1
   */
  depTerminal?: string;
  /**
   * @example
   * 2024-07-06 11:10:00
   */
  depTime?: string;
  flightOtherInfo?: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListFlightOtherInfo;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  luggageDirectInfo?: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListLuggageDirectInfo;
  /**
   * @example
   * MU
   */
  marketingAirline?: string;
  marketingAirlineInfo?: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListMarketingAirlineInfo;
  /**
   * @example
   * MU507
   */
  marketingFlightNo?: string;
  /**
   * @example
   * MU
   */
  operatingAirline?: string;
  operatingAirlineInfo?: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListOperatingAirlineInfo;
  /**
   * @example
   * MU507
   */
  operatingFlightNo?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * MU507PVGHKG0706
   */
  segmentKey?: string;
  segmentVisaRemark?: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListSegmentVisaRemark;
  stopCityList?: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListStopCityList[];
  /**
   * @example
   * 0
   */
  stopQuantity?: number;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrAirportName: 'arr_airport_name',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      codeShare: 'code_share',
      depAirportCode: 'dep_airport_code',
      depAirportName: 'dep_airport_name',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightOtherInfo: 'flight_other_info',
      journeyIndex: 'journey_index',
      luggageDirectInfo: 'luggage_direct_info',
      marketingAirline: 'marketing_airline',
      marketingAirlineInfo: 'marketing_airline_info',
      marketingFlightNo: 'marketing_flight_no',
      operatingAirline: 'operating_airline',
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
      segmentIndex: 'segment_index',
      segmentKey: 'segment_key',
      segmentVisaRemark: 'segment_visa_remark',
      stopCityList: 'stop_city_list',
      stopQuantity: 'stop_quantity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrAirportName: 'string',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      codeShare: 'boolean',
      depAirportCode: 'string',
      depAirportName: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightOtherInfo: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListFlightOtherInfo,
      journeyIndex: 'number',
      luggageDirectInfo: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListLuggageDirectInfo,
      marketingAirline: 'string',
      marketingAirlineInfo: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListMarketingAirlineInfo,
      marketingFlightNo: 'string',
      operatingAirline: 'string',
      operatingAirlineInfo: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListOperatingAirlineInfo,
      operatingFlightNo: 'string',
      segmentIndex: 'number',
      segmentKey: 'string',
      segmentVisaRemark: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListSegmentVisaRemark,
      stopCityList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListStopCityList },
      stopQuantity: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleJourneyList extends $tea.Model {
  /**
   * @example
   * HKG
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * SHA
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2024-07-06
   */
  depDate?: string;
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  segmentList?: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentList[];
  /**
   * @example
   * 0
   */
  transferCount?: number;
  /**
   * @example
   * 0
   */
  transferTime?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depDate: 'dep_date',
      journeyIndex: 'journey_index',
      segmentList: 'segment_list',
      transferCount: 'transfer_count',
      transferTime: 'transfer_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      arrCityName: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depDate: 'string',
      journeyIndex: 'number',
      segmentList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentList },
      transferCount: 'number',
      transferTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleOrderItemListBaggageRule extends $tea.Model {
  baggageDigest?: string;
  baggageInfoMap?: { [key: string]: ModuleOrderItemListBaggageRuleBaggageInfoMapValue[] };
  /**
   * @example
   * true
   */
  structuredBaggage?: boolean;
  static names(): { [key: string]: string } {
    return {
      baggageDigest: 'baggage_digest',
      baggageInfoMap: 'baggage_info_map',
      structuredBaggage: 'structured_baggage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDigest: 'string',
      baggageInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleOrderItemListBaggageRuleBaggageInfoMapValue } },
      structuredBaggage: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleOrderItemListPassengerPriceList extends $tea.Model {
  /**
   * @example
   * 3.5
   */
  discount?: number;
  /**
   * @example
   * 3.5折
   */
  discountInfo?: string;
  /**
   * @example
   * 0
   */
  modifyFee?: number;
  /**
   * @example
   * 0
   */
  modifyTaxSpread?: number;
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 21300
   */
  sellPrice?: number;
  /**
   * @example
   * 19300
   */
  tax?: number;
  /**
   * @example
   * 2000
   */
  ticketPrice?: number;
  /**
   * @example
   * 0
   */
  upgradeFee?: number;
  static names(): { [key: string]: string } {
    return {
      discount: 'discount',
      discountInfo: 'discount_info',
      modifyFee: 'modify_fee',
      modifyTaxSpread: 'modify_tax_spread',
      passengerType: 'passenger_type',
      sellPrice: 'sell_price',
      tax: 'tax',
      ticketPrice: 'ticket_price',
      upgradeFee: 'upgrade_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      discount: 'number',
      discountInfo: 'string',
      modifyFee: 'number',
      modifyTaxSpread: 'number',
      passengerType: 'number',
      sellPrice: 'number',
      tax: 'number',
      ticketPrice: 'number',
      upgradeFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleOrderItemListRefundChangeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  cancelFeeInd?: boolean;
  /**
   * @example
   * false
   */
  changeFeeInd?: boolean;
  offerPenaltyInfoMap?: { [key: string]: ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue[] };
  refundChangeDigest?: string;
  /**
   * @example
   * true
   */
  structuredRefund?: boolean;
  static names(): { [key: string]: string } {
    return {
      cancelFeeInd: 'cancel_fee_ind',
      changeFeeInd: 'change_fee_ind',
      offerPenaltyInfoMap: 'offer_penalty_info_map',
      refundChangeDigest: 'refund_change_digest',
      structuredRefund: 'structured_refund',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelFeeInd: 'boolean',
      changeFeeInd: 'boolean',
      offerPenaltyInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue } },
      refundChangeDigest: 'string',
      structuredRefund: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModuleOrderItemList extends $tea.Model {
  baggageRule?: IntlFlightOrderDetailResponseBodyModuleOrderItemListBaggageRule;
  passengerPriceList?: IntlFlightOrderDetailResponseBodyModuleOrderItemListPassengerPriceList[];
  refundChangeRule?: IntlFlightOrderDetailResponseBodyModuleOrderItemListRefundChangeRule;
  segmentKeyList?: string[];
  static names(): { [key: string]: string } {
    return {
      baggageRule: 'baggage_rule',
      passengerPriceList: 'passenger_price_list',
      refundChangeRule: 'refund_change_rule',
      segmentKeyList: 'segment_key_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageRule: IntlFlightOrderDetailResponseBodyModuleOrderItemListBaggageRule,
      passengerPriceList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModuleOrderItemListPassengerPriceList },
      refundChangeRule: IntlFlightOrderDetailResponseBodyModuleOrderItemListRefundChangeRule,
      segmentKeyList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListPriceInfo extends $tea.Model {
  /**
   * @example
   * 0
   */
  modifyFee?: number;
  /**
   * @example
   * 0
   */
  modifyTaxSpread?: number;
  /**
   * @example
   * 26900
   */
  sellPrice?: number;
  /**
   * @example
   * 24900
   */
  tax?: number;
  /**
   * @example
   * 2000
   */
  ticketPrice?: number;
  /**
   * @example
   * 0
   */
  upgradeFee?: number;
  static names(): { [key: string]: string } {
    return {
      modifyFee: 'modify_fee',
      modifyTaxSpread: 'modify_tax_spread',
      sellPrice: 'sell_price',
      tax: 'tax',
      ticketPrice: 'ticket_price',
      upgradeFee: 'upgrade_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      modifyFee: 'number',
      modifyTaxSpread: 'number',
      sellPrice: 'number',
      tax: 'number',
      ticketPrice: 'number',
      upgradeFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListTicketSegmentList extends $tea.Model {
  /**
   * @example
   * K
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  /**
   * @example
   * false
   */
  modified?: boolean;
  /**
   * @example
   * OPEN FOR USE
   */
  openTicketStatus?: string;
  /**
   * @example
   * false
   */
  refunded?: boolean;
  /**
   * @example
   * MU507PVGHKG0706
   */
  segmentKey?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      modified: 'modified',
      openTicketStatus: 'open_ticket_status',
      refunded: 'refunded',
      segmentKey: 'segment_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      modified: 'boolean',
      openTicketStatus: 'string',
      refunded: 'boolean',
      segmentKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketList extends $tea.Model {
  /**
   * @example
   * 2024-03-05 00:00:00
   */
  issueTime?: string;
  priceInfo?: IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListPriceInfo;
  /**
   * @example
   * 000-1709625883
   */
  ticketNo?: string;
  ticketSegmentList?: IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListTicketSegmentList[];
  static names(): { [key: string]: string } {
    return {
      issueTime: 'issue_time',
      priceInfo: 'price_info',
      ticketNo: 'ticket_no',
      ticketSegmentList: 'ticket_segment_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      issueTime: 'string',
      priceInfo: IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListPriceInfo,
      ticketNo: 'string',
      ticketSegmentList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListTicketSegmentList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailList extends $tea.Model {
  /**
   * @example
   * 8432002
   */
  passengerId?: number;
  ticketList?: IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketList[];
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      ticketList: 'ticket_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'number',
      ticketList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModulePassengerListCertInfo extends $tea.Model {
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @example
   * H123456
   */
  certNo?: string;
  /**
   * @example
   * 1
   */
  certType?: number;
  /**
   * @example
   * 2025-09-09
   */
  certValidDate?: string;
  /**
   * @example
   * ZHANG/SAN
   */
  name?: string;
  static names(): { [key: string]: string } {
    return {
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      certValidDate: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModulePassengerListSubsidiaryCertInfoList extends $tea.Model {
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @example
   * H123456
   */
  certNo?: string;
  /**
   * @example
   * 1
   */
  certType?: number;
  /**
   * @example
   * 2025-09-09
   */
  certValidDate?: string;
  /**
   * @example
   * ZHANG/SAN
   */
  name?: string;
  static names(): { [key: string]: string } {
    return {
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      certValidDate: 'cert_valid_date',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      certValidDate: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModulePassengerList extends $tea.Model {
  /**
   * @example
   * 1996-09-13
   */
  birthday?: string;
  /**
   * @example
   * 1000
   */
  cascadeDeptMask?: string;
  cascadeDeptName?: string;
  certInfo?: IntlFlightOrderDetailResponseBodyModulePassengerListCertInfo;
  costCenterName?: string;
  /**
   * @example
   * 1009909
   */
  costCenterNumber?: string;
  /**
   * @example
   * 1001
   */
  deptId?: string;
  deptName?: string;
  /**
   * @example
   * 0
   */
  gender?: number;
  invoiceId?: string;
  invoiceTitle?: string;
  /**
   * @example
   * 1001101
   */
  jobNo?: string;
  /**
   * @example
   * 86
   */
  mobileCountryCode?: string;
  nationality?: string;
  /**
   * @example
   * CN
   */
  nationalityCode?: string;
  /**
   * @example
   * 8432002
   */
  passengerId?: number;
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 185006021321
   */
  phone?: string;
  /**
   * @example
   * testcode
   */
  projectCode?: string;
  projectTitle?: string;
  subsidiaryCertInfoList?: IntlFlightOrderDetailResponseBodyModulePassengerListSubsidiaryCertInfoList[];
  /**
   * @example
   * 12292812036903456
   */
  userId?: string;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      cascadeDeptMask: 'cascade_dept_mask',
      cascadeDeptName: 'cascade_dept_name',
      certInfo: 'cert_info',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      deptId: 'dept_id',
      deptName: 'dept_name',
      gender: 'gender',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      jobNo: 'job_no',
      mobileCountryCode: 'mobile_country_code',
      nationality: 'nationality',
      nationalityCode: 'nationality_code',
      passengerId: 'passenger_id',
      passengerType: 'passenger_type',
      phone: 'phone',
      projectCode: 'project_code',
      projectTitle: 'project_title',
      subsidiaryCertInfoList: 'subsidiary_cert_info_list',
      userId: 'user_id',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      cascadeDeptMask: 'string',
      cascadeDeptName: 'string',
      certInfo: IntlFlightOrderDetailResponseBodyModulePassengerListCertInfo,
      costCenterName: 'string',
      costCenterNumber: 'string',
      deptId: 'string',
      deptName: 'string',
      gender: 'number',
      invoiceId: 'string',
      invoiceTitle: 'string',
      jobNo: 'string',
      mobileCountryCode: 'string',
      nationality: 'string',
      nationalityCode: 'string',
      passengerId: 'number',
      passengerType: 'number',
      phone: 'string',
      projectCode: 'string',
      projectTitle: 'string',
      subsidiaryCertInfoList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModulePassengerListSubsidiaryCertInfoList },
      userId: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderDetailResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 122928120369012
   */
  bookUserId?: string;
  /**
   * @example
   * ZHANG/SAN
   */
  bookUserName?: string;
  closeReason?: string;
  /**
   * @example
   * 1709708165000
   */
  closeTime?: number;
  /**
   * @example
   * 2024-03-06 14:56:05
   */
  closeTimeStr?: string;
  contactInfo?: IntlFlightOrderDetailResponseBodyModuleContactInfo;
  /**
   * @example
   * 1709708165000
   */
  createTime?: number;
  /**
   * @example
   * 2024-03-06 14:56:05
   */
  createTimeStr?: string;
  extInfoMap?: { [key: string]: string };
  journeyList?: IntlFlightOrderDetailResponseBodyModuleJourneyList[];
  /**
   * @example
   * 1012000000000000
   */
  orderId?: number;
  orderItemList?: IntlFlightOrderDetailResponseBodyModuleOrderItemList[];
  /**
   * @example
   * F11374007131319304192
   */
  outOrderId?: string;
  passengerItemDetailList?: IntlFlightOrderDetailResponseBodyModulePassengerItemDetailList[];
  passengerList?: IntlFlightOrderDetailResponseBodyModulePassengerList[];
  /**
   * @example
   * 1709711779000
   */
  payExpireTime?: number;
  /**
   * @example
   * 2024-03-06 15:56:19
   */
  payExpireTimeStr?: string;
  /**
   * @example
   * 1
   */
  payStatus?: number;
  /**
   * @example
   * 2024-03-06 15:00:35
   */
  payTime?: number;
  /**
   * @example
   * 1709708435000
   */
  payTimeStr?: string;
  /**
   * @example
   * 8
   */
  payType?: number;
  /**
   * @example
   * 4
   */
  status?: number;
  /**
   * @example
   * 1709711779000
   */
  succeedTime?: number;
  /**
   * @example
   * 2024-03-06 15:56:19
   */
  succeedTimeStr?: string;
  /**
   * @example
   * 21300
   */
  totalPrice?: number;
  /**
   * @example
   * 0
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      bookUserId: 'book_user_id',
      bookUserName: 'book_user_name',
      closeReason: 'close_reason',
      closeTime: 'close_time',
      closeTimeStr: 'close_time_str',
      contactInfo: 'contact_info',
      createTime: 'create_time',
      createTimeStr: 'create_time_str',
      extInfoMap: 'ext_info_map',
      journeyList: 'journey_list',
      orderId: 'order_id',
      orderItemList: 'order_item_list',
      outOrderId: 'out_order_id',
      passengerItemDetailList: 'passenger_item_detail_list',
      passengerList: 'passenger_list',
      payExpireTime: 'pay_expire_time',
      payExpireTimeStr: 'pay_expire_time_str',
      payStatus: 'pay_status',
      payTime: 'pay_time',
      payTimeStr: 'pay_time_str',
      payType: 'pay_type',
      status: 'status',
      succeedTime: 'succeed_time',
      succeedTimeStr: 'succeed_time_str',
      totalPrice: 'total_price',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bookUserId: 'string',
      bookUserName: 'string',
      closeReason: 'string',
      closeTime: 'number',
      closeTimeStr: 'string',
      contactInfo: IntlFlightOrderDetailResponseBodyModuleContactInfo,
      createTime: 'number',
      createTimeStr: 'string',
      extInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      journeyList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModuleJourneyList },
      orderId: 'number',
      orderItemList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModuleOrderItemList },
      outOrderId: 'string',
      passengerItemDetailList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModulePassengerItemDetailList },
      passengerList: { 'type': 'array', 'itemType': IntlFlightOrderDetailResponseBodyModulePassengerList },
      payExpireTime: 'number',
      payExpireTimeStr: 'string',
      payStatus: 'number',
      payTime: 'number',
      payTimeStr: 'string',
      payType: 'number',
      status: 'number',
      succeedTime: 'number',
      succeedTimeStr: 'string',
      totalPrice: 'number',
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOrderPayResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 51000
   */
  price?: number;
  static names(): { [key: string]: string } {
    return {
      price: 'price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo extends $tea.Model {
  /**
   * @example
   * PKX
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * --
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * KN
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo extends $tea.Model {
  operatingAirlineInfo?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo;
  /**
   * @example
   * CX601
   */
  operatingFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingAirlineInfo: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo,
      operatingFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  stopAirport?: string;
  stopAirportName?: string;
  /**
   * @example
   * T3
   */
  stopArrTerm?: string;
  /**
   * @example
   * BJS
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCityCode?: string;
  /**
   * @example
   * HGH
   */
  stopCityName?: string;
  stopCityNames?: string[];
  /**
   * @example
   * T4
   */
  stopDepTerm?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  stopDepTime?: string;
  stopTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopAirportName: 'stop_airport_name',
      stopArrTerm: 'stop_arr_term',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopCityNames: 'stop_city_names',
      stopDepTerm: 'stop_dep_term',
      stopDepTime: 'stop_dep_time',
      stopTime: 'stop_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopAirportName: 'string',
      stopArrTerm: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopCityNames: { 'type': 'array', 'itemType': 'string' },
      stopDepTerm: 'string',
      stopDepTime: 'string',
      stopTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  depCityLuggageDirect?: number;
  /**
   * @example
   * 0
   */
  stopCityLuggageDirect?: number;
  static names(): { [key: string]: string } {
    return {
      depCityLuggageDirect: 'dep_city_luggage_direct',
      stopCityLuggageDirect: 'stop_city_luggage_direct',
    };
  }

  static types(): { [key: string]: any } {
    return {
      depCityLuggageDirect: 'number',
      stopCityLuggageDirect: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark extends $tea.Model {
  depCityVisaRemark?: string;
  /**
   * @example
   * 1
   */
  depCityVisaType?: number;
  stopCityVisaRemarks?: string[];
  stopCityVisaTypes?: number[];
  static names(): { [key: string]: string } {
    return {
      depCityVisaRemark: 'dep_city_visa_remark',
      depCityVisaType: 'dep_city_visa_type',
      stopCityVisaRemarks: 'stop_city_visa_remarks',
      stopCityVisaTypes: 'stop_city_visa_types',
    };
  }

  static types(): { [key: string]: any } {
    return {
      depCityVisaRemark: 'string',
      depCityVisaType: 'number',
      stopCityVisaRemarks: { 'type': 'array', 'itemType': 'string' },
      stopCityVisaTypes: { 'type': 'array', 'itemType': 'number' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfos extends $tea.Model {
  airlineInfo?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo;
  arrAirportInfo?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  baggageDesc?: string;
  depAirportInfo?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @example
   * 140
   */
  duration?: number;
  /**
   * @example
   * MU5131
   */
  flightNo?: string;
  flightShareInfo?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo;
  flightSize?: string;
  flightStopInfo?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo;
  /**
   * @example
   * 320
   */
  flightType?: string;
  luggageDirectInfo?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo;
  manufacturer?: string;
  mealDesc?: string;
  /**
   * @example
   * 80%
   */
  onTimeRate?: string;
  /**
   * @example
   * 0
   */
  oneMore?: number;
  oneMoreShow?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * KN6728HGHPKX0725
   */
  segmentKey?: string;
  segmentVisaRemark?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark;
  /**
   * @example
   * false
   */
  share?: boolean;
  shortFlightSize?: string;
  /**
   * @example
   * false
   */
  stop?: boolean;
  totalTime?: string;
  transferTime?: string;
  /**
   * @example
   * 80
   */
  transferTimeNumber?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      baggageDesc: 'baggage_desc',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      flightNo: 'flight_no',
      flightShareInfo: 'flight_share_info',
      flightSize: 'flight_size',
      flightStopInfo: 'flight_stop_info',
      flightType: 'flight_type',
      luggageDirectInfo: 'luggage_direct_info',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      onTimeRate: 'on_time_rate',
      oneMore: 'one_more',
      oneMoreShow: 'one_more_show',
      segmentIndex: 'segment_index',
      segmentKey: 'segment_key',
      segmentVisaRemark: 'segment_visa_remark',
      share: 'share',
      shortFlightSize: 'short_flight_size',
      stop: 'stop',
      totalTime: 'total_time',
      transferTime: 'transfer_time',
      transferTimeNumber: 'transfer_time_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo,
      arrAirportInfo: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo,
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      baggageDesc: 'string',
      depAirportInfo: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo,
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      flightNo: 'string',
      flightShareInfo: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo,
      flightSize: 'string',
      flightStopInfo: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo,
      flightType: 'string',
      luggageDirectInfo: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo,
      manufacturer: 'string',
      mealDesc: 'string',
      onTimeRate: 'string',
      oneMore: 'number',
      oneMoreShow: 'string',
      segmentIndex: 'number',
      segmentKey: 'string',
      segmentVisaRemark: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark,
      share: 'boolean',
      shortFlightSize: 'string',
      stop: 'boolean',
      totalTime: 'string',
      transferTime: 'string',
      transferTimeNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfos extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @example
   * 140
   */
  duration?: number;
  extensions?: { [key: string]: string };
  flightSegmentInfos?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfos[];
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  transferTime?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      extensions: 'extensions',
      flightSegmentInfos: 'flight_segment_infos',
      journeyIndex: 'journey_index',
      transferTime: 'transfer_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      extensions: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      flightSegmentInfos: { 'type': 'array', 'itemType': IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfos },
      journeyIndex: 'number',
      transferTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListFlightRuleInfo extends $tea.Model {
  baggageDesc?: string;
  refundChangeRuleDesc?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      refundChangeRuleDesc: 'refund_change_rule_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: 'string',
      refundChangeRuleDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListSegmentPosition extends $tea.Model {
  journeyIndex?: number;
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoList extends $tea.Model {
  flightRuleInfo?: IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListFlightRuleInfo;
  segmentPosition?: IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListSegmentPosition;
  static names(): { [key: string]: string } {
    return {
      flightRuleInfo: 'flight_rule_info',
      segmentPosition: 'segment_position',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightRuleInfo: IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListFlightRuleInfo,
      segmentPosition: IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListSegmentPosition,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsBaggageRule extends $tea.Model {
  baggageDigest?: string;
  baggageInfoMap?: { [key: string]: ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue[] };
  /**
   * @example
   * true
   */
  structuredBaggage?: boolean;
  static names(): { [key: string]: string } {
    return {
      baggageDigest: 'baggage_digest',
      baggageInfoMap: 'baggage_info_map',
      structuredBaggage: 'structured_baggage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDigest: 'string',
      baggageInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue } },
      structuredBaggage: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsRefundChangeRule extends $tea.Model {
  /**
   * @example
   * false
   */
  cancelFeeInd?: boolean;
  /**
   * @example
   * false
   */
  changeFeeInd?: boolean;
  offerPenaltyInfoMap?: { [key: string]: ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue[] };
  refundChangeDigest?: string;
  /**
   * @example
   * false
   */
  structuredRefund?: boolean;
  static names(): { [key: string]: string } {
    return {
      cancelFeeInd: 'cancel_fee_ind',
      changeFeeInd: 'change_fee_ind',
      offerPenaltyInfoMap: 'offer_penalty_info_map',
      refundChangeDigest: 'refund_change_digest',
      structuredRefund: 'structured_refund',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelFeeInd: 'boolean',
      changeFeeInd: 'boolean',
      offerPenaltyInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue } },
      refundChangeDigest: 'string',
      structuredRefund: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItems extends $tea.Model {
  baggageRule?: IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsBaggageRule;
  refundChangeRule?: IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsRefundChangeRule;
  segmentKeys?: string[];
  shoppingItemMap?: { [key: string]: ModuleGroupItemSubItemsShoppingItemMapValue };
  /**
   * @example
   * 23412341234124
   */
  uniqKey?: string;
  static names(): { [key: string]: string } {
    return {
      baggageRule: 'baggage_rule',
      refundChangeRule: 'refund_change_rule',
      segmentKeys: 'segment_keys',
      shoppingItemMap: 'shopping_item_map',
      uniqKey: 'uniq_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageRule: IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsBaggageRule,
      refundChangeRule: IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsRefundChangeRule,
      segmentKeys: { 'type': 'array', 'itemType': 'string' },
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleGroupItemSubItemsShoppingItemMapValue },
      uniqKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleGroupItem extends $tea.Model {
  agreementPriceCodes?: string[];
  flightRuleInfoList?: IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoList[];
  /**
   * @example
   * 669845158418
   */
  itemId?: string;
  itemType?: string;
  shoppingItemMap?: { [key: string]: ModuleGroupItemShoppingItemMapValue };
  subItemPositionMap?: { [key: string]: ModuleGroupItemSubItemPositionMapValue[] };
  subItems?: IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItems[];
  static names(): { [key: string]: string } {
    return {
      agreementPriceCodes: 'agreement_price_codes',
      flightRuleInfoList: 'flight_rule_info_list',
      itemId: 'item_id',
      itemType: 'item_type',
      shoppingItemMap: 'shopping_item_map',
      subItemPositionMap: 'sub_item_position_map',
      subItems: 'sub_items',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agreementPriceCodes: { 'type': 'array', 'itemType': 'string' },
      flightRuleInfoList: { 'type': 'array', 'itemType': IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoList },
      itemId: 'string',
      itemType: 'string',
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleGroupItemShoppingItemMapValue },
      subItemPositionMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleGroupItemSubItemPositionMapValue } },
      subItems: { 'type': 'array', 'itemType': IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItems },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModuleShutterDocs extends $tea.Model {
  contents?: string[];
  mainTitle?: string;
  static names(): { [key: string]: string } {
    return {
      contents: 'contents',
      mainTitle: 'main_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contents: { 'type': 'array', 'itemType': 'string' },
      mainTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaItemDetailResponseBodyModule extends $tea.Model {
  flightJourneyInfos?: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfos[];
  groupItem?: IntlFlightOtaItemDetailResponseBodyModuleGroupItem;
  shutterDocs?: IntlFlightOtaItemDetailResponseBodyModuleShutterDocs[];
  /**
   * @example
   * 1
   */
  tripType?: number;
  static names(): { [key: string]: string } {
    return {
      flightJourneyInfos: 'flight_journey_infos',
      groupItem: 'group_item',
      shutterDocs: 'shutter_docs',
      tripType: 'trip_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightJourneyInfos: { 'type': 'array', 'itemType': IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfos },
      groupItem: IntlFlightOtaItemDetailResponseBodyModuleGroupItem,
      shutterDocs: { 'type': 'array', 'itemType': IntlFlightOtaItemDetailResponseBodyModuleShutterDocs },
      tripType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchRequestSearchJourneysSelectedFlights extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * NNG
   */
  arrCityCode?: string;
  /**
   * @example
   * 0
   */
  cabinType?: number;
  /**
   * @example
   * KOW
   */
  depAirportCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * CTU
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-08-15 12:00:00
   */
  flightTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * KA5809
   */
  marketFlightNo?: string;
  /**
   * @example
   * CX601
   */
  operateFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrAirportCode: 'arr_airport_code',
      arrCityCode: 'arr_city_code',
      cabinType: 'cabin_type',
      depAirportCode: 'dep_airport_code',
      depCityCode: 'dep_city_code',
      flightTime: 'flight_time',
      marketFlightNo: 'market_flight_no',
      operateFlightNo: 'operate_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrAirportCode: 'string',
      arrCityCode: 'string',
      cabinType: 'number',
      depAirportCode: 'string',
      depCityCode: 'string',
      flightTime: 'string',
      marketFlightNo: 'string',
      operateFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchRequestSearchJourneys extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ZQZ
   */
  arrCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2023-08-15
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  selectedFlights?: IntlFlightOtaSearchRequestSearchJourneysSelectedFlights[];
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      depCityCode: 'dep_city_code',
      depDate: 'dep_date',
      selectedFlights: 'selected_flights',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      depCityCode: 'string',
      depDate: 'string',
      selectedFlights: { 'type': 'array', 'itemType': IntlFlightOtaSearchRequestSearchJourneysSelectedFlights },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchRequestSearchPassengerList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 13412341234
   */
  certNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  certType?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ZHANGSAN
   */
  fullName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      certNo: 'cert_no',
      certType: 'cert_type',
      fullName: 'full_name',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certNo: 'string',
      certType: 'number',
      fullName: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo extends $tea.Model {
  /**
   * @example
   * PKX
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * --
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  airportShortName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      airportShortName: 'airport_short_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      airportShortName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo extends $tea.Model {
  airlineChineseName?: string;
  airlineChineseShortName?: string;
  /**
   * @example
   * DR
   */
  airlineCode?: string;
  /**
   * @example
   * https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg
   */
  airlineIcon?: string;
  /**
   * @example
   * false
   */
  cheapFlight?: boolean;
  static names(): { [key: string]: string } {
    return {
      airlineChineseName: 'airline_chinese_name',
      airlineChineseShortName: 'airline_chinese_short_name',
      airlineCode: 'airline_code',
      airlineIcon: 'airline_icon',
      cheapFlight: 'cheap_flight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineChineseName: 'string',
      airlineChineseShortName: 'string',
      airlineCode: 'string',
      airlineIcon: 'string',
      cheapFlight: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo extends $tea.Model {
  operatingAirlineInfo?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo;
  /**
   * @example
   * CX601
   */
  operatingFlightNo?: string;
  static names(): { [key: string]: string } {
    return {
      operatingAirlineInfo: 'operating_airline_info',
      operatingFlightNo: 'operating_flight_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operatingAirlineInfo: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo,
      operatingFlightNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  stopAirport?: string;
  stopAirportName?: string;
  /**
   * @example
   * T3
   */
  stopArrTerm?: string;
  /**
   * @example
   * BJS
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCityCode?: string;
  /**
   * @example
   * HGH
   */
  stopCityName?: string;
  stopCityNames?: string[];
  /**
   * @example
   * T4
   */
  stopDepTerm?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  stopDepTime?: string;
  stopTime?: string;
  static names(): { [key: string]: string } {
    return {
      stopAirport: 'stop_airport',
      stopAirportName: 'stop_airport_name',
      stopArrTerm: 'stop_arr_term',
      stopArrTime: 'stop_arr_time',
      stopCityCode: 'stop_city_code',
      stopCityName: 'stop_city_name',
      stopCityNames: 'stop_city_names',
      stopDepTerm: 'stop_dep_term',
      stopDepTime: 'stop_dep_time',
      stopTime: 'stop_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stopAirport: 'string',
      stopAirportName: 'string',
      stopArrTerm: 'string',
      stopArrTime: 'string',
      stopCityCode: 'string',
      stopCityName: 'string',
      stopCityNames: { 'type': 'array', 'itemType': 'string' },
      stopDepTerm: 'string',
      stopDepTime: 'string',
      stopTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  depCityLuggageDirect?: number;
  /**
   * @example
   * 0
   */
  stopCityLuggageDirect?: number;
  static names(): { [key: string]: string } {
    return {
      depCityLuggageDirect: 'dep_city_luggage_direct',
      stopCityLuggageDirect: 'stop_city_luggage_direct',
    };
  }

  static types(): { [key: string]: any } {
    return {
      depCityLuggageDirect: 'number',
      stopCityLuggageDirect: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark extends $tea.Model {
  depCityVisaRemark?: string;
  /**
   * @example
   * 1
   */
  depCityVisaType?: number;
  stopCityVisaRemarks?: string[];
  stopCityVisaTypes?: number[];
  static names(): { [key: string]: string } {
    return {
      depCityVisaRemark: 'dep_city_visa_remark',
      depCityVisaType: 'dep_city_visa_type',
      stopCityVisaRemarks: 'stop_city_visa_remarks',
      stopCityVisaTypes: 'stop_city_visa_types',
    };
  }

  static types(): { [key: string]: any } {
    return {
      depCityVisaRemark: 'string',
      depCityVisaType: 'number',
      stopCityVisaRemarks: { 'type': 'array', 'itemType': 'string' },
      stopCityVisaTypes: { 'type': 'array', 'itemType': 'number' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfos extends $tea.Model {
  airlineInfo?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo;
  arrAirportInfo?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo;
  /**
   * @example
   * BJS
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  baggageDesc?: string;
  depAirportInfo?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @example
   * 140
   */
  duration?: number;
  /**
   * @example
   * MU5131
   */
  flightNo?: string;
  flightShareInfo?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo;
  flightSize?: string;
  flightStopInfo?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo;
  /**
   * @example
   * 320
   */
  flightType?: string;
  luggageDirectInfo?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo;
  manufacturer?: string;
  mealDesc?: string;
  /**
   * @example
   * 1200
   */
  miles?: number;
  /**
   * @example
   * 80%
   */
  onTimeRate?: string;
  /**
   * @example
   * 0
   */
  oneMore?: number;
  oneMoreShow?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * KN6728HGHPKX0725
   */
  segmentKey?: string;
  segmentVisaRemark?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark;
  /**
   * @example
   * false
   */
  share?: boolean;
  shortFlightSize?: string;
  /**
   * @example
   * false
   */
  stop?: boolean;
  totalTime?: string;
  transferTime?: string;
  /**
   * @example
   * 120
   */
  transferTimeNumber?: number;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      baggageDesc: 'baggage_desc',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      flightNo: 'flight_no',
      flightShareInfo: 'flight_share_info',
      flightSize: 'flight_size',
      flightStopInfo: 'flight_stop_info',
      flightType: 'flight_type',
      luggageDirectInfo: 'luggage_direct_info',
      manufacturer: 'manufacturer',
      mealDesc: 'meal_desc',
      miles: 'miles',
      onTimeRate: 'on_time_rate',
      oneMore: 'one_more',
      oneMoreShow: 'one_more_show',
      segmentIndex: 'segment_index',
      segmentKey: 'segment_key',
      segmentVisaRemark: 'segment_visa_remark',
      share: 'share',
      shortFlightSize: 'short_flight_size',
      stop: 'stop',
      totalTime: 'total_time',
      transferTime: 'transfer_time',
      transferTimeNumber: 'transfer_time_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo,
      arrAirportInfo: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo,
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      baggageDesc: 'string',
      depAirportInfo: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo,
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      flightNo: 'string',
      flightShareInfo: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo,
      flightSize: 'string',
      flightStopInfo: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo,
      flightType: 'string',
      luggageDirectInfo: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo,
      manufacturer: 'string',
      mealDesc: 'string',
      miles: 'number',
      onTimeRate: 'string',
      oneMore: 'number',
      oneMoreShow: 'string',
      segmentIndex: 'number',
      segmentKey: 'string',
      segmentVisaRemark: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark,
      share: 'boolean',
      shortFlightSize: 'string',
      stop: 'boolean',
      totalTime: 'string',
      transferTime: 'string',
      transferTimeNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfos extends $tea.Model {
  /**
   * @example
   * HGH
   */
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2023-08-13 09:45
   */
  arrTime?: string;
  /**
   * @example
   * BJS
   */
  depCityCode?: string;
  depCityName?: string;
  /**
   * @example
   * 2023-08-13 07:25
   */
  depTime?: string;
  /**
   * @example
   * 140
   */
  duration?: number;
  flightSegmentInfos?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfos[];
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  transferTime?: number;
  static names(): { [key: string]: string } {
    return {
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrTime: 'arr_time',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      depTime: 'dep_time',
      duration: 'duration',
      flightSegmentInfos: 'flight_segment_infos',
      journeyIndex: 'journey_index',
      transferTime: 'transfer_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCityCode: 'string',
      arrCityName: 'string',
      arrTime: 'string',
      depCityCode: 'string',
      depCityName: 'string',
      depTime: 'string',
      duration: 'number',
      flightSegmentInfos: { 'type': 'array', 'itemType': IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfos },
      journeyIndex: 'number',
      transferTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListFlightRuleInfo extends $tea.Model {
  baggageDesc?: string;
  refundChangeRuleDesc?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      refundChangeRuleDesc: 'refund_change_rule_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: 'string',
      refundChangeRuleDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoList extends $tea.Model {
  flightRuleInfo?: IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListFlightRuleInfo;
  segmentPosition?: IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListSegmentPosition;
  static names(): { [key: string]: string } {
    return {
      flightRuleInfo: 'flight_rule_info',
      segmentPosition: 'segment_position',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightRuleInfo: IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListFlightRuleInfo,
      segmentPosition: IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListSegmentPosition,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleItemListSubItemsBaggageRule extends $tea.Model {
  baggageDigest?: string;
  baggageInfoMap?: { [key: string]: ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue[] };
  /**
   * @example
   * true
   */
  structuredBaggage?: boolean;
  static names(): { [key: string]: string } {
    return {
      baggageDigest: 'baggage_digest',
      baggageInfoMap: 'baggage_info_map',
      structuredBaggage: 'structured_baggage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDigest: 'string',
      baggageInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue } },
      structuredBaggage: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleItemListSubItemsRefundChangeRule extends $tea.Model {
  /**
   * @example
   * true
   */
  cancelFeeInd?: boolean;
  /**
   * @example
   * true
   */
  changeFeeInd?: boolean;
  offerPenaltyInfoMap?: { [key: string]: ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue[] };
  refundChangeDigest?: string;
  /**
   * @example
   * false
   */
  structuredRefund?: boolean;
  static names(): { [key: string]: string } {
    return {
      cancelFeeInd: 'cancel_fee_ind',
      changeFeeInd: 'change_fee_ind',
      offerPenaltyInfoMap: 'offer_penalty_info_map',
      refundChangeDigest: 'refund_change_digest',
      structuredRefund: 'structured_refund',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelFeeInd: 'boolean',
      changeFeeInd: 'boolean',
      offerPenaltyInfoMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue } },
      refundChangeDigest: 'string',
      structuredRefund: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleItemListSubItems extends $tea.Model {
  baggageRule?: IntlFlightOtaSearchResponseBodyModuleItemListSubItemsBaggageRule;
  refundChangeRule?: IntlFlightOtaSearchResponseBodyModuleItemListSubItemsRefundChangeRule;
  segmentKeys?: string[];
  shoppingItemMap?: { [key: string]: ModuleItemListSubItemsShoppingItemMapValue };
  /**
   * @example
   * 07df0bd9-f803-4a50-8449-f4bd675d9939
   */
  uniqKey?: string;
  static names(): { [key: string]: string } {
    return {
      baggageRule: 'baggage_rule',
      refundChangeRule: 'refund_change_rule',
      segmentKeys: 'segment_keys',
      shoppingItemMap: 'shopping_item_map',
      uniqKey: 'uniq_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageRule: IntlFlightOtaSearchResponseBodyModuleItemListSubItemsBaggageRule,
      refundChangeRule: IntlFlightOtaSearchResponseBodyModuleItemListSubItemsRefundChangeRule,
      segmentKeys: { 'type': 'array', 'itemType': 'string' },
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListSubItemsShoppingItemMapValue },
      uniqKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModuleItemList extends $tea.Model {
  agreementPriceCodes?: string[];
  flightRuleInfoList?: IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoList[];
  /**
   * @example
   * e50d380fc05942cc8ac57af8ae02f448_0
   */
  itemId?: string;
  itemType?: string;
  shoppingItemMap?: { [key: string]: ModuleItemListShoppingItemMapValue };
  subItemPositionMap?: { [key: string]: ModuleItemListSubItemPositionMapValue[] };
  subItems?: IntlFlightOtaSearchResponseBodyModuleItemListSubItems[];
  static names(): { [key: string]: string } {
    return {
      agreementPriceCodes: 'agreement_price_codes',
      flightRuleInfoList: 'flight_rule_info_list',
      itemId: 'item_id',
      itemType: 'item_type',
      shoppingItemMap: 'shopping_item_map',
      subItemPositionMap: 'sub_item_position_map',
      subItems: 'sub_items',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agreementPriceCodes: { 'type': 'array', 'itemType': 'string' },
      flightRuleInfoList: { 'type': 'array', 'itemType': IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoList },
      itemId: 'string',
      itemType: 'string',
      shoppingItemMap: { 'type': 'map', 'keyType': 'string', 'valueType': ModuleItemListShoppingItemMapValue },
      subItemPositionMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ModuleItemListSubItemPositionMapValue } },
      subItems: { 'type': 'array', 'itemType': IntlFlightOtaSearchResponseBodyModuleItemListSubItems },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightOtaSearchResponseBodyModule extends $tea.Model {
  flightJourneyInfos?: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfos[];
  itemList?: IntlFlightOtaSearchResponseBodyModuleItemList[];
  static names(): { [key: string]: string } {
    return {
      flightJourneyInfos: 'flight_journey_infos',
      itemList: 'item_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightJourneyInfos: { 'type': 'array', 'itemType': IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfos },
      itemList: { 'type': 'array', 'itemType': IntlFlightOtaSearchResponseBodyModuleItemList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertListSegmentPosition extends $tea.Model {
  /**
   * @example
   * 0
   */
  journeyIndex?: number;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  static names(): { [key: string]: string } {
    return {
      journeyIndex: 'journey_index',
      segmentIndex: 'segment_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      journeyIndex: 'number',
      segmentIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertList extends $tea.Model {
  certTypes?: number[];
  segmentPosition?: IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertListSegmentPosition;
  static names(): { [key: string]: string } {
    return {
      certTypes: 'cert_types',
      segmentPosition: 'segment_position',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certTypes: { 'type': 'array', 'itemType': 'number' },
      segmentPosition: IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertListSegmentPosition,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IntlFlightSegmentAvailableCertResponseBodyModule extends $tea.Model {
  segmentAvailableCertList?: IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertList[];
  static names(): { [key: string]: string } {
    return {
      segmentAvailableCertList: 'segment_available_cert_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      segmentAvailableCertList: { 'type': 'array', 'itemType': IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleAddRequestEntities extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  entityId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  entityName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityName: 'entity_name',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityName: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleAddResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  addNum?: number;
  /**
   * @example
   * 1
   */
  selectedUserNum?: number;
  static names(): { [key: string]: string } {
    return {
      addNum: 'add_num',
      selectedUserNum: 'selected_user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addNum: 'number',
      selectedUserNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleDeleteRequestEntities extends $tea.Model {
  /**
   * @example
   * 12345
   */
  entityId?: string;
  /**
   * @example
   * 1
   */
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleDeleteResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  removeNum?: number;
  /**
   * @example
   * 0
   */
  selectedUserNum?: number;
  static names(): { [key: string]: string } {
    return {
      removeNum: 'remove_num',
      selectedUserNum: 'selected_user_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      removeNum: 'number',
      selectedUserNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleSaveRequestEntities extends $tea.Model {
  /**
   * @example
   * 123
   */
  id?: string;
  name?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      name: 'name',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      name: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceRuleSaveResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1
   */
  addNum?: number;
  /**
   * @example
   * 1
   */
  removeNum?: number;
  static names(): { [key: string]: string } {
    return {
      addNum: 'add_num',
      removeNum: 'remove_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addNum: 'number',
      removeNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvoiceSearchResponseBodyModule extends $tea.Model {
  /**
   * @remarks
   * ID
   * 
   * @example
   * 1478652
   */
  id?: number;
  /**
   * @example
   * 405009
   */
  thirdPartInvoiceId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      thirdPartInvoiceId: 'third_part_invoice_id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      thirdPartInvoiceId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvRuleSaveRequestBookuserList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  entityId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  entityType?: number;
  static names(): { [key: string]: string } {
    return {
      entityId: 'entity_id',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entityId: 'string',
      entityType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvUserSaveRequestUserListCertList extends $tea.Model {
  certExpiredTime?: string;
  certNation?: string;
  certNo?: string;
  certType?: number;
  nationality?: string;
  static names(): { [key: string]: string } {
    return {
      certExpiredTime: 'cert_expired_time',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      nationality: 'nationality',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certExpiredTime: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      nationality: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class IsvUserSaveRequestUserList extends $tea.Model {
  baseCityCode?: string;
  birthday?: string;
  certList?: IsvUserSaveRequestUserListCertList[];
  /**
   * @example
   * 10
   */
  departId?: number;
  /**
   * @example
   * 123@163.com
   */
  email?: string;
  gender?: string;
  isAdmin?: boolean;
  /**
   * @example
   * 8797
   */
  jobNo?: string;
  /**
   * @example
   * 0
   */
  leaveStatus?: number;
  /**
   * @example
   * 123456
   */
  managerUserId?: string;
  /**
   * @example
   * 15364762829
   */
  phone?: string;
  position?: string;
  /**
   * @example
   * 20
   */
  positionLevel?: string;
  /**
   * @example
   * ceshi
   */
  realNameEn?: string;
  roleIdList?: string[];
  /**
   * @example
   * 123
   */
  thirdDepartId?: string;
  thirdDepartIdList?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123
   */
  userId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userName?: string;
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      baseCityCode: 'base_city_code',
      birthday: 'birthday',
      certList: 'cert_list',
      departId: 'depart_id',
      email: 'email',
      gender: 'gender',
      isAdmin: 'is_admin',
      jobNo: 'job_no',
      leaveStatus: 'leave_status',
      managerUserId: 'manager_user_id',
      phone: 'phone',
      position: 'position',
      positionLevel: 'position_level',
      realNameEn: 'real_name_en',
      roleIdList: 'role_id_list',
      thirdDepartId: 'third_depart_id',
      thirdDepartIdList: 'third_depart_id_list',
      userId: 'user_id',
      userName: 'user_name',
      userNick: 'user_nick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baseCityCode: 'string',
      birthday: 'string',
      certList: { 'type': 'array', 'itemType': IsvUserSaveRequestUserListCertList },
      departId: 'number',
      email: 'string',
      gender: 'string',
      isAdmin: 'boolean',
      jobNo: 'string',
      leaveStatus: 'number',
      managerUserId: 'string',
      phone: 'string',
      position: 'string',
      positionLevel: 'string',
      realNameEn: 'string',
      roleIdList: { 'type': 'array', 'itemType': 'string' },
      thirdDepartId: 'string',
      thirdDepartIdList: { 'type': 'array', 'itemType': 'string' },
      userId: 'string',
      userName: 'string',
      userNick: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealBillSettlementQueryResponseBodyModuleItems extends $tea.Model {
  applyExtendField?: string;
  /**
   * @example
   * 1004430880
   */
  applyId?: string;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  billRecordTime?: string;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  bookTime?: string;
  /**
   * @example
   * 1234
   */
  bookerId?: string;
  /**
   * @example
   * A1234
   */
  bookerJobNo?: string;
  bookerName?: string;
  /**
   * @example
   * 1
   */
  capitalDirection?: string;
  cascadeDepartment?: string;
  consumeReportAddress?: string;
  consumeReportCity?: string;
  consumeReportCityCode?: string;
  consumerScene?: string;
  /**
   * @example
   * 100.0
   */
  corpSettleFee?: number;
  costCenter?: string;
  /**
   * @example
   * cs1
   */
  costCenterNumber?: string;
  department?: string;
  /**
   * @example
   * 1112
   */
  departmentId?: string;
  /**
   * @example
   * 70101
   */
  feeType?: string;
  /**
   * @example
   * 1
   */
  index?: string;
  invoiceTitle?: string;
  /**
   * @example
   * 123
   */
  mainApplyId?: string;
  /**
   * @example
   * XXXX
   */
  mealAddress?: string;
  mealCity?: string;
  /**
   * @example
   * XXX
   */
  mealCityCode?: string;
  mealRule?: string;
  mealScene?: string;
  /**
   * @example
   * MEAL
   */
  merchantCategory?: string;
  /**
   * @example
   * XXXX
   */
  merchantName?: string;
  /**
   * @example
   * 1002039196909288346
   */
  orderId?: string;
  /**
   * @example
   * 100.0
   */
  orderPrice?: number;
  orderStatusDesc?: string;
  /**
   * @example
   * 0.0
   */
  personSettlePrice?: number;
  /**
   * @example
   * 60698599
   */
  primaryId?: number;
  /**
   * @example
   * acs
   */
  projectCode?: string;
  projectName?: string;
  remark?: string;
  /**
   * @example
   * 5.0
   */
  serviceFee?: number;
  /**
   * @example
   * 110.0
   */
  settlementFee?: number;
  /**
   * @example
   * 2023-01-01 00:00:00
   */
  settlementTime?: string;
  /**
   * @example
   * 4
   */
  settlementType?: string;
  shareDinner?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  /**
   * @example
   * XXXX
   */
  storeAddress?: string;
  /**
   * @example
   * 6%
   */
  taxRate?: string;
  /**
   * @example
   * cs2
   */
  thirdInvoiceId?: string;
  /**
   * @example
   * 123
   */
  thirdPartBusinessId?: string;
  /**
   * @example
   * 7244-1968
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * 1234
   */
  travelerId?: string;
  /**
   * @example
   * A1234
   */
  travelerJobNo?: string;
  travelerMemberTypeName?: string;
  travelerName?: string;
  /**
   * @example
   * 1
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      billRecordTime: 'bill_record_time',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      consumeReportAddress: 'consume_report_address',
      consumeReportCity: 'consume_report_city',
      consumeReportCityCode: 'consume_report_city_code',
      consumerScene: 'consumer_scene',
      corpSettleFee: 'corp_settle_fee',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      department: 'department',
      departmentId: 'department_id',
      feeType: 'fee_type',
      index: 'index',
      invoiceTitle: 'invoice_title',
      mainApplyId: 'main_apply_id',
      mealAddress: 'meal_address',
      mealCity: 'meal_city',
      mealCityCode: 'meal_city_code',
      mealRule: 'meal_rule',
      mealScene: 'meal_scene',
      merchantCategory: 'merchant_category',
      merchantName: 'merchant_name',
      orderId: 'order_id',
      orderPrice: 'order_price',
      orderStatusDesc: 'order_status_desc',
      personSettlePrice: 'person_settle_price',
      primaryId: 'primary_id',
      projectCode: 'project_code',
      projectName: 'project_name',
      remark: 'remark',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      shareDinner: 'share_dinner',
      status: 'status',
      storeAddress: 'store_address',
      taxRate: 'tax_rate',
      thirdInvoiceId: 'third_invoice_id',
      thirdPartBusinessId: 'third_part_business_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberTypeName: 'traveler_member_type_name',
      travelerName: 'traveler_name',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyExtendField: 'string',
      applyId: 'string',
      billRecordTime: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      consumeReportAddress: 'string',
      consumeReportCity: 'string',
      consumeReportCityCode: 'string',
      consumerScene: 'string',
      corpSettleFee: 'number',
      costCenter: 'string',
      costCenterNumber: 'string',
      department: 'string',
      departmentId: 'string',
      feeType: 'string',
      index: 'string',
      invoiceTitle: 'string',
      mainApplyId: 'string',
      mealAddress: 'string',
      mealCity: 'string',
      mealCityCode: 'string',
      mealRule: 'string',
      mealScene: 'string',
      merchantCategory: 'string',
      merchantName: 'string',
      orderId: 'string',
      orderPrice: 'number',
      orderStatusDesc: 'string',
      personSettlePrice: 'number',
      primaryId: 'number',
      projectCode: 'string',
      projectName: 'string',
      remark: 'string',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      shareDinner: 'string',
      status: 'number',
      storeAddress: 'string',
      taxRate: 'string',
      thirdInvoiceId: 'string',
      thirdPartBusinessId: 'string',
      thirdpartApplyId: 'string',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberTypeName: 'string',
      travelerName: 'string',
      voucherType: 'number',
      voucherTypeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 7
   */
  category?: number;
  corpId?: string;
  items?: MealBillSettlementQueryResponseBodyModuleItems[];
  /**
   * @example
   * 1002039195025156700
   */
  orderId?: string;
  /**
   * @example
   * 2022-07-02
   */
  periodEnd?: string;
  /**
   * @example
   * 2022-07-01
   */
  periodStart?: string;
  /**
   * @example
   * 2695
   */
  totalNum?: number;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      items: 'items',
      orderId: 'order_id',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalNum: 'total_num',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      items: { 'type': 'array', 'itemType': MealBillSettlementQueryResponseBodyModuleItems },
      orderId: 'string',
      periodEnd: 'string',
      periodStart: 'string',
      totalNum: 'number',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderDetailQueryResponseBodyModule extends $tea.Model {
  applyId?: number;
  /**
   * @example
   * 2024032522001423601409393178
   */
  corpCodeOrderId?: string;
  /**
   * @example
   * dingaa15ca45cba9ee744a5
   */
  corpId?: string;
  /**
   * @example
   * 100
   */
  corpPayAmount?: number;
  /**
   * @example
   * 100
   */
  corpRefundAmount?: number;
  merchantName?: string;
  /**
   * @example
   * 1034088398073015303
   */
  orderId?: string;
  /**
   * @example
   * 1
   */
  orderStatus?: number;
  /**
   * @example
   * 1
   */
  orderSubStatus?: number;
  orderType?: string;
  /**
   * @example
   * 100
   */
  payAmount?: number;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * 100
   */
  personPayAmount?: number;
  /**
   * @example
   * 100
   */
  personRefundAmount?: number;
  /**
   * @example
   * 100
   */
  refundAmount?: number;
  sceneName?: string;
  /**
   * @example
   * 1711702782
   */
  settleTime?: string;
  thirdPartApplyId?: string;
  /**
   * @example
   * 17509140000
   */
  userAlipayId?: string;
  /**
   * @example
   * 014134681304653773
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      corpCodeOrderId: 'corp_code_order_id',
      corpId: 'corp_id',
      corpPayAmount: 'corp_pay_amount',
      corpRefundAmount: 'corp_refund_amount',
      merchantName: 'merchant_name',
      orderId: 'order_id',
      orderStatus: 'order_status',
      orderSubStatus: 'order_sub_status',
      orderType: 'order_type',
      payAmount: 'pay_amount',
      payType: 'pay_type',
      personPayAmount: 'person_pay_amount',
      personRefundAmount: 'person_refund_amount',
      refundAmount: 'refund_amount',
      sceneName: 'scene_name',
      settleTime: 'settle_time',
      thirdPartApplyId: 'third_part_apply_id',
      userAlipayId: 'user_alipay_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      corpCodeOrderId: 'string',
      corpId: 'string',
      corpPayAmount: 'number',
      corpRefundAmount: 'number',
      merchantName: 'string',
      orderId: 'string',
      orderStatus: 'number',
      orderSubStatus: 'number',
      orderType: 'string',
      payAmount: 'number',
      payType: 'number',
      personPayAmount: 'number',
      personRefundAmount: 'number',
      refundAmount: 'number',
      sceneName: 'string',
      settleTime: 'string',
      thirdPartApplyId: 'string',
      userAlipayId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderListQueryResponseBodyModuleOrderList extends $tea.Model {
  /**
   * @example
   * 100
   */
  corpPayAmount?: number;
  merchantName?: string;
  /**
   * @example
   * 1034124198083211043
   */
  orderId?: string;
  /**
   * @example
   * 1
   */
  orderStatus?: number;
  orderType?: string;
  /**
   * @example
   * 100
   */
  payAmount?: number;
  /**
   * @example
   * 100
   */
  personPayAmount?: number;
  /**
   * @example
   * 1711705057
   */
  settleTime?: string;
  static names(): { [key: string]: string } {
    return {
      corpPayAmount: 'corp_pay_amount',
      merchantName: 'merchant_name',
      orderId: 'order_id',
      orderStatus: 'order_status',
      orderType: 'order_type',
      payAmount: 'pay_amount',
      personPayAmount: 'person_pay_amount',
      settleTime: 'settle_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpPayAmount: 'number',
      merchantName: 'string',
      orderId: 'string',
      orderStatus: 'number',
      orderType: 'string',
      payAmount: 'number',
      personPayAmount: 'number',
      settleTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MealOrderListQueryResponseBodyModule extends $tea.Model {
  orderList?: MealOrderListQueryResponseBodyModuleOrderList[];
  static names(): { [key: string]: string } {
    return {
      orderList: 'order_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderList: { 'type': 'array', 'itemType': MealOrderListQueryResponseBodyModuleOrderList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillGetResponseBodyModuleMonthAccountBillDetail extends $tea.Model {
  billConfirmed?: number;
  /**
   * @remarks
   * 用车金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  carAmount?: number;
  /**
   * @remarks
   * 违约金金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  damageAmount?: number;
  /**
   * @remarks
   * 机票金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  flightAmount?: number;
  /**
   * @remarks
   * 福豆金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  fuPoint?: number;
  /**
   * @remarks
   * 酒店金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  hotelAmount?: number;
  /**
   * @remarks
   * 国际机票金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  ieFlightAmount?: number;
  ieHotelAmount?: number;
  /**
   * @remarks
   * 账期日：YYYYMMDD
   * 
   * @example
   * 20200501
   */
  mailBillDate?: number;
  /**
   * @remarks
   * 服务费金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  serviceAmount?: number;
  /**
   * @remarks
   * 火车票金额（单位：元）
   * 
   * @example
   * xx.xx
   */
  trainAmount?: number;
  static names(): { [key: string]: string } {
    return {
      billConfirmed: 'billConfirmed',
      carAmount: 'carAmount',
      damageAmount: 'damageAmount',
      flightAmount: 'flightAmount',
      fuPoint: 'fuPoint',
      hotelAmount: 'hotelAmount',
      ieFlightAmount: 'ieFlightAmount',
      ieHotelAmount: 'ieHotelAmount',
      mailBillDate: 'mailBillDate',
      serviceAmount: 'serviceAmount',
      trainAmount: 'trainAmount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billConfirmed: 'number',
      carAmount: 'number',
      damageAmount: 'number',
      flightAmount: 'number',
      fuPoint: 'number',
      hotelAmount: 'number',
      ieFlightAmount: 'number',
      ieHotelAmount: 'number',
      mailBillDate: 'number',
      serviceAmount: 'number',
      trainAmount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MonthBillGetResponseBodyModule extends $tea.Model {
  endDate?: string;
  /**
   * @remarks
   * CorpMonthAccountBillFeeDetail
   */
  monthAccountBillDetail?: MonthBillGetResponseBodyModuleMonthAccountBillDetail;
  startDate?: string;
  /**
   * @example
   * https://xxx
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      endDate: 'end_date',
      monthAccountBillDetail: 'monthAccountBillDetail',
      startDate: 'start_date',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endDate: 'string',
      monthAccountBillDetail: MonthBillGetResponseBodyModuleMonthAccountBillDetail,
      startDate: 'string',
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryEmployeeDetailResponseBodyModule extends $tea.Model {
  /**
   * @example
   * false
   */
  isLeave?: boolean;
  /**
   * @example
   * "12138"
   */
  jobNumber?: string;
  nickName?: string;
  /**
   * @example
   * "123456"
   */
  outDeptId?: string;
  outDeptIdList?: string[];
  /**
   * @example
   * "abc12138"
   */
  outEmployeeId?: string;
  realName?: string;
  /**
   * @example
   * "zhang/san"
   */
  realNameEn?: string;
  static names(): { [key: string]: string } {
    return {
      isLeave: 'is_leave',
      jobNumber: 'job_number',
      nickName: 'nick_name',
      outDeptId: 'out_dept_id',
      outDeptIdList: 'out_dept_id_list',
      outEmployeeId: 'out_employee_id',
      realName: 'real_name',
      realNameEn: 'real_name_en',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isLeave: 'boolean',
      jobNumber: 'string',
      nickName: 'string',
      outDeptId: 'string',
      outDeptIdList: { 'type': 'array', 'itemType': 'string' },
      outEmployeeId: 'string',
      realName: 'string',
      realNameEn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryGroupCorpListResponseBodyModule extends $tea.Model {
  /**
   * @example
   * corp1
   */
  corpId?: string;
  corpName?: string;
  static names(): { [key: string]: string } {
    return {
      corpId: 'corp_id',
      corpName: 'corp_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpId: 'string',
      corpName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions extends $tea.Model {
  billSettlementId?: number;
  capitalDirection?: string;
  feeType?: string;
  orderId?: string;
  remark?: string;
  remindTagList?: string[];
  settlementAmount?: string;
  settlementTime?: string;
  voucherType?: number;
  static names(): { [key: string]: string } {
    return {
      billSettlementId: 'bill_settlement_id',
      capitalDirection: 'capital_direction',
      feeType: 'fee_type',
      orderId: 'order_id',
      remark: 'remark',
      remindTagList: 'remind_tag_list',
      settlementAmount: 'settlement_amount',
      settlementTime: 'settlement_time',
      voucherType: 'voucher_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billSettlementId: 'number',
      capitalDirection: 'string',
      feeType: 'string',
      orderId: 'string',
      remark: 'string',
      remindTagList: { 'type': 'array', 'itemType': 'string' },
      settlementAmount: 'string',
      settlementTime: 'string',
      voucherType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponseBodyModuleExpensesInvoiceInfos extends $tea.Model {
  amount?: string;
  invoiceCode?: string;
  invoiceData?: string;
  invoiceDate?: string;
  invoiceNumber?: string;
  invoiceType?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      invoiceCode: 'invoice_code',
      invoiceData: 'invoice_data',
      invoiceDate: 'invoice_date',
      invoiceNumber: 'invoice_number',
      invoiceType: 'invoice_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'string',
      invoiceCode: 'string',
      invoiceData: 'string',
      invoiceDate: 'string',
      invoiceNumber: 'string',
      invoiceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponseBodyModuleExpenses extends $tea.Model {
  /**
   * @example
   * 20
   */
  amount?: string;
  currency?: string;
  expenseCity?: string;
  expenseCompositions?: QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions[];
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  expenseTime?: string;
  expenseType?: string;
  /**
   * @example
   * code
   */
  expenseTypeCode?: string;
  invoiceInfos?: QueryReimbursementOrderResponseBodyModuleExpensesInvoiceInfos[];
  reimbExpenseId?: number;
  remark?: string;
  settlementType?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      currency: 'currency',
      expenseCity: 'expense_city',
      expenseCompositions: 'expense_compositions',
      expenseTime: 'expense_time',
      expenseType: 'expense_type',
      expenseTypeCode: 'expense_type_code',
      invoiceInfos: 'invoice_infos',
      reimbExpenseId: 'reimb_expense_id',
      remark: 'remark',
      settlementType: 'settlement_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'string',
      currency: 'string',
      expenseCity: 'string',
      expenseCompositions: { 'type': 'array', 'itemType': QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions },
      expenseTime: 'string',
      expenseType: 'string',
      expenseTypeCode: 'string',
      invoiceInfos: { 'type': 'array', 'itemType': QueryReimbursementOrderResponseBodyModuleExpensesInvoiceInfos },
      reimbExpenseId: 'number',
      remark: 'string',
      settlementType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponseBodyModuleItineraries extends $tea.Model {
  arrCity?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  arrDate?: string;
  /**
   * @example
   * CTU
   */
  depCity?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  depDate?: string;
  trafficWay?: string;
  tripWay?: string;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrDate: 'arr_date',
      depCity: 'dep_city',
      depDate: 'dep_date',
      trafficWay: 'traffic_way',
      tripWay: 'trip_way',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrDate: 'string',
      depCity: 'string',
      depDate: 'string',
      trafficWay: 'string',
      tripWay: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponseBodyModulePaymentInfos extends $tea.Model {
  /**
   * @example
   * 20.00
   */
  amount?: string;
  /**
   * @example
   * userId
   */
  payeeUserId?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      payeeUserId: 'payee_user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'string',
      payeeUserId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryReimbursementOrderResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 10.00
   */
  companyAmount?: string;
  /**
   * @example
   * 20.00
   */
  companyPayAmount?: string;
  /**
   * @example
   * dinga809ed71b9201f35
   */
  corpId?: string;
  costCenterCode?: string;
  costCenterName?: string;
  expenses?: QueryReimbursementOrderResponseBodyModuleExpenses[];
  expensesCoverDeptId?: string;
  expensesCoverDeptName?: string;
  expensesCoverInvoiceTitle?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-07-20T10:40Z
   */
  gmtModified?: string;
  isDeleted?: string;
  itineraries?: QueryReimbursementOrderResponseBodyModuleItineraries[];
  paymentFinishTime?: string;
  paymentInfos?: QueryReimbursementOrderResponseBodyModulePaymentInfos[];
  /**
   * @example
   * 10.00
   */
  personalAmount?: string;
  processEndTime?: string;
  projectCode?: string;
  projectName?: string;
  reason?: string;
  /**
   * @example
   * RT203956
   */
  reimbursementNo?: string;
  remark?: string;
  status?: string;
  travelThirdApplyId?: string;
  /**
   * @example
   * userId
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      companyAmount: 'company_amount',
      companyPayAmount: 'company_pay_amount',
      corpId: 'corp_id',
      costCenterCode: 'cost_center_code',
      costCenterName: 'cost_center_name',
      expenses: 'expenses',
      expensesCoverDeptId: 'expenses_cover_dept_id',
      expensesCoverDeptName: 'expenses_cover_dept_name',
      expensesCoverInvoiceTitle: 'expenses_cover_invoice_title',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      isDeleted: 'is_deleted',
      itineraries: 'itineraries',
      paymentFinishTime: 'payment_finish_time',
      paymentInfos: 'payment_infos',
      personalAmount: 'personal_amount',
      processEndTime: 'process_end_time',
      projectCode: 'project_code',
      projectName: 'project_name',
      reason: 'reason',
      reimbursementNo: 'reimbursement_no',
      remark: 'remark',
      status: 'status',
      travelThirdApplyId: 'travel_third_apply_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      companyAmount: 'string',
      companyPayAmount: 'string',
      corpId: 'string',
      costCenterCode: 'string',
      costCenterName: 'string',
      expenses: { 'type': 'array', 'itemType': QueryReimbursementOrderResponseBodyModuleExpenses },
      expensesCoverDeptId: 'string',
      expensesCoverDeptName: 'string',
      expensesCoverInvoiceTitle: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      isDeleted: 'string',
      itineraries: { 'type': 'array', 'itemType': QueryReimbursementOrderResponseBodyModuleItineraries },
      paymentFinishTime: 'string',
      paymentInfos: { 'type': 'array', 'itemType': QueryReimbursementOrderResponseBodyModulePaymentInfos },
      personalAmount: 'string',
      processEndTime: 'string',
      projectCode: 'string',
      projectName: 'string',
      reason: 'string',
      reimbursementNo: 'string',
      remark: 'string',
      status: 'string',
      travelThirdApplyId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TBAccountInfoQueryResponseBodyModule extends $tea.Model {
  tbAccount?: string;
  /**
   * @example
   * true
   */
  tbBond?: boolean;
  static names(): { [key: string]: string } {
    return {
      tbAccount: 'tb_account',
      tbBond: 'tb_bond',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tbAccount: 'string',
      tbBond: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * CA1703
   */
  originFlightNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1234
   */
  outUserId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      originFlightNo: 'origin_flight_no',
      outUserId: 'out_user_id',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      originFlightNo: 'string',
      outUserId: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyRequestModifyFlightInfoList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  arrCity?: string;
  /**
   * @example
   * Y
   */
  cabin?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  depCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0000-00-00 00:00:00
   */
  depDate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * CA1704
   */
  flightNo?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerInfoList?: TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList[];
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      cabin: 'cabin',
      depCity: 'dep_city',
      depDate: 'dep_date',
      flightNo: 'flight_no',
      passengerInfoList: 'passenger_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      cabin: 'string',
      depCity: 'string',
      depDate: 'string',
      flightNo: 'string',
      passengerInfoList: { 'type': 'array', 'itemType': TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingApplyResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1000
   */
  bookingChangedTotalFee?: number;
  /**
   * @example
   * 1000
   */
  bookingOriginTotalFee?: number;
  /**
   * @example
   * true
   */
  bookingPriceChanged?: boolean;
  /**
   * @example
   * 1234
   */
  btripOrderId?: number;
  /**
   * @example
   * 1234
   */
  btripSubOrderId?: number;
  /**
   * @example
   * true
   */
  canPay?: boolean;
  /**
   * @example
   * 1000
   */
  changeFee?: number;
  /**
   * @example
   * 0000-00-00 00:00:00
   */
  deadlineTime?: string;
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * mid112
   */
  disSubOrderId?: string;
  /**
   * @example
   * 1
   */
  maxRetryTimes?: number;
  /**
   * @example
   * 1000
   */
  nextRetryInterval?: number;
  /**
   * @example
   * true
   */
  retry?: boolean;
  retryClientTips?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  /**
   * @example
   * 1000
   */
  upgradeFee?: number;
  static names(): { [key: string]: string } {
    return {
      bookingChangedTotalFee: 'booking_changed_total_fee',
      bookingOriginTotalFee: 'booking_origin_total_fee',
      bookingPriceChanged: 'booking_price_changed',
      btripOrderId: 'btrip_order_id',
      btripSubOrderId: 'btrip_sub_order_id',
      canPay: 'can_pay',
      changeFee: 'change_fee',
      deadlineTime: 'deadline_time',
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      maxRetryTimes: 'max_retry_times',
      nextRetryInterval: 'next_retry_interval',
      retry: 'retry',
      retryClientTips: 'retry_client_tips',
      status: 'status',
      upgradeFee: 'upgrade_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bookingChangedTotalFee: 'number',
      bookingOriginTotalFee: 'number',
      bookingPriceChanged: 'boolean',
      btripOrderId: 'number',
      btripSubOrderId: 'number',
      canPay: 'boolean',
      changeFee: 'number',
      deadlineTime: 'string',
      disOrderId: 'string',
      disSubOrderId: 'string',
      maxRetryTimes: 'number',
      nextRetryInterval: 'number',
      retry: 'boolean',
      retryClientTips: 'string',
      status: 'number',
      upgradeFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingCancelResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 0000-00-00 00:00:00
   */
  cancelTime?: string;
  /**
   * @example
   * mid1243
   */
  disSubOrderId?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      cancelTime: 'cancel_time',
      disSubOrderId: 'dis_sub_order_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelTime: 'string',
      disSubOrderId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingDetailResponseBodyModuleFlightInfoList extends $tea.Model {
  /**
   * @example
   * MU
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  arrAirport?: string;
  /**
   * @example
   * HGH
   */
  arrAirportCode?: string;
  arrAirportCodeName?: string;
  /**
   * @example
   * HGH
   */
  arrCity?: string;
  /**
   * @example
   * LHW
   */
  arrCityCode?: string;
  /**
   * @example
   * T3
   */
  arrTerminal?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  arrTime?: string;
  baggage?: string;
  /**
   * @example
   * 100
   */
  buildPrice?: number;
  /**
   * @example
   * V
   */
  cabin?: string;
  cabinClass?: string;
  /**
   * @example
   * MU3849
   */
  carrier?: string;
  depAirport?: string;
  /**
   * @example
   * NGB
   */
  depAirportCode?: string;
  depAirportCodeName?: string;
  /**
   * @example
   * BJS
   */
  depCity?: string;
  /**
   * @example
   * NGB
   */
  depCityCode?: string;
  /**
   * @example
   * T4
   */
  depTerminal?: string;
  /**
   * @example
   * 2000-01-01 00:00:00
   */
  depTime?: string;
  /**
   * @example
   * MU3849
   */
  flightNo?: string;
  /**
   * @example
   * Y
   */
  lastCabin?: string;
  /**
   * @example
   * CA1982
   */
  lastFlightNo?: string;
  /**
   * @example
   * 3
   */
  meal?: string;
  /**
   * @example
   * 100
   */
  oilPrice?: number;
  segmentType?: number;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  stopArrTime?: string;
  /**
   * @example
   * NGB
   */
  stopCity?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  stopDepTime?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  tuigaiqianInfo?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
      arrAirport: 'arr_airport',
      arrAirportCode: 'arr_airport_code',
      arrAirportCodeName: 'arr_airport_code_name',
      arrCity: 'arr_city',
      arrCityCode: 'arr_city_code',
      arrTerminal: 'arr_terminal',
      arrTime: 'arr_time',
      baggage: 'baggage',
      buildPrice: 'build_price',
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      carrier: 'carrier',
      depAirport: 'dep_airport',
      depAirportCode: 'dep_airport_code',
      depAirportCodeName: 'dep_airport_code_name',
      depCity: 'dep_city',
      depCityCode: 'dep_city_code',
      depTerminal: 'dep_terminal',
      depTime: 'dep_time',
      flightNo: 'flight_no',
      lastCabin: 'last_cabin',
      lastFlightNo: 'last_flight_no',
      meal: 'meal',
      oilPrice: 'oil_price',
      segmentType: 'segment_type',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
      ticketPrice: 'ticket_price',
      tuigaiqianInfo: 'tuigaiqian_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
      arrAirport: 'string',
      arrAirportCode: 'string',
      arrAirportCodeName: 'string',
      arrCity: 'string',
      arrCityCode: 'string',
      arrTerminal: 'string',
      arrTime: 'string',
      baggage: 'string',
      buildPrice: 'number',
      cabin: 'string',
      cabinClass: 'string',
      carrier: 'string',
      depAirport: 'string',
      depAirportCode: 'string',
      depAirportCodeName: 'string',
      depCity: 'string',
      depCityCode: 'string',
      depTerminal: 'string',
      depTime: 'string',
      flightNo: 'string',
      lastCabin: 'string',
      lastFlightNo: 'string',
      meal: 'string',
      oilPrice: 'number',
      segmentType: 'number',
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
      ticketPrice: 'number',
      tuigaiqianInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingDetailResponseBodyModuleTravelerInfoList extends $tea.Model {
  /**
   * @example
   * 2000-01-01
   */
  birthDate?: string;
  /**
   * @example
   * 12345
   */
  certNo?: string;
  /**
   * @example
   * 0
   */
  certType?: string;
  /**
   * @example
   * 0
   */
  openTicketStatus?: number;
  passengerName?: string;
  /**
   * @example
   * 0
   */
  passengerType?: string;
  /**
   * @example
   * 12345678909
   */
  phone?: string;
  /**
   * @example
   * 444-000000000
   */
  ticketNo?: string;
  /**
   * @example
   * 012992
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      birthDate: 'birth_date',
      certNo: 'cert_no',
      certType: 'cert_type',
      openTicketStatus: 'open_ticket_status',
      passengerName: 'passenger_name',
      passengerType: 'passenger_type',
      phone: 'phone',
      ticketNo: 'ticket_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthDate: 'string',
      certNo: 'string',
      certType: 'string',
      openTicketStatus: 'number',
      passengerName: 'string',
      passengerType: 'string',
      phone: 'string',
      ticketNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingDetailResponseBodyModule extends $tea.Model {
  alipayTradeNo?: string;
  /**
   * @example
   * 1002
   */
  btripOrderId?: number;
  /**
   * @example
   * 37772
   */
  btripSubOrderId?: number;
  /**
   * @example
   * dis123
   */
  disOrderId?: string;
  /**
   * @example
   * chang123
   */
  disSubOrderId?: string;
  /**
   * @example
   * {}
   */
  extra?: string;
  flightInfoList?: TicketChangingDetailResponseBodyModuleFlightInfoList[];
  /**
   * @example
   * 2022-12-30 11:30:00
   */
  lastPayTime?: string;
  /**
   * @example
   * 0
   */
  payStatus?: number;
  /**
   * @example
   * 2022-12-30 11:30:00
   */
  payTime?: string;
  /**
   * @example
   * 100
   */
  settlePrice?: number;
  settleType?: number;
  status?: number;
  /**
   * @example
   * 100
   */
  totalChangePrice?: number;
  /**
   * @example
   * 100
   */
  totalPrice?: number;
  /**
   * @example
   * 100
   */
  totalUpgradePrice?: number;
  travelerInfoList?: TicketChangingDetailResponseBodyModuleTravelerInfoList[];
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      btripOrderId: 'btrip_order_id',
      btripSubOrderId: 'btrip_sub_order_id',
      disOrderId: 'dis_order_id',
      disSubOrderId: 'dis_sub_order_id',
      extra: 'extra',
      flightInfoList: 'flight_info_list',
      lastPayTime: 'last_pay_time',
      payStatus: 'pay_status',
      payTime: 'pay_time',
      settlePrice: 'settle_price',
      settleType: 'settle_type',
      status: 'status',
      totalChangePrice: 'total_change_price',
      totalPrice: 'total_price',
      totalUpgradePrice: 'total_upgrade_price',
      travelerInfoList: 'traveler_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      btripOrderId: 'number',
      btripSubOrderId: 'number',
      disOrderId: 'string',
      disSubOrderId: 'string',
      extra: 'string',
      flightInfoList: { 'type': 'array', 'itemType': TicketChangingDetailResponseBodyModuleFlightInfoList },
      lastPayTime: 'string',
      payStatus: 'number',
      payTime: 'string',
      settlePrice: 'number',
      settleType: 'number',
      status: 'number',
      totalChangePrice: 'number',
      totalPrice: 'number',
      totalUpgradePrice: 'number',
      travelerInfoList: { 'type': 'array', 'itemType': TicketChangingDetailResponseBodyModuleTravelerInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * HGH
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T4
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription extends $tea.Model {
  desc?: string;
  /**
   * @example
   * demo
   */
  icon?: string;
  /**
   * @example
   * demo
   */
  image?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      icon: 'icon',
      image: 'image',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      icon: 'string',
      image: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01kLt3m923XsUs6WVif_!!6000000007266-2-tps-280-300.png
   */
  image?: string;
  /**
   * @example
   * 50
   */
  largest?: string;
  /**
   * @example
   * 40
   */
  middle?: string;
  /**
   * @example
   * 20
   */
  smallest?: string;
  static names(): { [key: string]: string } {
    return {
      image: 'image',
      largest: 'largest',
      middle: 'middle',
      smallest: 'smallest',
    };
  }

  static types(): { [key: string]: any } {
    return {
      image: 'string',
      largest: 'string',
      middle: 'string',
      smallest: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes extends $tea.Model {
  baggageDesc?: string[];
  /**
   * @example
   * 1
   */
  baggageSubContentType?: number;
  description?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription;
  imageDO?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO;
  /**
   * @example
   * true
   */
  isHighlight?: boolean;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      baggageSubContentType: 'baggage_sub_content_type',
      description: 'description',
      imageDO: 'imageDO',
      isHighlight: 'is_highlight',
      subTitle: 'subTitle',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: { 'type': 'array', 'itemType': 'string' },
      baggageSubContentType: 'number',
      description: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription,
      imageDO: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO,
      isHighlight: 'boolean',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents extends $tea.Model {
  baggageDesc?: string;
  icon?: string;
  /**
   * @example
   * 0
   */
  style?: number;
  subTitle?: string;
  static names(): { [key: string]: string } {
    return {
      baggageDesc: 'baggage_desc',
      icon: 'icon',
      style: 'style',
      subTitle: 'sub_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDesc: 'string',
      icon: 'string',
      style: 'number',
      subTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems extends $tea.Model {
  /**
   * @remarks
   * attributes
   */
  attributes?: { [key: string]: any };
  baggageSubContentVisualizes?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes[];
  baggageSubContents?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents[];
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @example
   * ADT
   */
  ptc?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      attributes: 'attributes',
      baggageSubContentVisualizes: 'baggage_sub_content_visualizes',
      baggageSubContents: 'baggage_sub_contents',
      content: 'content',
      isStruct: 'is_struct',
      ptc: 'ptc',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attributes: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      baggageSubContentVisualizes: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes },
      baggageSubContents: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents },
      content: 'string',
      isStruct: 'boolean',
      ptc: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips extends $tea.Model {
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png
   */
  logo?: string;
  tipsDesc?: string;
  /**
   * @example
   * https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png
   */
  tipsImage?: string;
  static names(): { [key: string]: string } {
    return {
      logo: 'logo',
      tipsDesc: 'tips_desc',
      tipsImage: 'tips_image',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logo: 'string',
      tipsDesc: 'string',
      tipsImage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails extends $tea.Model {
  baggageSubItems?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems[];
  /**
   * @example
   * 0
   */
  index?: number;
  tableHead?: string;
  tips?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      baggageSubItems: 'baggage_sub_items',
      index: 'index',
      tableHead: 'table_head',
      tips: 'tips',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageSubItems: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems },
      index: 'number',
      tableHead: 'string',
      tips: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips,
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents extends $tea.Model {
  /**
   * @example
   * xxx
   */
  content?: string;
  icon?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      icon: 'icon',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      icon: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 0
   */
  style?: string;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails extends $tea.Model {
  extraContents?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents extends $tea.Model {
  /**
   * @example
   * xxx
   */
  content?: string;
  icon?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      icon: 'icon',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      icon: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents extends $tea.Model {
  feeDesc?: string;
  feeRange?: string;
  /**
   * @example
   * 0
   */
  style?: string;
  static names(): { [key: string]: string } {
    return {
      feeDesc: 'fee_desc',
      feeRange: 'fee_range',
      style: 'style',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feeDesc: 'string',
      feeRange: 'string',
      style: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems extends $tea.Model {
  /**
   * @example
   * demo
   */
  content?: string;
  /**
   * @example
   * true
   */
  isStruct?: boolean;
  /**
   * @example
   * ADT
   */
  ptc?: string;
  refundSubContents?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      isStruct: 'is_struct',
      ptc: 'ptc',
      refundSubContents: 'refund_sub_contents',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      isStruct: 'boolean',
      ptc: 'string',
      refundSubContents: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails extends $tea.Model {
  extraContents?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents[];
  /**
   * @example
   * 0
   */
  index?: number;
  refundSubItems?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems[];
  tableHead?: string;
  title?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      extraContents: 'extra_contents',
      index: 'index',
      refundSubItems: 'refund_sub_items',
      tableHead: 'table_head',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraContents: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents },
      index: 'number',
      refundSubItems: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems },
      tableHead: 'string',
      title: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq extends $tea.Model {
  baggageDetails?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails[];
  changeDetails?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails[];
  refundDetails?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails[];
  static names(): { [key: string]: string } {
    return {
      baggageDetails: 'baggage_details',
      changeDetails: 'change_details',
      refundDetails: 'refund_details',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baggageDetails: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails },
      changeDetails: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails },
      refundDetails: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList extends $tea.Model {
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  upgradeFee?: number;
  /**
   * @example
   * 100
   */
  upgradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      passengerType: 'passenger_type',
      ticketPrice: 'ticket_price',
      upgradeFee: 'upgrade_fee',
      upgradePrice: 'upgrade_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerType: 'number',
      ticketPrice: 'number',
      upgradeFee: 'number',
      upgradePrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList extends $tea.Model {
  /**
   * @example
   * G
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinDesc?: string;
  /**
   * @example
   * 80
   */
  cabinDiscount?: number;
  changeOtaItemRuleRq?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq;
  /**
   * @example
   * G
   */
  childCabin?: string;
  /**
   * @example
   * 0
   */
  leftNum?: string;
  modifyPriceList?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList[];
  /**
   * @example
   * 360379a11ee84e9aa011baa41b758fe6
   */
  otaItemid?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinDesc: 'cabin_desc',
      cabinDiscount: 'cabin_discount',
      changeOtaItemRuleRq: 'change_ota_item_rule_rq',
      childCabin: 'child_cabin',
      leftNum: 'left_num',
      modifyPriceList: 'modify_price_list',
      otaItemid: 'ota_itemid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinDesc: 'string',
      cabinDiscount: 'number',
      changeOtaItemRuleRq: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq,
      childCabin: 'string',
      leftNum: 'string',
      modifyPriceList: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList },
      otaItemid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * BJS
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice extends $tea.Model {
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  upgradeFee?: number;
  /**
   * @example
   * 100
   */
  upgradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      passengerType: 'passenger_type',
      ticketPrice: 'ticket_price',
      upgradeFee: 'upgrade_fee',
      upgradePrice: 'upgrade_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerType: 'number',
      ticketPrice: 'number',
      upgradeFee: 'number',
      upgradePrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModuleFlightInfoList extends $tea.Model {
  airlineInfo?: TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo;
  arrAirportInfo?: TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo;
  cabinList?: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList[];
  /**
   * @example
   * CA1704
   */
  carrierAirline?: string;
  /**
   * @example
   * CA1704
   */
  carrierNo?: string;
  depAirportInfo?: TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo;
  /**
   * @example
   * HGH
   */
  depCityCode?: string;
  /**
   * @example
   * CA1351
   */
  flightNo?: string;
  /**
   * @example
   * false
   */
  isShare?: boolean;
  /**
   * @example
   * Y
   */
  lowestCabin?: string;
  /**
   * @example
   * Y
   */
  lowestCabinClass?: string;
  lowestCabinDesc?: string;
  /**
   * @example
   * 0
   */
  lowestCabinNum?: string;
  lowestCabinPrice?: TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice[];
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  modifyFlightArrTime?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  modifyFlightDepDate?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  modifyFlightDepTime?: string;
  /**
   * @example
   * d1fb9e0a794f45e1b762d36ff1d17zz
   */
  sessionId?: string;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      cabinList: 'cabin_list',
      carrierAirline: 'carrier_airline',
      carrierNo: 'carrier_no',
      depAirportInfo: 'dep_airport_info',
      depCityCode: 'dep_city_code',
      flightNo: 'flight_no',
      isShare: 'is_share',
      lowestCabin: 'lowest_cabin',
      lowestCabinClass: 'lowest_cabin_class',
      lowestCabinDesc: 'lowest_cabin_desc',
      lowestCabinNum: 'lowest_cabin_num',
      lowestCabinPrice: 'lowest_cabin_price',
      modifyFlightArrTime: 'modify_flight_arr_time',
      modifyFlightDepDate: 'modify_flight_dep_date',
      modifyFlightDepTime: 'modify_flight_dep_time',
      sessionId: 'session_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo,
      arrAirportInfo: TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo,
      cabinList: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList },
      carrierAirline: 'string',
      carrierNo: 'string',
      depAirportInfo: TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo,
      depCityCode: 'string',
      flightNo: 'string',
      isShare: 'boolean',
      lowestCabin: 'string',
      lowestCabinClass: 'string',
      lowestCabinDesc: 'string',
      lowestCabinNum: 'string',
      lowestCabinPrice: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice },
      modifyFlightArrTime: 'string',
      modifyFlightDepDate: 'string',
      modifyFlightDepTime: 'string',
      sessionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingEnquiryResponseBodyModule extends $tea.Model {
  flightInfoList?: TicketChangingEnquiryResponseBodyModuleFlightInfoList[];
  static names(): { [key: string]: string } {
    return {
      flightInfoList: 'flight_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightInfoList: { 'type': 'array', 'itemType': TicketChangingEnquiryResponseBodyModuleFlightInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListRequestTravelerInfoList extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BJS
   */
  arrCity?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * HGH
   */
  depCity?: string;
  name?: string;
  /**
   * @example
   * ADULT
   */
  type?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 23231
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      depCity: 'dep_city',
      name: 'name',
      type: 'type',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      depCity: 'string',
      name: 'string',
      type: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo extends $tea.Model {
  /**
   * @example
   * CA
   */
  airlineCode?: string;
  airlineName?: string;
  airlineSimpleName?: string;
  static names(): { [key: string]: string } {
    return {
      airlineCode: 'airline_code',
      airlineName: 'airline_name',
      airlineSimpleName: 'airline_simple_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineCode: 'string',
      airlineName: 'string',
      airlineSimpleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo extends $tea.Model {
  /**
   * @example
   * HGH
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * HGH
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T4
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList extends $tea.Model {
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  upgradeFee?: number;
  /**
   * @example
   * 100
   */
  upgradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      passengerType: 'passenger_type',
      ticketPrice: 'ticket_price',
      upgradeFee: 'upgrade_fee',
      upgradePrice: 'upgrade_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerType: 'number',
      ticketPrice: 'number',
      upgradeFee: 'number',
      upgradePrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList extends $tea.Model {
  /**
   * @example
   * G
   */
  cabin?: string;
  /**
   * @example
   * Y
   */
  cabinClass?: string;
  cabinDesc?: string;
  /**
   * @example
   * 80
   */
  cabinDiscount?: number;
  /**
   * @example
   * G
   */
  childCabin?: string;
  /**
   * @example
   * A
   */
  leftNum?: string;
  modifyPriceList?: TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList[];
  /**
   * @example
   * "360379a11ee84e9aa011baa41b758fe6"
   */
  otaItemid?: string;
  static names(): { [key: string]: string } {
    return {
      cabin: 'cabin',
      cabinClass: 'cabin_class',
      cabinDesc: 'cabin_desc',
      cabinDiscount: 'cabin_discount',
      childCabin: 'child_cabin',
      leftNum: 'left_num',
      modifyPriceList: 'modify_price_list',
      otaItemid: 'ota_itemid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cabin: 'string',
      cabinClass: 'string',
      cabinDesc: 'string',
      cabinDiscount: 'number',
      childCabin: 'string',
      leftNum: 'string',
      modifyPriceList: { 'type': 'array', 'itemType': TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList },
      otaItemid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo extends $tea.Model {
  /**
   * @example
   * PEK
   */
  airportCode?: string;
  airportName?: string;
  /**
   * @example
   * BJS
   */
  cityCode?: string;
  cityName?: string;
  /**
   * @example
   * T3
   */
  terminal?: string;
  static names(): { [key: string]: string } {
    return {
      airportCode: 'airport_code',
      airportName: 'airport_name',
      cityCode: 'city_code',
      cityName: 'city_name',
      terminal: 'terminal',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airportCode: 'string',
      airportName: 'string',
      cityCode: 'string',
      cityName: 'string',
      terminal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice extends $tea.Model {
  /**
   * @example
   * 0
   */
  passengerType?: number;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 100
   */
  upgradeFee?: number;
  /**
   * @example
   * 100
   */
  upgradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      passengerType: 'passenger_type',
      ticketPrice: 'ticket_price',
      upgradeFee: 'upgrade_fee',
      upgradePrice: 'upgrade_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerType: 'number',
      ticketPrice: 'number',
      upgradeFee: 'number',
      upgradePrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModuleFlightInfoList extends $tea.Model {
  airlineInfo?: TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo;
  arrAirportInfo?: TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo;
  cabinList?: TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList[];
  /**
   * @example
   * CA1704
   */
  carrierAirline?: string;
  /**
   * @example
   * CA1704
   */
  carrierNo?: string;
  depAirportInfo?: TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo;
  /**
   * @example
   * CA1704
   */
  flightNo?: string;
  flightSize?: string;
  flightType?: string;
  /**
   * @example
   * true
   */
  isProtocol?: boolean;
  /**
   * @example
   * false
   */
  isShare?: boolean;
  /**
   * @example
   * false
   */
  isStop?: boolean;
  /**
   * @example
   * Y
   */
  lowestCabin?: string;
  /**
   * @example
   * Y
   */
  lowestCabinClass?: string;
  lowestCabinDesc?: string;
  lowestCabinNum?: string;
  lowestCabinPrice?: TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice[];
  mealDesc?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  modifyFlightArrTime?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  modifyFlightDepDate?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  modifyFlightDepTime?: string;
  /**
   * @example
   * d1fb9e0a794f45e1b762d36ff1d17zz
   */
  sessionId?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  stopArrTime?: string;
  /**
   * @example
   * HGH
   */
  stopCity?: string;
  /**
   * @example
   * 2000-00-00 00:00:00
   */
  stopDepTime?: string;
  static names(): { [key: string]: string } {
    return {
      airlineInfo: 'airline_info',
      arrAirportInfo: 'arr_airport_info',
      cabinList: 'cabin_list',
      carrierAirline: 'carrier_airline',
      carrierNo: 'carrier_no',
      depAirportInfo: 'dep_airport_info',
      flightNo: 'flight_no',
      flightSize: 'flight_size',
      flightType: 'flight_type',
      isProtocol: 'is_protocol',
      isShare: 'is_share',
      isStop: 'is_stop',
      lowestCabin: 'lowest_cabin',
      lowestCabinClass: 'lowest_cabin_class',
      lowestCabinDesc: 'lowest_cabin_desc',
      lowestCabinNum: 'lowest_cabin_num',
      lowestCabinPrice: 'lowest_cabin_price',
      mealDesc: 'meal_desc',
      modifyFlightArrTime: 'modify_flight_arr_time',
      modifyFlightDepDate: 'modify_flight_dep_date',
      modifyFlightDepTime: 'modify_flight_dep_time',
      sessionId: 'session_id',
      stopArrTime: 'stop_arr_time',
      stopCity: 'stop_city',
      stopDepTime: 'stop_dep_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      airlineInfo: TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo,
      arrAirportInfo: TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo,
      cabinList: { 'type': 'array', 'itemType': TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList },
      carrierAirline: 'string',
      carrierNo: 'string',
      depAirportInfo: TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo,
      flightNo: 'string',
      flightSize: 'string',
      flightType: 'string',
      isProtocol: 'boolean',
      isShare: 'boolean',
      isStop: 'boolean',
      lowestCabin: 'string',
      lowestCabinClass: 'string',
      lowestCabinDesc: 'string',
      lowestCabinNum: 'string',
      lowestCabinPrice: { 'type': 'array', 'itemType': TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice },
      mealDesc: 'string',
      modifyFlightArrTime: 'string',
      modifyFlightDepDate: 'string',
      modifyFlightDepTime: 'string',
      sessionId: 'string',
      stopArrTime: 'string',
      stopCity: 'string',
      stopDepTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingFlightListResponseBodyModule extends $tea.Model {
  flightInfoList?: TicketChangingFlightListResponseBodyModuleFlightInfoList[];
  static names(): { [key: string]: string } {
    return {
      flightInfoList: 'flight_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      flightInfoList: { 'type': 'array', 'itemType': TicketChangingFlightListResponseBodyModuleFlightInfoList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TicketChangingPayResponseBodyModule extends $tea.Model {
  /**
   * @example
   * true
   */
  canRetry?: boolean;
  /**
   * @example
   * 1000
   */
  payPrice?: number;
  payStatus?: number;
  /**
   * @example
   * 0000-00-00 00:00:00
   */
  payTime?: string;
  /**
   * @example
   * 23098276578908765
   */
  tradeNo?: string;
  static names(): { [key: string]: string } {
    return {
      canRetry: 'can_retry',
      payPrice: 'pay_price',
      payStatus: 'pay_status',
      payTime: 'pay_time',
      tradeNo: 'trade_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      canRetry: 'boolean',
      payPrice: 'number',
      payStatus: 'number',
      payTime: 'string',
      tradeNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoSPassengerInfo extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerCertNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 170d9ac6f8807f9ec603c688f45f78a41
   */
  passengerCertType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerId: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoS extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  passengerInfo?: TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoSPassengerInfo;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 14
   */
  seatType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  ticketPrice?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  ticketType?: string;
  static names(): { [key: string]: string } {
    return {
      passengerInfo: 'passenger_info',
      seatType: 'seat_type',
      ticketPrice: 'ticket_price',
      ticketType: 'ticket_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerInfo: TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoSPassengerInfo,
      seatType: 'string',
      ticketPrice: 'string',
      ticketType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeRequestChangeTrainInfoS extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BTC
   */
  arrStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  changeTicketInfoS?: TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoS[];
  /**
   * @example
   * null
   */
  chooseBedS?: string;
  /**
   * @example
   * 1T
   */
  chooseSeatS?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BDC
   */
  depStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-06 15:19:01
   */
  originalDepTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * K234
   */
  originalTrainNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * K2345
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      changeTicketInfoS: 'change_ticket_info_s',
      chooseBedS: 'choose_bed_s',
      chooseSeatS: 'choose_seat_s',
      depStationCode: 'dep_station_code',
      depTime: 'dep_time',
      originalDepTime: 'original_dep_time',
      originalTrainNo: 'original_train_no',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      changeTicketInfoS: { 'type': 'array', 'itemType': TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoS },
      chooseBedS: 'string',
      chooseSeatS: 'string',
      depStationCode: 'string',
      depTime: 'string',
      originalDepTime: 'string',
      originalTrainNo: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyChangeResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1234
   */
  changeOrderId?: string;
  /**
   * @example
   * 116019444
   */
  orderId?: string;
  /**
   * @example
   * 1017124195788186048
   */
  outOrderId?: string;
  /**
   * @example
   * 1
   */
  payStatus?: string;
  static names(): { [key: string]: string } {
    return {
      changeOrderId: 'change_order_id',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      payStatus: 'pay_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeOrderId: 'string',
      orderId: 'string',
      outOrderId: 'string',
      payStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundRequestRefundTrainInfosRefundPassengerInfos extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerCertNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 170d9ac6f8807f9ec603c688f45f78a41
   */
  passengerCertType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12334
   */
  passengerId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerId: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundRequestRefundTrainInfos extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  refundPassengerInfos?: TrainApplyRefundRequestRefundTrainInfosRefundPassengerInfos[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * K234
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      depTime: 'dep_time',
      refundPassengerInfos: 'refund_passenger_infos',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      depTime: 'string',
      refundPassengerInfos: { 'type': 'array', 'itemType': TrainApplyRefundRequestRefundTrainInfosRefundPassengerInfos },
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainApplyRefundResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 116019444
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467200
   */
  outOrderId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainBillSettlementQueryResponseBodyModuleDataList extends $tea.Model {
  /**
   * @example
   * 2021123432260
   */
  alipayTradeNo?: string;
  applyArrCityCode?: string;
  applyArrCityName?: string;
  applyDepCityCode?: string;
  applyDepCityName?: string;
  /**
   * @remarks
   * 审批扩展自定义字段
   */
  applyExtendField?: string;
  /**
   * @example
   * 103189557
   */
  applyId?: string;
  arrCityCode?: string;
  arrCityName?: string;
  /**
   * @example
   * 2021-10-13
   */
  arrDate?: string;
  arrStation?: string;
  /**
   * @example
   * 12:30
   */
  arrTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  billRecordTime?: string;
  /**
   * @example
   * 2021-10-08 23:38:55
   */
  bookTime?: string;
  /**
   * @example
   * al_xinuan.zsy
   */
  bookerId?: string;
  bookerJobNo?: string;
  bookerName?: string;
  businessTripResult?: string;
  cabinMaxPrice?: number;
  /**
   * @example
   * 1
   */
  capitalDirection?: string;
  cascadeDepartment?: string;
  changeAffiliateNo?: string;
  changeApplyId?: string;
  /**
   * @example
   * 23.0
   */
  changeFee?: number;
  changeResult?: string;
  coachNo?: string;
  costCenter?: string;
  /**
   * @example
   * T85
   */
  costCenterNumber?: string;
  /**
   * @example
   * 0
   */
  coupon?: number;
  deductibleTax?: number;
  depCityCode?: string;
  depCityName?: string;
  department?: string;
  departmentId?: string;
  /**
   * @example
   * 2021-10-14
   */
  deptDate?: string;
  deptStation?: string;
  /**
   * @example
   * 09:44
   */
  deptTime?: string;
  exceedReason?: string;
  /**
   * @example
   * 6001
   */
  feeType?: string;
  /**
   * @example
   * 4740293
   */
  index?: string;
  invoiceTitle?: string;
  isTransferOrder?: string;
  longTicketNo?: string;
  maxCabin?: string;
  /**
   * @example
   * 23432692343243432
   */
  orderId?: string;
  /**
   * @example
   * 350
   */
  orderPrice?: number;
  orderTicketNo?: string;
  /**
   * @example
   * 534545345
   */
  overApplyId?: string;
  paymentDepartmentId?: string;
  paymentDepartmentName?: string;
  /**
   * @example
   * 4740293
   */
  primaryId?: number;
  printTicketPrice?: number;
  /**
   * @example
   * 2345235435
   */
  projectCode?: string;
  projectName?: string;
  refundAffiliateNo?: string;
  refundApplyId?: string;
  /**
   * @example
   * 0
   */
  refundFee?: number;
  refundReason?: string;
  remark?: string;
  reserveMode?: string;
  runTime?: string;
  sceneId?: string;
  sceneName?: string;
  /**
   * @example
   * 004F
   */
  seatNo?: string;
  seatType?: string;
  /**
   * @example
   * 23.0
   */
  serviceFee?: number;
  /**
   * @example
   * 350
   */
  settlementFee?: number;
  /**
   * @example
   * 4.56
   */
  settlementGrantFee?: number;
  /**
   * @example
   * 2021-10-08 23:39:01
   */
  settlementTime?: string;
  /**
   * @example
   * 2
   */
  settlementType?: string;
  shortTicketNo?: string;
  speedPackageFee?: number;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * 税率
   * 
   * @example
   * 6%
   */
  taxRate?: string;
  thirdItineraryId?: string;
  ticketCorpPayPrice?: string;
  /**
   * @example
   * 2115242342342424067354
   */
  ticketNo?: string;
  ticketPersonPayPrice?: string;
  /**
   * @example
   * 350
   */
  ticketPrice?: number;
  /**
   * @example
   * G906
   */
  trainNo?: string;
  trainType?: string;
  travelerId?: string;
  travelerJobNo?: string;
  travelerMemberTypeName?: string;
  travelerName?: string;
  /**
   * @example
   * 11
   */
  voucherType?: number;
  voucherTypeDesc?: string;
  static names(): { [key: string]: string } {
    return {
      alipayTradeNo: 'alipay_trade_no',
      applyArrCityCode: 'apply_arr_city_code',
      applyArrCityName: 'apply_arr_city_name',
      applyDepCityCode: 'apply_dep_city_code',
      applyDepCityName: 'apply_dep_city_name',
      applyExtendField: 'apply_extend_field',
      applyId: 'apply_id',
      arrCityCode: 'arr_city_code',
      arrCityName: 'arr_city_name',
      arrDate: 'arr_date',
      arrStation: 'arr_station',
      arrTime: 'arr_time',
      billRecordTime: 'bill_record_time',
      bookTime: 'book_time',
      bookerId: 'booker_id',
      bookerJobNo: 'booker_job_no',
      bookerName: 'booker_name',
      businessTripResult: 'business_trip_result',
      cabinMaxPrice: 'cabin_max_price',
      capitalDirection: 'capital_direction',
      cascadeDepartment: 'cascade_department',
      changeAffiliateNo: 'change_affiliate_no',
      changeApplyId: 'change_apply_id',
      changeFee: 'change_fee',
      changeResult: 'change_result',
      coachNo: 'coach_no',
      costCenter: 'cost_center',
      costCenterNumber: 'cost_center_number',
      coupon: 'coupon',
      deductibleTax: 'deductible_tax',
      depCityCode: 'dep_city_code',
      depCityName: 'dep_city_name',
      department: 'department',
      departmentId: 'department_id',
      deptDate: 'dept_date',
      deptStation: 'dept_station',
      deptTime: 'dept_time',
      exceedReason: 'exceed_reason',
      feeType: 'fee_type',
      index: 'index',
      invoiceTitle: 'invoice_title',
      isTransferOrder: 'is_transfer_order',
      longTicketNo: 'long_ticket_no',
      maxCabin: 'max_cabin',
      orderId: 'order_id',
      orderPrice: 'order_price',
      orderTicketNo: 'order_ticket_no',
      overApplyId: 'over_apply_id',
      paymentDepartmentId: 'payment_department_id',
      paymentDepartmentName: 'payment_department_name',
      primaryId: 'primary_id',
      printTicketPrice: 'print_ticket_price',
      projectCode: 'project_code',
      projectName: 'project_name',
      refundAffiliateNo: 'refund_affiliate_no',
      refundApplyId: 'refund_apply_id',
      refundFee: 'refund_fee',
      refundReason: 'refund_reason',
      remark: 'remark',
      reserveMode: 'reserve_mode',
      runTime: 'run_time',
      sceneId: 'scene_id',
      sceneName: 'scene_name',
      seatNo: 'seat_no',
      seatType: 'seat_type',
      serviceFee: 'service_fee',
      settlementFee: 'settlement_fee',
      settlementGrantFee: 'settlement_grant_fee',
      settlementTime: 'settlement_time',
      settlementType: 'settlement_type',
      shortTicketNo: 'short_ticket_no',
      speedPackageFee: 'speed_package_fee',
      status: 'status',
      taxRate: 'tax_rate',
      thirdItineraryId: 'third_itinerary_id',
      ticketCorpPayPrice: 'ticket_corp_pay_price',
      ticketNo: 'ticket_no',
      ticketPersonPayPrice: 'ticket_person_pay_price',
      ticketPrice: 'ticket_price',
      trainNo: 'train_no',
      trainType: 'train_type',
      travelerId: 'traveler_id',
      travelerJobNo: 'traveler_job_no',
      travelerMemberTypeName: 'traveler_member_type_name',
      travelerName: 'traveler_name',
      voucherType: 'voucher_type',
      voucherTypeDesc: 'voucher_type_desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alipayTradeNo: 'string',
      applyArrCityCode: 'string',
      applyArrCityName: 'string',
      applyDepCityCode: 'string',
      applyDepCityName: 'string',
      applyExtendField: 'string',
      applyId: 'string',
      arrCityCode: 'string',
      arrCityName: 'string',
      arrDate: 'string',
      arrStation: 'string',
      arrTime: 'string',
      billRecordTime: 'string',
      bookTime: 'string',
      bookerId: 'string',
      bookerJobNo: 'string',
      bookerName: 'string',
      businessTripResult: 'string',
      cabinMaxPrice: 'number',
      capitalDirection: 'string',
      cascadeDepartment: 'string',
      changeAffiliateNo: 'string',
      changeApplyId: 'string',
      changeFee: 'number',
      changeResult: 'string',
      coachNo: 'string',
      costCenter: 'string',
      costCenterNumber: 'string',
      coupon: 'number',
      deductibleTax: 'number',
      depCityCode: 'string',
      depCityName: 'string',
      department: 'string',
      departmentId: 'string',
      deptDate: 'string',
      deptStation: 'string',
      deptTime: 'string',
      exceedReason: 'string',
      feeType: 'string',
      index: 'string',
      invoiceTitle: 'string',
      isTransferOrder: 'string',
      longTicketNo: 'string',
      maxCabin: 'string',
      orderId: 'string',
      orderPrice: 'number',
      orderTicketNo: 'string',
      overApplyId: 'string',
      paymentDepartmentId: 'string',
      paymentDepartmentName: 'string',
      primaryId: 'number',
      printTicketPrice: 'number',
      projectCode: 'string',
      projectName: 'string',
      refundAffiliateNo: 'string',
      refundApplyId: 'string',
      refundFee: 'number',
      refundReason: 'string',
      remark: 'string',
      reserveMode: 'string',
      runTime: 'string',
      sceneId: 'string',
      sceneName: 'string',
      seatNo: 'string',
      seatType: 'string',
      serviceFee: 'number',
      settlementFee: 'number',
      settlementGrantFee: 'number',
      settlementTime: 'string',
      settlementType: 'string',
      shortTicketNo: 'string',
      speedPackageFee: 'number',
      status: 'number',
      taxRate: 'string',
      thirdItineraryId: 'string',
      ticketCorpPayPrice: 'string',
      ticketNo: 'string',
      ticketPersonPayPrice: 'string',
      ticketPrice: 'number',
      trainNo: 'string',
      trainType: 'string',
      travelerId: 'string',
      travelerJobNo: 'string',
      travelerMemberTypeName: 'string',
      travelerName: 'string',
      voucherType: 'number',
      voucherTypeDesc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainBillSettlementQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 6
   */
  category?: number;
  corpId?: string;
  dataList?: TrainBillSettlementQueryResponseBodyModuleDataList[];
  /**
   * @example
   * 2021-10-14
   */
  periodEnd?: string;
  /**
   * @example
   * 2021-10-13
   */
  periodStart?: string;
  /**
   * @example
   * 2694
   */
  totalNum?: number;
  static names(): { [key: string]: string } {
    return {
      category: 'category',
      corpId: 'corp_id',
      dataList: 'data_list',
      periodEnd: 'period_end',
      periodStart: 'period_start',
      totalNum: 'total_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'number',
      corpId: 'string',
      dataList: { 'type': 'array', 'itemType': TrainBillSettlementQueryResponseBodyModuleDataList },
      periodEnd: 'string',
      periodStart: 'string',
      totalNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO extends $tea.Model {
  /**
   * @example
   * BJS
   */
  arrCity?: string;
  arrCityName?: string;
  arrStation?: string;
  /**
   * @example
   * 2022-02-24T09:55Z
   */
  arrTime?: string;
  /**
   * @example
   * SHA
   */
  depCity?: string;
  depCityName?: string;
  depStation?: string;
  /**
   * @example
   * 2022-02-24T09:55Z
   */
  depTime?: string;
  /**
   * @example
   * 1000
   */
  price?: number;
  seatName?: string;
  /**
   * @example
   * G39
   */
  trainNo?: string;
  trainTypeDesc?: string;
  /**
   * @example
   * 32
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      arrCity: 'arr_city',
      arrCityName: 'arr_city_name',
      arrStation: 'arr_station',
      arrTime: 'arr_time',
      depCity: 'dep_city',
      depCityName: 'dep_city_name',
      depStation: 'dep_station',
      depTime: 'dep_time',
      price: 'price',
      seatName: 'seat_name',
      trainNo: 'train_no',
      trainTypeDesc: 'train_type_desc',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrCity: 'string',
      arrCityName: 'string',
      arrStation: 'string',
      arrTime: 'string',
      depCity: 'string',
      depCityName: 'string',
      depStation: 'string',
      depTime: 'string',
      price: 'number',
      seatName: 'string',
      trainNo: 'string',
      trainTypeDesc: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainExceedApplyQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * apply1
   */
  applyId?: number;
  applyIntentionInfoDO?: TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO;
  btripCause?: string;
  /**
   * @example
   * corp1
   */
  corpId?: string;
  exceedReason?: string;
  /**
   * @example
   * 32
   */
  exceedType?: number;
  /**
   * @example
   * 10000
   */
  originStandard?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 2022-02-24T09:55Z
   */
  submitTime?: string;
  /**
   * @example
   * 0001A1100000007EX08O
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * testcorp1
   */
  thirdpartCorpId?: string;
  /**
   * @example
   * user1
   */
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      applyIntentionInfoDO: 'apply_intention_info_d_o',
      btripCause: 'btrip_cause',
      corpId: 'corp_id',
      exceedReason: 'exceed_reason',
      exceedType: 'exceed_type',
      originStandard: 'origin_standard',
      status: 'status',
      submitTime: 'submit_time',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartCorpId: 'thirdpart_corp_id',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      applyIntentionInfoDO: TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO,
      btripCause: 'string',
      corpId: 'string',
      exceedReason: 'string',
      exceedType: 'number',
      originStandard: 'string',
      status: 'number',
      submitTime: 'string',
      thirdpartApplyId: 'string',
      thirdpartCorpId: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeRequestChangeTrainDetailsPassengerInfo extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerCertNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 170d9ac6f8807f9ec603c688f45f78a41
   */
  passengerCertType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeRequestChangeTrainDetails extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BDC
   */
  arrStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BTC
   */
  depStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-06 15:19:01
   */
  originalDepTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * K234
   */
  originalTrainNo?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  passengerInfo?: TrainFeeCalculateChangeRequestChangeTrainDetailsPassengerInfo;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 14
   */
  seatType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * K2345
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      depStationCode: 'dep_station_code',
      depTime: 'dep_time',
      originalDepTime: 'original_dep_time',
      originalTrainNo: 'original_train_no',
      passengerInfo: 'passenger_info',
      seatType: 'seat_type',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      depStationCode: 'string',
      depTime: 'string',
      originalDepTime: 'string',
      originalTrainNo: 'string',
      passengerInfo: TrainFeeCalculateChangeRequestChangeTrainDetailsPassengerInfo,
      seatType: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetailsPassengerInfo extends $tea.Model {
  /**
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerCertNo?: string;
  /**
   * @example
   * 170d9ac6f8807f9ec603c688f45f78a41
   */
  passengerCertType?: string;
  /**
   * @example
   * 123
   */
  passengerId?: string;
  /**
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerId: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetails extends $tea.Model {
  /**
   * @example
   * 0
   */
  changeFee?: number;
  /**
   * @example
   * 5
   */
  changeRate?: number;
  /**
   * @example
   * 10000
   */
  changeRefundFee?: number;
  /**
   * @example
   * 10
   */
  changeRefundRate?: number;
  passengerInfo?: TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetailsPassengerInfo;
  /**
   * @example
   * 14
   */
  seatType?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  static names(): { [key: string]: string } {
    return {
      changeFee: 'change_fee',
      changeRate: 'change_rate',
      changeRefundFee: 'change_refund_fee',
      changeRefundRate: 'change_refund_rate',
      passengerInfo: 'passenger_info',
      seatType: 'seat_type',
      ticketPrice: 'ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeFee: 'number',
      changeRate: 'number',
      changeRefundFee: 'number',
      changeRefundRate: 'number',
      passengerInfo: TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetailsPassengerInfo,
      seatType: 'string',
      ticketPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetails extends $tea.Model {
  /**
   * @example
   * BTC
   */
  arrStationCode?: string;
  changeTicketDetails?: TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetails[];
  /**
   * @example
   * BDC
   */
  depStationCode?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @example
   * K2345
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      changeTicketDetails: 'change_ticket_details',
      depStationCode: 'dep_station_code',
      depTime: 'dep_time',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      changeTicketDetails: { 'type': 'array', 'itemType': TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetails },
      depStationCode: 'string',
      depTime: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateChangeResponseBodyModule extends $tea.Model {
  changeTrainDetails?: TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetails[];
  /**
   * @example
   * 123456
   */
  distributeOrderId?: string;
  /**
   * @example
   * 1683901850297448200
   */
  orderId?: string;
  static names(): { [key: string]: string } {
    return {
      changeTrainDetails: 'change_train_details',
      distributeOrderId: 'distribute_order_id',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeTrainDetails: { 'type': 'array', 'itemType': TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetails },
      distributeOrderId: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundRequestRefundTrainInfosRefundPassengerInfos extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerCertNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 170d9ac6f8807f9ec603c688f45f78a41
   */
  passengerCertType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerId: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundRequestRefundTrainInfos extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BDC
   */
  arrStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BTC
   */
  depStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  refundPassengerInfos?: TrainFeeCalculateRefundRequestRefundTrainInfosRefundPassengerInfos[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * K1234
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      depStationCode: 'dep_station_code',
      depTime: 'dep_time',
      refundPassengerInfos: 'refund_passenger_infos',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      depStationCode: 'string',
      depTime: 'string',
      refundPassengerInfos: { 'type': 'array', 'itemType': TrainFeeCalculateRefundRequestRefundTrainInfosRefundPassengerInfos },
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetailsPassengerInfo extends $tea.Model {
  /**
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerCertNo?: string;
  /**
   * @example
   * 170d9ac6f8807f9ec603c688f45f78a41
   */
  passengerCertType?: string;
  /**
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerId: 'passenger_id',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerId: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetails extends $tea.Model {
  /**
   * @example
   * true
   */
  canRefund?: boolean;
  passengerInfo?: TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetailsPassengerInfo;
  /**
   * @example
   * 90
   */
  refundCostFee?: number;
  /**
   * @example
   * 10
   */
  refundPrice?: number;
  /**
   * @example
   * 90
   */
  refundRate?: number;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  static names(): { [key: string]: string } {
    return {
      canRefund: 'can_refund',
      passengerInfo: 'passenger_info',
      refundCostFee: 'refund_cost_fee',
      refundPrice: 'refund_price',
      refundRate: 'refund_rate',
      ticketPrice: 'ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      canRefund: 'boolean',
      passengerInfo: TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetailsPassengerInfo,
      refundCostFee: 'number',
      refundPrice: 'number',
      refundRate: 'number',
      ticketPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetails extends $tea.Model {
  /**
   * @example
   * BTC
   */
  arrStationCode?: string;
  /**
   * @example
   * BDC
   */
  depStationCode?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  refundTicketDetails?: TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetails[];
  /**
   * @example
   * K1234
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      depStationCode: 'dep_station_code',
      depTime: 'dep_time',
      refundTicketDetails: 'refund_ticket_details',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      depStationCode: 'string',
      depTime: 'string',
      refundTicketDetails: { 'type': 'array', 'itemType': TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetails },
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainFeeCalculateRefundResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 123445
   */
  distributeOrderId?: string;
  /**
   * @example
   * 1017002195370467200
   */
  orderId?: string;
  refundTrainDetails?: TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetails[];
  static names(): { [key: string]: string } {
    return {
      distributeOrderId: 'distribute_order_id',
      orderId: 'order_id',
      refundTrainDetails: 'refund_train_details',
    };
  }

  static types(): { [key: string]: any } {
    return {
      distributeOrderId: 'string',
      orderId: 'string',
      refundTrainDetails: { 'type': 'array', 'itemType': TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetails },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponseBodyModuleTrainStationSearchVOSeatInfos extends $tea.Model {
  /**
   * @example
   * 10000
   */
  price?: number;
  seatName?: string;
  /**
   * @example
   * 14
   */
  seatType?: string;
  stock?: string;
  static names(): { [key: string]: string } {
    return {
      price: 'price',
      seatName: 'seat_name',
      seatType: 'seat_type',
      stock: 'stock',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'number',
      seatName: 'string',
      seatType: 'string',
      stock: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponseBodyModuleTrainStationSearchVO extends $tea.Model {
  /**
   * @example
   * 0
   */
  arrDayTag?: string;
  /**
   * @example
   * BDC
   */
  arrStationCode?: string;
  arrStationName?: string;
  /**
   * @example
   * 2024-05-07 15:19:01
   */
  arrTime?: string;
  /**
   * @example
   * 31
   */
  costTime?: string;
  /**
   * @example
   * BTC
   */
  depStationCode?: string;
  depStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @example
   * 1
   */
  isEndStation?: number;
  /**
   * @example
   * 0
   */
  isStartStation?: number;
  /**
   * @example
   * 54000
   */
  price?: string;
  /**
   * @example
   * 0
   */
  saleFlag?: string;
  seatInfos?: TrainNoInfoSearchResponseBodyModuleTrainStationSearchVOSeatInfos[];
  /**
   * @example
   * k2345
   */
  trainNo?: string;
  /**
   * @example
   * 1
   */
  trainType?: string;
  static names(): { [key: string]: string } {
    return {
      arrDayTag: 'arr_day_tag',
      arrStationCode: 'arr_station_code',
      arrStationName: 'arr_station_name',
      arrTime: 'arr_time',
      costTime: 'cost_time',
      depStationCode: 'dep_station_code',
      depStationName: 'dep_station_name',
      depTime: 'dep_time',
      isEndStation: 'is_end_station',
      isStartStation: 'is_start_station',
      price: 'price',
      saleFlag: 'sale_flag',
      seatInfos: 'seat_infos',
      trainNo: 'train_no',
      trainType: 'train_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDayTag: 'string',
      arrStationCode: 'string',
      arrStationName: 'string',
      arrTime: 'string',
      costTime: 'string',
      depStationCode: 'string',
      depStationName: 'string',
      depTime: 'string',
      isEndStation: 'number',
      isStartStation: 'number',
      price: 'string',
      saleFlag: 'string',
      seatInfos: { 'type': 'array', 'itemType': TrainNoInfoSearchResponseBodyModuleTrainStationSearchVOSeatInfos },
      trainNo: 'string',
      trainType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailListSeatInfos extends $tea.Model {
  /**
   * @example
   * 67000
   */
  price?: number;
  seatName?: string;
  /**
   * @example
   * 14
   */
  seatType?: string;
  stock?: string;
  static names(): { [key: string]: string } {
    return {
      price: 'price',
      seatName: 'seat_name',
      seatType: 'seat_type',
      stock: 'stock',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'number',
      seatName: 'string',
      seatType: 'string',
      stock: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailList extends $tea.Model {
  /**
   * @example
   * 1
   */
  arrDayTag?: string;
  /**
   * @example
   * BDC
   */
  arrStationCode?: string;
  arrStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  arrTime?: string;
  /**
   * @example
   * 111
   */
  costTime?: string;
  /**
   * @example
   * BTC
   */
  depStationCode?: string;
  depStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @example
   * 1
   */
  isEndStation?: number;
  /**
   * @example
   * 1
   */
  isStartStation?: number;
  /**
   * @example
   * 54000
   */
  price?: string;
  /**
   * @example
   * 1
   */
  saleFlag?: string;
  seatInfos?: TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailListSeatInfos[];
  /**
   * @example
   * D1234
   */
  trainNo?: string;
  /**
   * @example
   * 1
   */
  trainType?: string;
  static names(): { [key: string]: string } {
    return {
      arrDayTag: 'arr_day_tag',
      arrStationCode: 'arr_station_code',
      arrStationName: 'arr_station_name',
      arrTime: 'arr_time',
      costTime: 'cost_time',
      depStationCode: 'dep_station_code',
      depStationName: 'dep_station_name',
      depTime: 'dep_time',
      isEndStation: 'is_end_station',
      isStartStation: 'is_start_station',
      price: 'price',
      saleFlag: 'sale_flag',
      seatInfos: 'seat_infos',
      trainNo: 'train_no',
      trainType: 'train_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDayTag: 'string',
      arrStationCode: 'string',
      arrStationName: 'string',
      arrTime: 'string',
      costTime: 'string',
      depStationCode: 'string',
      depStationName: 'string',
      depTime: 'string',
      isEndStation: 'number',
      isStartStation: 'number',
      price: 'string',
      saleFlag: 'string',
      seatInfos: { 'type': 'array', 'itemType': TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailListSeatInfos },
      trainNo: 'string',
      trainType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVO extends $tea.Model {
  transferDetailList?: TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailList[];
  /**
   * @example
   * 1
   */
  transferType?: string;
  static names(): { [key: string]: string } {
    return {
      transferDetailList: 'transfer_detail_list',
      transferType: 'transfer_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      transferDetailList: { 'type': 'array', 'itemType': TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailList },
      transferType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoInfoSearchResponseBodyModule extends $tea.Model {
  trainStationSearchVO?: TrainNoInfoSearchResponseBodyModuleTrainStationSearchVO;
  trainTransferStationSearchVO?: TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVO;
  static names(): { [key: string]: string } {
    return {
      trainStationSearchVO: 'train_station_search_v_o',
      trainTransferStationSearchVO: 'train_transfer_station_search_v_o',
    };
  }

  static types(): { [key: string]: any } {
    return {
      trainStationSearchVO: TrainNoInfoSearchResponseBodyModuleTrainStationSearchVO,
      trainTransferStationSearchVO: TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchRequestOption extends $tea.Model {
  /**
   * @example
   * false
   */
  needTransfer?: boolean;
  static names(): { [key: string]: string } {
    return {
      needTransfer: 'need_transfer',
    };
  }

  static types(): { [key: string]: any } {
    return {
      needTransfer: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponseBodyModuleTrainStationSearchVOSSeatInfos extends $tea.Model {
  /**
   * @example
   * 40900
   */
  price?: number;
  seatName?: string;
  /**
   * @example
   * 14
   */
  seatType?: string;
  stock?: string;
  static names(): { [key: string]: string } {
    return {
      price: 'price',
      seatName: 'seat_name',
      seatType: 'seat_type',
      stock: 'stock',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'number',
      seatName: 'string',
      seatType: 'string',
      stock: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponseBodyModuleTrainStationSearchVOS extends $tea.Model {
  /**
   * @example
   * 0
   */
  arrDayTag?: string;
  /**
   * @example
   * BDC
   */
  arrStationCode?: string;
  arrStationName?: string;
  /**
   * @example
   * 2024-05-07 14:46:06
   */
  arrTime?: string;
  /**
   * @example
   * 30
   */
  costTime?: string;
  /**
   * @example
   * BTC
   */
  depStationCode?: string;
  depStationName?: string;
  /**
   * @example
   * 2024-05-06 14:46:06
   */
  depTime?: string;
  /**
   * @example
   * 1
   */
  isEndStation?: number;
  /**
   * @example
   * 1
   */
  isStartStation?: number;
  /**
   * @example
   * 54000
   */
  price?: string;
  /**
   * @example
   * 1
   */
  saleFlag?: string;
  saleFlagMsg?: string;
  /**
   * @example
   * 0
   */
  seagmentIndex?: string;
  seatInfos?: TrainNoListSearchResponseBodyModuleTrainStationSearchVOSSeatInfos[];
  /**
   * @example
   * D2345
   */
  trainNo?: string;
  /**
   * @example
   * 1
   */
  trainType?: string;
  static names(): { [key: string]: string } {
    return {
      arrDayTag: 'arr_day_tag',
      arrStationCode: 'arr_station_code',
      arrStationName: 'arr_station_name',
      arrTime: 'arr_time',
      costTime: 'cost_time',
      depStationCode: 'dep_station_code',
      depStationName: 'dep_station_name',
      depTime: 'dep_time',
      isEndStation: 'is_end_station',
      isStartStation: 'is_start_station',
      price: 'price',
      saleFlag: 'sale_flag',
      saleFlagMsg: 'sale_flag_msg',
      seagmentIndex: 'seagment_index',
      seatInfos: 'seat_infos',
      trainNo: 'train_no',
      trainType: 'train_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDayTag: 'string',
      arrStationCode: 'string',
      arrStationName: 'string',
      arrTime: 'string',
      costTime: 'string',
      depStationCode: 'string',
      depStationName: 'string',
      depTime: 'string',
      isEndStation: 'number',
      isStartStation: 'number',
      price: 'string',
      saleFlag: 'string',
      saleFlagMsg: 'string',
      seagmentIndex: 'string',
      seatInfos: { 'type': 'array', 'itemType': TrainNoListSearchResponseBodyModuleTrainStationSearchVOSSeatInfos },
      trainNo: 'string',
      trainType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailListSeatInfos extends $tea.Model {
  /**
   * @example
   * 40900
   */
  price?: number;
  seatName?: string;
  /**
   * @example
   * 14
   */
  seatType?: string;
  /**
   * @example
   * 33
   */
  stock?: string;
  static names(): { [key: string]: string } {
    return {
      price: 'price',
      seatName: 'seat_name',
      seatType: 'seat_type',
      stock: 'stock',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'number',
      seatName: 'string',
      seatType: 'string',
      stock: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailList extends $tea.Model {
  /**
   * @example
   * 1
   */
  arrDayTag?: string;
  /**
   * @example
   * 123344
   */
  arrStationCode?: string;
  arrStationName?: string;
  /**
   * @example
   * 2024-05-07 14:46:06
   */
  arrTime?: string;
  /**
   * @example
   * 234567
   */
  costTime?: string;
  /**
   * @example
   * 12334
   */
  depStationCode?: string;
  depStationName?: string;
  /**
   * @example
   * 2024-05-06 14:46:06
   */
  depTime?: string;
  /**
   * @example
   * 1
   */
  isEndStation?: number;
  /**
   * @example
   * 0
   */
  isStartStation?: number;
  /**
   * @example
   * 105000
   */
  price?: string;
  /**
   * @example
   * 1
   */
  saleFlag?: string;
  saleFlagMsg?: string;
  seatInfos?: TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailListSeatInfos[];
  /**
   * @example
   * 0
   */
  segmentIndex?: string;
  /**
   * @example
   * K2345
   */
  trainNo?: string;
  /**
   * @example
   * 1
   */
  trainType?: string;
  static names(): { [key: string]: string } {
    return {
      arrDayTag: 'arr_day_tag',
      arrStationCode: 'arr_station_code',
      arrStationName: 'arr_station_name',
      arrTime: 'arr_time',
      costTime: 'cost_time',
      depStationCode: 'dep_station_code',
      depStationName: 'dep_station_name',
      depTime: 'dep_time',
      isEndStation: 'is_end_station',
      isStartStation: 'is_start_station',
      price: 'price',
      saleFlag: 'sale_flag',
      saleFlagMsg: 'sale_flag_msg',
      seatInfos: 'seat_infos',
      segmentIndex: 'segment_index',
      trainNo: 'train_no',
      trainType: 'train_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrDayTag: 'string',
      arrStationCode: 'string',
      arrStationName: 'string',
      arrTime: 'string',
      costTime: 'string',
      depStationCode: 'string',
      depStationName: 'string',
      depTime: 'string',
      isEndStation: 'number',
      isStartStation: 'number',
      price: 'string',
      saleFlag: 'string',
      saleFlagMsg: 'string',
      seatInfos: { 'type': 'array', 'itemType': TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailListSeatInfos },
      segmentIndex: 'string',
      trainNo: 'string',
      trainType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOs extends $tea.Model {
  arrStation?: string;
  depStation?: string;
  lineKey?: string;
  middleStation?: string;
  transferDetailList?: TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailList[];
  /**
   * @example
   * 1
   */
  transferType?: string;
  static names(): { [key: string]: string } {
    return {
      arrStation: 'arr_station',
      depStation: 'dep_station',
      lineKey: 'line_key',
      middleStation: 'middle_station',
      transferDetailList: 'transfer_detail_list',
      transferType: 'transfer_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStation: 'string',
      depStation: 'string',
      lineKey: 'string',
      middleStation: 'string',
      transferDetailList: { 'type': 'array', 'itemType': TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailList },
      transferType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainNoListSearchResponseBodyModule extends $tea.Model {
  trainStationSearchVOS?: TrainNoListSearchResponseBodyModuleTrainStationSearchVOS[];
  trainTransferStationSearchVOs?: TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOs[];
  static names(): { [key: string]: string } {
    return {
      trainStationSearchVOS: 'train_station_search_v_o_s',
      trainTransferStationSearchVOs: 'train_transfer_station_search_v_os',
    };
  }

  static types(): { [key: string]: any } {
    return {
      trainStationSearchVOS: { 'type': 'array', 'itemType': TrainNoListSearchResponseBodyModuleTrainStationSearchVOS },
      trainTransferStationSearchVOs: { 'type': 'array', 'itemType': TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOs },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCancelResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 11127278782
   */
  changeOrderId?: string;
  /**
   * @example
   * 116019444
   */
  orderId?: string;
  /**
   * @example
   * 43534345
   */
  outChangeOrderId?: string;
  /**
   * @example
   * 3702553342926024704
   */
  outOrderId?: string;
  /**
   * @example
   * true
   */
  status?: boolean;
  static names(): { [key: string]: string } {
    return {
      changeOrderId: 'change_order_id',
      orderId: 'order_id',
      outChangeOrderId: 'out_change_order_id',
      outOrderId: 'out_order_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeOrderId: 'string',
      orderId: 'string',
      outChangeOrderId: 'string',
      outOrderId: 'string',
      status: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderChangeConfirmResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 123445443444
   */
  changeOrderId?: string;
  /**
   * @example
   * 116019444
   */
  orderId?: string;
  /**
   * @example
   * 1234232
   */
  outOrderId?: string;
  /**
   * @example
   * 0
   */
  status?: boolean;
  static names(): { [key: string]: string } {
    return {
      changeOrderId: 'change_order_id',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeOrderId: 'string',
      orderId: 'string',
      outOrderId: 'string',
      status: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateRequestBookTrainInfosBookTicketInfos extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 14
   */
  seatType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0
   */
  ticketType?: string;
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      seatType: 'seat_type',
      ticketPrice: 'ticket_price',
      ticketType: 'ticket_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      seatType: 'string',
      ticketPrice: 'number',
      ticketType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateRequestBookTrainInfos extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BDC
   */
  arrStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  bookTicketInfos?: TrainOrderCreateRequestBookTrainInfosBookTicketInfos[];
  /**
   * @example
   * 1T
   */
  chooseBeds?: string;
  /**
   * @example
   * 1T
   */
  chooseSeats?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * BTC
   */
  depStationCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * K123456
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      bookTicketInfos: 'book_ticket_infos',
      chooseBeds: 'choose_beds',
      chooseSeats: 'choose_seats',
      depStationCode: 'dep_station_code',
      depTime: 'dep_time',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      bookTicketInfos: { 'type': 'array', 'itemType': TrainOrderCreateRequestBookTrainInfosBookTicketInfos },
      chooseBeds: 'string',
      chooseSeats: 'string',
      depStationCode: 'string',
      depTime: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateRequestBusinessInfo extends $tea.Model {
  /**
   * @example
   * 4321
   */
  customerApplyId?: string;
  /**
   * @example
   * 1234
   */
  customerItineraryId?: string;
  static names(): { [key: string]: string } {
    return {
      customerApplyId: 'customer_apply_id',
      customerItineraryId: 'customer_itinerary_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      customerApplyId: 'string',
      customerItineraryId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateRequestContactInfo extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b6a6fc1bdf1ba60e25c2e132b612c8819
   */
  passengerMobile?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      passengerMobile: 'passenger_mobile',
      passengerName: 'passenger_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      passengerMobile: 'string',
      passengerName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateRequestPassengerOpenInfoSCostCenterInfo extends $tea.Model {
  cascadeDeptName?: string;
  /**
   * @example
   * 123321
   */
  costCenterId?: string;
  costCenterName?: string;
  /**
   * @example
   * 12332112344
   */
  costCenterNo?: string;
  /**
   * @example
   * 010000009
   */
  departId?: string;
  departName?: string;
  /**
   * @example
   * 111111
   */
  invoiceId?: string;
  invoiceTitle?: string;
  /**
   * @example
   * acs
   */
  projectCode?: string;
  projectTitle?: string;
  static names(): { [key: string]: string } {
    return {
      cascadeDeptName: 'cascade_dept_name',
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNo: 'cost_center_no',
      departId: 'depart_id',
      departName: 'depart_name',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      projectCode: 'project_code',
      projectTitle: 'project_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cascadeDeptName: 'string',
      costCenterId: 'string',
      costCenterName: 'string',
      costCenterNo: 'string',
      departId: 'string',
      departName: 'string',
      invoiceId: 'string',
      invoiceTitle: 'string',
      projectCode: 'string',
      projectTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateRequestPassengerOpenInfoS extends $tea.Model {
  costCenterInfo?: TrainOrderCreateRequestPassengerOpenInfoSCostCenterInfo;
  /**
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  countryCode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerCertNo?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerCertType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * b6a6fc1bdf1ba60e25c2e132b612c8819
   */
  passengerMobile?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  /**
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  validDateEnd?: string;
  static names(): { [key: string]: string } {
    return {
      costCenterInfo: 'cost_center_info',
      countryCode: 'country_code',
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerId: 'passenger_id',
      passengerMobile: 'passenger_mobile',
      passengerName: 'passenger_name',
      validDateEnd: 'valid_date_end',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterInfo: TrainOrderCreateRequestPassengerOpenInfoSCostCenterInfo,
      countryCode: 'string',
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerId: 'string',
      passengerMobile: 'string',
      passengerName: 'string',
      validDateEnd: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderCreateResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1017002195798359369
   */
  orderId?: string;
  /**
   * @example
   * 1233333
   */
  outOrderId?: string;
  /**
   * @example
   * 9
   */
  payStatus?: string;
  /**
   * @example
   * 5
   */
  serviceFee?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      payStatus: 'pay_status',
      serviceFee: 'service_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
      payStatus: 'string',
      serviceFee: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfosBookTicketInfos extends $tea.Model {
  /**
   * @example
   * 04
   */
  coachNo?: string;
  /**
   * @example
   * 1111
   */
  failCode?: string;
  failReason?: string;
  /**
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * 10000
   */
  realTicketPrice?: number;
  /**
   * @example
   * 1A
   */
  seatNo?: string;
  /**
   * @example
   * 14
   */
  seatType?: string;
  /**
   * @example
   * null
   */
  ticketEntrance?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 11
   */
  ticketStatus?: number;
  /**
   * @example
   * 0
   */
  ticketType?: string;
  static names(): { [key: string]: string } {
    return {
      coachNo: 'coach_no',
      failCode: 'fail_code',
      failReason: 'fail_reason',
      passengerId: 'passenger_id',
      realTicketPrice: 'real_ticket_price',
      seatNo: 'seat_no',
      seatType: 'seat_type',
      ticketEntrance: 'ticket_entrance',
      ticketPrice: 'ticket_price',
      ticketStatus: 'ticket_status',
      ticketType: 'ticket_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coachNo: 'string',
      failCode: 'string',
      failReason: 'string',
      passengerId: 'string',
      realTicketPrice: 'number',
      seatNo: 'string',
      seatType: 'string',
      ticketEntrance: 'string',
      ticketPrice: 'number',
      ticketStatus: 'number',
      ticketType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfos extends $tea.Model {
  /**
   * @example
   * BTC
   */
  arrStationCode?: string;
  arrStationName?: string;
  /**
   * @example
   * 2024-05-07 15:19:01
   */
  arriveTime?: string;
  bookTicketInfos?: TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfosBookTicketInfos[];
  /**
   * @example
   * BDC
   */
  depStationCode?: string;
  depStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @example
   * D1234
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      arrStationName: 'arr_station_name',
      arriveTime: 'arrive_time',
      bookTicketInfos: 'book_ticket_infos',
      depStationCode: 'dep_station_code',
      depStationName: 'dep_station_name',
      depTime: 'dep_time',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      arrStationName: 'string',
      arriveTime: 'string',
      bookTicketInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfosBookTicketInfos },
      depStationCode: 'string',
      depStationName: 'string',
      depTime: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleBookInfos extends $tea.Model {
  bookTrainInfos?: TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfos[];
  /**
   * @example
   * 1111
   */
  failCode?: string;
  failMsg?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  lastPayTime?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * GW123456
   */
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      bookTrainInfos: 'book_train_infos',
      failCode: 'fail_code',
      failMsg: 'fail_msg',
      lastPayTime: 'last_pay_time',
      status: 'status',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bookTrainInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfos },
      failCode: 'string',
      failMsg: 'string',
      lastPayTime: 'string',
      status: 'number',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfosChangeTicketInfos extends $tea.Model {
  /**
   * @example
   * 0
   */
  changeCost?: number;
  /**
   * @example
   * 0
   */
  changeDiff?: number;
  /**
   * @example
   * 0
   */
  changeGapHandingFee?: number;
  /**
   * @example
   * 0
   */
  changeMinTicketAmountHandingFee?: number;
  /**
   * @example
   * 04
   */
  coachNo?: string;
  /**
   * @example
   * 4000
   */
  failCode?: string;
  failReason?: string;
  /**
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * 10000
   */
  realTicketPrice?: number;
  /**
   * @example
   * 1A
   */
  seatNo?: string;
  /**
   * @example
   * 14
   */
  seatType?: string;
  /**
   * @example
   * null
   */
  ticketEntrance?: string;
  /**
   * @example
   * 1234
   */
  ticketPrice?: number;
  /**
   * @example
   * 11
   */
  ticketStatus?: string;
  static names(): { [key: string]: string } {
    return {
      changeCost: 'change_cost',
      changeDiff: 'change_diff',
      changeGapHandingFee: 'change_gap_handing_fee',
      changeMinTicketAmountHandingFee: 'change_min_ticket_amount_handing_fee',
      coachNo: 'coach_no',
      failCode: 'fail_code',
      failReason: 'fail_reason',
      passengerId: 'passenger_id',
      realTicketPrice: 'real_ticket_price',
      seatNo: 'seat_no',
      seatType: 'seat_type',
      ticketEntrance: 'ticket_entrance',
      ticketPrice: 'ticket_price',
      ticketStatus: 'ticket_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeCost: 'number',
      changeDiff: 'number',
      changeGapHandingFee: 'number',
      changeMinTicketAmountHandingFee: 'number',
      coachNo: 'string',
      failCode: 'string',
      failReason: 'string',
      passengerId: 'string',
      realTicketPrice: 'number',
      seatNo: 'string',
      seatType: 'string',
      ticketEntrance: 'string',
      ticketPrice: 'number',
      ticketStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfos extends $tea.Model {
  /**
   * @example
   * BDC
   */
  arrStationCode?: string;
  arrStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  arriveTime?: string;
  changeTicketInfos?: TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfosChangeTicketInfos[];
  /**
   * @example
   * BTC
   */
  depStationCode?: string;
  depStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  /**
   * @example
   * D1234
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationCode: 'arr_station_code',
      arrStationName: 'arr_station_name',
      arriveTime: 'arrive_time',
      changeTicketInfos: 'change_ticket_infos',
      depStationCode: 'dep_station_code',
      depStationName: 'dep_station_name',
      depTime: 'dep_time',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationCode: 'string',
      arrStationName: 'string',
      arriveTime: 'string',
      changeTicketInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfosChangeTicketInfos },
      depStationCode: 'string',
      depStationName: 'string',
      depTime: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleChangeInfos extends $tea.Model {
  /**
   * @example
   * 1234567890
   */
  changeApplyId?: string;
  changeTrainInfos?: TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfos[];
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  limitPayTime?: string;
  /**
   * @example
   * 12345
   */
  outChangeApplyId?: string;
  /**
   * @example
   * 1
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      changeApplyId: 'change_apply_id',
      changeTrainInfos: 'change_train_infos',
      limitPayTime: 'limit_pay_time',
      outChangeApplyId: 'out_change_apply_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeApplyId: 'string',
      changeTrainInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfos },
      limitPayTime: 'string',
      outChangeApplyId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetailsOfflineRefundInfos extends $tea.Model {
  /**
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * 111
   */
  refundPrice?: number;
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      refundPrice: 'refund_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      refundPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetails extends $tea.Model {
  /**
   * @example
   * 123456
   */
  offlineRefundId?: string;
  offlineRefundInfos?: TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetailsOfflineRefundInfos[];
  /**
   * @example
   * 1
   */
  offlineRefundType?: string;
  /**
   * @example
   * 10000
   */
  refundTotalPrice?: number;
  static names(): { [key: string]: string } {
    return {
      offlineRefundId: 'offline_refund_id',
      offlineRefundInfos: 'offline_refund_infos',
      offlineRefundType: 'offline_refund_type',
      refundTotalPrice: 'refund_total_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      offlineRefundId: 'string',
      offlineRefundInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetailsOfflineRefundInfos },
      offlineRefundType: 'string',
      refundTotalPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModulePassengerInfoSCostCenterInfo extends $tea.Model {
  cascadeDeptName?: string;
  /**
   * @example
   * 111111
   */
  costCenterId?: string;
  costCenterName?: string;
  /**
   * @example
   * 123456
   */
  costCenterNo?: string;
  /**
   * @example
   * 582000002311
   */
  departId?: string;
  departName?: string;
  /**
   * @example
   * 11111
   */
  invoiceId?: string;
  invoiceTitle?: string;
  /**
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * 1234
   */
  projectCode?: string;
  projectTitle?: string;
  static names(): { [key: string]: string } {
    return {
      cascadeDeptName: 'cascade_dept_name',
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNo: 'cost_center_no',
      departId: 'depart_id',
      departName: 'depart_name',
      invoiceId: 'invoice_id',
      invoiceTitle: 'invoice_title',
      passengerId: 'passenger_id',
      projectCode: 'project_code',
      projectTitle: 'project_title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cascadeDeptName: 'string',
      costCenterId: 'string',
      costCenterName: 'string',
      costCenterNo: 'string',
      departId: 'string',
      departName: 'string',
      invoiceId: 'string',
      invoiceTitle: 'string',
      passengerId: 'string',
      projectCode: 'string',
      projectTitle: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModulePassengerInfoS extends $tea.Model {
  costCenterInfo?: TrainOrderDetailQueryResponseBodyModulePassengerInfoSCostCenterInfo;
  /**
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  countryCode?: string;
  /**
   * @example
   * 291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c
   */
  passengerCertNo?: string;
  /**
   * @example
   * 170d9ac6f8807f9ec603c688f45f78a41
   */
  passengerCertType?: string;
  /**
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * b6a6fc1bdf1ba60e25c2e132b612c8819
   */
  passengerMobile?: string;
  /**
   * @example
   * 949c9f34f677a0e5d249dfc94f5e62cc7
   */
  passengerName?: string;
  /**
   * @example
   * b6a6fc1bdf1ba60e25c2e132b612c8819
   */
  validDateEnd?: string;
  static names(): { [key: string]: string } {
    return {
      costCenterInfo: 'cost_center_info',
      countryCode: 'country_code',
      passengerCertNo: 'passenger_cert_no',
      passengerCertType: 'passenger_cert_type',
      passengerId: 'passenger_id',
      passengerMobile: 'passenger_mobile',
      passengerName: 'passenger_name',
      validDateEnd: 'valid_date_end',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterInfo: TrainOrderDetailQueryResponseBodyModulePassengerInfoSCostCenterInfo,
      countryCode: 'string',
      passengerCertNo: 'string',
      passengerCertType: 'string',
      passengerId: 'string',
      passengerMobile: 'string',
      passengerName: 'string',
      validDateEnd: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfoRefundTicketInfos extends $tea.Model {
  /**
   * @example
   * 123456
   */
  passengerId?: string;
  /**
   * @example
   * 0
   */
  refundCost?: number;
  /**
   * @example
   * 10000
   */
  refundPrice?: number;
  /**
   * @example
   * 10000
   */
  ticketPrice?: number;
  static names(): { [key: string]: string } {
    return {
      passengerId: 'passenger_id',
      refundCost: 'refund_cost',
      refundPrice: 'refund_price',
      ticketPrice: 'ticket_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      passengerId: 'string',
      refundCost: 'number',
      refundPrice: 'number',
      ticketPrice: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfo extends $tea.Model {
  arrStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  arrTime?: string;
  /**
   * @example
   * BTC
   */
  depStationCode?: string;
  depStationName?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  refundTicketInfos?: TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfoRefundTicketInfos[];
  /**
   * @example
   * K1234
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrStationName: 'arr_station_name',
      arrTime: 'arr_time',
      depStationCode: 'dep_station_code',
      depStationName: 'dep_station_name',
      depTime: 'dep_time',
      refundTicketInfos: 'refund_ticket_infos',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrStationName: 'string',
      arrTime: 'string',
      depStationCode: 'string',
      depStationName: 'string',
      depTime: 'string',
      refundTicketInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfoRefundTicketInfos },
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModuleRefundInfos extends $tea.Model {
  /**
   * @example
   * 1111
   */
  failCode?: string;
  failMsg?: string;
  /**
   * @example
   * 123456778
   */
  outRefundId?: string;
  /**
   * @remarks
   * String
   * 
   * @example
   * 123456
   */
  refundId?: string;
  refundTrainInfo?: TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfo[];
  /**
   * @example
   * 1
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      failCode: 'fail_code',
      failMsg: 'fail_msg',
      outRefundId: 'out_refund_id',
      refundId: 'refund_id',
      refundTrainInfo: 'refund_train_info',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failCode: 'string',
      failMsg: 'string',
      outRefundId: 'string',
      refundId: 'string',
      refundTrainInfo: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfo },
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderDetailQueryResponseBodyModule extends $tea.Model {
  bookInfos?: TrainOrderDetailQueryResponseBodyModuleBookInfos;
  changeInfos?: TrainOrderDetailQueryResponseBodyModuleChangeInfos[];
  offlineRefundDetails?: TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetails[];
  /**
   * @example
   * 1017028198411054446
   */
  orderId?: string;
  /**
   * @example
   * 3703184209587306496
   */
  outOrderId?: string;
  passengerInfoS?: TrainOrderDetailQueryResponseBodyModulePassengerInfoS[];
  refundInfos?: TrainOrderDetailQueryResponseBodyModuleRefundInfos[];
  static names(): { [key: string]: string } {
    return {
      bookInfos: 'book_infos',
      changeInfos: 'change_infos',
      offlineRefundDetails: 'offlineRefundDetails',
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      passengerInfoS: 'passenger_info_s',
      refundInfos: 'refund_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bookInfos: TrainOrderDetailQueryResponseBodyModuleBookInfos,
      changeInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleChangeInfos },
      offlineRefundDetails: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetails },
      orderId: 'string',
      outOrderId: 'string',
      passengerInfoS: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModulePassengerInfoS },
      refundInfos: { 'type': 'array', 'itemType': TrainOrderDetailQueryResponseBodyModuleRefundInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponseBodyModuleCostCenter extends $tea.Model {
  corpId?: string;
  /**
   * @example
   * 11643
   */
  id?: number;
  name?: string;
  /**
   * @example
   * CS112234
   */
  number?: string;
  static names(): { [key: string]: string } {
    return {
      corpId: 'corp_id',
      id: 'id',
      name: 'name',
      number: 'number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      corpId: 'string',
      id: 'number',
      name: 'string',
      number: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponseBodyModuleInvoice extends $tea.Model {
  /**
   * @example
   * 11324
   */
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 1
   */
  categoryType?: number;
  endCity?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  endTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * CS-663
   */
  originalTrainNo?: string;
  passengerName?: string;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * 100
   */
  price?: number;
  seatType?: string;
  startCity?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  startTime?: string;
  /**
   * @example
   * cs1165734212
   */
  tradeId?: string;
  /**
   * @example
   * Z1521
   */
  trainNo?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      categoryType: 'category_type',
      endCity: 'end_city',
      endTime: 'end_time',
      gmtCreate: 'gmt_create',
      originalTrainNo: 'original_train_no',
      passengerName: 'passenger_name',
      payType: 'pay_type',
      price: 'price',
      seatType: 'seat_type',
      startCity: 'start_city',
      startTime: 'start_time',
      tradeId: 'trade_id',
      trainNo: 'train_no',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      categoryType: 'number',
      endCity: 'string',
      endTime: 'string',
      gmtCreate: 'string',
      originalTrainNo: 'string',
      passengerName: 'string',
      payType: 'number',
      price: 'number',
      seatType: 'string',
      startCity: 'string',
      startTime: 'string',
      tradeId: 'string',
      trainNo: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponseBodyModuleUserAffiliateList extends $tea.Model {
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 11367
   */
  applyId?: number;
  arrCity?: string;
  arrCityAdCode?: string;
  arrStation?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  arrTime?: string;
  btripTitle?: string;
  contactName?: string;
  corpId?: string;
  corpName?: string;
  costCenter?: TrainOrderListQueryResponseBodyModuleCostCenter;
  depCity?: string;
  depCityAdCode?: string;
  depStation?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  depTime?: string;
  departId?: string;
  departName?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtModified?: string;
  /**
   * @example
   * 1478652
   */
  id?: number;
  invoice?: TrainOrderListQueryResponseBodyModuleInvoice;
  priceInfoList?: TrainOrderListQueryResponseBodyModulePriceInfoList[];
  /**
   * @example
   * PCXIDF
   */
  projectCode?: string;
  /**
   * @example
   * 12425
   */
  projectId?: number;
  projectTitle?: string;
  riderName?: string;
  /**
   * @example
   * 100
   */
  runTime?: string;
  seatType?: string;
  /**
   * @example
   * 0
   */
  status?: number;
  thirdPartBusinessId?: string;
  /**
   * @example
   * CS-SKPFDS
   */
  thirdPartProjectId?: string;
  /**
   * @example
   * CSIODJUSN
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * CS-IT89D
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * 1
   */
  ticketCount?: number;
  /**
   * @example
   * CS-663
   */
  ticketNo12306?: string;
  /**
   * @example
   * CS-663
   */
  trainNumber?: string;
  trainType?: string;
  userAffiliateList?: TrainOrderListQueryResponseBodyModuleUserAffiliateList[];
  userId?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      arrCity: 'arr_city',
      arrCityAdCode: 'arr_city_ad_code',
      arrStation: 'arr_station',
      arrTime: 'arr_time',
      btripTitle: 'btrip_title',
      contactName: 'contact_name',
      corpId: 'corp_id',
      corpName: 'corp_name',
      costCenter: 'cost_center',
      depCity: 'dep_city',
      depCityAdCode: 'dep_city_ad_code',
      depStation: 'dep_station',
      depTime: 'dep_time',
      departId: 'depart_id',
      departName: 'depart_name',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      id: 'id',
      invoice: 'invoice',
      priceInfoList: 'price_info_list',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      riderName: 'rider_name',
      runTime: 'run_time',
      seatType: 'seat_type',
      status: 'status',
      thirdPartBusinessId: 'thirdPart_business_id',
      thirdPartProjectId: 'third_part_project_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      ticketCount: 'ticket_count',
      ticketNo12306: 'ticket_no12306',
      trainNumber: 'train_number',
      trainType: 'train_type',
      userAffiliateList: 'user_affiliate_list',
      userId: 'user_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'number',
      arrCity: 'string',
      arrCityAdCode: 'string',
      arrStation: 'string',
      arrTime: 'string',
      btripTitle: 'string',
      contactName: 'string',
      corpId: 'string',
      corpName: 'string',
      costCenter: TrainOrderListQueryResponseBodyModuleCostCenter,
      depCity: 'string',
      depCityAdCode: 'string',
      depStation: 'string',
      depTime: 'string',
      departId: 'string',
      departName: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      invoice: TrainOrderListQueryResponseBodyModuleInvoice,
      priceInfoList: { 'type': 'array', 'itemType': TrainOrderListQueryResponseBodyModulePriceInfoList },
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      riderName: 'string',
      runTime: 'string',
      seatType: 'string',
      status: 'number',
      thirdPartBusinessId: 'string',
      thirdPartProjectId: 'string',
      thirdpartApplyId: 'string',
      thirdpartItineraryId: 'string',
      ticketCount: 'number',
      ticketNo12306: 'string',
      trainNumber: 'string',
      trainType: 'string',
      userAffiliateList: { 'type': 'array', 'itemType': TrainOrderListQueryResponseBodyModuleUserAffiliateList },
      userId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderListQueryResponseBodyPageInfo extends $tea.Model {
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalNumber?: number;
  static names(): { [key: string]: string } {
    return {
      page: 'page',
      pageSize: 'page_size',
      totalNumber: 'total_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      page: 'number',
      pageSize: 'number',
      totalNumber: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderPayResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 1017124195788186048
   */
  orderId?: string;
  /**
   * @example
   * 1017002195370467137
   */
  outOrderId?: string;
  /**
   * @example
   * true
   */
  status?: boolean;
  static names(): { [key: string]: string } {
    return {
      orderId: 'order_id',
      outOrderId: 'out_order_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      outOrderId: 'string',
      status: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModuleChangeTicketInfoList extends $tea.Model {
  /**
   * @example
   * 03
   */
  changeCoachNo?: string;
  /**
   * @example
   * 100
   */
  changeGapFee?: number;
  /**
   * @example
   * 100
   */
  changeHandlingFee?: number;
  /**
   * @example
   * 004C
   */
  changeSeatNo?: string;
  changeSeatTypeName?: string;
  /**
   * @example
   * 100
   */
  changeServiceFee?: number;
  /**
   * @example
   * D103
   */
  changeTrainNo?: string;
  changeTrainTypeName?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkInTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkOutTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  endTime?: string;
  fromStationName?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtModify?: string;
  /**
   * @example
   * CS987JKDF
   */
  originTicketNo?: string;
  /**
   * @example
   * m
   */
  outTicketStatus?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  startTime?: string;
  /**
   * @example
   * CS987JKDF
   */
  ticketNo?: string;
  toStationName?: string;
  static names(): { [key: string]: string } {
    return {
      changeCoachNo: 'change_coach_no',
      changeGapFee: 'change_gap_fee',
      changeHandlingFee: 'change_handling_fee',
      changeSeatNo: 'change_seat_no',
      changeSeatTypeName: 'change_seat_type_name',
      changeServiceFee: 'change_service_fee',
      changeTrainNo: 'change_train_no',
      changeTrainTypeName: 'change_train_type_name',
      checkInTime: 'check_in_time',
      checkOutTime: 'check_out_time',
      endTime: 'end_time',
      fromStationName: 'from_station_name',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      originTicketNo: 'origin_ticket_no',
      outTicketStatus: 'out_ticket_status',
      startTime: 'start_time',
      ticketNo: 'ticket_no',
      toStationName: 'to_station_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeCoachNo: 'string',
      changeGapFee: 'number',
      changeHandlingFee: 'number',
      changeSeatNo: 'string',
      changeSeatTypeName: 'string',
      changeServiceFee: 'number',
      changeTrainNo: 'string',
      changeTrainTypeName: 'string',
      checkInTime: 'string',
      checkOutTime: 'string',
      endTime: 'string',
      fromStationName: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      originTicketNo: 'string',
      outTicketStatus: 'string',
      startTime: 'string',
      ticketNo: 'string',
      toStationName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModuleInvoiceInfo extends $tea.Model {
  /**
   * @example
   * 11754
   */
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModuleOrderBaseInfo extends $tea.Model {
  /**
   * @example
   * 11657
   */
  applyId?: string;
  btripTitle?: string;
  contactName?: string;
  corpId?: string;
  corpName?: string;
  departId?: string;
  departName?: string;
  /**
   * @remarks
   * 火车票超标审批id
   * 
   * @example
   * 1422113021033961000
   */
  exceedApplyId?: string;
  /**
   * @remarks
   * 火车票超标审批三方id
   * 
   * @example
   * 2022113021030003600001715
   */
  exceedThirdPartApplyId?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtModify?: string;
  /**
   * @example
   * kaxasevesguikxn123kixnghid
   */
  itineraryId?: string;
  /**
   * @example
   * 2627694109810885616
   */
  orderId?: number;
  /**
   * @example
   * 4
   */
  orderStatus?: number;
  /**
   * @example
   * CS-EDES9898
   */
  thirdpartApplyId?: string;
  thirdpartCorpId?: string;
  /**
   * @example
   * kaxasevesguikxn123kixnghid
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * 0
   */
  tripType?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      btripTitle: 'btrip_title',
      contactName: 'contact_name',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      exceedApplyId: 'exceed_apply_id',
      exceedThirdPartApplyId: 'exceed_third_part_apply_id',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      itineraryId: 'itinerary_id',
      orderId: 'order_id',
      orderStatus: 'order_status',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartCorpId: 'thirdpart_corp_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      tripType: 'trip_type',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      btripTitle: 'string',
      contactName: 'string',
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      exceedApplyId: 'string',
      exceedThirdPartApplyId: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      itineraryId: 'string',
      orderId: 'number',
      orderStatus: 'number',
      thirdpartApplyId: 'string',
      thirdpartCorpId: 'string',
      thirdpartItineraryId: 'string',
      tripType: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModulePassengerInfoList extends $tea.Model {
  /**
   * @example
   * 11564
   */
  costCenterId?: number;
  costCenterName?: string;
  /**
   * @example
   * 01
   */
  costCenterNumber?: string;
  /**
   * @example
   * CSP-01
   */
  projectCode?: string;
  /**
   * @example
   * 22562
   */
  projectId?: number;
  projectTitle?: string;
  /**
   * @example
   * CS-22562
   */
  thirdpartProjectId?: string;
  userId?: string;
  userName?: string;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      thirdpartProjectId: 'thirdpart_project_id',
      userId: 'user_id',
      userName: 'user_name',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterId: 'number',
      costCenterName: 'string',
      costCenterNumber: 'string',
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      thirdpartProjectId: 'string',
      userId: 'string',
      userName: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModulePriceInfoList extends $tea.Model {
  /**
   * @example
   * 1
   */
  categoryCode?: number;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  passengerName?: string;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * 0
   */
  price?: number;
  /**
   * @example
   * 12312312001
   */
  tradeId?: string;
  /**
   * @example
   * 1
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      gmtCreate: 'gmt_create',
      passengerName: 'passenger_name',
      payType: 'pay_type',
      price: 'price',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      gmtCreate: 'string',
      passengerName: 'string',
      payType: 'number',
      price: 'number',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModuleRefundTicketInfoList extends $tea.Model {
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtModify?: string;
  /**
   * @example
   * 10
   */
  refundFee?: number;
  /**
   * @example
   * 10
   */
  refundServiceFee?: number;
  /**
   * @example
   * CS987JKDF
   */
  ticketNo?: string;
  static names(): { [key: string]: string } {
    return {
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      refundFee: 'refund_fee',
      refundServiceFee: 'refund_service_fee',
      ticketNo: 'ticket_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      gmtCreate: 'string',
      gmtModify: 'string',
      refundFee: 'number',
      refundServiceFee: 'number',
      ticketNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModuleTicketInfoList extends $tea.Model {
  /**
   * @example
   * false
   */
  changed?: boolean;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkInTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  checkOutTime?: string;
  /**
   * @example
   * 01
   */
  coachNo?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  endTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtCreate?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  gmtModify?: string;
  /**
   * @example
   * m
   */
  outTicketStatus?: string;
  /**
   * @example
   * 1
   */
  payType?: number;
  /**
   * @example
   * A001
   */
  seatNo?: string;
  seatTypeName?: string;
  /**
   * @example
   * 10
   */
  serviceFee?: number;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  startTime?: string;
  /**
   * @example
   * CS987JKDF
   */
  ticketNo?: string;
  /**
   * @example
   * 100
   */
  ticketPrice?: number;
  /**
   * @example
   * 1
   */
  ticketStatus?: number;
  trainTypeName?: string;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      changed: 'changed',
      checkInTime: 'check_in_time',
      checkOutTime: 'check_out_time',
      coachNo: 'coach_no',
      endTime: 'end_time',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      outTicketStatus: 'out_ticket_status',
      payType: 'pay_type',
      seatNo: 'seat_no',
      seatTypeName: 'seat_type_name',
      serviceFee: 'service_fee',
      startTime: 'start_time',
      ticketNo: 'ticket_no',
      ticketPrice: 'ticket_price',
      ticketStatus: 'ticket_status',
      trainTypeName: 'train_type_name',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changed: 'boolean',
      checkInTime: 'string',
      checkOutTime: 'string',
      coachNo: 'string',
      endTime: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      outTicketStatus: 'string',
      payType: 'number',
      seatNo: 'string',
      seatTypeName: 'string',
      serviceFee: 'number',
      startTime: 'string',
      ticketNo: 'string',
      ticketPrice: 'number',
      ticketStatus: 'number',
      trainTypeName: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModuleTrainInfo extends $tea.Model {
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  arrTime?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  depTime?: string;
  fromCityAdCode?: string;
  fromStationName?: string;
  /**
   * @example
   * 100
   */
  runTime?: number;
  toCityAdCode?: string;
  toStationName?: string;
  /**
   * @example
   * CS-150
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      depTime: 'dep_time',
      fromCityAdCode: 'from_city_ad_code',
      fromStationName: 'from_station_name',
      runTime: 'run_time',
      toCityAdCode: 'to_city_ad_code',
      toStationName: 'to_station_name',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      depTime: 'string',
      fromCityAdCode: 'string',
      fromStationName: 'string',
      runTime: 'number',
      toCityAdCode: 'string',
      toStationName: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryResponseBodyModule extends $tea.Model {
  changeTicketInfoList?: TrainOrderQueryResponseBodyModuleChangeTicketInfoList[];
  invoiceInfo?: TrainOrderQueryResponseBodyModuleInvoiceInfo;
  orderBaseInfo?: TrainOrderQueryResponseBodyModuleOrderBaseInfo;
  passengerInfoList?: TrainOrderQueryResponseBodyModulePassengerInfoList[];
  priceInfoList?: TrainOrderQueryResponseBodyModulePriceInfoList[];
  refundTicketInfoList?: TrainOrderQueryResponseBodyModuleRefundTicketInfoList[];
  ticketInfoList?: TrainOrderQueryResponseBodyModuleTicketInfoList[];
  trainInfo?: TrainOrderQueryResponseBodyModuleTrainInfo;
  static names(): { [key: string]: string } {
    return {
      changeTicketInfoList: 'change_ticket_info_list',
      invoiceInfo: 'invoice_info',
      orderBaseInfo: 'order_base_info',
      passengerInfoList: 'passenger_info_list',
      priceInfoList: 'price_info_list',
      refundTicketInfoList: 'refund_ticket_info_list',
      ticketInfoList: 'ticket_info_list',
      trainInfo: 'train_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeTicketInfoList: { 'type': 'array', 'itemType': TrainOrderQueryResponseBodyModuleChangeTicketInfoList },
      invoiceInfo: TrainOrderQueryResponseBodyModuleInvoiceInfo,
      orderBaseInfo: TrainOrderQueryResponseBodyModuleOrderBaseInfo,
      passengerInfoList: { 'type': 'array', 'itemType': TrainOrderQueryResponseBodyModulePassengerInfoList },
      priceInfoList: { 'type': 'array', 'itemType': TrainOrderQueryResponseBodyModulePriceInfoList },
      refundTicketInfoList: { 'type': 'array', 'itemType': TrainOrderQueryResponseBodyModuleRefundTicketInfoList },
      ticketInfoList: { 'type': 'array', 'itemType': TrainOrderQueryResponseBodyModuleTicketInfoList },
      trainInfo: TrainOrderQueryResponseBodyModuleTrainInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList extends $tea.Model {
  /**
   * @example
   * 03
   */
  changeCoachNo?: string;
  /**
   * @example
   * 100
   */
  changeGapFee?: number;
  /**
   * @example
   * 100
   */
  changeHandlingFee?: number;
  /**
   * @example
   * 004C
   */
  changeSeatNo?: string;
  changeSeatTypeName?: string;
  /**
   * @example
   * 100
   */
  changeServiceFee?: number;
  /**
   * @example
   * D103
   */
  changeTrainNo?: string;
  changeTrainTypeName?: string;
  checkInTime?: string;
  checkOutTime?: string;
  endTime?: string;
  fromCityName?: string;
  fromStationName?: string;
  gmtCreate?: string;
  gmtModify?: string;
  /**
   * @example
   * CS987JKDF
   */
  originTicketNo?: string;
  /**
   * @example
   * m
   */
  outTicketStatus?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  shortTicketNo?: string;
  /**
   * @example
   * 2022-05-15T22:27Z
   */
  startTime?: string;
  ticketEntrance?: string;
  /**
   * @example
   * CS987JKDF
   */
  ticketNo?: string;
  ticketStatus?: number;
  toCityName?: string;
  toStationName?: string;
  /**
   * @example
   * 0
   */
  useTicket?: string;
  /**
   * @example
   * 12312
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      changeCoachNo: 'change_coach_no',
      changeGapFee: 'change_gap_fee',
      changeHandlingFee: 'change_handling_fee',
      changeSeatNo: 'change_seat_no',
      changeSeatTypeName: 'change_seat_type_name',
      changeServiceFee: 'change_service_fee',
      changeTrainNo: 'change_train_no',
      changeTrainTypeName: 'change_train_type_name',
      checkInTime: 'check_in_time',
      checkOutTime: 'check_out_time',
      endTime: 'end_time',
      fromCityName: 'from_city_name',
      fromStationName: 'from_station_name',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      originTicketNo: 'origin_ticket_no',
      outTicketStatus: 'out_ticket_status',
      segmentIndex: 'segment_index',
      shortTicketNo: 'short_ticket_no',
      startTime: 'start_time',
      ticketEntrance: 'ticket_entrance',
      ticketNo: 'ticket_no',
      ticketStatus: 'ticket_status',
      toCityName: 'to_city_name',
      toStationName: 'to_station_name',
      useTicket: 'use_ticket',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeCoachNo: 'string',
      changeGapFee: 'number',
      changeHandlingFee: 'number',
      changeSeatNo: 'string',
      changeSeatTypeName: 'string',
      changeServiceFee: 'number',
      changeTrainNo: 'string',
      changeTrainTypeName: 'string',
      checkInTime: 'string',
      checkOutTime: 'string',
      endTime: 'string',
      fromCityName: 'string',
      fromStationName: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      originTicketNo: 'string',
      outTicketStatus: 'string',
      segmentIndex: 'number',
      shortTicketNo: 'string',
      startTime: 'string',
      ticketEntrance: 'string',
      ticketNo: 'string',
      ticketStatus: 'number',
      toCityName: 'string',
      toStationName: 'string',
      useTicket: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleInvoiceInfo extends $tea.Model {
  /**
   * @example
   * 3815504
   */
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo extends $tea.Model {
  /**
   * @example
   * 1003784135
   */
  applyId?: string;
  btripTitle?: string;
  contactName?: string;
  /**
   * @example
   * 12110002222
   */
  contactPhone?: string;
  /**
   * @example
   * btripsy4yd7v0gdpdntpp
   */
  corpId?: string;
  corpName?: string;
  departId?: string;
  departName?: string;
  /**
   * @example
   * 1422113021033961000
   */
  exceedApplyId?: string;
  /**
   * @example
   * 1422113021033961000
   */
  exceedThirdpartApplyId?: string;
  gmtCreate?: string;
  gmtModify?: string;
  /**
   * @example
   * 42942924
   */
  itineraryId?: string;
  /**
   * @example
   * 2849819724653209258
   */
  orderId?: number;
  /**
   * @example
   * 4
   */
  orderStatus?: number;
  thirdPartBusinessId?: string;
  /**
   * @example
   * 01-2023-01214
   */
  thirdpartApplyId?: string;
  /**
   * @example
   * DHDI2209141OEGHWRN
   */
  thirdpartDepartId?: string;
  /**
   * @example
   * CS-FLIGHT
   */
  thirdpartItineraryId?: string;
  /**
   * @example
   * 0
   */
  tripType?: number;
  /**
   * @example
   * 1231212
   */
  userId?: string;
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      btripTitle: 'btrip_title',
      contactName: 'contact_name',
      contactPhone: 'contact_phone',
      corpId: 'corp_id',
      corpName: 'corp_name',
      departId: 'depart_id',
      departName: 'depart_name',
      exceedApplyId: 'exceed_apply_id',
      exceedThirdpartApplyId: 'exceed_thirdpart_apply_id',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      itineraryId: 'itinerary_id',
      orderId: 'order_id',
      orderStatus: 'order_status',
      thirdPartBusinessId: 'thirdPart_business_id',
      thirdpartApplyId: 'thirdpart_apply_id',
      thirdpartDepartId: 'thirdpart_depart_id',
      thirdpartItineraryId: 'thirdpart_itinerary_id',
      tripType: 'trip_type',
      userId: 'user_id',
      userNick: 'user_nick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      btripTitle: 'string',
      contactName: 'string',
      contactPhone: 'string',
      corpId: 'string',
      corpName: 'string',
      departId: 'string',
      departName: 'string',
      exceedApplyId: 'string',
      exceedThirdpartApplyId: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      itineraryId: 'string',
      orderId: 'number',
      orderStatus: 'number',
      thirdPartBusinessId: 'string',
      thirdpartApplyId: 'string',
      thirdpartDepartId: 'string',
      thirdpartItineraryId: 'string',
      tripType: 'number',
      userId: 'string',
      userNick: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModulePassengerInfoList extends $tea.Model {
  /**
   * @example
   * 11564
   */
  costCenterId?: number;
  costCenterName?: string;
  /**
   * @example
   * CS-3345
   */
  costCenterNumber?: string;
  /**
   * @example
   * CS-PROJECT
   */
  projectCode?: string;
  /**
   * @example
   * 133576
   */
  projectId?: number;
  projectTitle?: string;
  /**
   * @example
   * CS-KDISL
   */
  thirdpartCostCenterId?: string;
  /**
   * @example
   * CS-22562
   */
  thirdpartProjectId?: string;
  /**
   * @example
   * 1231231
   */
  userId?: string;
  userName?: string;
  /**
   * @example
   * 0
   */
  userType?: number;
  static names(): { [key: string]: string } {
    return {
      costCenterId: 'cost_center_id',
      costCenterName: 'cost_center_name',
      costCenterNumber: 'cost_center_number',
      projectCode: 'project_code',
      projectId: 'project_id',
      projectTitle: 'project_title',
      thirdpartCostCenterId: 'thirdpart_cost_center_id',
      thirdpartProjectId: 'thirdpart_project_id',
      userId: 'user_id',
      userName: 'user_name',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costCenterId: 'number',
      costCenterName: 'string',
      costCenterNumber: 'string',
      projectCode: 'string',
      projectId: 'number',
      projectTitle: 'string',
      thirdpartCostCenterId: 'string',
      thirdpartProjectId: 'string',
      userId: 'string',
      userName: 'string',
      userType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModulePriceInfoList extends $tea.Model {
  categoryCode?: number;
  /**
   * @example
   * 1669344020
   */
  gmtCreate?: string;
  passengerName?: string;
  /**
   * @example
   * 4
   */
  payType?: number;
  /**
   * @example
   * 176000
   */
  price?: number;
  /**
   * @example
   * 12345678910987654321
   */
  tradeId?: string;
  type?: number;
  static names(): { [key: string]: string } {
    return {
      categoryCode: 'category_code',
      gmtCreate: 'gmt_create',
      passengerName: 'passenger_name',
      payType: 'pay_type',
      price: 'price',
      tradeId: 'trade_id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryCode: 'number',
      gmtCreate: 'string',
      passengerName: 'string',
      payType: 'number',
      price: 'number',
      tradeId: 'string',
      type: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList extends $tea.Model {
  gmtCreate?: string;
  gmtModify?: string;
  /**
   * @example
   * 10
   */
  refundFee?: number;
  /**
   * @example
   * 10
   */
  refundServiceFee?: number;
  /**
   * @example
   * CS987JKDF
   */
  ticketNo?: string;
  /**
   * @example
   * 1231231
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      refundFee: 'refund_fee',
      refundServiceFee: 'refund_service_fee',
      ticketNo: 'ticket_no',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      gmtCreate: 'string',
      gmtModify: 'string',
      refundFee: 'number',
      refundServiceFee: 'number',
      ticketNo: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos extends $tea.Model {
  /**
   * @example
   * false
   */
  changed?: boolean;
  checkInTime?: string;
  checkOutTime?: string;
  /**
   * @example
   * 01
   */
  coachNo?: string;
  endTime?: string;
  gmtCreate?: string;
  gmtModify?: string;
  /**
   * @example
   * 1
   */
  outTicketStatus?: string;
  /**
   * @example
   * 2
   */
  payType?: number;
  /**
   * @example
   * 02A
   */
  seatNo?: string;
  seatTypeName?: string;
  /**
   * @example
   * 0
   */
  segmentIndex?: number;
  /**
   * @example
   * 100
   */
  serviceFee?: number;
  shortTicketNo?: string;
  startTime?: string;
  ticketEntrance?: string;
  /**
   * @example
   * ew123121
   */
  ticketNo?: string;
  /**
   * @example
   * 400
   */
  ticketPrice?: number;
  /**
   * @example
   * 1
   */
  ticketStatus?: number;
  trainTypeName?: string;
  /**
   * @example
   * 0
   */
  useTicket?: string;
  /**
   * @example
   * 231212
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      changed: 'changed',
      checkInTime: 'check_in_time',
      checkOutTime: 'check_out_time',
      coachNo: 'coach_no',
      endTime: 'end_time',
      gmtCreate: 'gmt_create',
      gmtModify: 'gmt_modify',
      outTicketStatus: 'out_ticket_status',
      payType: 'pay_type',
      seatNo: 'seat_no',
      seatTypeName: 'seat_type_name',
      segmentIndex: 'segment_index',
      serviceFee: 'service_fee',
      shortTicketNo: 'short_ticket_no',
      startTime: 'start_time',
      ticketEntrance: 'ticket_entrance',
      ticketNo: 'ticket_no',
      ticketPrice: 'ticket_price',
      ticketStatus: 'ticket_status',
      trainTypeName: 'train_type_name',
      useTicket: 'use_ticket',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changed: 'boolean',
      checkInTime: 'string',
      checkOutTime: 'string',
      coachNo: 'string',
      endTime: 'string',
      gmtCreate: 'string',
      gmtModify: 'string',
      outTicketStatus: 'string',
      payType: 'number',
      seatNo: 'string',
      seatTypeName: 'string',
      segmentIndex: 'number',
      serviceFee: 'number',
      shortTicketNo: 'string',
      startTime: 'string',
      ticketEntrance: 'string',
      ticketNo: 'string',
      ticketPrice: 'number',
      ticketStatus: 'number',
      trainTypeName: 'string',
      useTicket: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList extends $tea.Model {
  arrTime?: string;
  depTime?: string;
  fromCityAdCode?: string;
  fromCityName?: string;
  fromStationName?: string;
  /**
   * @remarks
   * itemId
   * 
   * @example
   * 12312
   */
  itemId?: number;
  /**
   * @example
   * 120
   */
  runTime?: number;
  toCityAdCode?: string;
  toCityName?: string;
  toStationName?: string;
  /**
   * @example
   * D11
   */
  trainNo?: string;
  trainTicketInfos?: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos[];
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      depTime: 'dep_time',
      fromCityAdCode: 'from_city_ad_code',
      fromCityName: 'from_city_name',
      fromStationName: 'from_station_name',
      itemId: 'item_id',
      runTime: 'run_time',
      toCityAdCode: 'to_city_ad_code',
      toCityName: 'to_city_name',
      toStationName: 'to_station_name',
      trainNo: 'train_no',
      trainTicketInfos: 'train_ticket_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      depTime: 'string',
      fromCityAdCode: 'string',
      fromCityName: 'string',
      fromStationName: 'string',
      itemId: 'number',
      runTime: 'number',
      toCityAdCode: 'string',
      toCityName: 'string',
      toStationName: 'string',
      trainNo: 'string',
      trainTicketInfos: { 'type': 'array', 'itemType': TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo extends $tea.Model {
  /**
   * @example
   * 200
   */
  costTime?: string;
  /**
   * @example
   * 2022-11-15 00:00:00
   */
  endTime?: string;
  fromCityAdCode?: string;
  fromCityName?: string;
  fromStationName?: string;
  middleCity?: string;
  middleCityAdCode?: string;
  /**
   * @example
   * 2023-01-29 18:10:00
   */
  middleDate?: string;
  middleStation?: string;
  middleType?: string;
  /**
   * @example
   * 2022-11-01 00:00:00
   */
  startTime?: string;
  toCityAdCode?: string;
  toCityName?: string;
  toStationName?: string;
  /**
   * @example
   * 60
   */
  waitTime?: string;
  static names(): { [key: string]: string } {
    return {
      costTime: 'cost_time',
      endTime: 'end_time',
      fromCityAdCode: 'from_city_ad_code',
      fromCityName: 'from_city_name',
      fromStationName: 'from_station_name',
      middleCity: 'middle_city',
      middleCityAdCode: 'middle_city_ad_code',
      middleDate: 'middle_date',
      middleStation: 'middle_station',
      middleType: 'middle_type',
      startTime: 'start_time',
      toCityAdCode: 'to_city_ad_code',
      toCityName: 'to_city_name',
      toStationName: 'to_station_name',
      waitTime: 'wait_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      costTime: 'string',
      endTime: 'string',
      fromCityAdCode: 'string',
      fromCityName: 'string',
      fromStationName: 'string',
      middleCity: 'string',
      middleCityAdCode: 'string',
      middleDate: 'string',
      middleStation: 'string',
      middleType: 'string',
      startTime: 'string',
      toCityAdCode: 'string',
      toCityName: 'string',
      toStationName: 'string',
      waitTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo extends $tea.Model {
  trainInfoList?: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList[];
  trainTransferInfo?: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo;
  static names(): { [key: string]: string } {
    return {
      trainInfoList: 'train_info_list',
      trainTransferInfo: 'train_transfer_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      trainInfoList: { 'type': 'array', 'itemType': TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList },
      trainTransferInfo: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainOrderQueryV2ResponseBodyModule extends $tea.Model {
  changeTicketInfoList?: TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList[];
  invoiceInfo?: TrainOrderQueryV2ResponseBodyModuleInvoiceInfo;
  orderBaseInfo?: TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo;
  passengerInfoList?: TrainOrderQueryV2ResponseBodyModulePassengerInfoList[];
  priceInfoList?: TrainOrderQueryV2ResponseBodyModulePriceInfoList[];
  refundTicketInfoList?: TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList[];
  trainOrderInfo?: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo;
  static names(): { [key: string]: string } {
    return {
      changeTicketInfoList: 'change_ticket_info_list',
      invoiceInfo: 'invoice_info',
      orderBaseInfo: 'order_base_info',
      passengerInfoList: 'passenger_info_list',
      priceInfoList: 'price_info_list',
      refundTicketInfoList: 'refund_ticket_info_list',
      trainOrderInfo: 'train_order_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      changeTicketInfoList: { 'type': 'array', 'itemType': TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList },
      invoiceInfo: TrainOrderQueryV2ResponseBodyModuleInvoiceInfo,
      orderBaseInfo: TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo,
      passengerInfoList: { 'type': 'array', 'itemType': TrainOrderQueryV2ResponseBodyModulePassengerInfoList },
      priceInfoList: { 'type': 'array', 'itemType': TrainOrderQueryV2ResponseBodyModulePriceInfoList },
      refundTicketInfoList: { 'type': 'array', 'itemType': TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList },
      trainOrderInfo: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStationSearchResponseBodyModuleCities extends $tea.Model {
  /**
   * @example
   * hz
   */
  code?: string;
  name?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStationSearchResponseBodyModule extends $tea.Model {
  cities?: TrainStationSearchResponseBodyModuleCities[];
  static names(): { [key: string]: string } {
    return {
      cities: 'cities',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cities: { 'type': 'array', 'itemType': TrainStationSearchResponseBodyModuleCities },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainStopoverSearchResponseBodyModule extends $tea.Model {
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  arrTime?: string;
  /**
   * @example
   * 2024-05-06 15:19:01
   */
  depTime?: string;
  stationName?: string;
  /**
   * @example
   * 0
   */
  stationNo?: string;
  /**
   * @example
   * 0
   */
  stationType?: string;
  /**
   * @example
   * 22
   */
  stopOverTime?: string;
  static names(): { [key: string]: string } {
    return {
      arrTime: 'arr_time',
      depTime: 'dep_time',
      stationName: 'station_name',
      stationNo: 'station_no',
      stationType: 'station_type',
      stopOverTime: 'stop_over_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      arrTime: 'string',
      depTime: 'string',
      stationName: 'string',
      stationNo: 'string',
      stationType: 'string',
      stopOverTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainTicketScanQueryResponseBodyModuleItems extends $tea.Model {
  applyId?: string;
  arrStation?: string;
  /**
   * @example
   * 2022-12-01
   */
  billDate?: string;
  coachName?: string;
  costCenter?: string;
  depStation?: string;
  /**
   * @example
   * 2023-01-12 10:00:00
   */
  depTime?: string;
  department?: string;
  /**
   * @example
   * 71
   */
  id?: string;
  invoiceTitle?: string;
  /**
   * @example
   * 3137168772101111000
   */
  orderId?: number;
  /**
   * @example
   * https://www.testurl.com
   */
  ossUrl?: string;
  passenger?: string;
  /**
   * @example
   * 100
   */
  price?: string;
  project?: string;
  seat?: string;
  seatNo?: string;
  /**
   * @example
   * 30671211200127U123456
   */
  serialNumber?: string;
  /**
   * @example
   * 8.26
   */
  taxAmount?: string;
  /**
   * @example
   * 9%
   */
  taxRate?: string;
  /**
   * @remarks
   * 取票号
   * 
   * @example
   * 784-1111111111
   */
  ticketNo?: string;
  /**
   * @remarks
   * 车次
   * 
   * @example
   * G99
   */
  trainNo?: string;
  static names(): { [key: string]: string } {
    return {
      applyId: 'apply_id',
      arrStation: 'arr_station',
      billDate: 'bill_date',
      coachName: 'coach_name',
      costCenter: 'cost_center',
      depStation: 'dep_station',
      depTime: 'dep_time',
      department: 'department',
      id: 'id',
      invoiceTitle: 'invoice_title',
      orderId: 'order_id',
      ossUrl: 'oss_url',
      passenger: 'passenger',
      price: 'price',
      project: 'project',
      seat: 'seat',
      seatNo: 'seat_no',
      serialNumber: 'serial_number',
      taxAmount: 'tax_amount',
      taxRate: 'tax_rate',
      ticketNo: 'ticket_no',
      trainNo: 'train_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyId: 'string',
      arrStation: 'string',
      billDate: 'string',
      coachName: 'string',
      costCenter: 'string',
      depStation: 'string',
      depTime: 'string',
      department: 'string',
      id: 'string',
      invoiceTitle: 'string',
      orderId: 'number',
      ossUrl: 'string',
      passenger: 'string',
      price: 'string',
      project: 'string',
      seat: 'string',
      seatNo: 'string',
      serialNumber: 'string',
      taxAmount: 'string',
      taxRate: 'string',
      ticketNo: 'string',
      trainNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TrainTicketScanQueryResponseBodyModule extends $tea.Model {
  items?: TrainTicketScanQueryResponseBodyModuleItems[];
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 2
   */
  totalPage?: number;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      items: 'items',
      pageNo: 'page_no',
      pageSize: 'page_size',
      totalPage: 'total_page',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': TrainTicketScanQueryResponseBodyModuleItems },
      pageNo: 'number',
      pageSize: 'number',
      totalPage: 'number',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryResponseBodyModuleItemsMainReserveRule extends $tea.Model {
  openServiceTypeList?: string[];
  /**
   * @example
   * 2006516571
   */
  ruleCode?: number;
  ruleDesc?: string;
  /**
   * @example
   * 6516571
   */
  ruleId?: number;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      openServiceTypeList: 'open_service_type_list',
      ruleCode: 'rule_code',
      ruleDesc: 'rule_desc',
      ruleId: 'rule_id',
      ruleName: 'rule_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      openServiceTypeList: { 'type': 'array', 'itemType': 'string' },
      ruleCode: 'number',
      ruleDesc: 'string',
      ruleId: 'number',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryResponseBodyModuleItemsReserveRuleDescDataList extends $tea.Model {
  key?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'key',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryResponseBodyModuleItemsReserveRuleDesc extends $tea.Model {
  dataList?: TravelStandardListQueryResponseBodyModuleItemsReserveRuleDescDataList[];
  title?: string;
  /**
   * @example
   * flight
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      dataList: 'data_list',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataList: { 'type': 'array', 'itemType': TravelStandardListQueryResponseBodyModuleItemsReserveRuleDescDataList },
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryResponseBodyModuleItems extends $tea.Model {
  mainReserveRule?: TravelStandardListQueryResponseBodyModuleItemsMainReserveRule;
  reserveRuleDesc?: TravelStandardListQueryResponseBodyModuleItemsReserveRuleDesc[];
  /**
   * @example
   * 1
   */
  scope?: number;
  static names(): { [key: string]: string } {
    return {
      mainReserveRule: 'main_reserve_rule',
      reserveRuleDesc: 'reserve_rule_desc',
      scope: 'scope',
    };
  }

  static types(): { [key: string]: any } {
    return {
      mainReserveRule: TravelStandardListQueryResponseBodyModuleItemsMainReserveRule,
      reserveRuleDesc: { 'type': 'array', 'itemType': TravelStandardListQueryResponseBodyModuleItemsReserveRuleDesc },
      scope: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardListQueryResponseBodyModule extends $tea.Model {
  items?: TravelStandardListQueryResponseBodyModuleItems[];
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      items: 'items',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': TravelStandardListQueryResponseBodyModuleItems },
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryResponseBodyModuleReserveRuleMainReserveRule extends $tea.Model {
  openServiceTypeList?: string[];
  /**
   * @example
   * 2006517149
   */
  ruleCode?: number;
  ruleDesc?: string;
  /**
   * @example
   * 6517149
   */
  ruleId?: number;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      openServiceTypeList: 'open_service_type_list',
      ruleCode: 'rule_code',
      ruleDesc: 'rule_desc',
      ruleId: 'rule_id',
      ruleName: 'rule_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      openServiceTypeList: { 'type': 'array', 'itemType': 'string' },
      ruleCode: 'number',
      ruleDesc: 'string',
      ruleId: 'number',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryResponseBodyModuleReserveRuleModuleConfigList extends $tea.Model {
  /**
   * @example
   * FLIGHT_ADVANCE_BUY_DAY
   */
  code?: string;
  /**
   * @example
   * 3
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryResponseBodyModuleReserveRule extends $tea.Model {
  mainReserveRule?: TravelStandardQueryResponseBodyModuleReserveRuleMainReserveRule;
  moduleConfigList?: TravelStandardQueryResponseBodyModuleReserveRuleModuleConfigList[];
  static names(): { [key: string]: string } {
    return {
      mainReserveRule: 'main_reserve_rule',
      moduleConfigList: 'module_config_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      mainReserveRule: TravelStandardQueryResponseBodyModuleReserveRuleMainReserveRule,
      moduleConfigList: { 'type': 'array', 'itemType': TravelStandardQueryResponseBodyModuleReserveRuleModuleConfigList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TravelStandardQueryResponseBodyModule extends $tea.Model {
  activatedServiceTypeList?: string[];
  reserveRule?: TravelStandardQueryResponseBodyModuleReserveRule;
  static names(): { [key: string]: string } {
    return {
      activatedServiceTypeList: 'activated_service_type_list',
      reserveRule: 'reserve_rule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activatedServiceTypeList: { 'type': 'array', 'itemType': 'string' },
      reserveRule: TravelStandardQueryResponseBodyModuleReserveRule,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripBusinessInstanceQueryResponseBodyModule extends $tea.Model {
  creator?: string;
  /**
   * @example
   * 1525104000
   */
  gmtCreate?: number;
  /**
   * @example
   * 1525104000
   */
  gmtModified?: number;
  /**
   * @example
   * RUNNING
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      creator: 'creator',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creator: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripCCInfoQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * user_12138
   */
  notifier?: string;
  /**
   * @example
   * 1525104000
   */
  notifyStartTime?: number;
  static names(): { [key: string]: string } {
    return {
      notifier: 'notifier',
      notifyStartTime: 'notify_start_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      notifier: 'string',
      notifyStartTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripTaskQueryResponseBodyModuleRecordTasks extends $tea.Model {
  /**
   * @example
   * 123
   */
  actioner?: string;
  attributes?: string;
  /**
   * @example
   * 1525104000
   */
  gmtCreate?: number;
  /**
   * @example
   * 1525104000
   */
  gmtFinished?: number;
  /**
   * @example
   * 34360
   */
  id?: number;
  /**
   * @example
   * 575003
   */
  nodeId?: string;
  /**
   * @example
   * agree
   */
  outResult?: string;
  /**
   * @example
   * 123
   */
  owner?: string;
  /**
   * @example
   * RUNNING
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      actioner: 'actioner',
      attributes: 'attributes',
      gmtCreate: 'gmt_create',
      gmtFinished: 'gmt_finished',
      id: 'id',
      nodeId: 'node_id',
      outResult: 'out_result',
      owner: 'owner',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actioner: 'string',
      attributes: 'string',
      gmtCreate: 'number',
      gmtFinished: 'number',
      id: 'number',
      nodeId: 'string',
      outResult: 'string',
      owner: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripTaskQueryResponseBodyModuleRunningTasks extends $tea.Model {
  /**
   * @example
   * 123
   */
  actioner?: string;
  attributes?: string;
  /**
   * @example
   * 1525104000
   */
  gmtCreate?: number;
  /**
   * @example
   * 1525104000
   */
  gmtFinished?: number;
  /**
   * @example
   * 34360
   */
  id?: number;
  /**
   * @example
   * 575003
   */
  nodeId?: string;
  /**
   * @example
   * agree
   */
  outResult?: string;
  /**
   * @example
   * 123
   */
  owner?: string;
  /**
   * @example
   * RUNNING
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      actioner: 'actioner',
      attributes: 'attributes',
      gmtCreate: 'gmt_create',
      gmtFinished: 'gmt_finished',
      id: 'id',
      nodeId: 'node_id',
      outResult: 'out_result',
      owner: 'owner',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actioner: 'string',
      attributes: 'string',
      gmtCreate: 'number',
      gmtFinished: 'number',
      id: 'number',
      nodeId: 'string',
      outResult: 'string',
      owner: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TripTaskQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * true
   */
  needRefresh?: boolean;
  recordTasks?: TripTaskQueryResponseBodyModuleRecordTasks[];
  runningTasks?: TripTaskQueryResponseBodyModuleRunningTasks[];
  static names(): { [key: string]: string } {
    return {
      needRefresh: 'needRefresh',
      recordTasks: 'record_tasks',
      runningTasks: 'running_tasks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      needRefresh: 'boolean',
      recordTasks: { 'type': 'array', 'itemType': TripTaskQueryResponseBodyModuleRecordTasks },
      runningTasks: { 'type': 'array', 'itemType': TripTaskQueryResponseBodyModuleRunningTasks },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateEmployeeRequestCertList extends $tea.Model {
  /**
   * @example
   * 2000-01-02
   */
  birthday?: string;
  /**
   * @example
   * 2099-03-12
   */
  certExpiredTime?: string;
  /**
   * @example
   * CN
   */
  certNation?: string;
  /**
   * @example
   * 123
   */
  certNo?: string;
  /**
   * @example
   * 0
   */
  certType?: number;
  /**
   * @example
   * F
   */
  gender?: string;
  /**
   * @example
   * CN
   */
  nationality?: string;
  /**
   * @example
   * 13111111111
   */
  phone?: string;
  realName?: string;
  /**
   * @example
   * John/Wilson
   */
  realNameEn?: string;
  static names(): { [key: string]: string } {
    return {
      birthday: 'birthday',
      certExpiredTime: 'cert_expired_time',
      certNation: 'cert_nation',
      certNo: 'cert_no',
      certType: 'cert_type',
      gender: 'gender',
      nationality: 'nationality',
      phone: 'phone',
      realName: 'real_name',
      realNameEn: 'real_name_en',
    };
  }

  static types(): { [key: string]: any } {
    return {
      birthday: 'string',
      certExpiredTime: 'string',
      certNation: 'string',
      certNo: 'string',
      certType: 'number',
      gender: 'string',
      nationality: 'string',
      phone: 'string',
      realName: 'string',
      realNameEn: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UserQueryResponseBodyModuleItems extends $tea.Model {
  employeeNick?: string;
  /**
   * @example
   * 0
   */
  leaveStatus?: number;
  /**
   * @example
   * 123
   */
  thirdPartEmployeeId?: string;
  /**
   * @example
   * 001
   */
  thirdPartJobNo?: string;
  static names(): { [key: string]: string } {
    return {
      employeeNick: 'employee_nick',
      leaveStatus: 'leave_status',
      thirdPartEmployeeId: 'third_part_employee_id',
      thirdPartJobNo: 'third_part_job_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      employeeNick: 'string',
      leaveStatus: 'number',
      thirdPartEmployeeId: 'string',
      thirdPartJobNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UserQueryResponseBodyModule extends $tea.Model {
  /**
   * @example
   * true
   */
  hasMore?: boolean;
  items?: UserQueryResponseBodyModuleItems[];
  /**
   * @example
   * 9YN+jxa7PcxbNUTISeKjEw==
   */
  pageToken?: string;
  /**
   * @example
   * 0
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      hasMore: 'has_more',
      items: 'items',
      pageToken: 'page_token',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hasMore: 'boolean',
      items: { 'type': 'array', 'itemType': UserQueryResponseBodyModuleItems },
      pageToken: 'string',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails extends $tea.Model {
  /**
   * @example
   * 75.21
   */
  amount?: string;
  /**
   * @remarks
   * 行号
   * 
   * @example
   * 0
   */
  index?: string;
  itemName?: string;
  /**
   * @example
   * 1
   */
  quantity?: string;
  /**
   * @example
   * 66PT11230069
   */
  specification?: string;
  /**
   * @example
   * 12.79
   */
  tax?: string;
  /**
   * @example
   * 17%
   */
  taxRate?: string;
  unit?: string;
  /**
   * @example
   * 75.21
   */
  unitPrice?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      index: 'index',
      itemName: 'item_name',
      quantity: 'quantity',
      specification: 'specification',
      tax: 'tax',
      taxRate: 'tax_rate',
      unit: 'unit',
      unitPrice: 'unit_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'string',
      index: 'string',
      itemName: 'string',
      quantity: 'string',
      specification: 'string',
      tax: 'string',
      taxRate: 'string',
      unit: 'string',
      unitPrice: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VatInvoiceScanQueryResponseBodyModuleItems extends $tea.Model {
  /**
   * @example
   * 20
   */
  amountWithTax?: string;
  /**
   * @example
   * 18.87
   */
  amountWithoutTax?: string;
  /**
   * @example
   * 2022-12-01
   */
  billDate?: string;
  /**
   * @example
   * 07122942791187744475
   */
  checkCode?: string;
  drawer?: string;
  /**
   * @example
   * 60
   */
  id?: string;
  /**
   * @example
   * 3300111303
   */
  invoiceCode?: string;
  /**
   * @example
   * 2022-12-01
   */
  invoiceDay?: string;
  invoiceDetail?: string;
  invoiceDetails?: VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails[];
  invoiceLocation?: string;
  /**
   * @example
   * 24021111
   */
  invoiceNo?: string;
  /**
   * @example
   * 123
   */
  invoiceSubTaskId?: number;
  /**
   * @example
   * 2
   */
  invoiceType?: number;
  invoiceTypeDesc?: string;
  /**
   * @remarks
   * 机器码
   * 
   * @example
   * 661619906841
   */
  machineCode?: string;
  ofdOssUrl?: string;
  /**
   * @example
   * https://www.testurl.com
   */
  ossUrl?: string;
  /**
   * @example
   * <87*>>53>5023>-446>/4+83/5* *>5/81<75/1931>4>>
   */
  passwordArea?: string;
  pdfOssUrl?: string;
  purchaserBankAccountInfo?: string;
  purchaserContactInfo?: string;
  purchaserName?: string;
  /**
   * @example
   * 91441111111111111S
   */
  purchaserTaxNo?: string;
  recipient?: string;
  remarks?: string;
  reviewer?: string;
  sellerBankAccountInfo?: string;
  sellerContactInfo?: string;
  sellerName?: string;
  /**
   * @example
   * 91441111111111111N
   */
  sellerTaxNo?: string;
  /**
   * @example
   * 4475
   */
  smartCheckCode?: string;
  /**
   * @example
   * 1.13
   */
  taxAmount?: string;
  /**
   * @example
   * 6%
   */
  taxRate?: string;
  totalAmountInWords?: string;
  xmlOssUrl?: string;
  static names(): { [key: string]: string } {
    return {
      amountWithTax: 'amount_with_tax',
      amountWithoutTax: 'amount_without_tax',
      billDate: 'bill_date',
      checkCode: 'check_code',
      drawer: 'drawer',
      id: 'id',
      invoiceCode: 'invoice_code',
      invoiceDay: 'invoice_day',
      invoiceDetail: 'invoice_detail',
      invoiceDetails: 'invoice_details',
      invoiceLocation: 'invoice_location',
      invoiceNo: 'invoice_no',
      invoiceSubTaskId: 'invoice_sub_task_id',
      invoiceType: 'invoice_type',
      invoiceTypeDesc: 'invoice_type_desc',
      machineCode: 'machine_code',
      ofdOssUrl: 'ofd_oss_url',
      ossUrl: 'oss_url',
      passwordArea: 'password_area',
      pdfOssUrl: 'pdf_oss_url',
      purchaserBankAccountInfo: 'purchaser_bank_account_info',
      purchaserContactInfo: 'purchaser_contact_info',
      purchaserName: 'purchaser_name',
      purchaserTaxNo: 'purchaser_tax_no',
      recipient: 'recipient',
      remarks: 'remarks',
      reviewer: 'reviewer',
      sellerBankAccountInfo: 'seller_bank_account_info',
      sellerContactInfo: 'seller_contact_info',
      sellerName: 'seller_name',
      sellerTaxNo: 'seller_tax_no',
      smartCheckCode: 'smart_check_code',
      taxAmount: 'tax_amount',
      taxRate: 'tax_rate',
      totalAmountInWords: 'total_amount_in_words',
      xmlOssUrl: 'xml_oss_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amountWithTax: 'string',
      amountWithoutTax: 'string',
      billDate: 'string',
      checkCode: 'string',
      drawer: 'string',
      id: 'string',
      invoiceCode: 'string',
      invoiceDay: 'string',
      invoiceDetail: 'string',
      invoiceDetails: { 'type': 'array', 'itemType': VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails },
      invoiceLocation: 'string',
      invoiceNo: 'string',
      invoiceSubTaskId: 'number',
      invoiceType: 'number',
      invoiceTypeDesc: 'string',
      machineCode: 'string',
      ofdOssUrl: 'string',
      ossUrl: 'string',
      passwordArea: 'string',
      pdfOssUrl: 'string',
      purchaserBankAccountInfo: 'string',
      purchaserContactInfo: 'string',
      purchaserName: 'string',
      purchaserTaxNo: 'string',
      recipient: 'string',
      remarks: 'string',
      reviewer: 'string',
      sellerBankAccountInfo: 'string',
      sellerContactInfo: 'string',
      sellerName: 'string',
      sellerTaxNo: 'string',
      smartCheckCode: 'string',
      taxAmount: 'string',
      taxRate: 'string',
      totalAmountInWords: 'string',
      xmlOssUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VatInvoiceScanQueryResponseBodyModule extends $tea.Model {
  items?: VatInvoiceScanQueryResponseBodyModuleItems[];
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 2
   */
  totalPage?: number;
  /**
   * @example
   * 30
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      items: 'items',
      pageNo: 'page_no',
      pageSize: 'page_size',
      totalPage: 'total_page',
      totalSize: 'total_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': VatInvoiceScanQueryResponseBodyModuleItems },
      pageNo: 'number',
      pageSize: 'number',
      totalPage: 'number',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WaitApplyInvoiceTaskDetailQueryResponseBodyModule extends $tea.Model {
  contact?: string;
  email?: string;
  /**
   * @example
   * 0
   */
  flightInvoiceFee?: string;
  /**
   * @example
   * 3.12
   */
  fuPointInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  hotelNormalInvoiceFee?: string;
  /**
   * @example
   * 100
   */
  hotelSpecialInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  internationalFlightInvoiceFee?: string;
  internationalHotelInvoiceFee?: string;
  /**
   * @example
   * 123
   */
  invoiceThirdPartId?: string;
  invoiceTitle?: string;
  mailAddress?: string;
  mailCity?: string;
  mailFullAddress?: string;
  mailProvince?: string;
  mealNormalInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  penaltyFee?: string;
  remark?: string;
  /**
   * @example
   * 1.02
   */
  serviceFee?: string;
  /**
   * @example
   * 1234567890
   */
  telephone?: string;
  trainAccelerationPackageInvoiceFee?: string;
  /**
   * @example
   * 0
   */
  trainInvoiceFee?: string;
  vasMallSpecialInvoiceFee?: string;
  /**
   * @example
   * 100
   */
  vehicleInvoiceFee?: string;
  vehicleNormalInvoiceFee?: string;
  static names(): { [key: string]: string } {
    return {
      contact: 'contact',
      email: 'email',
      flightInvoiceFee: 'flight_invoice_fee',
      fuPointInvoiceFee: 'fu_point_invoice_fee',
      hotelNormalInvoiceFee: 'hotel_normal_invoice_fee',
      hotelSpecialInvoiceFee: 'hotel_special_invoice_fee',
      internationalFlightInvoiceFee: 'international_flight_invoice_fee',
      internationalHotelInvoiceFee: 'international_hotel_invoice_fee',
      invoiceThirdPartId: 'invoice_third_part_id',
      invoiceTitle: 'invoice_title',
      mailAddress: 'mail_address',
      mailCity: 'mail_city',
      mailFullAddress: 'mail_full_address',
      mailProvince: 'mail_province',
      mealNormalInvoiceFee: 'meal_normal_invoice_fee',
      penaltyFee: 'penalty_fee',
      remark: 'remark',
      serviceFee: 'service_fee',
      telephone: 'telephone',
      trainAccelerationPackageInvoiceFee: 'train_acceleration_package_invoice_fee',
      trainInvoiceFee: 'train_invoice_fee',
      vasMallSpecialInvoiceFee: 'vas_mall_special_invoice_fee',
      vehicleInvoiceFee: 'vehicle_invoice_fee',
      vehicleNormalInvoiceFee: 'vehicle_normal_invoice_fee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contact: 'string',
      email: 'string',
      flightInvoiceFee: 'string',
      fuPointInvoiceFee: 'string',
      hotelNormalInvoiceFee: 'string',
      hotelSpecialInvoiceFee: 'string',
      internationalFlightInvoiceFee: 'string',
      internationalHotelInvoiceFee: 'string',
      invoiceThirdPartId: 'string',
      invoiceTitle: 'string',
      mailAddress: 'string',
      mailCity: 'string',
      mailFullAddress: 'string',
      mailProvince: 'string',
      mealNormalInvoiceFee: 'string',
      penaltyFee: 'string',
      remark: 'string',
      serviceFee: 'string',
      telephone: 'string',
      trainAccelerationPackageInvoiceFee: 'string',
      trainInvoiceFee: 'string',
      vasMallSpecialInvoiceFee: 'string',
      vehicleInvoiceFee: 'string',
      vehicleNormalInvoiceFee: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client extends OpenApi {

  constructor(config: $OpenApi.Config) {
    super(config);
    this._endpointRule = "";
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("btripopen", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!Util.empty(endpoint)) {
      return endpoint;
    }

    if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * 换取accessToken接口
   * 
   * @param request - AccessTokenRequest
   * @param headers - map
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AccessTokenResponse
   */
  async accessTokenWithOptions(request: AccessTokenRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AccessTokenResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.appSecret)) {
      query["app_secret"] = request.appSecret;
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: headers,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "AccessToken",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/btrip-open-auth/v1/access-token/action/take`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<AccessTokenResponse>(await this.callApi(params, req, runtime), new AccessTokenResponse({}));
  }

  /**
   * 换取accessToken接口
   * 
   * @param request - AccessTokenRequest
   * @returns AccessTokenResponse
   */
  async accessToken(request: AccessTokenRequest): Promise<AccessTokenResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.accessTokenWithOptions(request, headers, runtime);
  }

  /**
   * 创建企业部门
   * 
   * @param tmpReq - AddDepartmentRequest
   * @param headers - AddDepartmentHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddDepartmentResponse
   */
  async addDepartmentWithOptions(tmpReq: AddDepartmentRequest, headers: AddDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<AddDepartmentResponse> {
    Util.validateModel(tmpReq);
    let request = new AddDepartmentShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.managerEmployeeIdList)) {
      request.managerEmployeeIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managerEmployeeIdList, "manager_employee_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.deptName)) {
      body["dept_name"] = request.deptName;
    }

    if (!Util.isUnset(request.managerEmployeeIdListShrink)) {
      body["manager_employee_id_list"] = request.managerEmployeeIdListShrink;
    }

    if (!Util.isUnset(request.outDeptId)) {
      body["out_dept_id"] = request.outDeptId;
    }

    if (!Util.isUnset(request.outDeptPid)) {
      body["out_dept_pid"] = request.outDeptPid;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "AddDepartment",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/department/v2/add`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<AddDepartmentResponse>(await this.callApi(params, req, runtime), new AddDepartmentResponse({}));
  }

  /**
   * 创建企业部门
   * 
   * @param request - AddDepartmentRequest
   * @returns AddDepartmentResponse
   */
  async addDepartment(request: AddDepartmentRequest): Promise<AddDepartmentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new AddDepartmentHeaders({ });
    return await this.addDepartmentWithOptions(request, headers, runtime);
  }

  /**
   * 添加员工
   * 
   * @param tmpReq - AddEmployeeRequest
   * @param headers - AddEmployeeHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddEmployeeResponse
   */
  async addEmployeeWithOptions(tmpReq: AddEmployeeRequest, headers: AddEmployeeHeaders, runtime: $Util.RuntimeOptions): Promise<AddEmployeeResponse> {
    Util.validateModel(tmpReq);
    let request = new AddEmployeeShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.baseCityCodeList)) {
      request.baseCityCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.baseCityCodeList, "base_city_code_list", "json");
    }

    if (!Util.isUnset(tmpReq.certList)) {
      request.certListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certList, "cert_list", "json");
    }

    if (!Util.isUnset(tmpReq.customRoleCodeList)) {
      request.customRoleCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customRoleCodeList, "custom_role_code_list", "json");
    }

    if (!Util.isUnset(tmpReq.outDeptIdList)) {
      request.outDeptIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outDeptIdList, "out_dept_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.attribute)) {
      body["attribute"] = request.attribute;
    }

    if (!Util.isUnset(request.avatar)) {
      body["avatar"] = request.avatar;
    }

    if (!Util.isUnset(request.baseCityCodeListShrink)) {
      body["base_city_code_list"] = request.baseCityCodeListShrink;
    }

    if (!Util.isUnset(request.birthday)) {
      body["birthday"] = request.birthday;
    }

    if (!Util.isUnset(request.certListShrink)) {
      body["cert_list"] = request.certListShrink;
    }

    if (!Util.isUnset(request.customRoleCodeListShrink)) {
      body["custom_role_code_list"] = request.customRoleCodeListShrink;
    }

    if (!Util.isUnset(request.email)) {
      body["email"] = request.email;
    }

    if (!Util.isUnset(request.gender)) {
      body["gender"] = request.gender;
    }

    if (!Util.isUnset(request.isAdmin)) {
      body["is_admin"] = request.isAdmin;
    }

    if (!Util.isUnset(request.isBoss)) {
      body["is_boss"] = request.isBoss;
    }

    if (!Util.isUnset(request.isDeptLeader)) {
      body["is_dept_leader"] = request.isDeptLeader;
    }

    if (!Util.isUnset(request.jobNo)) {
      body["job_no"] = request.jobNo;
    }

    if (!Util.isUnset(request.managerUserId)) {
      body["manager_user_id"] = request.managerUserId;
    }

    if (!Util.isUnset(request.outDeptIdListShrink)) {
      body["out_dept_id_list"] = request.outDeptIdListShrink;
    }

    if (!Util.isUnset(request.phone)) {
      body["phone"] = request.phone;
    }

    if (!Util.isUnset(request.positionLevel)) {
      body["position_level"] = request.positionLevel;
    }

    if (!Util.isUnset(request.realName)) {
      body["real_name"] = request.realName;
    }

    if (!Util.isUnset(request.realNameEn)) {
      body["real_name_en"] = request.realNameEn;
    }

    if (!Util.isUnset(request.unionId)) {
      body["union_id"] = request.unionId;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userNick)) {
      body["user_nick"] = request.userNick;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "AddEmployee",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/employee/v2/add`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<AddEmployeeResponse>(await this.callApi(params, req, runtime), new AddEmployeeResponse({}));
  }

  /**
   * 添加员工
   * 
   * @param request - AddEmployeeRequest
   * @returns AddEmployeeResponse
   */
  async addEmployee(request: AddEmployeeRequest): Promise<AddEmployeeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new AddEmployeeHeaders({ });
    return await this.addEmployeeWithOptions(request, headers, runtime);
  }

  /**
   * 批量新增企业自定义角色下人员
   * 
   * @param tmpReq - AddEmployeesToCustomRoleRequest
   * @param headers - AddEmployeesToCustomRoleHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddEmployeesToCustomRoleResponse
   */
  async addEmployeesToCustomRoleWithOptions(tmpReq: AddEmployeesToCustomRoleRequest, headers: AddEmployeesToCustomRoleHeaders, runtime: $Util.RuntimeOptions): Promise<AddEmployeesToCustomRoleResponse> {
    Util.validateModel(tmpReq);
    let request = new AddEmployeesToCustomRoleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.userIdList)) {
      request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, "user_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.roleId)) {
      body["role_id"] = request.roleId;
    }

    if (!Util.isUnset(request.userIdListShrink)) {
      body["user_id_list"] = request.userIdListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "AddEmployeesToCustomRole",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/role/v1/customRoleEmployees/add`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<AddEmployeesToCustomRoleResponse>(await this.callApi(params, req, runtime), new AddEmployeesToCustomRoleResponse({}));
  }

  /**
   * 批量新增企业自定义角色下人员
   * 
   * @param request - AddEmployeesToCustomRoleRequest
   * @returns AddEmployeesToCustomRoleResponse
   */
  async addEmployeesToCustomRole(request: AddEmployeesToCustomRoleRequest): Promise<AddEmployeesToCustomRoleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new AddEmployeesToCustomRoleHeaders({ });
    return await this.addEmployeesToCustomRoleWithOptions(request, headers, runtime);
  }

  /**
   * 新增发票抬头适用人员
   * 
   * @param tmpReq - AddInvoiceEntityRequest
   * @param headers - AddInvoiceEntityHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddInvoiceEntityResponse
   */
  async addInvoiceEntityWithOptions(tmpReq: AddInvoiceEntityRequest, headers: AddInvoiceEntityHeaders, runtime: $Util.RuntimeOptions): Promise<AddInvoiceEntityResponse> {
    Util.validateModel(tmpReq);
    let request = new AddInvoiceEntityShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entities)) {
      request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, "entities", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.entitiesShrink)) {
      body["entities"] = request.entitiesShrink;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      body["third_part_id"] = request.thirdPartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "AddInvoiceEntity",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/entities`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<AddInvoiceEntityResponse>(await this.callApi(params, req, runtime), new AddInvoiceEntityResponse({}));
  }

  /**
   * 新增发票抬头适用人员
   * 
   * @param request - AddInvoiceEntityRequest
   * @returns AddInvoiceEntityResponse
   */
  async addInvoiceEntity(request: AddInvoiceEntityRequest): Promise<AddInvoiceEntityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new AddInvoiceEntityHeaders({ });
    return await this.addInvoiceEntityWithOptions(request, headers, runtime);
  }

  /**
   * 商旅功能页跳转
   * 
   * @param request - AddressGetRequest
   * @param headers - AddressGetHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddressGetResponse
   */
  async addressGetWithOptions(request: AddressGetRequest, headers: AddressGetHeaders, runtime: $Util.RuntimeOptions): Promise<AddressGetResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.actionType)) {
      query["action_type"] = request.actionType;
    }

    if (!Util.isUnset(request.arrCityCode)) {
      query["arr_city_code"] = request.arrCityCode;
    }

    if (!Util.isUnset(request.arrCityName)) {
      query["arr_city_name"] = request.arrCityName;
    }

    if (!Util.isUnset(request.carScenesCode)) {
      query["car_scenes_code"] = request.carScenesCode;
    }

    if (!Util.isUnset(request.depCityCode)) {
      query["dep_city_code"] = request.depCityCode;
    }

    if (!Util.isUnset(request.depCityName)) {
      query["dep_city_name"] = request.depCityName;
    }

    if (!Util.isUnset(request.depDate)) {
      query["dep_date"] = request.depDate;
    }

    if (!Util.isUnset(request.itineraryId)) {
      query["itinerary_id"] = request.itineraryId;
    }

    if (!Util.isUnset(request.middlePage)) {
      query["middle_page"] = request.middlePage;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_Id"] = request.orderId;
    }

    if (!Util.isUnset(request.phone)) {
      query["phone"] = request.phone;
    }

    if (!Util.isUnset(request.subCorpId)) {
      query["sub_corp_id"] = request.subCorpId;
    }

    if (!Util.isUnset(request.taobaoCallbackUrl)) {
      query["taobao_callback_url"] = request.taobaoCallbackUrl;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      query["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.travelerId)) {
      query["traveler_id"] = request.travelerId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    if (!Util.isUnset(request.useBookingProxy)) {
      query["use_booking_proxy"] = request.useBookingProxy;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "AddressGet",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/open/v1/address`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<AddressGetResponse>(await this.callApi(params, req, runtime), new AddressGetResponse({}));
  }

  /**
   * 商旅功能页跳转
   * 
   * @param request - AddressGetRequest
   * @returns AddressGetResponse
   */
  async addressGet(request: AddressGetRequest): Promise<AddressGetResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new AddressGetHeaders({ });
    return await this.addressGetWithOptions(request, headers, runtime);
  }

  /**
   * 查询机场数据
   * 
   * @param request - AirportSearchRequest
   * @param headers - AirportSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AirportSearchResponse
   */
  async airportSearchWithOptions(request: AirportSearchRequest, headers: AirportSearchHeaders, runtime: $Util.RuntimeOptions): Promise<AirportSearchResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.keyword)) {
      query["keyword"] = request.keyword;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "AirportSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/city/v1/airport`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<AirportSearchResponse>(await this.callApi(params, req, runtime), new AirportSearchResponse({}));
  }

  /**
   * 查询机场数据
   * 
   * @param request - AirportSearchRequest
   * @returns AirportSearchResponse
   */
  async airportSearch(request: AirportSearchRequest): Promise<AirportSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new AirportSearchHeaders({ });
    return await this.airportSearchWithOptions(request, headers, runtime);
  }

  /**
   * 全量查询商旅城市行政区划编码信息
   * 
   * @param headers - AllBaseCityInfoQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AllBaseCityInfoQueryResponse
   */
  async allBaseCityInfoQueryWithOptions(headers: AllBaseCityInfoQueryHeaders, runtime: $Util.RuntimeOptions): Promise<AllBaseCityInfoQueryResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
      realHeaders["x-acs-btrip-access-token"] = Util.toJSONString(headers.xAcsBtripAccessToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "AllBaseCityInfoQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/city/v1/code`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<AllBaseCityInfoQueryResponse>(await this.callApi(params, req, runtime), new AllBaseCityInfoQueryResponse({}));
  }

  /**
   * 全量查询商旅城市行政区划编码信息
   * @returns AllBaseCityInfoQueryResponse
   */
  async allBaseCityInfoQuery(): Promise<AllBaseCityInfoQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new AllBaseCityInfoQueryHeaders({ });
    return await this.allBaseCityInfoQueryWithOptions(headers, runtime);
  }

  /**
   * 新建出差审批单
   * 
   * @param tmpReq - ApplyAddRequest
   * @param headers - ApplyAddHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyAddResponse
   */
  async applyAddWithOptions(tmpReq: ApplyAddRequest, headers: ApplyAddHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyAddResponse> {
    Util.validateModel(tmpReq);
    let request = new ApplyAddShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.carRule)) {
      request.carRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.carRule, "car_rule", "json");
    }

    if (!Util.isUnset(tmpReq.defaultStandard)) {
      request.defaultStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultStandard, "default_standard", "json");
    }

    if (!Util.isUnset(tmpReq.externalTravelerList)) {
      request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, "external_traveler_list", "json");
    }

    if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
      request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, "external_traveler_standard", "json");
    }

    if (!Util.isUnset(tmpReq.hotelShare)) {
      request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, "hotel_share", "json");
    }

    if (!Util.isUnset(tmpReq.itineraryList)) {
      request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, "itinerary_list", "json");
    }

    if (!Util.isUnset(tmpReq.itinerarySetList)) {
      request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, "itinerary_set_list", "json");
    }

    if (!Util.isUnset(tmpReq.travelerList)) {
      request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, "traveler_list", "json");
    }

    if (!Util.isUnset(tmpReq.travelerStandard)) {
      request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, "traveler_standard", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.budget)) {
      body["budget"] = request.budget;
    }

    if (!Util.isUnset(request.budgetMerge)) {
      body["budget_merge"] = request.budgetMerge;
    }

    if (!Util.isUnset(request.carRuleShrink)) {
      body["car_rule"] = request.carRuleShrink;
    }

    if (!Util.isUnset(request.corpName)) {
      body["corp_name"] = request.corpName;
    }

    if (!Util.isUnset(request.defaultStandardShrink)) {
      body["default_standard"] = request.defaultStandardShrink;
    }

    if (!Util.isUnset(request.departId)) {
      body["depart_id"] = request.departId;
    }

    if (!Util.isUnset(request.departName)) {
      body["depart_name"] = request.departName;
    }

    if (!Util.isUnset(request.extendField)) {
      body["extend_field"] = request.extendField;
    }

    if (!Util.isUnset(request.externalTravelerListShrink)) {
      body["external_traveler_list"] = request.externalTravelerListShrink;
    }

    if (!Util.isUnset(request.externalTravelerStandardShrink)) {
      body["external_traveler_standard"] = request.externalTravelerStandardShrink;
    }

    if (!Util.isUnset(request.flightBudget)) {
      body["flight_budget"] = request.flightBudget;
    }

    if (!Util.isUnset(request.hotelBudget)) {
      body["hotel_budget"] = request.hotelBudget;
    }

    if (!Util.isUnset(request.hotelShareShrink)) {
      body["hotel_share"] = request.hotelShareShrink;
    }

    if (!Util.isUnset(request.internationalFlightCabins)) {
      body["international_flight_cabins"] = request.internationalFlightCabins;
    }

    if (!Util.isUnset(request.intlFlightBudget)) {
      body["intl_flight_budget"] = request.intlFlightBudget;
    }

    if (!Util.isUnset(request.intlHotelBudget)) {
      body["intl_hotel_budget"] = request.intlHotelBudget;
    }

    if (!Util.isUnset(request.itineraryListShrink)) {
      body["itinerary_list"] = request.itineraryListShrink;
    }

    if (!Util.isUnset(request.itineraryRule)) {
      body["itinerary_rule"] = request.itineraryRule;
    }

    if (!Util.isUnset(request.itinerarySetListShrink)) {
      body["itinerary_set_list"] = request.itinerarySetListShrink;
    }

    if (!Util.isUnset(request.limitTraveler)) {
      body["limit_traveler"] = request.limitTraveler;
    }

    if (!Util.isUnset(request.paymentDepartmentId)) {
      body["payment_department_id"] = request.paymentDepartmentId;
    }

    if (!Util.isUnset(request.paymentDepartmentName)) {
      body["payment_department_name"] = request.paymentDepartmentName;
    }

    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.subCorpId)) {
      body["sub_corp_id"] = request.subCorpId;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      body["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.thirdpartBusinessId)) {
      body["thirdpart_business_id"] = request.thirdpartBusinessId;
    }

    if (!Util.isUnset(request.thirdpartDepartId)) {
      body["thirdpart_depart_id"] = request.thirdpartDepartId;
    }

    if (!Util.isUnset(request.togetherBookRule)) {
      body["together_book_rule"] = request.togetherBookRule;
    }

    if (!Util.isUnset(request.trainBudget)) {
      body["train_budget"] = request.trainBudget;
    }

    if (!Util.isUnset(request.travelerListShrink)) {
      body["traveler_list"] = request.travelerListShrink;
    }

    if (!Util.isUnset(request.travelerStandardShrink)) {
      body["traveler_standard"] = request.travelerStandardShrink;
    }

    if (!Util.isUnset(request.tripCause)) {
      body["trip_cause"] = request.tripCause;
    }

    if (!Util.isUnset(request.tripDay)) {
      body["trip_day"] = request.tripDay;
    }

    if (!Util.isUnset(request.tripTitle)) {
      body["trip_title"] = request.tripTitle;
    }

    if (!Util.isUnset(request.type)) {
      body["type"] = request.type;
    }

    if (!Util.isUnset(request.unionNo)) {
      body["union_no"] = request.unionNo;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      body["user_name"] = request.userName;
    }

    if (!Util.isUnset(request.vehicleBudget)) {
      body["vehicle_budget"] = request.vehicleBudget;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ApplyAdd",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/biz-trip`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ApplyAddResponse>(await this.callApi(params, req, runtime), new ApplyAddResponse({}));
  }

  /**
   * 新建出差审批单
   * 
   * @param request - ApplyAddRequest
   * @returns ApplyAddResponse
   */
  async applyAdd(request: ApplyAddRequest): Promise<ApplyAddResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyAddHeaders({ });
    return await this.applyAddWithOptions(request, headers, runtime);
  }

  /**
   * 更新出差审批单（状态）
   * 
   * @param request - ApplyApproveRequest
   * @param headers - ApplyApproveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyApproveResponse
   */
  async applyApproveWithOptions(request: ApplyApproveRequest, headers: ApplyApproveHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyApproveResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      body["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.note)) {
      body["note"] = request.note;
    }

    if (!Util.isUnset(request.operateTime)) {
      body["operate_time"] = request.operateTime;
    }

    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.subCorpId)) {
      body["sub_corp_id"] = request.subCorpId;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      body["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ApplyApprove",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/biz-trip/action/approve`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ApplyApproveResponse>(await this.callApi(params, req, runtime), new ApplyApproveResponse({}));
  }

  /**
   * 更新出差审批单（状态）
   * 
   * @param request - ApplyApproveRequest
   * @returns ApplyApproveResponse
   */
  async applyApprove(request: ApplyApproveRequest): Promise<ApplyApproveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyApproveHeaders({ });
    return await this.applyApproveWithOptions(request, headers, runtime);
  }

  /**
   * 外部审批节点状态同步
   * 
   * @param tmpReq - ApplyExternalNodeStatusUpdateRequest
   * @param headers - ApplyExternalNodeStatusUpdateHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyExternalNodeStatusUpdateResponse
   */
  async applyExternalNodeStatusUpdateWithOptions(tmpReq: ApplyExternalNodeStatusUpdateRequest, headers: ApplyExternalNodeStatusUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyExternalNodeStatusUpdateResponse> {
    Util.validateModel(tmpReq);
    let request = new ApplyExternalNodeStatusUpdateShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.operationRecords)) {
      request.operationRecordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operationRecords, "operation_records", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.nodeId)) {
      body["node_id"] = request.nodeId;
    }

    if (!Util.isUnset(request.operationRecordsShrink)) {
      body["operation_records"] = request.operationRecordsShrink;
    }

    if (!Util.isUnset(request.processActionResult)) {
      body["process_action_result"] = request.processActionResult;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ApplyExternalNodeStatusUpdate",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/external-nodes/action/status-update`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ApplyExternalNodeStatusUpdateResponse>(await this.callApi(params, req, runtime), new ApplyExternalNodeStatusUpdateResponse({}));
  }

  /**
   * 外部审批节点状态同步
   * 
   * @param request - ApplyExternalNodeStatusUpdateRequest
   * @returns ApplyExternalNodeStatusUpdateResponse
   */
  async applyExternalNodeStatusUpdate(request: ApplyExternalNodeStatusUpdateRequest): Promise<ApplyExternalNodeStatusUpdateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyExternalNodeStatusUpdateHeaders({ });
    return await this.applyExternalNodeStatusUpdateWithOptions(request, headers, runtime);
  }

  /**
   * 申请发票
   * 
   * @param tmpReq - ApplyInvoiceTaskRequest
   * @param headers - ApplyInvoiceTaskHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyInvoiceTaskResponse
   */
  async applyInvoiceTaskWithOptions(tmpReq: ApplyInvoiceTaskRequest, headers: ApplyInvoiceTaskHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyInvoiceTaskResponse> {
    Util.validateModel(tmpReq);
    let request = new ApplyInvoiceTaskShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.invoiceTaskList)) {
      request.invoiceTaskListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceTaskList, "invoice_task_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.billDate)) {
      body["bill_date"] = request.billDate;
    }

    if (!Util.isUnset(request.invoiceTaskListShrink)) {
      body["invoice_task_list"] = request.invoiceTaskListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ApplyInvoiceTask",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/apply-invoice-task`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ApplyInvoiceTaskResponse>(await this.callApi(params, req, runtime), new ApplyInvoiceTaskResponse({}));
  }

  /**
   * 申请发票
   * 
   * @param request - ApplyInvoiceTaskRequest
   * @returns ApplyInvoiceTaskResponse
   */
  async applyInvoiceTask(request: ApplyInvoiceTaskRequest): Promise<ApplyInvoiceTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyInvoiceTaskHeaders({ });
    return await this.applyInvoiceTaskWithOptions(request, headers, runtime);
  }

  /**
   * 查询出差审批单列表
   * 
   * @param request - ApplyListQueryRequest
   * @param headers - ApplyListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyListQueryResponse
   */
  async applyListQueryWithOptions(request: ApplyListQueryRequest, headers: ApplyListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyListQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.allApply)) {
      query["all_apply"] = request.allApply;
    }

    if (!Util.isUnset(request.departId)) {
      query["depart_id"] = request.departId;
    }

    if (!Util.isUnset(request.endTime)) {
      query["end_time"] = request.endTime;
    }

    if (!Util.isUnset(request.gmtModified)) {
      query["gmt_modified"] = request.gmtModified;
    }

    if (!Util.isUnset(request.onlyShangLvApply)) {
      query["only_shang_lv_apply"] = request.onlyShangLvApply;
    }

    if (!Util.isUnset(request.page)) {
      query["page"] = request.page;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["start_time"] = request.startTime;
    }

    if (!Util.isUnset(request.subCorpId)) {
      query["sub_corp_id"] = request.subCorpId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    if (!Util.isUnset(request.unionNo)) {
      query["union_no"] = request.unionNo;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ApplyListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/biz-trips`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<ApplyListQueryResponse>(await this.callApi(params, req, runtime), new ApplyListQueryResponse({}));
  }

  /**
   * 查询出差审批单列表
   * 
   * @param request - ApplyListQueryRequest
   * @returns ApplyListQueryResponse
   */
  async applyListQuery(request: ApplyListQueryRequest): Promise<ApplyListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyListQueryHeaders({ });
    return await this.applyListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 更新出差审批单
   * 
   * @param tmpReq - ApplyModifyRequest
   * @param headers - ApplyModifyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyModifyResponse
   */
  async applyModifyWithOptions(tmpReq: ApplyModifyRequest, headers: ApplyModifyHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyModifyResponse> {
    Util.validateModel(tmpReq);
    let request = new ApplyModifyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.carRule)) {
      request.carRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.carRule, "car_rule", "json");
    }

    if (!Util.isUnset(tmpReq.defaultStandard)) {
      request.defaultStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultStandard, "default_standard", "json");
    }

    if (!Util.isUnset(tmpReq.externalTravelerList)) {
      request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, "external_traveler_list", "json");
    }

    if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
      request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, "external_traveler_standard", "json");
    }

    if (!Util.isUnset(tmpReq.hotelShare)) {
      request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, "hotel_share", "json");
    }

    if (!Util.isUnset(tmpReq.itineraryList)) {
      request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, "itinerary_list", "json");
    }

    if (!Util.isUnset(tmpReq.itinerarySetList)) {
      request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, "itinerary_set_list", "json");
    }

    if (!Util.isUnset(tmpReq.travelerList)) {
      request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, "traveler_list", "json");
    }

    if (!Util.isUnset(tmpReq.travelerStandard)) {
      request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, "traveler_standard", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.budget)) {
      body["budget"] = request.budget;
    }

    if (!Util.isUnset(request.budgetMerge)) {
      body["budget_merge"] = request.budgetMerge;
    }

    if (!Util.isUnset(request.carRuleShrink)) {
      body["car_rule"] = request.carRuleShrink;
    }

    if (!Util.isUnset(request.corpName)) {
      body["corp_name"] = request.corpName;
    }

    if (!Util.isUnset(request.defaultStandardShrink)) {
      body["default_standard"] = request.defaultStandardShrink;
    }

    if (!Util.isUnset(request.departId)) {
      body["depart_id"] = request.departId;
    }

    if (!Util.isUnset(request.departName)) {
      body["depart_name"] = request.departName;
    }

    if (!Util.isUnset(request.extendField)) {
      body["extend_field"] = request.extendField;
    }

    if (!Util.isUnset(request.externalTravelerListShrink)) {
      body["external_traveler_list"] = request.externalTravelerListShrink;
    }

    if (!Util.isUnset(request.externalTravelerStandardShrink)) {
      body["external_traveler_standard"] = request.externalTravelerStandardShrink;
    }

    if (!Util.isUnset(request.flightBudget)) {
      body["flight_budget"] = request.flightBudget;
    }

    if (!Util.isUnset(request.hotelBudget)) {
      body["hotel_budget"] = request.hotelBudget;
    }

    if (!Util.isUnset(request.hotelShareShrink)) {
      body["hotel_share"] = request.hotelShareShrink;
    }

    if (!Util.isUnset(request.intlFlightBudget)) {
      body["intl_flight_budget"] = request.intlFlightBudget;
    }

    if (!Util.isUnset(request.intlHotelBudget)) {
      body["intl_hotel_budget"] = request.intlHotelBudget;
    }

    if (!Util.isUnset(request.itineraryListShrink)) {
      body["itinerary_list"] = request.itineraryListShrink;
    }

    if (!Util.isUnset(request.itineraryRule)) {
      body["itinerary_rule"] = request.itineraryRule;
    }

    if (!Util.isUnset(request.itinerarySetListShrink)) {
      body["itinerary_set_list"] = request.itinerarySetListShrink;
    }

    if (!Util.isUnset(request.limitTraveler)) {
      body["limit_traveler"] = request.limitTraveler;
    }

    if (!Util.isUnset(request.paymentDepartmentId)) {
      body["payment_department_id"] = request.paymentDepartmentId;
    }

    if (!Util.isUnset(request.paymentDepartmentName)) {
      body["payment_department_name"] = request.paymentDepartmentName;
    }

    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.subCorpId)) {
      body["sub_corp_id"] = request.subCorpId;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      body["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.thirdpartBusinessId)) {
      body["thirdpart_business_id"] = request.thirdpartBusinessId;
    }

    if (!Util.isUnset(request.thirdpartDepartId)) {
      body["thirdpart_depart_id"] = request.thirdpartDepartId;
    }

    if (!Util.isUnset(request.togetherBookRule)) {
      body["together_book_rule"] = request.togetherBookRule;
    }

    if (!Util.isUnset(request.trainBudget)) {
      body["train_budget"] = request.trainBudget;
    }

    if (!Util.isUnset(request.travelerListShrink)) {
      body["traveler_list"] = request.travelerListShrink;
    }

    if (!Util.isUnset(request.travelerStandardShrink)) {
      body["traveler_standard"] = request.travelerStandardShrink;
    }

    if (!Util.isUnset(request.tripCause)) {
      body["trip_cause"] = request.tripCause;
    }

    if (!Util.isUnset(request.tripDay)) {
      body["trip_day"] = request.tripDay;
    }

    if (!Util.isUnset(request.tripTitle)) {
      body["trip_title"] = request.tripTitle;
    }

    if (!Util.isUnset(request.unionNo)) {
      body["union_no"] = request.unionNo;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      body["user_name"] = request.userName;
    }

    if (!Util.isUnset(request.vehicleBudget)) {
      body["vehicle_budget"] = request.vehicleBudget;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ApplyModify",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/biz-trip`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ApplyModifyResponse>(await this.callApi(params, req, runtime), new ApplyModifyResponse({}));
  }

  /**
   * 更新出差审批单
   * 
   * @param request - ApplyModifyRequest
   * @returns ApplyModifyResponse
   */
  async applyModify(request: ApplyModifyRequest): Promise<ApplyModifyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyModifyHeaders({ });
    return await this.applyModifyWithOptions(request, headers, runtime);
  }

  /**
   * 查询出差审批单详情
   * 
   * @param request - ApplyQueryRequest
   * @param headers - ApplyQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyQueryResponse
   */
  async applyQueryWithOptions(request: ApplyQueryRequest, headers: ApplyQueryHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.applyShowId)) {
      query["apply_show_id"] = request.applyShowId;
    }

    if (!Util.isUnset(request.subCorpId)) {
      query["sub_corp_id"] = request.subCorpId;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      query["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ApplyQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/biz-trip`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<ApplyQueryResponse>(await this.callApi(params, req, runtime), new ApplyQueryResponse({}));
  }

  /**
   * 查询出差审批单详情
   * 
   * @param request - ApplyQueryRequest
   * @returns ApplyQueryResponse
   */
  async applyQuery(request: ApplyQueryRequest): Promise<ApplyQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyQueryHeaders({ });
    return await this.applyQueryWithOptions(request, headers, runtime);
  }

  /**
   * 执行审批任务
   * 
   * @param request - ApplyTripTaskExecuteRequest
   * @param headers - ApplyTripTaskExecuteHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyTripTaskExecuteResponse
   */
  async applyTripTaskExecuteWithOptions(request: ApplyTripTaskExecuteRequest, headers: ApplyTripTaskExecuteHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyTripTaskExecuteResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.actionFrom)) {
      body["action_from"] = request.actionFrom;
    }

    if (!Util.isUnset(request.comment)) {
      body["comment"] = request.comment;
    }

    if (!Util.isUnset(request.taskAction)) {
      body["task_action"] = request.taskAction;
    }

    if (!Util.isUnset(request.taskId)) {
      body["task_id"] = request.taskId;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      body["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ApplyTripTaskExecute",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/trip-task/action/execute`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ApplyTripTaskExecuteResponse>(await this.callApi(params, req, runtime), new ApplyTripTaskExecuteResponse({}));
  }

  /**
   * 执行审批任务
   * 
   * @param request - ApplyTripTaskExecuteRequest
   * @returns ApplyTripTaskExecuteResponse
   */
  async applyTripTaskExecute(request: ApplyTripTaskExecuteRequest): Promise<ApplyTripTaskExecuteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ApplyTripTaskExecuteHeaders({ });
    return await this.applyTripTaskExecuteWithOptions(request, headers, runtime);
  }

  /**
   * 搜索国内/国际（港澳台）城市基础行政区划数据
   * 
   * @param request - BaseCityInfoSearchRequest
   * @param headers - BaseCityInfoSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BaseCityInfoSearchResponse
   */
  async baseCityInfoSearchWithOptions(request: BaseCityInfoSearchRequest, headers: BaseCityInfoSearchHeaders, runtime: $Util.RuntimeOptions): Promise<BaseCityInfoSearchResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.keyword)) {
      query["keyword"] = request.keyword;
    }

    if (!Util.isUnset(request.region)) {
      query["region"] = request.region;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
      realHeaders["x-acs-btrip-access-token"] = Util.toJSONString(headers.xAcsBtripAccessToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "BaseCityInfoSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/city/v1/cities/action/search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<BaseCityInfoSearchResponse>(await this.callApi(params, req, runtime), new BaseCityInfoSearchResponse({}));
  }

  /**
   * 搜索国内/国际（港澳台）城市基础行政区划数据
   * 
   * @param request - BaseCityInfoSearchRequest
   * @returns BaseCityInfoSearchResponse
   */
  async baseCityInfoSearch(request: BaseCityInfoSearchRequest): Promise<BaseCityInfoSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new BaseCityInfoSearchHeaders({ });
    return await this.baseCityInfoSearchWithOptions(request, headers, runtime);
  }

  /**
   * 商旅账单内容修改
   * 
   * @param request - BtripBillInfoAdjustRequest
   * @param headers - BtripBillInfoAdjustHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BtripBillInfoAdjustResponse
   */
  async btripBillInfoAdjustWithOptions(request: BtripBillInfoAdjustRequest, headers: BtripBillInfoAdjustHeaders, runtime: $Util.RuntimeOptions): Promise<BtripBillInfoAdjustResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.primaryId)) {
      body["primary_id"] = request.primaryId;
    }

    if (!Util.isUnset(request.thirdPartCostCenterId)) {
      body["third_part_cost_center_id"] = request.thirdPartCostCenterId;
    }

    if (!Util.isUnset(request.thirdPartDepartmentId)) {
      body["third_part_department_id"] = request.thirdPartDepartmentId;
    }

    if (!Util.isUnset(request.thirdPartInvoiceId)) {
      body["third_part_invoice_id"] = request.thirdPartInvoiceId;
    }

    if (!Util.isUnset(request.thirdPartProjectId)) {
      body["third_part_project_id"] = request.thirdPartProjectId;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "BtripBillInfoAdjust",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/bill/v1/info/action/adjust`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<BtripBillInfoAdjustResponse>(await this.callApi(params, req, runtime), new BtripBillInfoAdjustResponse({}));
  }

  /**
   * 商旅账单内容修改
   * 
   * @param request - BtripBillInfoAdjustRequest
   * @returns BtripBillInfoAdjustResponse
   */
  async btripBillInfoAdjust(request: BtripBillInfoAdjustRequest): Promise<BtripBillInfoAdjustResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new BtripBillInfoAdjustHeaders({ });
    return await this.btripBillInfoAdjustWithOptions(request, headers, runtime);
  }

  /**
   * 同步市内用车审批单
   * 
   * @param tmpReq - CarApplyAddRequest
   * @param headers - CarApplyAddHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CarApplyAddResponse
   */
  async carApplyAddWithOptions(tmpReq: CarApplyAddRequest, headers: CarApplyAddHeaders, runtime: $Util.RuntimeOptions): Promise<CarApplyAddResponse> {
    Util.validateModel(tmpReq);
    let request = new CarApplyAddShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.travelerStandard)) {
      request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, "traveler_standard", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cause)) {
      body["cause"] = request.cause;
    }

    if (!Util.isUnset(request.city)) {
      body["city"] = request.city;
    }

    if (!Util.isUnset(request.cityCodeSet)) {
      body["city_code_set"] = request.cityCodeSet;
    }

    if (!Util.isUnset(request.date)) {
      body["date"] = request.date;
    }

    if (!Util.isUnset(request.finishedDate)) {
      body["finished_date"] = request.finishedDate;
    }

    if (!Util.isUnset(request.projectCode)) {
      body["project_code"] = request.projectCode;
    }

    if (!Util.isUnset(request.projectName)) {
      body["project_name"] = request.projectName;
    }

    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.thirdPartApplyId)) {
      body["third_part_apply_id"] = request.thirdPartApplyId;
    }

    if (!Util.isUnset(request.thirdPartCostCenterId)) {
      body["third_part_cost_center_id"] = request.thirdPartCostCenterId;
    }

    if (!Util.isUnset(request.thirdPartInvoiceId)) {
      body["third_part_invoice_id"] = request.thirdPartInvoiceId;
    }

    if (!Util.isUnset(request.timesTotal)) {
      body["times_total"] = request.timesTotal;
    }

    if (!Util.isUnset(request.timesType)) {
      body["times_type"] = request.timesType;
    }

    if (!Util.isUnset(request.timesUsed)) {
      body["times_used"] = request.timesUsed;
    }

    if (!Util.isUnset(request.title)) {
      body["title"] = request.title;
    }

    if (!Util.isUnset(request.travelerStandardShrink)) {
      body["traveler_standard"] = request.travelerStandardShrink;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CarApplyAdd",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/car`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CarApplyAddResponse>(await this.callApi(params, req, runtime), new CarApplyAddResponse({}));
  }

  /**
   * 同步市内用车审批单
   * 
   * @param request - CarApplyAddRequest
   * @returns CarApplyAddResponse
   */
  async carApplyAdd(request: CarApplyAddRequest): Promise<CarApplyAddResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CarApplyAddHeaders({ });
    return await this.carApplyAddWithOptions(request, headers, runtime);
  }

  /**
   * 更新市内用车审批单
   * 
   * @param request - CarApplyModifyRequest
   * @param headers - CarApplyModifyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CarApplyModifyResponse
   */
  async carApplyModifyWithOptions(request: CarApplyModifyRequest, headers: CarApplyModifyHeaders, runtime: $Util.RuntimeOptions): Promise<CarApplyModifyResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.operateTime)) {
      body["operate_time"] = request.operateTime;
    }

    if (!Util.isUnset(request.remark)) {
      body["remark"] = request.remark;
    }

    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.thirdPartApplyId)) {
      body["third_part_apply_id"] = request.thirdPartApplyId;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CarApplyModify",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/car`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CarApplyModifyResponse>(await this.callApi(params, req, runtime), new CarApplyModifyResponse({}));
  }

  /**
   * 更新市内用车审批单
   * 
   * @param request - CarApplyModifyRequest
   * @returns CarApplyModifyResponse
   */
  async carApplyModify(request: CarApplyModifyRequest): Promise<CarApplyModifyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CarApplyModifyHeaders({ });
    return await this.carApplyModifyWithOptions(request, headers, runtime);
  }

  /**
   * 查询市内用车审批单
   * 
   * @param request - CarApplyQueryRequest
   * @param headers - CarApplyQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CarApplyQueryResponse
   */
  async carApplyQueryWithOptions(request: CarApplyQueryRequest, headers: CarApplyQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CarApplyQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.createdEndAt)) {
      query["created_end_at"] = request.createdEndAt;
    }

    if (!Util.isUnset(request.createdStartAt)) {
      query["created_start_at"] = request.createdStartAt;
    }

    if (!Util.isUnset(request.pageNumber)) {
      query["page_number"] = request.pageNumber;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.thirdPartApplyId)) {
      query["third_part_apply_id"] = request.thirdPartApplyId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CarApplyQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/car`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CarApplyQueryResponse>(await this.callApi(params, req, runtime), new CarApplyQueryResponse({}));
  }

  /**
   * 查询市内用车审批单
   * 
   * @param request - CarApplyQueryRequest
   * @returns CarApplyQueryResponse
   */
  async carApplyQuery(request: CarApplyQueryRequest): Promise<CarApplyQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CarApplyQueryHeaders({ });
    return await this.carApplyQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询用车记账数据
   * 
   * @param request - CarBillSettlementQueryRequest
   * @param headers - CarBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CarBillSettlementQueryResponse
   */
  async carBillSettlementQueryWithOptions(request: CarBillSettlementQueryRequest, headers: CarBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CarBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CarBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/car/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CarBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new CarBillSettlementQueryResponse({}));
  }

  /**
   * 查询用车记账数据
   * 
   * @param request - CarBillSettlementQueryRequest
   * @returns CarBillSettlementQueryResponse
   */
  async carBillSettlementQuery(request: CarBillSettlementQueryRequest): Promise<CarBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CarBillSettlementQueryHeaders({ });
    return await this.carBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询用车订单列表
   * 
   * @param request - CarOrderListQueryRequest
   * @param headers - CarOrderListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CarOrderListQueryResponse
   */
  async carOrderListQueryWithOptions(request: CarOrderListQueryRequest, headers: CarOrderListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CarOrderListQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.allApply)) {
      query["all_apply"] = request.allApply;
    }

    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.departId)) {
      query["depart_id"] = request.departId;
    }

    if (!Util.isUnset(request.endTime)) {
      query["end_time"] = request.endTime;
    }

    if (!Util.isUnset(request.page)) {
      query["page"] = request.page;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["start_time"] = request.startTime;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      query["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.updateEndTime)) {
      query["update_end_time"] = request.updateEndTime;
    }

    if (!Util.isUnset(request.updateStartTime)) {
      query["update_start_time"] = request.updateStartTime;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CarOrderListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/car/v1/order-list`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CarOrderListQueryResponse>(await this.callApi(params, req, runtime), new CarOrderListQueryResponse({}));
  }

  /**
   * 查询用车订单列表
   * 
   * @param request - CarOrderListQueryRequest
   * @returns CarOrderListQueryResponse
   */
  async carOrderListQuery(request: CarOrderListQueryRequest): Promise<CarOrderListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CarOrderListQueryHeaders({ });
    return await this.carOrderListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 用车订单查询
   * 
   * @param request - CarOrderQueryRequest
   * @param headers - CarOrderQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CarOrderQueryResponse
   */
  async carOrderQueryWithOptions(request: CarOrderQueryRequest, headers: CarOrderQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CarOrderQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.subOrderId)) {
      query["sub_order_id"] = request.subOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CarOrderQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/car/v1/order`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CarOrderQueryResponse>(await this.callApi(params, req, runtime), new CarOrderQueryResponse({}));
  }

  /**
   * 用车订单查询
   * 
   * @param request - CarOrderQueryRequest
   * @returns CarOrderQueryResponse
   */
  async carOrderQuery(request: CarOrderQueryRequest): Promise<CarOrderQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CarOrderQueryHeaders({ });
    return await this.carOrderQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询企业用车场景
   * 
   * @param headers - CarSceneQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CarSceneQueryResponse
   */
  async carSceneQueryWithOptions(headers: CarSceneQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CarSceneQueryResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "CarSceneQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/car/v1/scenes`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CarSceneQueryResponse>(await this.callApi(params, req, runtime), new CarSceneQueryResponse({}));
  }

  /**
   * 查询企业用车场景
   * @returns CarSceneQueryResponse
   */
  async carSceneQuery(): Promise<CarSceneQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CarSceneQueryHeaders({ });
    return await this.carSceneQueryWithOptions(headers, runtime);
  }

  /**
   * 渠道商创建企业
   * 
   * @param request - ChannelCorpCreateRequest
   * @param headers - ChannelCorpCreateHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChannelCorpCreateResponse
   */
  async channelCorpCreateWithOptions(request: ChannelCorpCreateRequest, headers: ChannelCorpCreateHeaders, runtime: $Util.RuntimeOptions): Promise<ChannelCorpCreateResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.administratorName)) {
      body["administrator_name"] = request.administratorName;
    }

    if (!Util.isUnset(request.administratorPhone)) {
      body["administrator_phone"] = request.administratorPhone;
    }

    if (!Util.isUnset(request.city)) {
      body["city"] = request.city;
    }

    if (!Util.isUnset(request.corpName)) {
      body["corp_name"] = request.corpName;
    }

    if (!Util.isUnset(request.province)) {
      body["province"] = request.province;
    }

    if (!Util.isUnset(request.scope)) {
      body["scope"] = request.scope;
    }

    if (!Util.isUnset(request.thirdCorpId)) {
      body["third_corp_id"] = request.thirdCorpId;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ChannelCorpCreate",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/corp/v1/channelCorps`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ChannelCorpCreateResponse>(await this.callApi(params, req, runtime), new ChannelCorpCreateResponse({}));
  }

  /**
   * 渠道商创建企业
   * 
   * @param request - ChannelCorpCreateRequest
   * @returns ChannelCorpCreateResponse
   */
  async channelCorpCreate(request: ChannelCorpCreateRequest): Promise<ChannelCorpCreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ChannelCorpCreateHeaders({ });
    return await this.channelCorpCreateWithOptions(request, headers, runtime);
  }

  /**
   * 查询行政区划（市，区）基础数据
   * 
   * @param request - CitySearchRequest
   * @param headers - CitySearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CitySearchResponse
   */
  async citySearchWithOptions(request: CitySearchRequest, headers: CitySearchHeaders, runtime: $Util.RuntimeOptions): Promise<CitySearchResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.keyword)) {
      query["keyword"] = request.keyword;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CitySearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/city/v1/city`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CitySearchResponse>(await this.callApi(params, req, runtime), new CitySearchResponse({}));
  }

  /**
   * 查询行政区划（市，区）基础数据
   * 
   * @param request - CitySearchRequest
   * @returns CitySearchResponse
   */
  async citySearch(request: CitySearchRequest): Promise<CitySearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CitySearchHeaders({ });
    return await this.citySearchWithOptions(request, headers, runtime);
  }

  /**
   * 查询退改审批信息
   * 
   * @param request - CommonApplyQueryRequest
   * @param headers - CommonApplyQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CommonApplyQueryResponse
   */
  async commonApplyQueryWithOptions(request: CommonApplyQueryRequest, headers: CommonApplyQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CommonApplyQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.bizCategory)) {
      query["biz_category"] = request.bizCategory;
    }

    if (!Util.isUnset(request.businessInstanceId)) {
      query["business_instance_id"] = request.businessInstanceId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CommonApplyQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/common`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CommonApplyQueryResponse>(await this.callApi(params, req, runtime), new CommonApplyQueryResponse({}));
  }

  /**
   * 查询退改审批信息
   * 
   * @param request - CommonApplyQueryRequest
   * @returns CommonApplyQueryResponse
   */
  async commonApplyQuery(request: CommonApplyQueryRequest): Promise<CommonApplyQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CommonApplyQueryHeaders({ });
    return await this.commonApplyQueryWithOptions(request, headers, runtime);
  }

  /**
   * 退改审批结果同步
   * 
   * @param request - CommonApplySyncRequest
   * @param headers - CommonApplySyncHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CommonApplySyncResponse
   */
  async commonApplySyncWithOptions(request: CommonApplySyncRequest, headers: CommonApplySyncHeaders, runtime: $Util.RuntimeOptions): Promise<CommonApplySyncResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.bizCategory)) {
      query["biz_category"] = request.bizCategory;
    }

    if (!Util.isUnset(request.remark)) {
      query["remark"] = request.remark;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    if (!Util.isUnset(request.thirdpartyFlowId)) {
      query["thirdparty_flow_id"] = request.thirdpartyFlowId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CommonApplySync",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/syn-common`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CommonApplySyncResponse>(await this.callApi(params, req, runtime), new CommonApplySyncResponse({}));
  }

  /**
   * 退改审批结果同步
   * 
   * @param request - CommonApplySyncRequest
   * @returns CommonApplySyncResponse
   */
  async commonApplySync(request: CommonApplySyncRequest): Promise<CommonApplySyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CommonApplySyncHeaders({ });
    return await this.commonApplySyncWithOptions(request, headers, runtime);
  }

  /**
   * 查询服务商机票记账数据
   * 
   * @param request - CooperatorFlightBillSettlementQueryRequest
   * @param headers - CooperatorFlightBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CooperatorFlightBillSettlementQueryResponse
   */
  async cooperatorFlightBillSettlementQueryWithOptions(request: CooperatorFlightBillSettlementQueryRequest, headers: CooperatorFlightBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CooperatorFlightBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cooperatorId)) {
      query["cooperator_id"] = request.cooperatorId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CooperatorFlightBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/cooperator-flight/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CooperatorFlightBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new CooperatorFlightBillSettlementQueryResponse({}));
  }

  /**
   * 查询服务商机票记账数据
   * 
   * @param request - CooperatorFlightBillSettlementQueryRequest
   * @returns CooperatorFlightBillSettlementQueryResponse
   */
  async cooperatorFlightBillSettlementQuery(request: CooperatorFlightBillSettlementQueryRequest): Promise<CooperatorFlightBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CooperatorFlightBillSettlementQueryHeaders({ });
    return await this.cooperatorFlightBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询服务商酒店记账数据
   * 
   * @param request - CooperatorHotelBillSettlementQueryRequest
   * @param headers - CooperatorHotelBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CooperatorHotelBillSettlementQueryResponse
   */
  async cooperatorHotelBillSettlementQueryWithOptions(request: CooperatorHotelBillSettlementQueryRequest, headers: CooperatorHotelBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CooperatorHotelBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cooperatorId)) {
      query["cooperator_id"] = request.cooperatorId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CooperatorHotelBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/cooperator-hotel/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CooperatorHotelBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new CooperatorHotelBillSettlementQueryResponse({}));
  }

  /**
   * 查询服务商酒店记账数据
   * 
   * @param request - CooperatorHotelBillSettlementQueryRequest
   * @returns CooperatorHotelBillSettlementQueryResponse
   */
  async cooperatorHotelBillSettlementQuery(request: CooperatorHotelBillSettlementQueryRequest): Promise<CooperatorHotelBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CooperatorHotelBillSettlementQueryHeaders({ });
    return await this.cooperatorHotelBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单事件推送
   * 
   * @param request - CooperatorHotelEventPushRequest
   * @param headers - CooperatorHotelEventPushHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CooperatorHotelEventPushResponse
   */
  async cooperatorHotelEventPushWithOptions(request: CooperatorHotelEventPushRequest, headers: CooperatorHotelEventPushHeaders, runtime: $Util.RuntimeOptions): Promise<CooperatorHotelEventPushResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.changeOrderStatus)) {
      body["change_order_status"] = request.changeOrderStatus;
    }

    if (!Util.isUnset(request.changeOrderStatusDesc)) {
      body["change_order_status_desc"] = request.changeOrderStatusDesc;
    }

    if (!Util.isUnset(request.cooperatorOrderId)) {
      body["cooperator_order_id"] = request.cooperatorOrderId;
    }

    if (!Util.isUnset(request.event)) {
      body["event"] = request.event;
    }

    if (!Util.isUnset(request.eventDesc)) {
      body["event_desc"] = request.eventDesc;
    }

    if (!Util.isUnset(request.eventTime)) {
      body["event_time"] = request.eventTime;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CooperatorHotelEventPush",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/coop-hotel/v1/orders/events`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CooperatorHotelEventPushResponse>(await this.callApi(params, req, runtime), new CooperatorHotelEventPushResponse({}));
  }

  /**
   * 酒店订单事件推送
   * 
   * @param request - CooperatorHotelEventPushRequest
   * @returns CooperatorHotelEventPushResponse
   */
  async cooperatorHotelEventPush(request: CooperatorHotelEventPushRequest): Promise<CooperatorHotelEventPushResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CooperatorHotelEventPushHeaders({ });
    return await this.cooperatorHotelEventPushWithOptions(request, headers, runtime);
  }

  /**
   * 个人支付结果推送
   * 
   * @param request - CooperatorSyncPayStatusRequest
   * @param headers - CooperatorSyncPayStatusHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CooperatorSyncPayStatusResponse
   */
  async cooperatorSyncPayStatusWithOptions(request: CooperatorSyncPayStatusRequest, headers: CooperatorSyncPayStatusHeaders, runtime: $Util.RuntimeOptions): Promise<CooperatorSyncPayStatusResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cooperatorOrderId)) {
      body["cooperator_order_id"] = request.cooperatorOrderId;
    }

    if (!Util.isUnset(request.cooperatorPayNo)) {
      body["cooperator_pay_no"] = request.cooperatorPayNo;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.payStatus)) {
      body["pay_status"] = request.payStatus;
    }

    if (!Util.isUnset(request.payTime)) {
      body["pay_time"] = request.payTime;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CooperatorSyncPayStatus",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/coop-pay/v1/cashiers/status`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CooperatorSyncPayStatusResponse>(await this.callApi(params, req, runtime), new CooperatorSyncPayStatusResponse({}));
  }

  /**
   * 个人支付结果推送
   * 
   * @param request - CooperatorSyncPayStatusRequest
   * @returns CooperatorSyncPayStatusResponse
   */
  async cooperatorSyncPayStatus(request: CooperatorSyncPayStatusRequest): Promise<CooperatorSyncPayStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CooperatorSyncPayStatusHeaders({ });
    return await this.cooperatorSyncPayStatusWithOptions(request, headers, runtime);
  }

  /**
   * 获取关联可调用企业接口
   * 
   * @param headers - map
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CorpAuthLinkInfoQueryResponse
   */
  async corpAuthLinkInfoQueryWithOptions(headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CorpAuthLinkInfoQueryResponse> {
    let req = new $OpenApi.OpenApiRequest({
      headers: headers,
    });
    let params = new $OpenApi.Params({
      action: "CorpAuthLinkInfoQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/corp-authority-link/v1/info`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CorpAuthLinkInfoQueryResponse>(await this.callApi(params, req, runtime), new CorpAuthLinkInfoQueryResponse({}));
  }

  /**
   * 获取关联可调用企业接口
   * @returns CorpAuthLinkInfoQueryResponse
   */
  async corpAuthLinkInfoQuery(): Promise<CorpAuthLinkInfoQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.corpAuthLinkInfoQueryWithOptions(headers, runtime);
  }

  /**
   * 换取CorpToken接口
   * 
   * @param request - CorpTokenRequest
   * @param headers - CorpTokenHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CorpTokenResponse
   */
  async corpTokenWithOptions(request: CorpTokenRequest, headers: CorpTokenHeaders, runtime: $Util.RuntimeOptions): Promise<CorpTokenResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.appSecret)) {
      query["app_secret"] = request.appSecret;
    }

    if (!Util.isUnset(request.corpId)) {
      query["corp_id"] = request.corpId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
      realHeaders["x-acs-btrip-access-token"] = Util.toJSONString(headers.xAcsBtripAccessToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CorpToken",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/btrip-open-auth/v1/corp-token/action/take`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CorpTokenResponse>(await this.callApi(params, req, runtime), new CorpTokenResponse({}));
  }

  /**
   * 换取CorpToken接口
   * 
   * @param request - CorpTokenRequest
   * @returns CorpTokenResponse
   */
  async corpToken(request: CorpTokenRequest): Promise<CorpTokenResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CorpTokenHeaders({ });
    return await this.corpTokenWithOptions(request, headers, runtime);
  }

  /**
   * 删除成本中心
   * 
   * @param request - CostCenterDeleteRequest
   * @param headers - CostCenterDeleteHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CostCenterDeleteResponse
   */
  async costCenterDeleteWithOptions(request: CostCenterDeleteRequest, headers: CostCenterDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<CostCenterDeleteResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.thirdpartId)) {
      query["thirdpart_id"] = request.thirdpartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CostCenterDelete",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/delete-costcenter`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CostCenterDeleteResponse>(await this.callApi(params, req, runtime), new CostCenterDeleteResponse({}));
  }

  /**
   * 删除成本中心
   * 
   * @param request - CostCenterDeleteRequest
   * @returns CostCenterDeleteResponse
   */
  async costCenterDelete(request: CostCenterDeleteRequest): Promise<CostCenterDeleteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CostCenterDeleteHeaders({ });
    return await this.costCenterDeleteWithOptions(request, headers, runtime);
  }

  /**
   * 修改成本中心
   * 
   * @param request - CostCenterModifyRequest
   * @param headers - CostCenterModifyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CostCenterModifyResponse
   */
  async costCenterModifyWithOptions(request: CostCenterModifyRequest, headers: CostCenterModifyHeaders, runtime: $Util.RuntimeOptions): Promise<CostCenterModifyResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.alipayNo)) {
      body["alipay_no"] = request.alipayNo;
    }

    if (!Util.isUnset(request.disable)) {
      body["disable"] = request.disable;
    }

    if (!Util.isUnset(request.number)) {
      body["number"] = request.number;
    }

    if (!Util.isUnset(request.scope)) {
      body["scope"] = request.scope;
    }

    if (!Util.isUnset(request.thirdpartId)) {
      body["thirdpart_id"] = request.thirdpartId;
    }

    if (!Util.isUnset(request.title)) {
      body["title"] = request.title;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CostCenterModify",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/modify-costcenter`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CostCenterModifyResponse>(await this.callApi(params, req, runtime), new CostCenterModifyResponse({}));
  }

  /**
   * 修改成本中心
   * 
   * @param request - CostCenterModifyRequest
   * @returns CostCenterModifyResponse
   */
  async costCenterModify(request: CostCenterModifyRequest): Promise<CostCenterModifyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CostCenterModifyHeaders({ });
    return await this.costCenterModifyWithOptions(request, headers, runtime);
  }

  /**
   * 查看成本中心
   * 
   * @param request - CostCenterQueryRequest
   * @param headers - CostCenterQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CostCenterQueryResponse
   */
  async costCenterQueryWithOptions(request: CostCenterQueryRequest, headers: CostCenterQueryHeaders, runtime: $Util.RuntimeOptions): Promise<CostCenterQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disable)) {
      query["disable"] = request.disable;
    }

    if (!Util.isUnset(request.needOrgEntity)) {
      query["need_org_entity"] = request.needOrgEntity;
    }

    if (!Util.isUnset(request.thirdpartId)) {
      query["thirdpart_id"] = request.thirdpartId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CostCenterQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/costcenter`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<CostCenterQueryResponse>(await this.callApi(params, req, runtime), new CostCenterQueryResponse({}));
  }

  /**
   * 查看成本中心
   * 
   * @param request - CostCenterQueryRequest
   * @returns CostCenterQueryResponse
   */
  async costCenterQuery(request: CostCenterQueryRequest): Promise<CostCenterQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CostCenterQueryHeaders({ });
    return await this.costCenterQueryWithOptions(request, headers, runtime);
  }

  /**
   * 保存成本中心
   * 
   * @param request - CostCenterSaveRequest
   * @param headers - CostCenterSaveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CostCenterSaveResponse
   */
  async costCenterSaveWithOptions(request: CostCenterSaveRequest, headers: CostCenterSaveHeaders, runtime: $Util.RuntimeOptions): Promise<CostCenterSaveResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.alipayNo)) {
      body["alipay_no"] = request.alipayNo;
    }

    if (!Util.isUnset(request.disable)) {
      body["disable"] = request.disable;
    }

    if (!Util.isUnset(request.number)) {
      body["number"] = request.number;
    }

    if (!Util.isUnset(request.scope)) {
      body["scope"] = request.scope;
    }

    if (!Util.isUnset(request.thirdpartId)) {
      body["thirdpart_id"] = request.thirdpartId;
    }

    if (!Util.isUnset(request.title)) {
      body["title"] = request.title;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CostCenterSave",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/save-costcenter`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CostCenterSaveResponse>(await this.callApi(params, req, runtime), new CostCenterSaveResponse({}));
  }

  /**
   * 保存成本中心
   * 
   * @param request - CostCenterSaveRequest
   * @returns CostCenterSaveResponse
   */
  async costCenterSave(request: CostCenterSaveRequest): Promise<CostCenterSaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CostCenterSaveHeaders({ });
    return await this.costCenterSaveWithOptions(request, headers, runtime);
  }

  /**
   * 创建企业自定义角色
   * 
   * @param request - CreateCustomRoleRequest
   * @param headers - CreateCustomRoleHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCustomRoleResponse
   */
  async createCustomRoleWithOptions(request: CreateCustomRoleRequest, headers: CreateCustomRoleHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCustomRoleResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.roleId)) {
      body["role_id"] = request.roleId;
    }

    if (!Util.isUnset(request.roleName)) {
      body["role_name"] = request.roleName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CreateCustomRole",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/role/v1/customRoles/create`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateCustomRoleResponse>(await this.callApi(params, req, runtime), new CreateCustomRoleResponse({}));
  }

  /**
   * 创建企业自定义角色
   * 
   * @param request - CreateCustomRoleRequest
   * @returns CreateCustomRoleResponse
   */
  async createCustomRole(request: CreateCustomRoleRequest): Promise<CreateCustomRoleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CreateCustomRoleHeaders({ });
    return await this.createCustomRoleWithOptions(request, headers, runtime);
  }

  /**
   * 创建子企业
   * 
   * @param request - CreateSubCorpRequest
   * @param headers - CreateSubCorpHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSubCorpResponse
   */
  async createSubCorpWithOptions(request: CreateSubCorpRequest, headers: CreateSubCorpHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSubCorpResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.outerCorpId)) {
      body["outer_corp_id"] = request.outerCorpId;
    }

    if (!Util.isUnset(request.outerCorpName)) {
      body["outer_corp_name"] = request.outerCorpName;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CreateSubCorp",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/sub_corps/v1/corps`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateSubCorpResponse>(await this.callApi(params, req, runtime), new CreateSubCorpResponse({}));
  }

  /**
   * 创建子企业
   * 
   * @param request - CreateSubCorpRequest
   * @returns CreateSubCorpResponse
   */
  async createSubCorp(request: CreateSubCorpRequest): Promise<CreateSubCorpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new CreateSubCorpHeaders({ });
    return await this.createSubCorpWithOptions(request, headers, runtime);
  }

  /**
   * 删除企业自定义角色
   * 
   * @param request - DeleteCustomRoleRequest
   * @param headers - DeleteCustomRoleHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCustomRoleResponse
   */
  async deleteCustomRoleWithOptions(request: DeleteCustomRoleRequest, headers: DeleteCustomRoleHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteCustomRoleResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.roleId)) {
      body["role_id"] = request.roleId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DeleteCustomRole",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/role/v1/customRoles/delete`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteCustomRoleResponse>(await this.callApi(params, req, runtime), new DeleteCustomRoleResponse({}));
  }

  /**
   * 删除企业自定义角色
   * 
   * @param request - DeleteCustomRoleRequest
   * @returns DeleteCustomRoleResponse
   */
  async deleteCustomRole(request: DeleteCustomRoleRequest): Promise<DeleteCustomRoleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new DeleteCustomRoleHeaders({ });
    return await this.deleteCustomRoleWithOptions(request, headers, runtime);
  }

  /**
   * 删除企业部门
   * 
   * @param request - DeleteDepartmentRequest
   * @param headers - DeleteDepartmentHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDepartmentResponse
   */
  async deleteDepartmentWithOptions(request: DeleteDepartmentRequest, headers: DeleteDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDepartmentResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.outDeptId)) {
      body["out_dept_id"] = request.outDeptId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DeleteDepartment",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/department/v2/delete`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteDepartmentResponse>(await this.callApi(params, req, runtime), new DeleteDepartmentResponse({}));
  }

  /**
   * 删除企业部门
   * 
   * @param request - DeleteDepartmentRequest
   * @returns DeleteDepartmentResponse
   */
  async deleteDepartment(request: DeleteDepartmentRequest): Promise<DeleteDepartmentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new DeleteDepartmentHeaders({ });
    return await this.deleteDepartmentWithOptions(request, headers, runtime);
  }

  /**
   * 批量删除企业自定义角色下人员
   * 
   * @param tmpReq - DeleteEmployeesFromCustomRoleRequest
   * @param headers - DeleteEmployeesFromCustomRoleHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteEmployeesFromCustomRoleResponse
   */
  async deleteEmployeesFromCustomRoleWithOptions(tmpReq: DeleteEmployeesFromCustomRoleRequest, headers: DeleteEmployeesFromCustomRoleHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteEmployeesFromCustomRoleResponse> {
    Util.validateModel(tmpReq);
    let request = new DeleteEmployeesFromCustomRoleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.userIdList)) {
      request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, "user_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.roleId)) {
      body["role_id"] = request.roleId;
    }

    if (!Util.isUnset(request.userIdListShrink)) {
      body["user_id_list"] = request.userIdListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DeleteEmployeesFromCustomRole",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/role/v1/customRoleEmployees/delete`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteEmployeesFromCustomRoleResponse>(await this.callApi(params, req, runtime), new DeleteEmployeesFromCustomRoleResponse({}));
  }

  /**
   * 批量删除企业自定义角色下人员
   * 
   * @param request - DeleteEmployeesFromCustomRoleRequest
   * @returns DeleteEmployeesFromCustomRoleResponse
   */
  async deleteEmployeesFromCustomRole(request: DeleteEmployeesFromCustomRoleRequest): Promise<DeleteEmployeesFromCustomRoleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new DeleteEmployeesFromCustomRoleHeaders({ });
    return await this.deleteEmployeesFromCustomRoleWithOptions(request, headers, runtime);
  }

  /**
   * 删除发票抬头适用人员
   * 
   * @param tmpReq - DeleteInvoiceEntityRequest
   * @param headers - DeleteInvoiceEntityHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteInvoiceEntityResponse
   */
  async deleteInvoiceEntityWithOptions(tmpReq: DeleteInvoiceEntityRequest, headers: DeleteInvoiceEntityHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteInvoiceEntityResponse> {
    Util.validateModel(tmpReq);
    let request = new DeleteInvoiceEntityShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entities)) {
      request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, "entities", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.delAll)) {
      query["del_all"] = request.delAll;
    }

    if (!Util.isUnset(request.entitiesShrink)) {
      query["entities"] = request.entitiesShrink;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      query["third_part_id"] = request.thirdPartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteInvoiceEntity",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/entities`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<DeleteInvoiceEntityResponse>(await this.callApi(params, req, runtime), new DeleteInvoiceEntityResponse({}));
  }

  /**
   * 删除发票抬头适用人员
   * 
   * @param request - DeleteInvoiceEntityRequest
   * @returns DeleteInvoiceEntityResponse
   */
  async deleteInvoiceEntity(request: DeleteInvoiceEntityRequest): Promise<DeleteInvoiceEntityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new DeleteInvoiceEntityHeaders({ });
    return await this.deleteInvoiceEntityWithOptions(request, headers, runtime);
  }

  /**
   * 同步外部平台部门信息至商旅内部
   * 
   * @param tmpReq - DepartmentSaveRequest
   * @param headers - DepartmentSaveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DepartmentSaveResponse
   */
  async departmentSaveWithOptions(tmpReq: DepartmentSaveRequest, headers: DepartmentSaveHeaders, runtime: $Util.RuntimeOptions): Promise<DepartmentSaveResponse> {
    Util.validateModel(tmpReq);
    let request = new DepartmentSaveShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.departList)) {
      request.departListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departList, "depart_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.departListShrink)) {
      body["depart_list"] = request.departListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DepartmentSave",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/department/v1/department`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DepartmentSaveResponse>(await this.callApi(params, req, runtime), new DepartmentSaveResponse({}));
  }

  /**
   * 同步外部平台部门信息至商旅内部
   * 
   * @param request - DepartmentSaveRequest
   * @returns DepartmentSaveResponse
   */
  async departmentSave(request: DepartmentSaveRequest): Promise<DepartmentSaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new DepartmentSaveHeaders({ });
    return await this.departmentSaveWithOptions(request, headers, runtime);
  }

  /**
   * 批量申请电子行程单
   * 
   * @param tmpReq - ElectronicItineraryBatchApplyRequest
   * @param headers - ElectronicItineraryBatchApplyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ElectronicItineraryBatchApplyResponse
   */
  async electronicItineraryBatchApplyWithOptions(tmpReq: ElectronicItineraryBatchApplyRequest, headers: ElectronicItineraryBatchApplyHeaders, runtime: $Util.RuntimeOptions): Promise<ElectronicItineraryBatchApplyResponse> {
    Util.validateModel(tmpReq);
    let request = new ElectronicItineraryBatchApplyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.applyItineraryList)) {
      request.applyItineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applyItineraryList, "apply_itinerary_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyItineraryListShrink)) {
      body["apply_itinerary_list"] = request.applyItineraryListShrink;
    }

    if (!Util.isUnset(request.canReprint)) {
      body["can_reprint"] = request.canReprint;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ElectronicItineraryBatchApply",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/apply-itinerary-batch-task`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ElectronicItineraryBatchApplyResponse>(await this.callApi(params, req, runtime), new ElectronicItineraryBatchApplyResponse({}));
  }

  /**
   * 批量申请电子行程单
   * 
   * @param request - ElectronicItineraryBatchApplyRequest
   * @returns ElectronicItineraryBatchApplyResponse
   */
  async electronicItineraryBatchApply(request: ElectronicItineraryBatchApplyRequest): Promise<ElectronicItineraryBatchApplyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ElectronicItineraryBatchApplyHeaders({ });
    return await this.electronicItineraryBatchApplyWithOptions(request, headers, runtime);
  }

  /**
   * 获取电子行程单申请结果
   * 
   * @param request - ElectronicItineraryGetApplyResultRequest
   * @param headers - ElectronicItineraryGetApplyResultHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ElectronicItineraryGetApplyResultResponse
   */
  async electronicItineraryGetApplyResultWithOptions(request: ElectronicItineraryGetApplyResultRequest, headers: ElectronicItineraryGetApplyResultHeaders, runtime: $Util.RuntimeOptions): Promise<ElectronicItineraryGetApplyResultResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.batchApplyNo)) {
      query["batch_apply_no"] = request.batchApplyNo;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ElectronicItineraryGetApplyResult",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/get-itinerary-batch-task`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<ElectronicItineraryGetApplyResultResponse>(await this.callApi(params, req, runtime), new ElectronicItineraryGetApplyResultResponse({}));
  }

  /**
   * 获取电子行程单申请结果
   * 
   * @param request - ElectronicItineraryGetApplyResultRequest
   * @returns ElectronicItineraryGetApplyResultResponse
   */
  async electronicItineraryGetApplyResult(request: ElectronicItineraryGetApplyResultRequest): Promise<ElectronicItineraryGetApplyResultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ElectronicItineraryGetApplyResultHeaders({ });
    return await this.electronicItineraryGetApplyResultWithOptions(request, headers, runtime);
  }

  /**
   * 增加成本中心人员信息
   * 
   * @param tmpReq - EntityAddRequest
   * @param headers - EntityAddHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EntityAddResponse
   */
  async entityAddWithOptions(tmpReq: EntityAddRequest, headers: EntityAddHeaders, runtime: $Util.RuntimeOptions): Promise<EntityAddResponse> {
    Util.validateModel(tmpReq);
    let request = new EntityAddShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entityDOList)) {
      request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, "entity_d_o_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.entityDOListShrink)) {
      body["entity_d_o_list"] = request.entityDOListShrink;
    }

    if (!Util.isUnset(request.thirdpartId)) {
      body["thirdpart_id"] = request.thirdpartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "EntityAdd",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/add-entity`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<EntityAddResponse>(await this.callApi(params, req, runtime), new EntityAddResponse({}));
  }

  /**
   * 增加成本中心人员信息
   * 
   * @param request - EntityAddRequest
   * @returns EntityAddResponse
   */
  async entityAdd(request: EntityAddRequest): Promise<EntityAddResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new EntityAddHeaders({ });
    return await this.entityAddWithOptions(request, headers, runtime);
  }

  /**
   * 删除成本中心人员信息
   * 
   * @param tmpReq - EntityDeleteRequest
   * @param headers - EntityDeleteHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EntityDeleteResponse
   */
  async entityDeleteWithOptions(tmpReq: EntityDeleteRequest, headers: EntityDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<EntityDeleteResponse> {
    Util.validateModel(tmpReq);
    let request = new EntityDeleteShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entityDOList)) {
      request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, "entity_d_o_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.delAll)) {
      query["del_all"] = request.delAll;
    }

    if (!Util.isUnset(request.thirdpartId)) {
      query["thirdpart_id"] = request.thirdpartId;
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.entityDOListShrink)) {
      body["entity_d_o_list"] = request.entityDOListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "EntityDelete",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/entity/action/delete`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<EntityDeleteResponse>(await this.callApi(params, req, runtime), new EntityDeleteResponse({}));
  }

  /**
   * 删除成本中心人员信息
   * 
   * @param request - EntityDeleteRequest
   * @returns EntityDeleteResponse
   */
  async entityDelete(request: EntityDeleteRequest): Promise<EntityDeleteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new EntityDeleteHeaders({ });
    return await this.entityDeleteWithOptions(request, headers, runtime);
  }

  /**
   * 设置成本中心人员信息
   * 
   * @param tmpReq - EntitySetRequest
   * @param headers - EntitySetHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EntitySetResponse
   */
  async entitySetWithOptions(tmpReq: EntitySetRequest, headers: EntitySetHeaders, runtime: $Util.RuntimeOptions): Promise<EntitySetResponse> {
    Util.validateModel(tmpReq);
    let request = new EntitySetShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entityDOList)) {
      request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, "entity_d_o_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.entityDOListShrink)) {
      body["entity_d_o_list"] = request.entityDOListShrink;
    }

    if (!Util.isUnset(request.thirdpartId)) {
      body["thirdpart_id"] = request.thirdpartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "EntitySet",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/set-entity`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<EntitySetResponse>(await this.callApi(params, req, runtime), new EntitySetResponse({}));
  }

  /**
   * 设置成本中心人员信息
   * 
   * @param request - EntitySetRequest
   * @returns EntitySetResponse
   */
  async entitySet(request: EntitySetRequest): Promise<EntitySetResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new EntitySetHeaders({ });
    return await this.entitySetWithOptions(request, headers, runtime);
  }

  /**
   * 预估价格查询
   * 
   * @param request - EstimatedPriceQueryRequest
   * @param headers - EstimatedPriceQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EstimatedPriceQueryResponse
   */
  async estimatedPriceQueryWithOptions(request: EstimatedPriceQueryRequest, headers: EstimatedPriceQueryHeaders, runtime: $Util.RuntimeOptions): Promise<EstimatedPriceQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.arrCity)) {
      query["arr_city"] = request.arrCity;
    }

    if (!Util.isUnset(request.category)) {
      query["category"] = request.category;
    }

    if (!Util.isUnset(request.depCity)) {
      query["dep_city"] = request.depCity;
    }

    if (!Util.isUnset(request.endTime)) {
      query["end_time"] = request.endTime;
    }

    if (!Util.isUnset(request.itineraryId)) {
      query["itinerary_id"] = request.itineraryId;
    }

    if (!Util.isUnset(request.startTime)) {
      query["start_time"] = request.startTime;
    }

    if (!Util.isUnset(request.subCorpId)) {
      query["sub_corp_id"] = request.subCorpId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "EstimatedPriceQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/costcenter/v1/estimated-price`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<EstimatedPriceQueryResponse>(await this.callApi(params, req, runtime), new EstimatedPriceQueryResponse({}));
  }

  /**
   * 预估价格查询
   * 
   * @param request - EstimatedPriceQueryRequest
   * @returns EstimatedPriceQueryResponse
   */
  async estimatedPriceQuery(request: EstimatedPriceQueryRequest): Promise<EstimatedPriceQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new EstimatedPriceQueryHeaders({ });
    return await this.estimatedPriceQueryWithOptions(request, headers, runtime);
  }

  /**
   * 超标审批结果同步
   * 
   * @param request - ExceedApplySyncRequest
   * @param headers - ExceedApplySyncHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExceedApplySyncResponse
   */
  async exceedApplySyncWithOptions(request: ExceedApplySyncRequest, headers: ExceedApplySyncHeaders, runtime: $Util.RuntimeOptions): Promise<ExceedApplySyncResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.bizCategory)) {
      query["biz_category"] = request.bizCategory;
    }

    if (!Util.isUnset(request.remark)) {
      query["remark"] = request.remark;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    if (!Util.isUnset(request.thirdpartyFlowId)) {
      query["thirdparty_flow_id"] = request.thirdpartyFlowId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ExceedApplySync",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/syn-exceed`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<ExceedApplySyncResponse>(await this.callApi(params, req, runtime), new ExceedApplySyncResponse({}));
  }

  /**
   * 超标审批结果同步
   * 
   * @param request - ExceedApplySyncRequest
   * @returns ExceedApplySyncResponse
   */
  async exceedApplySync(request: ExceedApplySyncRequest): Promise<ExceedApplySyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ExceedApplySyncHeaders({ });
    return await this.exceedApplySyncWithOptions(request, headers, runtime);
  }

  /**
   * 添加外部出行人与证件信息
   * 
   * @param tmpReq - ExternalUserAddRequest
   * @param headers - ExternalUserAddHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExternalUserAddResponse
   */
  async externalUserAddWithOptions(tmpReq: ExternalUserAddRequest, headers: ExternalUserAddHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalUserAddResponse> {
    Util.validateModel(tmpReq);
    let request = new ExternalUserAddShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.certRequestList)) {
      request.certRequestListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certRequestList, "cert_request_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.birthday)) {
      body["birthday"] = request.birthday;
    }

    if (!Util.isUnset(request.certRequestListShrink)) {
      body["cert_request_list"] = request.certRequestListShrink;
    }

    if (!Util.isUnset(request.email)) {
      body["email"] = request.email;
    }

    if (!Util.isUnset(request.externalUserId)) {
      body["external_user_id"] = request.externalUserId;
    }

    if (!Util.isUnset(request.phone)) {
      body["phone"] = request.phone;
    }

    if (!Util.isUnset(request.realName)) {
      body["real_name"] = request.realName;
    }

    if (!Util.isUnset(request.realNameEn)) {
      body["real_name_en"] = request.realNameEn;
    }

    if (!Util.isUnset(request.userType)) {
      body["user_type"] = request.userType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ExternalUserAdd",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/externalUsers`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ExternalUserAddResponse>(await this.callApi(params, req, runtime), new ExternalUserAddResponse({}));
  }

  /**
   * 添加外部出行人与证件信息
   * 
   * @param request - ExternalUserAddRequest
   * @returns ExternalUserAddResponse
   */
  async externalUserAdd(request: ExternalUserAddRequest): Promise<ExternalUserAddResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ExternalUserAddHeaders({ });
    return await this.externalUserAddWithOptions(request, headers, runtime);
  }

  /**
   * 删除外部出行人
   * 
   * @param headers - ExternalUserDeleteHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExternalUserDeleteResponse
   */
  async externalUserDeleteWithOptions(externalUserId: string, headers: ExternalUserDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalUserDeleteResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "ExternalUserDelete",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/externalUsers/${OpenApiUtil.getEncodeParam(externalUserId)}`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<ExternalUserDeleteResponse>(await this.callApi(params, req, runtime), new ExternalUserDeleteResponse({}));
  }

  /**
   * 删除外部出行人
   * @returns ExternalUserDeleteResponse
   */
  async externalUserDelete(externalUserId: string): Promise<ExternalUserDeleteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ExternalUserDeleteHeaders({ });
    return await this.externalUserDeleteWithOptions(externalUserId, headers, runtime);
  }

  /**
   * 查询外部出行人
   * 
   * @param headers - ExternalUserQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExternalUserQueryResponse
   */
  async externalUserQueryWithOptions(externalUserId: string, headers: ExternalUserQueryHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalUserQueryResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "ExternalUserQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/externalUsers/${OpenApiUtil.getEncodeParam(externalUserId)}`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<ExternalUserQueryResponse>(await this.callApi(params, req, runtime), new ExternalUserQueryResponse({}));
  }

  /**
   * 查询外部出行人
   * @returns ExternalUserQueryResponse
   */
  async externalUserQuery(externalUserId: string): Promise<ExternalUserQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ExternalUserQueryHeaders({ });
    return await this.externalUserQueryWithOptions(externalUserId, headers, runtime);
  }

  /**
   * 修改外部出行人与证件信息
   * 
   * @param tmpReq - ExternalUserUpdateRequest
   * @param headers - ExternalUserUpdateHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExternalUserUpdateResponse
   */
  async externalUserUpdateWithOptions(externalUserId: string, tmpReq: ExternalUserUpdateRequest, headers: ExternalUserUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalUserUpdateResponse> {
    Util.validateModel(tmpReq);
    let request = new ExternalUserUpdateShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.certRequestList)) {
      request.certRequestListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certRequestList, "cert_request_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.birthday)) {
      body["birthday"] = request.birthday;
    }

    if (!Util.isUnset(request.certRequestListShrink)) {
      body["cert_request_list"] = request.certRequestListShrink;
    }

    if (!Util.isUnset(request.email)) {
      body["email"] = request.email;
    }

    if (!Util.isUnset(request.phone)) {
      body["phone"] = request.phone;
    }

    if (!Util.isUnset(request.realName)) {
      body["real_name"] = request.realName;
    }

    if (!Util.isUnset(request.realNameEn)) {
      body["real_name_en"] = request.realNameEn;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ExternalUserUpdate",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/externalUsers/${OpenApiUtil.getEncodeParam(externalUserId)}`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ExternalUserUpdateResponse>(await this.callApi(params, req, runtime), new ExternalUserUpdateResponse({}));
  }

  /**
   * 修改外部出行人与证件信息
   * 
   * @param request - ExternalUserUpdateRequest
   * @returns ExternalUserUpdateResponse
   */
  async externalUserUpdate(externalUserId: string, request: ExternalUserUpdateRequest): Promise<ExternalUserUpdateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ExternalUserUpdateHeaders({ });
    return await this.externalUserUpdateWithOptions(externalUserId, request, headers, runtime);
  }

  /**
   * 查询机票记账数据
   * 
   * @param request - FlightBillSettlementQueryRequest
   * @param headers - FlightBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightBillSettlementQueryResponse
   */
  async flightBillSettlementQueryWithOptions(request: FlightBillSettlementQueryRequest, headers: FlightBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<FlightBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/flight/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new FlightBillSettlementQueryResponse({}));
  }

  /**
   * 查询机票记账数据
   * 
   * @param request - FlightBillSettlementQueryRequest
   * @returns FlightBillSettlementQueryResponse
   */
  async flightBillSettlementQuery(request: FlightBillSettlementQueryRequest): Promise<FlightBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightBillSettlementQueryHeaders({ });
    return await this.flightBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 航班订单取消
   * 
   * @param request - FlightCancelOrderRequest
   * @param headers - FlightCancelOrderHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightCancelOrderResponse
   */
  async flightCancelOrderWithOptions(request: FlightCancelOrderRequest, headers: FlightCancelOrderHeaders, runtime: $Util.RuntimeOptions): Promise<FlightCancelOrderResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightCancelOrder",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/order/action/cancel`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightCancelOrderResponse>(await this.callApi(params, req, runtime), new FlightCancelOrderResponse({}));
  }

  /**
   * 航班订单取消
   * 
   * @param request - FlightCancelOrderRequest
   * @returns FlightCancelOrderResponse
   */
  async flightCancelOrder(request: FlightCancelOrderRequest): Promise<FlightCancelOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightCancelOrderHeaders({ });
    return await this.flightCancelOrderWithOptions(request, headers, runtime);
  }

  /**
   * 机票订单取消
   * 
   * @param request - FlightCancelOrderV2Request
   * @param headers - FlightCancelOrderV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightCancelOrderV2Response
   */
  async flightCancelOrderV2WithOptions(request: FlightCancelOrderV2Request, headers: FlightCancelOrderV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightCancelOrderV2Response> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightCancelOrderV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/order/action/cancel`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightCancelOrderV2Response>(await this.callApi(params, req, runtime), new FlightCancelOrderV2Response({}));
  }

  /**
   * 机票订单取消
   * 
   * @param request - FlightCancelOrderV2Request
   * @returns FlightCancelOrderV2Response
   */
  async flightCancelOrderV2(request: FlightCancelOrderV2Request): Promise<FlightCancelOrderV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightCancelOrderV2Headers({ });
    return await this.flightCancelOrderV2WithOptions(request, headers, runtime);
  }

  /**
   * 航班订单创建
   * 
   * @param tmpReq - FlightCreateOrderRequest
   * @param headers - FlightCreateOrderHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightCreateOrderResponse
   */
  async flightCreateOrderWithOptions(tmpReq: FlightCreateOrderRequest, headers: FlightCreateOrderHeaders, runtime: $Util.RuntimeOptions): Promise<FlightCreateOrderResponse> {
    Util.validateModel(tmpReq);
    let request = new FlightCreateOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.contactInfo)) {
      request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, "contact_info", "json");
    }

    if (!Util.isUnset(tmpReq.orderAttr)) {
      request.orderAttrShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderAttr, "order_attr", "json");
    }

    if (!Util.isUnset(tmpReq.travelerInfoList)) {
      request.travelerInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerInfoList, "traveler_info_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.arrAirportCode)) {
      body["arr_airport_code"] = request.arrAirportCode;
    }

    if (!Util.isUnset(request.arrCityCode)) {
      body["arr_city_code"] = request.arrCityCode;
    }

    if (!Util.isUnset(request.autoPay)) {
      body["auto_pay"] = request.autoPay;
    }

    if (!Util.isUnset(request.buyerName)) {
      body["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.buyerUniqueKey)) {
      body["buyer_unique_key"] = request.buyerUniqueKey;
    }

    if (!Util.isUnset(request.contactInfoShrink)) {
      body["contact_info"] = request.contactInfoShrink;
    }

    if (!Util.isUnset(request.depAirportCode)) {
      body["dep_airport_code"] = request.depAirportCode;
    }

    if (!Util.isUnset(request.depCityCode)) {
      body["dep_city_code"] = request.depCityCode;
    }

    if (!Util.isUnset(request.depDate)) {
      body["dep_date"] = request.depDate;
    }

    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.orderAttrShrink)) {
      body["order_attr"] = request.orderAttrShrink;
    }

    if (!Util.isUnset(request.orderParams)) {
      body["order_params"] = request.orderParams;
    }

    if (!Util.isUnset(request.otaItemId)) {
      body["ota_item_id"] = request.otaItemId;
    }

    if (!Util.isUnset(request.price)) {
      body["price"] = request.price;
    }

    if (!Util.isUnset(request.receiptAddress)) {
      body["receipt_address"] = request.receiptAddress;
    }

    if (!Util.isUnset(request.receiptTarget)) {
      body["receipt_target"] = request.receiptTarget;
    }

    if (!Util.isUnset(request.receiptTitle)) {
      body["receipt_title"] = request.receiptTitle;
    }

    if (!Util.isUnset(request.travelerInfoListShrink)) {
      body["traveler_info_list"] = request.travelerInfoListShrink;
    }

    if (!Util.isUnset(request.tripType)) {
      body["trip_type"] = request.tripType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightCreateOrder",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/order/action/create`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightCreateOrderResponse>(await this.callApi(params, req, runtime), new FlightCreateOrderResponse({}));
  }

  /**
   * 航班订单创建
   * 
   * @param request - FlightCreateOrderRequest
   * @returns FlightCreateOrderResponse
   */
  async flightCreateOrder(request: FlightCreateOrderRequest): Promise<FlightCreateOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightCreateOrderHeaders({ });
    return await this.flightCreateOrderWithOptions(request, headers, runtime);
  }

  /**
   * 机票订单创建
   * 
   * @param tmpReq - FlightCreateOrderV2Request
   * @param headers - FlightCreateOrderV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightCreateOrderV2Response
   */
  async flightCreateOrderV2WithOptions(tmpReq: FlightCreateOrderV2Request, headers: FlightCreateOrderV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightCreateOrderV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightCreateOrderV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.contactInfo)) {
      request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, "contact_info", "json");
    }

    if (!Util.isUnset(tmpReq.travelers)) {
      request.travelersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelers, "travelers", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.asyncCreateOrderKey)) {
      body["async_create_order_key"] = request.asyncCreateOrderKey;
    }

    if (!Util.isUnset(request.asyncCreateOrderMode)) {
      body["async_create_order_mode"] = request.asyncCreateOrderMode;
    }

    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      body["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.contactInfoShrink)) {
      body["contact_info"] = request.contactInfoShrink;
    }

    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.otaItemId)) {
      body["ota_item_id"] = request.otaItemId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.totalPriceCent)) {
      body["total_price_cent"] = request.totalPriceCent;
    }

    if (!Util.isUnset(request.travelersShrink)) {
      body["travelers"] = request.travelersShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightCreateOrderV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/order/action/create`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightCreateOrderV2Response>(await this.callApi(params, req, runtime), new FlightCreateOrderV2Response({}));
  }

  /**
   * 机票订单创建
   * 
   * @param request - FlightCreateOrderV2Request
   * @returns FlightCreateOrderV2Response
   */
  async flightCreateOrderV2(request: FlightCreateOrderV2Request): Promise<FlightCreateOrderV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightCreateOrderV2Headers({ });
    return await this.flightCreateOrderV2WithOptions(request, headers, runtime);
  }

  /**
   * 查询飞机超标审批详情
   * 
   * @param request - FlightExceedApplyQueryRequest
   * @param headers - FlightExceedApplyQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightExceedApplyQueryResponse
   */
  async flightExceedApplyQueryWithOptions(request: FlightExceedApplyQueryRequest, headers: FlightExceedApplyQueryHeaders, runtime: $Util.RuntimeOptions): Promise<FlightExceedApplyQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.businessInstanceId)) {
      query["business_instance_id"] = request.businessInstanceId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightExceedApplyQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/flight-exceed`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightExceedApplyQueryResponse>(await this.callApi(params, req, runtime), new FlightExceedApplyQueryResponse({}));
  }

  /**
   * 查询飞机超标审批详情
   * 
   * @param request - FlightExceedApplyQueryRequest
   * @returns FlightExceedApplyQueryResponse
   */
  async flightExceedApplyQuery(request: FlightExceedApplyQueryRequest): Promise<FlightExceedApplyQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightExceedApplyQueryHeaders({ });
    return await this.flightExceedApplyQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询机票行程单扫描件
   * 
   * @param request - FlightItineraryScanQueryRequest
   * @param headers - FlightItineraryScanQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightItineraryScanQueryResponse
   */
  async flightItineraryScanQueryWithOptions(request: FlightItineraryScanQueryRequest, headers: FlightItineraryScanQueryHeaders, runtime: $Util.RuntimeOptions): Promise<FlightItineraryScanQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.billDate)) {
      query["bill_date"] = request.billDate;
    }

    if (!Util.isUnset(request.billId)) {
      query["bill_id"] = request.billId;
    }

    if (!Util.isUnset(request.invoiceSubTaskId)) {
      query["invoice_sub_task_id"] = request.invoiceSubTaskId;
    }

    if (!Util.isUnset(request.itineraryNum)) {
      query["itinerary_num"] = request.itineraryNum;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.ticketNo)) {
      query["ticket_no"] = request.ticketNo;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightItineraryScanQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/scan/v1/flight-itinerary`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightItineraryScanQueryResponse>(await this.callApi(params, req, runtime), new FlightItineraryScanQueryResponse({}));
  }

  /**
   * 查询机票行程单扫描件
   * 
   * @param request - FlightItineraryScanQueryRequest
   * @returns FlightItineraryScanQueryResponse
   */
  async flightItineraryScanQuery(request: FlightItineraryScanQueryRequest): Promise<FlightItineraryScanQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightItineraryScanQueryHeaders({ });
    return await this.flightItineraryScanQueryWithOptions(request, headers, runtime);
  }

  /**
   * 航班列表搜索
   * 
   * @param request - FlightListingSearchRequest
   * @param headers - FlightListingSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightListingSearchResponse
   */
  async flightListingSearchWithOptions(request: FlightListingSearchRequest, headers: FlightListingSearchHeaders, runtime: $Util.RuntimeOptions): Promise<FlightListingSearchResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.airlineCode)) {
      query["airline_code"] = request.airlineCode;
    }

    if (!Util.isUnset(request.arrCityCode)) {
      query["arr_city_code"] = request.arrCityCode;
    }

    if (!Util.isUnset(request.cabinClass)) {
      query["cabin_class"] = request.cabinClass;
    }

    if (!Util.isUnset(request.depCityCode)) {
      query["dep_city_code"] = request.depCityCode;
    }

    if (!Util.isUnset(request.depDate)) {
      query["dep_date"] = request.depDate;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightListingSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/flight/action/listing-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightListingSearchResponse>(await this.callApi(params, req, runtime), new FlightListingSearchResponse({}));
  }

  /**
   * 航班列表搜索
   * 
   * @param request - FlightListingSearchRequest
   * @returns FlightListingSearchResponse
   */
  async flightListingSearch(request: FlightListingSearchRequest): Promise<FlightListingSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightListingSearchHeaders({ });
    return await this.flightListingSearchWithOptions(request, headers, runtime);
  }

  /**
   * 航班列表搜索
   * 
   * @param tmpReq - FlightListingSearchV2Request
   * @param headers - FlightListingSearchV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightListingSearchV2Response
   */
  async flightListingSearchV2WithOptions(tmpReq: FlightListingSearchV2Request, headers: FlightListingSearchV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightListingSearchV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightListingSearchV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.cabinTypeList)) {
      request.cabinTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinTypeList, "cabin_type_list", "json");
    }

    if (!Util.isUnset(tmpReq.searchJourneys)) {
      request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, "search_journeys", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.airlineCode)) {
      query["airline_code"] = request.airlineCode;
    }

    if (!Util.isUnset(request.cabinTypeListShrink)) {
      query["cabin_type_list"] = request.cabinTypeListShrink;
    }

    if (!Util.isUnset(request.directOnly)) {
      query["direct_only"] = request.directOnly;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.needMultiClassPrice)) {
      query["need_multi_class_price"] = request.needMultiClassPrice;
    }

    if (!Util.isUnset(request.needQueryServiceFee)) {
      query["need_query_service_fee"] = request.needQueryServiceFee;
    }

    if (!Util.isUnset(request.needShareFlight)) {
      query["need_share_flight"] = request.needShareFlight;
    }

    if (!Util.isUnset(request.needYCBestPrice)) {
      query["need_y_c_best_price"] = request.needYCBestPrice;
    }

    if (!Util.isUnset(request.searchJourneysShrink)) {
      query["search_journeys"] = request.searchJourneysShrink;
    }

    if (!Util.isUnset(request.searchMode)) {
      query["search_mode"] = request.searchMode;
    }

    if (!Util.isUnset(request.tripType)) {
      query["trip_type"] = request.tripType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightListingSearchV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/flight/action/listing-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightListingSearchV2Response>(await this.callApi(params, req, runtime), new FlightListingSearchV2Response({}));
  }

  /**
   * 航班列表搜索
   * 
   * @param request - FlightListingSearchV2Request
   * @returns FlightListingSearchV2Response
   */
  async flightListingSearchV2(request: FlightListingSearchV2Request): Promise<FlightListingSearchV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightListingSearchV2Headers({ });
    return await this.flightListingSearchV2WithOptions(request, headers, runtime);
  }

  /**
   * 机票改签申请
   * 
   * @param tmpReq - FlightModifyApplyV2Request
   * @param headers - FlightModifyApplyV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightModifyApplyV2Response
   */
  async flightModifyApplyV2WithOptions(tmpReq: FlightModifyApplyV2Request, headers: FlightModifyApplyV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightModifyApplyV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightModifyApplyV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
      request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, "passenger_segment_relations", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cacheKey)) {
      body["cache_key"] = request.cacheKey;
    }

    if (!Util.isUnset(request.contactPhone)) {
      body["contact_phone"] = request.contactPhone;
    }

    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.itemId)) {
      body["item_id"] = request.itemId;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outSubOrderId)) {
      body["out_sub_order_id"] = request.outSubOrderId;
    }

    if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
      body["passenger_segment_relations"] = request.passengerSegmentRelationsShrink;
    }

    if (!Util.isUnset(request.reason)) {
      body["reason"] = request.reason;
    }

    if (!Util.isUnset(request.sessionId)) {
      body["session_id"] = request.sessionId;
    }

    if (!Util.isUnset(request.voluntary)) {
      body["voluntary"] = request.voluntary;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightModifyApplyV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/modify/action/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightModifyApplyV2Response>(await this.callApi(params, req, runtime), new FlightModifyApplyV2Response({}));
  }

  /**
   * 机票改签申请
   * 
   * @param request - FlightModifyApplyV2Request
   * @returns FlightModifyApplyV2Response
   */
  async flightModifyApplyV2(request: FlightModifyApplyV2Request): Promise<FlightModifyApplyV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightModifyApplyV2Headers({ });
    return await this.flightModifyApplyV2WithOptions(request, headers, runtime);
  }

  /**
   * 机票改签取消
   * 
   * @param request - FlightModifyCancelV2Request
   * @param headers - FlightModifyCancelV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightModifyCancelV2Response
   */
  async flightModifyCancelV2WithOptions(request: FlightModifyCancelV2Request, headers: FlightModifyCancelV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightModifyCancelV2Response> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outSubOrderId)) {
      query["out_sub_order_id"] = request.outSubOrderId;
    }

    if (!Util.isUnset(request.subOrderId)) {
      query["sub_order_id"] = request.subOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightModifyCancelV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/modify/action/cancel`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightModifyCancelV2Response>(await this.callApi(params, req, runtime), new FlightModifyCancelV2Response({}));
  }

  /**
   * 机票改签取消
   * 
   * @param request - FlightModifyCancelV2Request
   * @returns FlightModifyCancelV2Response
   */
  async flightModifyCancelV2(request: FlightModifyCancelV2Request): Promise<FlightModifyCancelV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightModifyCancelV2Headers({ });
    return await this.flightModifyCancelV2WithOptions(request, headers, runtime);
  }

  /**
   * 机票改签列表搜索
   * 
   * @param tmpReq - FlightModifyListingSearchV2Request
   * @param headers - FlightModifyListingSearchV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightModifyListingSearchV2Response
   */
  async flightModifyListingSearchV2WithOptions(tmpReq: FlightModifyListingSearchV2Request, headers: FlightModifyListingSearchV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightModifyListingSearchV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightModifyListingSearchV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.cabinClass)) {
      request.cabinClassShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinClass, "cabin_class", "json");
    }

    if (!Util.isUnset(tmpReq.depDate)) {
      request.depDateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.depDate, "dep_date", "json");
    }

    if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
      request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, "passenger_segment_relations", "json");
    }

    if (!Util.isUnset(tmpReq.selectedSegments)) {
      request.selectedSegmentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedSegments, "selected_segments", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cabinClassShrink)) {
      query["cabin_class"] = request.cabinClassShrink;
    }

    if (!Util.isUnset(request.depDateShrink)) {
      query["dep_date"] = request.depDateShrink;
    }

    if (!Util.isUnset(request.interfaceCallerIsSupportRetry)) {
      query["interface_caller_is_support_retry"] = request.interfaceCallerIsSupportRetry;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
      query["passenger_segment_relations"] = request.passengerSegmentRelationsShrink;
    }

    if (!Util.isUnset(request.searchMode)) {
      query["search_mode"] = request.searchMode;
    }

    if (!Util.isUnset(request.searchRetryToken)) {
      query["search_retry_token"] = request.searchRetryToken;
    }

    if (!Util.isUnset(request.selectedSegmentsShrink)) {
      query["selected_segments"] = request.selectedSegmentsShrink;
    }

    if (!Util.isUnset(request.sessionId)) {
      query["session_id"] = request.sessionId;
    }

    if (!Util.isUnset(request.voluntary)) {
      query["voluntary"] = request.voluntary;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightModifyListingSearchV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/modify/action/listing-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightModifyListingSearchV2Response>(await this.callApi(params, req, runtime), new FlightModifyListingSearchV2Response({}));
  }

  /**
   * 机票改签列表搜索
   * 
   * @param request - FlightModifyListingSearchV2Request
   * @returns FlightModifyListingSearchV2Response
   */
  async flightModifyListingSearchV2(request: FlightModifyListingSearchV2Request): Promise<FlightModifyListingSearchV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightModifyListingSearchV2Headers({ });
    return await this.flightModifyListingSearchV2WithOptions(request, headers, runtime);
  }

  /**
   * 机票改签详情
   * 
   * @param request - FlightModifyOrderDetailV2Request
   * @param headers - FlightModifyOrderDetailV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightModifyOrderDetailV2Response
   */
  async flightModifyOrderDetailV2WithOptions(request: FlightModifyOrderDetailV2Request, headers: FlightModifyOrderDetailV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightModifyOrderDetailV2Response> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.modifyApplyId)) {
      query["modify_apply_id"] = request.modifyApplyId;
    }

    if (!Util.isUnset(request.needQueryServiceFee)) {
      query["need_query_service_fee"] = request.needQueryServiceFee;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outModifyApplyId)) {
      query["out_modify_apply_id"] = request.outModifyApplyId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightModifyOrderDetailV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/modify/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightModifyOrderDetailV2Response>(await this.callApi(params, req, runtime), new FlightModifyOrderDetailV2Response({}));
  }

  /**
   * 机票改签详情
   * 
   * @param request - FlightModifyOrderDetailV2Request
   * @returns FlightModifyOrderDetailV2Response
   */
  async flightModifyOrderDetailV2(request: FlightModifyOrderDetailV2Request): Promise<FlightModifyOrderDetailV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightModifyOrderDetailV2Headers({ });
    return await this.flightModifyOrderDetailV2WithOptions(request, headers, runtime);
  }

  /**
   * 机票改签报价搜索
   * 
   * @param tmpReq - FlightModifyOtaSearchV2Request
   * @param headers - FlightModifyOtaSearchV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightModifyOtaSearchV2Response
   */
  async flightModifyOtaSearchV2WithOptions(tmpReq: FlightModifyOtaSearchV2Request, headers: FlightModifyOtaSearchV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightModifyOtaSearchV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightModifyOtaSearchV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.cabinClass)) {
      request.cabinClassShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinClass, "cabin_class", "json");
    }

    if (!Util.isUnset(tmpReq.depDate)) {
      request.depDateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.depDate, "dep_date", "json");
    }

    if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
      request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, "passenger_segment_relations", "json");
    }

    if (!Util.isUnset(tmpReq.selectedSegments)) {
      request.selectedSegmentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedSegments, "selected_segments", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cabinClassShrink)) {
      query["cabin_class"] = request.cabinClassShrink;
    }

    if (!Util.isUnset(request.depDateShrink)) {
      query["dep_date"] = request.depDateShrink;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
      query["passenger_segment_relations"] = request.passengerSegmentRelationsShrink;
    }

    if (!Util.isUnset(request.selectedSegmentsShrink)) {
      query["selected_segments"] = request.selectedSegmentsShrink;
    }

    if (!Util.isUnset(request.sessionId)) {
      query["session_id"] = request.sessionId;
    }

    if (!Util.isUnset(request.voluntary)) {
      query["voluntary"] = request.voluntary;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightModifyOtaSearchV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/modify/action/ota-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightModifyOtaSearchV2Response>(await this.callApi(params, req, runtime), new FlightModifyOtaSearchV2Response({}));
  }

  /**
   * 机票改签报价搜索
   * 
   * @param request - FlightModifyOtaSearchV2Request
   * @returns FlightModifyOtaSearchV2Response
   */
  async flightModifyOtaSearchV2(request: FlightModifyOtaSearchV2Request): Promise<FlightModifyOtaSearchV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightModifyOtaSearchV2Headers({ });
    return await this.flightModifyOtaSearchV2WithOptions(request, headers, runtime);
  }

  /**
   * 机票改签支付
   * 
   * @param tmpReq - FlightModifyPayV2Request
   * @param headers - FlightModifyPayV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightModifyPayV2Response
   */
  async flightModifyPayV2WithOptions(tmpReq: FlightModifyPayV2Request, headers: FlightModifyPayV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightModifyPayV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightModifyPayV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.extParams)) {
      request.extParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extParams, "ext_params", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.extParamsShrink)) {
      body["ext_params"] = request.extParamsShrink;
    }

    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.modifyPayAmount)) {
      body["modify_pay_amount"] = request.modifyPayAmount;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outSubOrderId)) {
      body["out_sub_order_id"] = request.outSubOrderId;
    }

    if (!Util.isUnset(request.subOrderId)) {
      body["sub_order_id"] = request.subOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightModifyPayV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/modify/action/pay`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightModifyPayV2Response>(await this.callApi(params, req, runtime), new FlightModifyPayV2Response({}));
  }

  /**
   * 机票改签支付
   * 
   * @param request - FlightModifyPayV2Request
   * @returns FlightModifyPayV2Response
   */
  async flightModifyPayV2(request: FlightModifyPayV2Request): Promise<FlightModifyPayV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightModifyPayV2Headers({ });
    return await this.flightModifyPayV2WithOptions(request, headers, runtime);
  }

  /**
   * 航班订单明细信息
   * 
   * @param request - FlightOrderDetailInfoRequest
   * @param headers - FlightOrderDetailInfoHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOrderDetailInfoResponse
   */
  async flightOrderDetailInfoWithOptions(request: FlightOrderDetailInfoRequest, headers: FlightOrderDetailInfoHeaders, runtime: $Util.RuntimeOptions): Promise<FlightOrderDetailInfoResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOrderDetailInfo",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/order/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOrderDetailInfoResponse>(await this.callApi(params, req, runtime), new FlightOrderDetailInfoResponse({}));
  }

  /**
   * 航班订单明细信息
   * 
   * @param request - FlightOrderDetailInfoRequest
   * @returns FlightOrderDetailInfoResponse
   */
  async flightOrderDetailInfo(request: FlightOrderDetailInfoRequest): Promise<FlightOrderDetailInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOrderDetailInfoHeaders({ });
    return await this.flightOrderDetailInfoWithOptions(request, headers, runtime);
  }

  /**
   * 机票订单详情
   * 
   * @param request - FlightOrderDetailV2Request
   * @param headers - FlightOrderDetailV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOrderDetailV2Response
   */
  async flightOrderDetailV2WithOptions(request: FlightOrderDetailV2Request, headers: FlightOrderDetailV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightOrderDetailV2Response> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOrderDetailV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/order/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOrderDetailV2Response>(await this.callApi(params, req, runtime), new FlightOrderDetailV2Response({}));
  }

  /**
   * 机票订单详情
   * 
   * @param request - FlightOrderDetailV2Request
   * @returns FlightOrderDetailV2Response
   */
  async flightOrderDetailV2(request: FlightOrderDetailV2Request): Promise<FlightOrderDetailV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOrderDetailV2Headers({ });
    return await this.flightOrderDetailV2WithOptions(request, headers, runtime);
  }

  /**
   * 查询机票订单列表
   * 
   * @param request - FlightOrderListQueryRequest
   * @param headers - FlightOrderListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOrderListQueryResponse
   */
  async flightOrderListQueryWithOptions(request: FlightOrderListQueryRequest, headers: FlightOrderListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<FlightOrderListQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.allApply)) {
      query["all_apply"] = request.allApply;
    }

    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.departId)) {
      query["depart_id"] = request.departId;
    }

    if (!Util.isUnset(request.endTime)) {
      query["end_time"] = request.endTime;
    }

    if (!Util.isUnset(request.page)) {
      query["page"] = request.page;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["start_time"] = request.startTime;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      query["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.updateEndTime)) {
      query["update_end_time"] = request.updateEndTime;
    }

    if (!Util.isUnset(request.updateStartTime)) {
      query["update_start_time"] = request.updateStartTime;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOrderListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/flight/v1/order-list`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOrderListQueryResponse>(await this.callApi(params, req, runtime), new FlightOrderListQueryResponse({}));
  }

  /**
   * 查询机票订单列表
   * 
   * @param request - FlightOrderListQueryRequest
   * @returns FlightOrderListQueryResponse
   */
  async flightOrderListQuery(request: FlightOrderListQueryRequest): Promise<FlightOrderListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOrderListQueryHeaders({ });
    return await this.flightOrderListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 机票订单列表查询
   * 
   * @param tmpReq - FlightOrderListQueryV2Request
   * @param headers - FlightOrderListQueryV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOrderListQueryV2Response
   */
  async flightOrderListQueryV2WithOptions(tmpReq: FlightOrderListQueryV2Request, headers: FlightOrderListQueryV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightOrderListQueryV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightOrderListQueryV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.approveId)) {
      request.approveIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.approveId, "approve_id", "json");
    }

    if (!Util.isUnset(tmpReq.bookerId)) {
      request.bookerIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookerId, "booker_id", "json");
    }

    if (!Util.isUnset(tmpReq.departId)) {
      request.departIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departId, "depart_id", "json");
    }

    if (!Util.isUnset(tmpReq.supplier)) {
      request.supplierShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.supplier, "supplier", "json");
    }

    if (!Util.isUnset(tmpReq.thirdpartApproveId)) {
      request.thirdpartApproveIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdpartApproveId, "thirdpart_approve_id", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.approveIdShrink)) {
      query["approve_id"] = request.approveIdShrink;
    }

    if (!Util.isUnset(request.bookerIdShrink)) {
      query["booker_id"] = request.bookerIdShrink;
    }

    if (!Util.isUnset(request.departIdShrink)) {
      query["depart_id"] = request.departIdShrink;
    }

    if (!Util.isUnset(request.endDate)) {
      query["end_date"] = request.endDate;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_Size"] = request.pageSize;
    }

    if (!Util.isUnset(request.scrollId)) {
      query["scroll_id"] = request.scrollId;
    }

    if (!Util.isUnset(request.startDate)) {
      query["start_date"] = request.startDate;
    }

    if (!Util.isUnset(request.supplierShrink)) {
      query["supplier"] = request.supplierShrink;
    }

    if (!Util.isUnset(request.thirdpartApproveIdShrink)) {
      query["thirdpart_approve_id"] = request.thirdpartApproveIdShrink;
    }

    if (!Util.isUnset(request.updateEndDate)) {
      query["update_end_date"] = request.updateEndDate;
    }

    if (!Util.isUnset(request.updateStartDate)) {
      query["update_start_date"] = request.updateStartDate;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOrderListQueryV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/open/v2/Flight-order-list-query`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOrderListQueryV2Response>(await this.callApi(params, req, runtime), new FlightOrderListQueryV2Response({}));
  }

  /**
   * 机票订单列表查询
   * 
   * @param request - FlightOrderListQueryV2Request
   * @returns FlightOrderListQueryV2Response
   */
  async flightOrderListQueryV2(request: FlightOrderListQueryV2Request): Promise<FlightOrderListQueryV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOrderListQueryV2Headers({ });
    return await this.flightOrderListQueryV2WithOptions(request, headers, runtime);
  }

  /**
   * 查询机票订单详情（含票信息）
   * 
   * @param request - FlightOrderQueryRequest
   * @param headers - FlightOrderQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOrderQueryResponse
   */
  async flightOrderQueryWithOptions(request: FlightOrderQueryRequest, headers: FlightOrderQueryHeaders, runtime: $Util.RuntimeOptions): Promise<FlightOrderQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOrderQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/flight/v1/order`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOrderQueryResponse>(await this.callApi(params, req, runtime), new FlightOrderQueryResponse({}));
  }

  /**
   * 查询机票订单详情（含票信息）
   * 
   * @param request - FlightOrderQueryRequest
   * @returns FlightOrderQueryResponse
   */
  async flightOrderQuery(request: FlightOrderQueryRequest): Promise<FlightOrderQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOrderQueryHeaders({ });
    return await this.flightOrderQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询退改规则行李额
   * 
   * @param request - FlightOtaItemDetailRequest
   * @param headers - FlightOtaItemDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOtaItemDetailResponse
   */
  async flightOtaItemDetailWithOptions(request: FlightOtaItemDetailRequest, headers: FlightOtaItemDetailHeaders, runtime: $Util.RuntimeOptions): Promise<FlightOtaItemDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.otaItemId)) {
      query["ota_item_id"] = request.otaItemId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOtaItemDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/flight/action/ota-item-detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOtaItemDetailResponse>(await this.callApi(params, req, runtime), new FlightOtaItemDetailResponse({}));
  }

  /**
   * 查询退改规则行李额
   * 
   * @param request - FlightOtaItemDetailRequest
   * @returns FlightOtaItemDetailResponse
   */
  async flightOtaItemDetail(request: FlightOtaItemDetailRequest): Promise<FlightOtaItemDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOtaItemDetailHeaders({ });
    return await this.flightOtaItemDetailWithOptions(request, headers, runtime);
  }

  /**
   * 航班最低价搜索
   * 
   * @param request - FlightOtaSearchRequest
   * @param headers - FlightOtaSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOtaSearchResponse
   */
  async flightOtaSearchWithOptions(request: FlightOtaSearchRequest, headers: FlightOtaSearchHeaders, runtime: $Util.RuntimeOptions): Promise<FlightOtaSearchResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.airlineCode)) {
      query["airline_code"] = request.airlineCode;
    }

    if (!Util.isUnset(request.arrCityCode)) {
      query["arr_city_code"] = request.arrCityCode;
    }

    if (!Util.isUnset(request.cabinClass)) {
      query["cabin_class"] = request.cabinClass;
    }

    if (!Util.isUnset(request.carrierFlightNo)) {
      query["carrier_flight_no"] = request.carrierFlightNo;
    }

    if (!Util.isUnset(request.depCityCode)) {
      query["dep_city_code"] = request.depCityCode;
    }

    if (!Util.isUnset(request.depDate)) {
      query["dep_date"] = request.depDate;
    }

    if (!Util.isUnset(request.flightNo)) {
      query["flight_no"] = request.flightNo;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOtaSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/flight/action/ota-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOtaSearchResponse>(await this.callApi(params, req, runtime), new FlightOtaSearchResponse({}));
  }

  /**
   * 航班最低价搜索
   * 
   * @param request - FlightOtaSearchRequest
   * @returns FlightOtaSearchResponse
   */
  async flightOtaSearch(request: FlightOtaSearchRequest): Promise<FlightOtaSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOtaSearchHeaders({ });
    return await this.flightOtaSearchWithOptions(request, headers, runtime);
  }

  /**
   * 单航班报价搜索
   * 
   * @param tmpReq - FlightOtaSearchV2Request
   * @param headers - FlightOtaSearchV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightOtaSearchV2Response
   */
  async flightOtaSearchV2WithOptions(tmpReq: FlightOtaSearchV2Request, headers: FlightOtaSearchV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightOtaSearchV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightOtaSearchV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.cabinTypeList)) {
      request.cabinTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinTypeList, "cabin_type_list", "json");
    }

    if (!Util.isUnset(tmpReq.searchJourneys)) {
      request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, "search_journeys", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cabinTypeListShrink)) {
      query["cabin_type_list"] = request.cabinTypeListShrink;
    }

    if (!Util.isUnset(request.directOnly)) {
      query["direct_only"] = request.directOnly;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.needShareFlight)) {
      query["need_share_flight"] = request.needShareFlight;
    }

    if (!Util.isUnset(request.searchJourneysShrink)) {
      query["search_journeys"] = request.searchJourneysShrink;
    }

    if (!Util.isUnset(request.searchMode)) {
      query["search_mode"] = request.searchMode;
    }

    if (!Util.isUnset(request.tripType)) {
      query["trip_type"] = request.tripType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightOtaSearchV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/flight/action/ota-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightOtaSearchV2Response>(await this.callApi(params, req, runtime), new FlightOtaSearchV2Response({}));
  }

  /**
   * 单航班报价搜索
   * 
   * @param request - FlightOtaSearchV2Request
   * @returns FlightOtaSearchV2Response
   */
  async flightOtaSearchV2(request: FlightOtaSearchV2Request): Promise<FlightOtaSearchV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightOtaSearchV2Headers({ });
    return await this.flightOtaSearchV2WithOptions(request, headers, runtime);
  }

  /**
   * 航班订单支付
   * 
   * @param tmpReq - FlightPayOrderRequest
   * @param headers - FlightPayOrderHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightPayOrderResponse
   */
  async flightPayOrderWithOptions(tmpReq: FlightPayOrderRequest, headers: FlightPayOrderHeaders, runtime: $Util.RuntimeOptions): Promise<FlightPayOrderResponse> {
    Util.validateModel(tmpReq);
    let request = new FlightPayOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.extra)) {
      request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, "extra", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.corpPayPrice)) {
      body["corp_pay_price"] = request.corpPayPrice;
    }

    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.extraShrink)) {
      body["extra"] = request.extraShrink;
    }

    if (!Util.isUnset(request.personalPayPrice)) {
      body["personal_pay_price"] = request.personalPayPrice;
    }

    if (!Util.isUnset(request.totalPayPrice)) {
      body["total_pay_price"] = request.totalPayPrice;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightPayOrder",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/order/action/pay`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightPayOrderResponse>(await this.callApi(params, req, runtime), new FlightPayOrderResponse({}));
  }

  /**
   * 航班订单支付
   * 
   * @param request - FlightPayOrderRequest
   * @returns FlightPayOrderResponse
   */
  async flightPayOrder(request: FlightPayOrderRequest): Promise<FlightPayOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightPayOrderHeaders({ });
    return await this.flightPayOrderWithOptions(request, headers, runtime);
  }

  /**
   * 机票订单支付
   * 
   * @param request - FlightPayOrderV2Request
   * @param headers - FlightPayOrderV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightPayOrderV2Response
   */
  async flightPayOrderV2WithOptions(request: FlightPayOrderV2Request, headers: FlightPayOrderV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightPayOrderV2Response> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.totalPrice)) {
      body["total_price"] = request.totalPrice;
    }

    if (!Util.isUnset(request.totalServiceFeePrice)) {
      body["total_service_fee_price"] = request.totalServiceFeePrice;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightPayOrderV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/order/action/pay`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightPayOrderV2Response>(await this.callApi(params, req, runtime), new FlightPayOrderV2Response({}));
  }

  /**
   * 机票订单支付
   * 
   * @param request - FlightPayOrderV2Request
   * @returns FlightPayOrderV2Response
   */
  async flightPayOrderV2(request: FlightPayOrderV2Request): Promise<FlightPayOrderV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightPayOrderV2Headers({ });
    return await this.flightPayOrderV2WithOptions(request, headers, runtime);
  }

  /**
   * 航班退票申请
   * 
   * @param tmpReq - FlightRefundApplyRequest
   * @param headers - FlightRefundApplyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightRefundApplyResponse
   */
  async flightRefundApplyWithOptions(tmpReq: FlightRefundApplyRequest, headers: FlightRefundApplyHeaders, runtime: $Util.RuntimeOptions): Promise<FlightRefundApplyResponse> {
    Util.validateModel(tmpReq);
    let request = new FlightRefundApplyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.extra)) {
      request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, "extra", "json");
    }

    if (!Util.isUnset(tmpReq.passengerSegmentInfoList)) {
      request.passengerSegmentInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentInfoList, "passenger_segment_info_list", "json");
    }

    if (!Util.isUnset(tmpReq.refundVoucherInfo)) {
      request.refundVoucherInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundVoucherInfo, "refund_voucher_info", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.corpRefundPrice)) {
      body["corp_refund_price"] = request.corpRefundPrice;
    }

    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.disSubOrderId)) {
      body["dis_sub_order_id"] = request.disSubOrderId;
    }

    if (!Util.isUnset(request.displayRefundMoney)) {
      body["display_refund_money"] = request.displayRefundMoney;
    }

    if (!Util.isUnset(request.extraShrink)) {
      body["extra"] = request.extraShrink;
    }

    if (!Util.isUnset(request.isVoluntary)) {
      body["is_voluntary"] = request.isVoluntary;
    }

    if (!Util.isUnset(request.itemUnitIds)) {
      body["item_unit_ids"] = request.itemUnitIds;
    }

    if (!Util.isUnset(request.passengerSegmentInfoListShrink)) {
      body["passenger_segment_info_list"] = request.passengerSegmentInfoListShrink;
    }

    if (!Util.isUnset(request.personalRefundPrice)) {
      body["personal_refund_price"] = request.personalRefundPrice;
    }

    if (!Util.isUnset(request.reasonDetail)) {
      body["reason_detail"] = request.reasonDetail;
    }

    if (!Util.isUnset(request.reasonType)) {
      body["reason_type"] = request.reasonType;
    }

    if (!Util.isUnset(request.refundVoucherInfoShrink)) {
      body["refund_voucher_info"] = request.refundVoucherInfoShrink;
    }

    if (!Util.isUnset(request.sessionId)) {
      body["session_id"] = request.sessionId;
    }

    if (!Util.isUnset(request.totalRefundPrice)) {
      body["total_refund_price"] = request.totalRefundPrice;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightRefundApply",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/refund/action/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightRefundApplyResponse>(await this.callApi(params, req, runtime), new FlightRefundApplyResponse({}));
  }

  /**
   * 航班退票申请
   * 
   * @param request - FlightRefundApplyRequest
   * @returns FlightRefundApplyResponse
   */
  async flightRefundApply(request: FlightRefundApplyRequest): Promise<FlightRefundApplyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightRefundApplyHeaders({ });
    return await this.flightRefundApplyWithOptions(request, headers, runtime);
  }

  /**
   * 机票退票申请
   * 
   * @param tmpReq - FlightRefundApplyV2Request
   * @param headers - FlightRefundApplyV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightRefundApplyV2Response
   */
  async flightRefundApplyV2WithOptions(tmpReq: FlightRefundApplyV2Request, headers: FlightRefundApplyV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightRefundApplyV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightRefundApplyV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
      request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, "passenger_segment_relations", "json");
    }

    if (!Util.isUnset(tmpReq.ticketNos)) {
      request.ticketNosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketNos, "ticket_nos", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outSubOrderId)) {
      body["out_sub_order_id"] = request.outSubOrderId;
    }

    if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
      body["passenger_segment_relations"] = request.passengerSegmentRelationsShrink;
    }

    if (!Util.isUnset(request.preCalType)) {
      body["pre_cal_type"] = request.preCalType;
    }

    if (!Util.isUnset(request.refundReason)) {
      body["refund_reason"] = request.refundReason;
    }

    if (!Util.isUnset(request.refundReasonType)) {
      body["refund_reason_type"] = request.refundReasonType;
    }

    if (!Util.isUnset(request.ticketNosShrink)) {
      body["ticket_nos"] = request.ticketNosShrink;
    }

    if (!Util.isUnset(request.totalRefundPrice)) {
      body["total_refund_price"] = request.totalRefundPrice;
    }

    if (!Util.isUnset(request.uploadPictUrls)) {
      body["upload_pict_urls"] = request.uploadPictUrls;
    }

    if (!Util.isUnset(request.voluntary)) {
      body["voluntary"] = request.voluntary;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "FlightRefundApplyV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/refund/action/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FlightRefundApplyV2Response>(await this.callApi(params, req, runtime), new FlightRefundApplyV2Response({}));
  }

  /**
   * 机票退票申请
   * 
   * @param request - FlightRefundApplyV2Request
   * @returns FlightRefundApplyV2Response
   */
  async flightRefundApplyV2(request: FlightRefundApplyV2Request): Promise<FlightRefundApplyV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightRefundApplyV2Headers({ });
    return await this.flightRefundApplyV2WithOptions(request, headers, runtime);
  }

  /**
   * 航班退票详情
   * 
   * @param request - FlightRefundDetailRequest
   * @param headers - FlightRefundDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightRefundDetailResponse
   */
  async flightRefundDetailWithOptions(request: FlightRefundDetailRequest, headers: FlightRefundDetailHeaders, runtime: $Util.RuntimeOptions): Promise<FlightRefundDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.disSubOrderId)) {
      query["dis_sub_order_id"] = request.disSubOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightRefundDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/refund/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightRefundDetailResponse>(await this.callApi(params, req, runtime), new FlightRefundDetailResponse({}));
  }

  /**
   * 航班退票详情
   * 
   * @param request - FlightRefundDetailRequest
   * @returns FlightRefundDetailResponse
   */
  async flightRefundDetail(request: FlightRefundDetailRequest): Promise<FlightRefundDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightRefundDetailHeaders({ });
    return await this.flightRefundDetailWithOptions(request, headers, runtime);
  }

  /**
   * 机票退票详情
   * 
   * @param request - FlightRefundDetailV2Request
   * @param headers - FlightRefundDetailV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightRefundDetailV2Response
   */
  async flightRefundDetailV2WithOptions(request: FlightRefundDetailV2Request, headers: FlightRefundDetailV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightRefundDetailV2Response> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outRefundApplyId)) {
      query["out_refund_apply_id"] = request.outRefundApplyId;
    }

    if (!Util.isUnset(request.refundApplyId)) {
      query["refund_apply_id"] = request.refundApplyId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightRefundDetailV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/refund/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightRefundDetailV2Response>(await this.callApi(params, req, runtime), new FlightRefundDetailV2Response({}));
  }

  /**
   * 机票退票详情
   * 
   * @param request - FlightRefundDetailV2Request
   * @returns FlightRefundDetailV2Response
   */
  async flightRefundDetailV2(request: FlightRefundDetailV2Request): Promise<FlightRefundDetailV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightRefundDetailV2Headers({ });
    return await this.flightRefundDetailV2WithOptions(request, headers, runtime);
  }

  /**
   * 机票退票预计算
   * 
   * @param tmpReq - FlightRefundPreCalRequest
   * @param headers - FlightRefundPreCalHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightRefundPreCalResponse
   */
  async flightRefundPreCalWithOptions(tmpReq: FlightRefundPreCalRequest, headers: FlightRefundPreCalHeaders, runtime: $Util.RuntimeOptions): Promise<FlightRefundPreCalResponse> {
    Util.validateModel(tmpReq);
    let request = new FlightRefundPreCalShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.passengerSegmentInfoList)) {
      request.passengerSegmentInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentInfoList, "passenger_segment_info_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.isVoluntary)) {
      query["is_voluntary"] = request.isVoluntary;
    }

    if (!Util.isUnset(request.passengerSegmentInfoListShrink)) {
      query["passenger_segment_info_list"] = request.passengerSegmentInfoListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightRefundPreCal",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/refund/action/pre-cal`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightRefundPreCalResponse>(await this.callApi(params, req, runtime), new FlightRefundPreCalResponse({}));
  }

  /**
   * 机票退票预计算
   * 
   * @param request - FlightRefundPreCalRequest
   * @returns FlightRefundPreCalResponse
   */
  async flightRefundPreCal(request: FlightRefundPreCalRequest): Promise<FlightRefundPreCalResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightRefundPreCalHeaders({ });
    return await this.flightRefundPreCalWithOptions(request, headers, runtime);
  }

  /**
   * 机票退票费用预计算
   * 
   * @param tmpReq - FlightRefundPreCalV2Request
   * @param headers - FlightRefundPreCalV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightRefundPreCalV2Response
   */
  async flightRefundPreCalV2WithOptions(tmpReq: FlightRefundPreCalV2Request, headers: FlightRefundPreCalV2Headers, runtime: $Util.RuntimeOptions): Promise<FlightRefundPreCalV2Response> {
    Util.validateModel(tmpReq);
    let request = new FlightRefundPreCalV2ShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
      request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, "passenger_segment_relations", "json");
    }

    if (!Util.isUnset(tmpReq.ticketNos)) {
      request.ticketNosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketNos, "ticket_nos", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
      query["passenger_segment_relations"] = request.passengerSegmentRelationsShrink;
    }

    if (!Util.isUnset(request.preCalType)) {
      query["pre_cal_type"] = request.preCalType;
    }

    if (!Util.isUnset(request.ticketNosShrink)) {
      query["ticket_nos"] = request.ticketNosShrink;
    }

    if (!Util.isUnset(request.voluntary)) {
      query["voluntary"] = request.voluntary;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightRefundPreCalV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v2/refund/action/pre-cal`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightRefundPreCalV2Response>(await this.callApi(params, req, runtime), new FlightRefundPreCalV2Response({}));
  }

  /**
   * 机票退票费用预计算
   * 
   * @param request - FlightRefundPreCalV2Request
   * @returns FlightRefundPreCalV2Response
   */
  async flightRefundPreCalV2(request: FlightRefundPreCalV2Request): Promise<FlightRefundPreCalV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightRefundPreCalV2Headers({ });
    return await this.flightRefundPreCalV2WithOptions(request, headers, runtime);
  }

  /**
   * 航班列表搜索
   * 
   * @param request - FlightSearchListRequest
   * @param headers - FlightSearchListHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FlightSearchListResponse
   */
  async flightSearchListWithOptions(request: FlightSearchListRequest, headers: FlightSearchListHeaders, runtime: $Util.RuntimeOptions): Promise<FlightSearchListResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.airlineCode)) {
      query["airline_code"] = request.airlineCode;
    }

    if (!Util.isUnset(request.arrCityCode)) {
      query["arr_city_code"] = request.arrCityCode;
    }

    if (!Util.isUnset(request.arrCityName)) {
      query["arr_city_name"] = request.arrCityName;
    }

    if (!Util.isUnset(request.arrDate)) {
      query["arr_date"] = request.arrDate;
    }

    if (!Util.isUnset(request.cabinClass)) {
      query["cabin_class"] = request.cabinClass;
    }

    if (!Util.isUnset(request.depCityCode)) {
      query["dep_city_code"] = request.depCityCode;
    }

    if (!Util.isUnset(request.depCityName)) {
      query["dep_city_name"] = request.depCityName;
    }

    if (!Util.isUnset(request.depDate)) {
      query["dep_date"] = request.depDate;
    }

    if (!Util.isUnset(request.flightNo)) {
      query["flight_no"] = request.flightNo;
    }

    if (!Util.isUnset(request.needMultiClassPrice)) {
      query["need_multi_class_price"] = request.needMultiClassPrice;
    }

    if (!Util.isUnset(request.transferCityCode)) {
      query["transfer_city_code"] = request.transferCityCode;
    }

    if (!Util.isUnset(request.transferFlightNo)) {
      query["transfer_flight_no"] = request.transferFlightNo;
    }

    if (!Util.isUnset(request.transferLeaveDate)) {
      query["transfer_leave_date"] = request.transferLeaveDate;
    }

    if (!Util.isUnset(request.tripType)) {
      query["trip_type"] = request.tripType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FlightSearchList",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/huge/dtb-flight/v1/flight/action/search-list`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<FlightSearchListResponse>(await this.callApi(params, req, runtime), new FlightSearchListResponse({}));
  }

  /**
   * 航班列表搜索
   * 
   * @param request - FlightSearchListRequest
   * @returns FlightSearchListResponse
   */
  async flightSearchList(request: FlightSearchListRequest): Promise<FlightSearchListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new FlightSearchListHeaders({ });
    return await this.flightSearchListWithOptions(request, headers, runtime);
  }

  /**
   * 换取GroupCorpToken接口
   * 
   * @param request - GroupCorpTokenRequest
   * @param headers - GroupCorpTokenHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GroupCorpTokenResponse
   */
  async groupCorpTokenWithOptions(request: GroupCorpTokenRequest, headers: GroupCorpTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GroupCorpTokenResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.appSecret)) {
      query["app_secret"] = request.appSecret;
    }

    if (!Util.isUnset(request.corpId)) {
      query["corp_id"] = request.corpId;
    }

    if (!Util.isUnset(request.subCorpId)) {
      query["sub_corp_id"] = request.subCorpId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
      realHeaders["x-acs-btrip-access-token"] = Util.toJSONString(headers.xAcsBtripAccessToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GroupCorpToken",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/btrip-open-auth/v1/group-corp-token/action/take`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<GroupCorpTokenResponse>(await this.callApi(params, req, runtime), new GroupCorpTokenResponse({}));
  }

  /**
   * 换取GroupCorpToken接口
   * 
   * @param request - GroupCorpTokenRequest
   * @returns GroupCorpTokenResponse
   */
  async groupCorpToken(request: GroupCorpTokenRequest): Promise<GroupCorpTokenResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new GroupCorpTokenHeaders({ });
    return await this.groupCorpTokenWithOptions(request, headers, runtime);
  }

  /**
   * 集团部门同步
   * 
   * @param tmpReq - GroupDepartSaveRequest
   * @param headers - GroupDepartSaveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GroupDepartSaveResponse
   */
  async groupDepartSaveWithOptions(tmpReq: GroupDepartSaveRequest, headers: GroupDepartSaveHeaders, runtime: $Util.RuntimeOptions): Promise<GroupDepartSaveResponse> {
    Util.validateModel(tmpReq);
    let request = new GroupDepartSaveShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.subCorpIdList)) {
      request.subCorpIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subCorpIdList, "sub_corp_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.deptName)) {
      body["dept_name"] = request.deptName;
    }

    if (!Util.isUnset(request.managerIds)) {
      body["manager_ids"] = request.managerIds;
    }

    if (!Util.isUnset(request.outerDeptId)) {
      body["outer_dept_id"] = request.outerDeptId;
    }

    if (!Util.isUnset(request.outerDeptPid)) {
      body["outer_dept_pid"] = request.outerDeptPid;
    }

    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.subCorpIdListShrink)) {
      body["sub_corp_id_list"] = request.subCorpIdListShrink;
    }

    if (!Util.isUnset(request.syncGroup)) {
      body["sync_group"] = request.syncGroup;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GroupDepartSave",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/sub_corps/v1/departs`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GroupDepartSaveResponse>(await this.callApi(params, req, runtime), new GroupDepartSaveResponse({}));
  }

  /**
   * 集团部门同步
   * 
   * @param request - GroupDepartSaveRequest
   * @returns GroupDepartSaveResponse
   */
  async groupDepartSave(request: GroupDepartSaveRequest): Promise<GroupDepartSaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new GroupDepartSaveHeaders({ });
    return await this.groupDepartSaveWithOptions(request, headers, runtime);
  }

  /**
   * 集团人员同步
   * 
   * @param tmpReq - GroupUserSaveRequest
   * @param headers - GroupUserSaveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GroupUserSaveResponse
   */
  async groupUserSaveWithOptions(tmpReq: GroupUserSaveRequest, headers: GroupUserSaveHeaders, runtime: $Util.RuntimeOptions): Promise<GroupUserSaveResponse> {
    Util.validateModel(tmpReq);
    let request = new GroupUserSaveShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.certList)) {
      request.certListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certList, "cert_list", "json");
    }

    if (!Util.isUnset(tmpReq.subCorpIdList)) {
      request.subCorpIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subCorpIdList, "sub_corp_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.baseCityCode)) {
      body["base_city_code"] = request.baseCityCode;
    }

    if (!Util.isUnset(request.birthday)) {
      body["birthday"] = request.birthday;
    }

    if (!Util.isUnset(request.certListShrink)) {
      body["cert_list"] = request.certListShrink;
    }

    if (!Util.isUnset(request.gender)) {
      body["gender"] = request.gender;
    }

    if (!Util.isUnset(request.jobNo)) {
      body["job_no"] = request.jobNo;
    }

    if (!Util.isUnset(request.phone)) {
      body["phone"] = request.phone;
    }

    if (!Util.isUnset(request.realNameEn)) {
      body["real_name_en"] = request.realNameEn;
    }

    if (!Util.isUnset(request.subCorpIdListShrink)) {
      body["sub_corp_id_list"] = request.subCorpIdListShrink;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      body["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GroupUserSave",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/sub_corps/v1/users`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GroupUserSaveResponse>(await this.callApi(params, req, runtime), new GroupUserSaveResponse({}));
  }

  /**
   * 集团人员同步
   * 
   * @param request - GroupUserSaveRequest
   * @returns GroupUserSaveResponse
   */
  async groupUserSave(request: GroupUserSaveRequest): Promise<GroupUserSaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new GroupUserSaveHeaders({ });
    return await this.groupUserSaveWithOptions(request, headers, runtime);
  }

  /**
   * 酒店起价
   * 
   * @param tmpReq - HotelAskingPriceRequest
   * @param headers - HotelAskingPriceHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelAskingPriceResponse
   */
  async hotelAskingPriceWithOptions(tmpReq: HotelAskingPriceRequest, headers: HotelAskingPriceHeaders, runtime: $Util.RuntimeOptions): Promise<HotelAskingPriceResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelAskingPriceShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.shids)) {
      request.shidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shids, "shids", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.adultNum)) {
      query["adult_num"] = request.adultNum;
    }

    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.checkInDate)) {
      query["check_in_date"] = request.checkInDate;
    }

    if (!Util.isUnset(request.checkOutDate)) {
      query["check_out_date"] = request.checkOutDate;
    }

    if (!Util.isUnset(request.cityCode)) {
      query["city_code"] = request.cityCode;
    }

    if (!Util.isUnset(request.cityName)) {
      query["city_name"] = request.cityName;
    }

    if (!Util.isUnset(request.dir)) {
      query["dir"] = request.dir;
    }

    if (!Util.isUnset(request.hotelStar)) {
      query["hotel_star"] = request.hotelStar;
    }

    if (!Util.isUnset(request.isProtocol)) {
      query["is_protocol"] = request.isProtocol;
    }

    if (!Util.isUnset(request.paymentType)) {
      query["payment_type"] = request.paymentType;
    }

    if (!Util.isUnset(request.shidsShrink)) {
      query["shids"] = request.shidsShrink;
    }

    if (!Util.isUnset(request.sortCode)) {
      query["sort_code"] = request.sortCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelAskingPrice",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/hotels/action/asking-price`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelAskingPriceResponse>(await this.callApi(params, req, runtime), new HotelAskingPriceResponse({}));
  }

  /**
   * 酒店起价
   * 
   * @param request - HotelAskingPriceRequest
   * @returns HotelAskingPriceResponse
   */
  async hotelAskingPrice(request: HotelAskingPriceRequest): Promise<HotelAskingPriceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelAskingPriceHeaders({ });
    return await this.hotelAskingPriceWithOptions(request, headers, runtime);
  }

  /**
   * 查询酒店记账数据
   * 
   * @param request - HotelBillSettlementQueryRequest
   * @param headers - HotelBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelBillSettlementQueryResponse
   */
  async hotelBillSettlementQueryWithOptions(request: HotelBillSettlementQueryRequest, headers: HotelBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<HotelBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/hotel/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new HotelBillSettlementQueryResponse({}));
  }

  /**
   * 查询酒店记账数据
   * 
   * @param request - HotelBillSettlementQueryRequest
   * @returns HotelBillSettlementQueryResponse
   */
  async hotelBillSettlementQuery(request: HotelBillSettlementQueryRequest): Promise<HotelBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelBillSettlementQueryHeaders({ });
    return await this.hotelBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 酒店城市列表
   * 
   * @param request - HotelCityCodeListRequest
   * @param headers - HotelCityCodeListHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelCityCodeListResponse
   */
  async hotelCityCodeListWithOptions(request: HotelCityCodeListRequest, headers: HotelCityCodeListHeaders, runtime: $Util.RuntimeOptions): Promise<HotelCityCodeListResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.countryCode)) {
      query["country_code"] = request.countryCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelCityCodeList",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/city-codes/action/search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelCityCodeListResponse>(await this.callApi(params, req, runtime), new HotelCityCodeListResponse({}));
  }

  /**
   * 酒店城市列表
   * 
   * @param request - HotelCityCodeListRequest
   * @returns HotelCityCodeListResponse
   */
  async hotelCityCodeList(request: HotelCityCodeListRequest): Promise<HotelCityCodeListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelCityCodeListHeaders({ });
    return await this.hotelCityCodeListWithOptions(request, headers, runtime);
  }

  /**
   * 查询酒店超标审批详情
   * 
   * @param request - HotelExceedApplyQueryRequest
   * @param headers - HotelExceedApplyQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelExceedApplyQueryResponse
   */
  async hotelExceedApplyQueryWithOptions(request: HotelExceedApplyQueryRequest, headers: HotelExceedApplyQueryHeaders, runtime: $Util.RuntimeOptions): Promise<HotelExceedApplyQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.businessInstanceId)) {
      query["business_instance_id"] = request.businessInstanceId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelExceedApplyQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/hotel-exceed`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelExceedApplyQueryResponse>(await this.callApi(params, req, runtime), new HotelExceedApplyQueryResponse({}));
  }

  /**
   * 查询酒店超标审批详情
   * 
   * @param request - HotelExceedApplyQueryRequest
   * @returns HotelExceedApplyQueryResponse
   */
  async hotelExceedApplyQuery(request: HotelExceedApplyQueryRequest): Promise<HotelExceedApplyQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelExceedApplyQueryHeaders({ });
    return await this.hotelExceedApplyQueryWithOptions(request, headers, runtime);
  }

  /**
   * 酒店详情页报价接口(直连)
   * 
   * @param request - HotelGoodsQueryRequest
   * @param headers - HotelGoodsQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelGoodsQueryResponse
   */
  async hotelGoodsQueryWithOptions(request: HotelGoodsQueryRequest, headers: HotelGoodsQueryHeaders, runtime: $Util.RuntimeOptions): Promise<HotelGoodsQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.adultNum)) {
      query["adult_num"] = request.adultNum;
    }

    if (!Util.isUnset(request.agreementPrice)) {
      query["agreement_price"] = request.agreementPrice;
    }

    if (!Util.isUnset(request.beginDate)) {
      query["begin_date"] = request.beginDate;
    }

    if (!Util.isUnset(request.breakfastIncluded)) {
      query["breakfast_included"] = request.breakfastIncluded;
    }

    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.cityCode)) {
      query["city_code"] = request.cityCode;
    }

    if (!Util.isUnset(request.endDate)) {
      query["end_date"] = request.endDate;
    }

    if (!Util.isUnset(request.hotelId)) {
      query["hotel_id"] = request.hotelId;
    }

    if (!Util.isUnset(request.payOverType)) {
      query["pay_over_type"] = request.payOverType;
    }

    if (!Util.isUnset(request.paymentType)) {
      query["payment_type"] = request.paymentType;
    }

    if (!Util.isUnset(request.specialInvoice)) {
      query["special_invoice"] = request.specialInvoice;
    }

    if (!Util.isUnset(request.superMan)) {
      query["super_man"] = request.superMan;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelGoodsQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/hotel-goods`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelGoodsQueryResponse>(await this.callApi(params, req, runtime), new HotelGoodsQueryResponse({}));
  }

  /**
   * 酒店详情页报价接口(直连)
   * 
   * @param request - HotelGoodsQueryRequest
   * @returns HotelGoodsQueryResponse
   */
  async hotelGoodsQuery(request: HotelGoodsQueryRequest): Promise<HotelGoodsQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelGoodsQueryHeaders({ });
    return await this.hotelGoodsQueryWithOptions(request, headers, runtime);
  }

  /**
   * 获取酒店清单
   * 
   * @param request - HotelIndexInfoRequest
   * @param headers - HotelIndexInfoHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelIndexInfoResponse
   */
  async hotelIndexInfoWithOptions(request: HotelIndexInfoRequest, headers: HotelIndexInfoHeaders, runtime: $Util.RuntimeOptions): Promise<HotelIndexInfoResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.cityCode)) {
      query["city_code"] = request.cityCode;
    }

    if (!Util.isUnset(request.hotelStatus)) {
      query["hotel_status"] = request.hotelStatus;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.pageToken)) {
      query["page_token"] = request.pageToken;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelIndexInfo",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/index-infos`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelIndexInfoResponse>(await this.callApi(params, req, runtime), new HotelIndexInfoResponse({}));
  }

  /**
   * 获取酒店清单
   * 
   * @param request - HotelIndexInfoRequest
   * @returns HotelIndexInfoResponse
   */
  async hotelIndexInfo(request: HotelIndexInfoRequest): Promise<HotelIndexInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelIndexInfoHeaders({ });
    return await this.hotelIndexInfoWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单取消
   * 
   * @param request - HotelOrderCancelRequest
   * @param headers - HotelOrderCancelHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderCancelResponse
   */
  async hotelOrderCancelWithOptions(request: HotelOrderCancelRequest, headers: HotelOrderCancelHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderCancelResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripOrderId)) {
      query["btrip_order_id"] = request.btripOrderId;
    }

    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderCancel",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/orders/action/cancel`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderCancelResponse>(await this.callApi(params, req, runtime), new HotelOrderCancelResponse({}));
  }

  /**
   * 酒店订单取消
   * 
   * @param request - HotelOrderCancelRequest
   * @returns HotelOrderCancelResponse
   */
  async hotelOrderCancel(request: HotelOrderCancelRequest): Promise<HotelOrderCancelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderCancelHeaders({ });
    return await this.hotelOrderCancelWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单修改申请
   * 
   * @param tmpReq - HotelOrderChangeApplyRequest
   * @param headers - HotelOrderChangeApplyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderChangeApplyResponse
   */
  async hotelOrderChangeApplyWithOptions(tmpReq: HotelOrderChangeApplyRequest, headers: HotelOrderChangeApplyHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderChangeApplyResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelOrderChangeApplyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.roomInfoList)) {
      request.roomInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomInfoList, "room_info_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.reason)) {
      body["reason"] = request.reason;
    }

    if (!Util.isUnset(request.roomInfoListShrink)) {
      body["room_info_list"] = request.roomInfoListShrink;
    }

    if (!Util.isUnset(request.saleOrderId)) {
      body["sale_order_id"] = request.saleOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderChangeApply",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/orders/action/change/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderChangeApplyResponse>(await this.callApi(params, req, runtime), new HotelOrderChangeApplyResponse({}));
  }

  /**
   * 酒店订单修改申请
   * 
   * @param request - HotelOrderChangeApplyRequest
   * @returns HotelOrderChangeApplyResponse
   */
  async hotelOrderChangeApply(request: HotelOrderChangeApplyRequest): Promise<HotelOrderChangeApplyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderChangeApplyHeaders({ });
    return await this.hotelOrderChangeApplyWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单修改详情
   * 
   * @param request - HotelOrderChangeDetailRequest
   * @param headers - HotelOrderChangeDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderChangeDetailResponse
   */
  async hotelOrderChangeDetailWithOptions(request: HotelOrderChangeDetailRequest, headers: HotelOrderChangeDetailHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderChangeDetailResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.changeOrderId)) {
      body["change_order_id"] = request.changeOrderId;
    }

    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.saleOrderId)) {
      body["sale_order_id"] = request.saleOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderChangeDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/orders/action/change/detail`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderChangeDetailResponse>(await this.callApi(params, req, runtime), new HotelOrderChangeDetailResponse({}));
  }

  /**
   * 酒店订单修改详情
   * 
   * @param request - HotelOrderChangeDetailRequest
   * @returns HotelOrderChangeDetailResponse
   */
  async hotelOrderChangeDetail(request: HotelOrderChangeDetailRequest): Promise<HotelOrderChangeDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderChangeDetailHeaders({ });
    return await this.hotelOrderChangeDetailWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单创建
   * 
   * @param tmpReq - HotelOrderCreateRequest
   * @param headers - HotelOrderCreateHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderCreateResponse
   */
  async hotelOrderCreateWithOptions(tmpReq: HotelOrderCreateRequest, headers: HotelOrderCreateHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderCreateResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelOrderCreateShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.invoiceInfo)) {
      request.invoiceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceInfo, "invoice_info", "json");
    }

    if (!Util.isUnset(tmpReq.occupantInfoList)) {
      request.occupantInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.occupantInfoList, "occupant_info_list", "json");
    }

    if (!Util.isUnset(tmpReq.promotionInfo)) {
      request.promotionInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.promotionInfo, "promotion_info", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.checkIn)) {
      body["check_in"] = request.checkIn;
    }

    if (!Util.isUnset(request.checkOut)) {
      body["check_out"] = request.checkOut;
    }

    if (!Util.isUnset(request.contractEmail)) {
      body["contract_email"] = request.contractEmail;
    }

    if (!Util.isUnset(request.contractName)) {
      body["contract_name"] = request.contractName;
    }

    if (!Util.isUnset(request.contractPhone)) {
      body["contract_phone"] = request.contractPhone;
    }

    if (!Util.isUnset(request.corpPayPrice)) {
      body["corp_pay_price"] = request.corpPayPrice;
    }

    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.extra)) {
      body["extra"] = request.extra;
    }

    if (!Util.isUnset(request.invoiceInfoShrink)) {
      body["invoice_info"] = request.invoiceInfoShrink;
    }

    if (!Util.isUnset(request.itemId)) {
      body["item_id"] = request.itemId;
    }

    if (!Util.isUnset(request.itineraryNo)) {
      body["itinerary_no"] = request.itineraryNo;
    }

    if (!Util.isUnset(request.occupantInfoListShrink)) {
      body["occupant_info_list"] = request.occupantInfoListShrink;
    }

    if (!Util.isUnset(request.personPayPrice)) {
      body["person_pay_price"] = request.personPayPrice;
    }

    if (!Util.isUnset(request.promotionInfoShrink)) {
      body["promotion_info"] = request.promotionInfoShrink;
    }

    if (!Util.isUnset(request.ratePlanId)) {
      body["rate_plan_id"] = request.ratePlanId;
    }

    if (!Util.isUnset(request.roomId)) {
      body["room_id"] = request.roomId;
    }

    if (!Util.isUnset(request.roomNum)) {
      body["room_num"] = request.roomNum;
    }

    if (!Util.isUnset(request.sellerId)) {
      body["seller_id"] = request.sellerId;
    }

    if (!Util.isUnset(request.shid)) {
      body["shid"] = request.shid;
    }

    if (!Util.isUnset(request.totalOrderPrice)) {
      body["total_order_price"] = request.totalOrderPrice;
    }

    if (!Util.isUnset(request.validateResKey)) {
      body["validate_res_key"] = request.validateResKey;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderCreate",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/orders/action/create`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderCreateResponse>(await this.callApi(params, req, runtime), new HotelOrderCreateResponse({}));
  }

  /**
   * 酒店订单创建
   * 
   * @param request - HotelOrderCreateRequest
   * @returns HotelOrderCreateResponse
   */
  async hotelOrderCreate(request: HotelOrderCreateRequest): Promise<HotelOrderCreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderCreateHeaders({ });
    return await this.hotelOrderCreateWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单明细信息
   * 
   * @param request - HotelOrderDetailInfoRequest
   * @param headers - HotelOrderDetailInfoHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderDetailInfoResponse
   */
  async hotelOrderDetailInfoWithOptions(request: HotelOrderDetailInfoRequest, headers: HotelOrderDetailInfoHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderDetailInfoResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripOrderId)) {
      query["btrip_order_id"] = request.btripOrderId;
    }

    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderDetailInfo",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/orders/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderDetailInfoResponse>(await this.callApi(params, req, runtime), new HotelOrderDetailInfoResponse({}));
  }

  /**
   * 酒店订单明细信息
   * 
   * @param request - HotelOrderDetailInfoRequest
   * @returns HotelOrderDetailInfoResponse
   */
  async hotelOrderDetailInfo(request: HotelOrderDetailInfoRequest): Promise<HotelOrderDetailInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderDetailInfoHeaders({ });
    return await this.hotelOrderDetailInfoWithOptions(request, headers, runtime);
  }

  /**
   * 自营酒店订单查询
   * 
   * @param headers - HotelOrderInfoQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderInfoQueryResponse
   */
  async hotelOrderInfoQueryWithOptions(orderId: string, headers: HotelOrderInfoQueryHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderInfoQueryResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderInfoQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/order/v1/hotelOrders/${OpenApiUtil.getEncodeParam(orderId)}`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderInfoQueryResponse>(await this.callApi(params, req, runtime), new HotelOrderInfoQueryResponse({}));
  }

  /**
   * 自营酒店订单查询
   * @returns HotelOrderInfoQueryResponse
   */
  async hotelOrderInfoQuery(orderId: string): Promise<HotelOrderInfoQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderInfoQueryHeaders({ });
    return await this.hotelOrderInfoQueryWithOptions(orderId, headers, runtime);
  }

  /**
   * 查询酒店订单列表
   * 
   * @param request - HotelOrderListQueryRequest
   * @param headers - HotelOrderListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderListQueryResponse
   */
  async hotelOrderListQueryWithOptions(request: HotelOrderListQueryRequest, headers: HotelOrderListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderListQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.allApply)) {
      query["all_apply"] = request.allApply;
    }

    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.category)) {
      query["category"] = request.category;
    }

    if (!Util.isUnset(request.departId)) {
      query["depart_id"] = request.departId;
    }

    if (!Util.isUnset(request.endTime)) {
      query["end_time"] = request.endTime;
    }

    if (!Util.isUnset(request.page)) {
      query["page"] = request.page;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["start_time"] = request.startTime;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      query["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.updateEndTime)) {
      query["update_end_time"] = request.updateEndTime;
    }

    if (!Util.isUnset(request.updateStartTime)) {
      query["update_start_time"] = request.updateStartTime;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/hotel/v1/order-list`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderListQueryResponse>(await this.callApi(params, req, runtime), new HotelOrderListQueryResponse({}));
  }

  /**
   * 查询酒店订单列表
   * 
   * @param request - HotelOrderListQueryRequest
   * @returns HotelOrderListQueryResponse
   */
  async hotelOrderListQuery(request: HotelOrderListQueryRequest): Promise<HotelOrderListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderListQueryHeaders({ });
    return await this.hotelOrderListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单支付
   * 
   * @param request - HotelOrderPayRequest
   * @param headers - HotelOrderPayHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderPayResponse
   */
  async hotelOrderPayWithOptions(request: HotelOrderPayRequest, headers: HotelOrderPayHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderPayResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripOrderId)) {
      body["btrip_order_id"] = request.btripOrderId;
    }

    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.companyPayFee)) {
      body["company_pay_fee"] = request.companyPayFee;
    }

    if (!Util.isUnset(request.personPayFee)) {
      body["person_pay_fee"] = request.personPayFee;
    }

    if (!Util.isUnset(request.thirdPayAccount)) {
      body["third_pay_account"] = request.thirdPayAccount;
    }

    if (!Util.isUnset(request.thirdTradeNo)) {
      body["third_trade_no"] = request.thirdTradeNo;
    }

    if (!Util.isUnset(request.totalPrice)) {
      body["total_price"] = request.totalPrice;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderPay",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/orders/action/pay`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderPayResponse>(await this.callApi(params, req, runtime), new HotelOrderPayResponse({}));
  }

  /**
   * 酒店订单支付
   * 
   * @param request - HotelOrderPayRequest
   * @returns HotelOrderPayResponse
   */
  async hotelOrderPay(request: HotelOrderPayRequest): Promise<HotelOrderPayResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderPayHeaders({ });
    return await this.hotelOrderPayWithOptions(request, headers, runtime);
  }

  /**
   * 酒店下单前校验
   * 
   * @param tmpReq - HotelOrderPreValidateRequest
   * @param headers - HotelOrderPreValidateHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderPreValidateResponse
   */
  async hotelOrderPreValidateWithOptions(tmpReq: HotelOrderPreValidateRequest, headers: HotelOrderPreValidateHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderPreValidateResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelOrderPreValidateShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.dailyList)) {
      request.dailyListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dailyList, "daily_list", "json");
    }

    if (!Util.isUnset(tmpReq.occupantInfoList)) {
      request.occupantInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.occupantInfoList, "occupant_info_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.checkIn)) {
      query["check_in"] = request.checkIn;
    }

    if (!Util.isUnset(request.checkOut)) {
      query["check_out"] = request.checkOut;
    }

    if (!Util.isUnset(request.dailyListShrink)) {
      query["daily_list"] = request.dailyListShrink;
    }

    if (!Util.isUnset(request.itemId)) {
      query["item_id"] = request.itemId;
    }

    if (!Util.isUnset(request.numberOfAdultsPerRoom)) {
      query["number_of_adults_per_room"] = request.numberOfAdultsPerRoom;
    }

    if (!Util.isUnset(request.occupantInfoListShrink)) {
      query["occupant_info_list"] = request.occupantInfoListShrink;
    }

    if (!Util.isUnset(request.ratePlanId)) {
      query["rate_plan_id"] = request.ratePlanId;
    }

    if (!Util.isUnset(request.roomId)) {
      query["room_id"] = request.roomId;
    }

    if (!Util.isUnset(request.roomNum)) {
      query["room_num"] = request.roomNum;
    }

    if (!Util.isUnset(request.searchRoomPrice)) {
      query["search_room_price"] = request.searchRoomPrice;
    }

    if (!Util.isUnset(request.sellerId)) {
      query["seller_id"] = request.sellerId;
    }

    if (!Util.isUnset(request.shid)) {
      query["shid"] = request.shid;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderPreValidate",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/orders/action/pre-validate`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderPreValidateResponse>(await this.callApi(params, req, runtime), new HotelOrderPreValidateResponse({}));
  }

  /**
   * 酒店下单前校验
   * 
   * @param request - HotelOrderPreValidateRequest
   * @returns HotelOrderPreValidateResponse
   */
  async hotelOrderPreValidate(request: HotelOrderPreValidateRequest): Promise<HotelOrderPreValidateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderPreValidateHeaders({ });
    return await this.hotelOrderPreValidateWithOptions(request, headers, runtime);
  }

  /**
   * 酒店订单查询
   * 
   * @param request - HotelOrderQueryRequest
   * @param headers - HotelOrderQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelOrderQueryResponse
   */
  async hotelOrderQueryWithOptions(request: HotelOrderQueryRequest, headers: HotelOrderQueryHeaders, runtime: $Util.RuntimeOptions): Promise<HotelOrderQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelOrderQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/hotel/v1/order`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelOrderQueryResponse>(await this.callApi(params, req, runtime), new HotelOrderQueryResponse({}));
  }

  /**
   * 酒店订单查询
   * 
   * @param request - HotelOrderQueryRequest
   * @returns HotelOrderQueryResponse
   */
  async hotelOrderQuery(request: HotelOrderQueryRequest): Promise<HotelOrderQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelOrderQueryHeaders({ });
    return await this.hotelOrderQueryWithOptions(request, headers, runtime);
  }

  /**
   * 酒店拉动态拉取价格接口(落地)
   * 
   * @param tmpReq - HotelPricePullRequest
   * @param headers - HotelPricePullHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelPricePullResponse
   */
  async hotelPricePullWithOptions(tmpReq: HotelPricePullRequest, headers: HotelPricePullHeaders, runtime: $Util.RuntimeOptions): Promise<HotelPricePullResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelPricePullShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.hotelIds)) {
      request.hotelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelIds, "hotel_ids", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.checkIn)) {
      query["check_in"] = request.checkIn;
    }

    if (!Util.isUnset(request.checkOut)) {
      query["check_out"] = request.checkOut;
    }

    if (!Util.isUnset(request.cityCode)) {
      query["city_code"] = request.cityCode;
    }

    if (!Util.isUnset(request.hotelIdsShrink)) {
      query["hotel_ids"] = request.hotelIdsShrink;
    }

    if (!Util.isUnset(request.paymentType)) {
      query["payment_type"] = request.paymentType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelPricePull",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/prices/action/pull`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelPricePullResponse>(await this.callApi(params, req, runtime), new HotelPricePullResponse({}));
  }

  /**
   * 酒店拉动态拉取价格接口(落地)
   * 
   * @param request - HotelPricePullRequest
   * @returns HotelPricePullResponse
   */
  async hotelPricePull(request: HotelPricePullRequest): Promise<HotelPricePullResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelPricePullHeaders({ });
    return await this.hotelPricePullWithOptions(request, headers, runtime);
  }

  /**
   * 获取酒店静态房型详情
   * 
   * @param tmpReq - HotelRoomInfoRequest
   * @param headers - HotelRoomInfoHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelRoomInfoResponse
   */
  async hotelRoomInfoWithOptions(tmpReq: HotelRoomInfoRequest, headers: HotelRoomInfoHeaders, runtime: $Util.RuntimeOptions): Promise<HotelRoomInfoResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelRoomInfoShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.roomIds)) {
      request.roomIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomIds, "room_ids", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.roomIdsShrink)) {
      query["room_ids"] = request.roomIdsShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelRoomInfo",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/room-infos`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelRoomInfoResponse>(await this.callApi(params, req, runtime), new HotelRoomInfoResponse({}));
  }

  /**
   * 获取酒店静态房型详情
   * 
   * @param request - HotelRoomInfoRequest
   * @returns HotelRoomInfoResponse
   */
  async hotelRoomInfo(request: HotelRoomInfoRequest): Promise<HotelRoomInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelRoomInfoHeaders({ });
    return await this.hotelRoomInfoWithOptions(request, headers, runtime);
  }

  /**
   * 酒店列表搜索接口(直连)
   * 
   * @param tmpReq - HotelSearchRequest
   * @param headers - HotelSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelSearchResponse
   */
  async hotelSearchWithOptions(tmpReq: HotelSearchRequest, headers: HotelSearchHeaders, runtime: $Util.RuntimeOptions): Promise<HotelSearchResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelSearchShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.brandCode)) {
      request.brandCodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.brandCode, "brand_code", "json");
    }

    if (!Util.isUnset(tmpReq.shids)) {
      request.shidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shids, "shids", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.adultNum)) {
      query["adult_num"] = request.adultNum;
    }

    if (!Util.isUnset(request.brandCodeShrink)) {
      query["brand_code"] = request.brandCodeShrink;
    }

    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.checkInDate)) {
      query["check_in_date"] = request.checkInDate;
    }

    if (!Util.isUnset(request.checkOutDate)) {
      query["check_out_date"] = request.checkOutDate;
    }

    if (!Util.isUnset(request.cityCode)) {
      query["city_code"] = request.cityCode;
    }

    if (!Util.isUnset(request.dir)) {
      query["dir"] = request.dir;
    }

    if (!Util.isUnset(request.distance)) {
      query["distance"] = request.distance;
    }

    if (!Util.isUnset(request.districtCode)) {
      query["district_code"] = request.districtCode;
    }

    if (!Util.isUnset(request.hotelStar)) {
      query["hotel_star"] = request.hotelStar;
    }

    if (!Util.isUnset(request.isProtocol)) {
      query["is_protocol"] = request.isProtocol;
    }

    if (!Util.isUnset(request.keyWords)) {
      query["key_words"] = request.keyWords;
    }

    if (!Util.isUnset(request.location)) {
      query["location"] = request.location;
    }

    if (!Util.isUnset(request.maxPrice)) {
      query["max_price"] = request.maxPrice;
    }

    if (!Util.isUnset(request.minPrice)) {
      query["min_price"] = request.minPrice;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.payOverType)) {
      query["pay_over_type"] = request.payOverType;
    }

    if (!Util.isUnset(request.paymentType)) {
      query["payment_type"] = request.paymentType;
    }

    if (!Util.isUnset(request.shidsShrink)) {
      query["shids"] = request.shidsShrink;
    }

    if (!Util.isUnset(request.sortCode)) {
      query["sort_code"] = request.sortCode;
    }

    if (!Util.isUnset(request.superMan)) {
      query["super_man"] = request.superMan;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/hotels/action/search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelSearchResponse>(await this.callApi(params, req, runtime), new HotelSearchResponse({}));
  }

  /**
   * 酒店列表搜索接口(直连)
   * 
   * @param request - HotelSearchRequest
   * @returns HotelSearchResponse
   */
  async hotelSearch(request: HotelSearchRequest): Promise<HotelSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelSearchHeaders({ });
    return await this.hotelSearchWithOptions(request, headers, runtime);
  }

  /**
   * 查询酒店静态详情
   * 
   * @param tmpReq - HotelStaticInfoRequest
   * @param headers - HotelStaticInfoHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelStaticInfoResponse
   */
  async hotelStaticInfoWithOptions(tmpReq: HotelStaticInfoRequest, headers: HotelStaticInfoHeaders, runtime: $Util.RuntimeOptions): Promise<HotelStaticInfoResponse> {
    Util.validateModel(tmpReq);
    let request = new HotelStaticInfoShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.hotelIds)) {
      request.hotelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelIds, "hotel_ids", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.hotelIdsShrink)) {
      query["hotel_ids"] = request.hotelIdsShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelStaticInfo",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v1/static-infos`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelStaticInfoResponse>(await this.callApi(params, req, runtime), new HotelStaticInfoResponse({}));
  }

  /**
   * 查询酒店静态详情
   * 
   * @param request - HotelStaticInfoRequest
   * @returns HotelStaticInfoResponse
   */
  async hotelStaticInfo(request: HotelStaticInfoRequest): Promise<HotelStaticInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelStaticInfoHeaders({ });
    return await this.hotelStaticInfoWithOptions(request, headers, runtime);
  }

  /**
   * 酒店关键词搜索
   * 
   * @param request - HotelSuggestV2Request
   * @param headers - HotelSuggestV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotelSuggestV2Response
   */
  async hotelSuggestV2WithOptions(request: HotelSuggestV2Request, headers: HotelSuggestV2Headers, runtime: $Util.RuntimeOptions): Promise<HotelSuggestV2Response> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.checkIn)) {
      query["check_in"] = request.checkIn;
    }

    if (!Util.isUnset(request.checkOut)) {
      query["check_out"] = request.checkOut;
    }

    if (!Util.isUnset(request.cityCode)) {
      query["city_code"] = request.cityCode;
    }

    if (!Util.isUnset(request.keyword)) {
      query["keyword"] = request.keyword;
    }

    if (!Util.isUnset(request.searchType)) {
      query["search_type"] = request.searchType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "HotelSuggestV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-hotel/v2/suggest-infos`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<HotelSuggestV2Response>(await this.callApi(params, req, runtime), new HotelSuggestV2Response({}));
  }

  /**
   * 酒店关键词搜索
   * 
   * @param request - HotelSuggestV2Request
   * @returns HotelSuggestV2Response
   */
  async hotelSuggestV2(request: HotelSuggestV2Request): Promise<HotelSuggestV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new HotelSuggestV2Headers({ });
    return await this.hotelSuggestV2WithOptions(request, headers, runtime);
  }

  /**
   * 国际机票订单详情
   * 
   * @param request - IFlightOrderDetailQueryRequest
   * @param headers - IFlightOrderDetailQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IFlightOrderDetailQueryResponse
   */
  async iFlightOrderDetailQueryWithOptions(request: IFlightOrderDetailQueryRequest, headers: IFlightOrderDetailQueryHeaders, runtime: $Util.RuntimeOptions): Promise<IFlightOrderDetailQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IFlightOrderDetailQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/open/v1/intlFlight-order-detail-query`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IFlightOrderDetailQueryResponse>(await this.callApi(params, req, runtime), new IFlightOrderDetailQueryResponse({}));
  }

  /**
   * 国际机票订单详情
   * 
   * @param request - IFlightOrderDetailQueryRequest
   * @returns IFlightOrderDetailQueryResponse
   */
  async iFlightOrderDetailQuery(request: IFlightOrderDetailQueryRequest): Promise<IFlightOrderDetailQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IFlightOrderDetailQueryHeaders({ });
    return await this.iFlightOrderDetailQueryWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票订单列表
   * 
   * @param tmpReq - IFlightOrderListQueryRequest
   * @param headers - IFlightOrderListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IFlightOrderListQueryResponse
   */
  async iFlightOrderListQueryWithOptions(tmpReq: IFlightOrderListQueryRequest, headers: IFlightOrderListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<IFlightOrderListQueryResponse> {
    Util.validateModel(tmpReq);
    let request = new IFlightOrderListQueryShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.applyIdList)) {
      request.applyIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applyIdList, "apply_id_list", "json");
    }

    if (!Util.isUnset(tmpReq.bookTypeList)) {
      request.bookTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookTypeList, "book_type_list", "json");
    }

    if (!Util.isUnset(tmpReq.bookerId)) {
      request.bookerIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookerId, "booker_id", "json");
    }

    if (!Util.isUnset(tmpReq.thirdPartApplyIdList)) {
      request.thirdPartApplyIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdPartApplyIdList, "third_part_apply_id_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyIdListShrink)) {
      query["apply_id_list"] = request.applyIdListShrink;
    }

    if (!Util.isUnset(request.bookTypeListShrink)) {
      query["book_type_list"] = request.bookTypeListShrink;
    }

    if (!Util.isUnset(request.bookerIdShrink)) {
      query["booker_id"] = request.bookerIdShrink;
    }

    if (!Util.isUnset(request.endDate)) {
      query["end_date"] = request.endDate;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.scrollId)) {
      query["scroll_id"] = request.scrollId;
    }

    if (!Util.isUnset(request.startDate)) {
      query["start_date"] = request.startDate;
    }

    if (!Util.isUnset(request.thirdPartApplyIdListShrink)) {
      query["third_part_apply_id_list"] = request.thirdPartApplyIdListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IFlightOrderListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/open/v1/intlFlight-order-list-query`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IFlightOrderListQueryResponse>(await this.callApi(params, req, runtime), new IFlightOrderListQueryResponse({}));
  }

  /**
   * 国际机票订单列表
   * 
   * @param request - IFlightOrderListQueryRequest
   * @returns IFlightOrderListQueryResponse
   */
  async iFlightOrderListQuery(request: IFlightOrderListQueryRequest): Promise<IFlightOrderListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IFlightOrderListQueryHeaders({ });
    return await this.iFlightOrderListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询国际机票记账数据
   * 
   * @param request - IeFlightBillSettlementQueryRequest
   * @param headers - IeFlightBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IeFlightBillSettlementQueryResponse
   */
  async ieFlightBillSettlementQueryWithOptions(request: IeFlightBillSettlementQueryRequest, headers: IeFlightBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<IeFlightBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IeFlightBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/ie-flight/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IeFlightBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new IeFlightBillSettlementQueryResponse({}));
  }

  /**
   * 查询国际机票记账数据
   * 
   * @param request - IeFlightBillSettlementQueryRequest
   * @returns IeFlightBillSettlementQueryResponse
   */
  async ieFlightBillSettlementQuery(request: IeFlightBillSettlementQueryRequest): Promise<IeFlightBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IeFlightBillSettlementQueryHeaders({ });
    return await this.ieFlightBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询国际/中国港澳台酒店记账数据
   * 
   * @param request - IeHotelBillSettlementQueryRequest
   * @param headers - IeHotelBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IeHotelBillSettlementQueryResponse
   */
  async ieHotelBillSettlementQueryWithOptions(request: IeHotelBillSettlementQueryRequest, headers: IeHotelBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<IeHotelBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.category)) {
      query["category"] = request.category;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IeHotelBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/ie-hotel/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IeHotelBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new IeHotelBillSettlementQueryResponse({}));
  }

  /**
   * 查询国际/中国港澳台酒店记账数据
   * 
   * @param request - IeHotelBillSettlementQueryRequest
   * @returns IeHotelBillSettlementQueryResponse
   */
  async ieHotelBillSettlementQuery(request: IeHotelBillSettlementQueryRequest): Promise<IeHotelBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IeHotelBillSettlementQueryHeaders({ });
    return await this.ieHotelBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询保险电子发票
   * 
   * @param request - InsInvoiceScanQueryRequest
   * @param headers - InsInvoiceScanQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsInvoiceScanQueryResponse
   */
  async insInvoiceScanQueryWithOptions(request: InsInvoiceScanQueryRequest, headers: InsInvoiceScanQueryHeaders, runtime: $Util.RuntimeOptions): Promise<InsInvoiceScanQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.billDate)) {
      query["bill_date"] = request.billDate;
    }

    if (!Util.isUnset(request.billId)) {
      query["bill_id"] = request.billId;
    }

    if (!Util.isUnset(request.invoiceSubTaskId)) {
      query["invoice_sub_task_id"] = request.invoiceSubTaskId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "InsInvoiceScanQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/scan/v1/ins-invoice`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InsInvoiceScanQueryResponse>(await this.callApi(params, req, runtime), new InsInvoiceScanQueryResponse({}));
  }

  /**
   * 查询保险电子发票
   * 
   * @param request - InsInvoiceScanQueryRequest
   * @returns InsInvoiceScanQueryResponse
   */
  async insInvoiceScanQuery(request: InsInvoiceScanQueryRequest): Promise<InsInvoiceScanQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsInvoiceScanQueryHeaders({ });
    return await this.insInvoiceScanQueryWithOptions(request, headers, runtime);
  }

  /**
   * 保险订单申请
   * 
   * @param request - InsureOrderApplyRequest
   * @param headers - InsureOrderApplyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureOrderApplyResponse
   */
  async insureOrderApplyWithOptions(request: InsureOrderApplyRequest, headers: InsureOrderApplyHeaders, runtime: $Util.RuntimeOptions): Promise<InsureOrderApplyResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      body["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.insOrderId)) {
      body["ins_order_id"] = request.insOrderId;
    }

    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outSubOrderId)) {
      body["out_sub_order_id"] = request.outSubOrderId;
    }

    if (!Util.isUnset(request.supplierCode)) {
      body["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InsureOrderApply",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/action/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InsureOrderApplyResponse>(await this.callApi(params, req, runtime), new InsureOrderApplyResponse({}));
  }

  /**
   * 保险订单申请
   * 
   * @param request - InsureOrderApplyRequest
   * @returns InsureOrderApplyResponse
   */
  async insureOrderApply(request: InsureOrderApplyRequest): Promise<InsureOrderApplyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureOrderApplyHeaders({ });
    return await this.insureOrderApplyWithOptions(request, headers, runtime);
  }

  /**
   * 保险订单取消
   * 
   * @param request - InsureOrderCancelRequest
   * @param headers - InsureOrderCancelHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureOrderCancelResponse
   */
  async insureOrderCancelWithOptions(insOrderId: string, request: InsureOrderCancelRequest, headers: InsureOrderCancelHeaders, runtime: $Util.RuntimeOptions): Promise<InsureOrderCancelResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      query["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.supplierCode)) {
      query["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "InsureOrderCancel",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}/action/cancel`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InsureOrderCancelResponse>(await this.callApi(params, req, runtime), new InsureOrderCancelResponse({}));
  }

  /**
   * 保险订单取消
   * 
   * @param request - InsureOrderCancelRequest
   * @returns InsureOrderCancelResponse
   */
  async insureOrderCancel(insOrderId: string, request: InsureOrderCancelRequest): Promise<InsureOrderCancelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureOrderCancelHeaders({ });
    return await this.insureOrderCancelWithOptions(insOrderId, request, headers, runtime);
  }

  /**
   * 保险订单创建
   * 
   * @param tmpReq - InsureOrderCreateRequest
   * @param headers - InsureOrderCreateHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureOrderCreateResponse
   */
  async insureOrderCreateWithOptions(tmpReq: InsureOrderCreateRequest, headers: InsureOrderCreateHeaders, runtime: $Util.RuntimeOptions): Promise<InsureOrderCreateResponse> {
    Util.validateModel(tmpReq);
    let request = new InsureOrderCreateShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.applicant)) {
      request.applicantShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicant, "applicant", "json");
    }

    if (!Util.isUnset(tmpReq.insPersonAndSegmentList)) {
      request.insPersonAndSegmentListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.insPersonAndSegmentList, "ins_person_and_segment_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applicantShrink)) {
      body["applicant"] = request.applicantShrink;
    }

    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      body["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.insPersonAndSegmentListShrink)) {
      body["ins_person_and_segment_list"] = request.insPersonAndSegmentListShrink;
    }

    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.outInsOrderId)) {
      body["out_ins_order_id"] = request.outInsOrderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outSubOrderId)) {
      body["out_sub_order_id"] = request.outSubOrderId;
    }

    if (!Util.isUnset(request.supplierCode)) {
      body["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InsureOrderCreate",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/action/create`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InsureOrderCreateResponse>(await this.callApi(params, req, runtime), new InsureOrderCreateResponse({}));
  }

  /**
   * 保险订单创建
   * 
   * @param request - InsureOrderCreateRequest
   * @returns InsureOrderCreateResponse
   */
  async insureOrderCreate(request: InsureOrderCreateRequest): Promise<InsureOrderCreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureOrderCreateHeaders({ });
    return await this.insureOrderCreateWithOptions(request, headers, runtime);
  }

  /**
   * 保险订单查询
   * 
   * @param request - InsureOrderDetailRequest
   * @param headers - InsureOrderDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureOrderDetailResponse
   */
  async insureOrderDetailWithOptions(request: InsureOrderDetailRequest, headers: InsureOrderDetailHeaders, runtime: $Util.RuntimeOptions): Promise<InsureOrderDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      query["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.insOrderId)) {
      query["ins_order_id"] = request.insOrderId;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.supplierCode)) {
      query["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "InsureOrderDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InsureOrderDetailResponse>(await this.callApi(params, req, runtime), new InsureOrderDetailResponse({}));
  }

  /**
   * 保险订单查询
   * 
   * @param request - InsureOrderDetailRequest
   * @returns InsureOrderDetailResponse
   */
  async insureOrderDetail(request: InsureOrderDetailRequest): Promise<InsureOrderDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureOrderDetailHeaders({ });
    return await this.insureOrderDetailWithOptions(request, headers, runtime);
  }

  /**
   * 保险订单支付
   * 
   * @param request - InsureOrderPayRequest
   * @param headers - InsureOrderPayHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureOrderPayResponse
   */
  async insureOrderPayWithOptions(insOrderId: string, request: InsureOrderPayRequest, headers: InsureOrderPayHeaders, runtime: $Util.RuntimeOptions): Promise<InsureOrderPayResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      body["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outSubOrderId)) {
      body["out_sub_order_id"] = request.outSubOrderId;
    }

    if (!Util.isUnset(request.paymentAmount)) {
      body["payment_amount"] = request.paymentAmount;
    }

    if (!Util.isUnset(request.supplierCode)) {
      body["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InsureOrderPay",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}/action/pay`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InsureOrderPayResponse>(await this.callApi(params, req, runtime), new InsureOrderPayResponse({}));
  }

  /**
   * 保险订单支付
   * 
   * @param request - InsureOrderPayRequest
   * @returns InsureOrderPayResponse
   */
  async insureOrderPay(insOrderId: string, request: InsureOrderPayRequest): Promise<InsureOrderPayResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureOrderPayHeaders({ });
    return await this.insureOrderPayWithOptions(insOrderId, request, headers, runtime);
  }

  /**
   * 保险订单退保
   * 
   * @param tmpReq - InsureOrderRefundRequest
   * @param headers - InsureOrderRefundHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureOrderRefundResponse
   */
  async insureOrderRefundWithOptions(insOrderId: string, tmpReq: InsureOrderRefundRequest, headers: InsureOrderRefundHeaders, runtime: $Util.RuntimeOptions): Promise<InsureOrderRefundResponse> {
    Util.validateModel(tmpReq);
    let request = new InsureOrderRefundShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.policyNoList)) {
      request.policyNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policyNoList, "policy_no_list", "json");
    }

    if (!Util.isUnset(tmpReq.subInsOrderIds)) {
      request.subInsOrderIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subInsOrderIds, "sub_ins_order_ids", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      body["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.isvName)) {
      body["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.outApplyId)) {
      body["out_apply_id"] = request.outApplyId;
    }

    if (!Util.isUnset(request.policyNoListShrink)) {
      body["policy_no_list"] = request.policyNoListShrink;
    }

    if (!Util.isUnset(request.subInsOrderIdsShrink)) {
      body["sub_ins_order_ids"] = request.subInsOrderIdsShrink;
    }

    if (!Util.isUnset(request.supplierCode)) {
      body["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InsureOrderRefund",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}/action/refund`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InsureOrderRefundResponse>(await this.callApi(params, req, runtime), new InsureOrderRefundResponse({}));
  }

  /**
   * 保险订单退保
   * 
   * @param request - InsureOrderRefundRequest
   * @returns InsureOrderRefundResponse
   */
  async insureOrderRefund(insOrderId: string, request: InsureOrderRefundRequest): Promise<InsureOrderRefundResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureOrderRefundHeaders({ });
    return await this.insureOrderRefundWithOptions(insOrderId, request, headers, runtime);
  }

  /**
   * 查询保单详情链接
   * 
   * @param headers - InsureOrderUrlDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureOrderUrlDetailResponse
   */
  async insureOrderUrlDetailWithOptions(insOrderId: string, headers: InsureOrderUrlDetailHeaders, runtime: $Util.RuntimeOptions): Promise<InsureOrderUrlDetailResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "InsureOrderUrlDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InsureOrderUrlDetailResponse>(await this.callApi(params, req, runtime), new InsureOrderUrlDetailResponse({}));
  }

  /**
   * 查询保单详情链接
   * @returns InsureOrderUrlDetailResponse
   */
  async insureOrderUrlDetail(insOrderId: string): Promise<InsureOrderUrlDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureOrderUrlDetailHeaders({ });
    return await this.insureOrderUrlDetailWithOptions(insOrderId, headers, runtime);
  }

  /**
   * 退保详情查询
   * 
   * @param request - InsureRefundDetailRequest
   * @param headers - InsureRefundDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InsureRefundDetailResponse
   */
  async insureRefundDetailWithOptions(request: InsureRefundDetailRequest, headers: InsureRefundDetailHeaders, runtime: $Util.RuntimeOptions): Promise<InsureRefundDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      query["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.insOrderId)) {
      query["ins_order_id"] = request.insOrderId;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.outApplyId)) {
      query["out_apply_id"] = request.outApplyId;
    }

    if (!Util.isUnset(request.supplierCode)) {
      query["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "InsureRefundDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/insurances/action/refund-detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InsureRefundDetailResponse>(await this.callApi(params, req, runtime), new InsureRefundDetailResponse({}));
  }

  /**
   * 退保详情查询
   * 
   * @param request - InsureRefundDetailRequest
   * @returns InsureRefundDetailResponse
   */
  async insureRefundDetail(request: InsureRefundDetailRequest): Promise<InsureRefundDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InsureRefundDetailHeaders({ });
    return await this.insureRefundDetailWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票创建订单
   * 
   * @param tmpReq - IntlFlightCreateOrderRequest
   * @param headers - IntlFlightCreateOrderHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightCreateOrderResponse
   */
  async intlFlightCreateOrderWithOptions(tmpReq: IntlFlightCreateOrderRequest, headers: IntlFlightCreateOrderHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightCreateOrderResponse> {
    Util.validateModel(tmpReq);
    let request = new IntlFlightCreateOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.contactInfo)) {
      request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, "contact_info", "json");
    }

    if (!Util.isUnset(tmpReq.costCenter)) {
      request.costCenterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.costCenter, "cost_center", "json");
    }

    if (!Util.isUnset(tmpReq.extraInfo)) {
      request.extraInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extraInfo, "extra_info", "json");
    }

    if (!Util.isUnset(tmpReq.passengerList)) {
      request.passengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerList, "passenger_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.asyncCreateOrderKey)) {
      query["async_create_order_key"] = request.asyncCreateOrderKey;
    }

    if (!Util.isUnset(request.asyncCreateOrderMode)) {
      query["async_create_order_mode"] = request.asyncCreateOrderMode;
    }

    if (!Util.isUnset(request.contactInfoShrink)) {
      query["contact_info"] = request.contactInfoShrink;
    }

    if (!Util.isUnset(request.costCenterShrink)) {
      query["cost_center"] = request.costCenterShrink;
    }

    if (!Util.isUnset(request.extraInfoShrink)) {
      query["extra_info"] = request.extraInfoShrink;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.language)) {
      query["language"] = request.language;
    }

    if (!Util.isUnset(request.otaItemId)) {
      query["ota_item_id"] = request.otaItemId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.passengerListShrink)) {
      query["passenger_list"] = request.passengerListShrink;
    }

    if (!Util.isUnset(request.renderKey)) {
      query["render_key"] = request.renderKey;
    }

    if (!Util.isUnset(request.totalPriceCent)) {
      query["total_price_cent"] = request.totalPriceCent;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      query["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightCreateOrder",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/order/action/create`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightCreateOrderResponse>(await this.callApi(params, req, runtime), new IntlFlightCreateOrderResponse({}));
  }

  /**
   * 国际机票创建订单
   * 
   * @param request - IntlFlightCreateOrderRequest
   * @returns IntlFlightCreateOrderResponse
   */
  async intlFlightCreateOrder(request: IntlFlightCreateOrderRequest): Promise<IntlFlightCreateOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightCreateOrderHeaders({ });
    return await this.intlFlightCreateOrderWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票验舱验价
   * 
   * @param tmpReq - IntlFlightInventoryPriceCheckRequest
   * @param headers - IntlFlightInventoryPriceCheckHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightInventoryPriceCheckResponse
   */
  async intlFlightInventoryPriceCheckWithOptions(tmpReq: IntlFlightInventoryPriceCheckRequest, headers: IntlFlightInventoryPriceCheckHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightInventoryPriceCheckResponse> {
    Util.validateModel(tmpReq);
    let request = new IntlFlightInventoryPriceCheckShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.passengerList)) {
      request.passengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerList, "passenger_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.language)) {
      query["language"] = request.language;
    }

    if (!Util.isUnset(request.orderPrice)) {
      query["order_price"] = request.orderPrice;
    }

    if (!Util.isUnset(request.otaItemId)) {
      query["ota_item_id"] = request.otaItemId;
    }

    if (!Util.isUnset(request.passengerListShrink)) {
      query["passenger_list"] = request.passengerListShrink;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      query["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightInventoryPriceCheck",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/flights/action/inventory-price-check`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightInventoryPriceCheckResponse>(await this.callApi(params, req, runtime), new IntlFlightInventoryPriceCheckResponse({}));
  }

  /**
   * 国际机票验舱验价
   * 
   * @param request - IntlFlightInventoryPriceCheckRequest
   * @returns IntlFlightInventoryPriceCheckResponse
   */
  async intlFlightInventoryPriceCheck(request: IntlFlightInventoryPriceCheckRequest): Promise<IntlFlightInventoryPriceCheckResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightInventoryPriceCheckHeaders({ });
    return await this.intlFlightInventoryPriceCheckWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票航班搜索
   * 
   * @param tmpReq - IntlFlightListingSearchRequest
   * @param headers - IntlFlightListingSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightListingSearchResponse
   */
  async intlFlightListingSearchWithOptions(tmpReq: IntlFlightListingSearchRequest, headers: IntlFlightListingSearchHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightListingSearchResponse> {
    Util.validateModel(tmpReq);
    let request = new IntlFlightListingSearchShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.searchJourneys)) {
      request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, "search_journeys", "json");
    }

    if (!Util.isUnset(tmpReq.searchPassengerList)) {
      request.searchPassengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchPassengerList, "search_passenger_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      query["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.cabinType)) {
      query["cabin_type"] = request.cabinType;
    }

    if (!Util.isUnset(request.directOnly)) {
      query["direct_only"] = request.directOnly;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.language)) {
      query["language"] = request.language;
    }

    if (!Util.isUnset(request.needShareFlight)) {
      query["need_share_flight"] = request.needShareFlight;
    }

    if (!Util.isUnset(request.outWheelSearch)) {
      query["out_wheel_search"] = request.outWheelSearch;
    }

    if (!Util.isUnset(request.queryRecordId)) {
      query["query_record_id"] = request.queryRecordId;
    }

    if (!Util.isUnset(request.searchJourneysShrink)) {
      query["search_journeys"] = request.searchJourneysShrink;
    }

    if (!Util.isUnset(request.searchMode)) {
      query["search_mode"] = request.searchMode;
    }

    if (!Util.isUnset(request.searchPassengerListShrink)) {
      query["search_passenger_list"] = request.searchPassengerListShrink;
    }

    if (!Util.isUnset(request.supplierCode)) {
      query["supplier_code"] = request.supplierCode;
    }

    if (!Util.isUnset(request.token)) {
      query["token"] = request.token;
    }

    if (!Util.isUnset(request.tripType)) {
      query["trip_type"] = request.tripType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightListingSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/flights/action/listing-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightListingSearchResponse>(await this.callApi(params, req, runtime), new IntlFlightListingSearchResponse({}));
  }

  /**
   * 国际机票航班搜索
   * 
   * @param request - IntlFlightListingSearchRequest
   * @returns IntlFlightListingSearchResponse
   */
  async intlFlightListingSearch(request: IntlFlightListingSearchRequest): Promise<IntlFlightListingSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightListingSearchHeaders({ });
    return await this.intlFlightListingSearchWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票订单取消
   * 
   * @param request - IntlFlightOrderCancelRequest
   * @param headers - IntlFlightOrderCancelHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightOrderCancelResponse
   */
  async intlFlightOrderCancelWithOptions(request: IntlFlightOrderCancelRequest, headers: IntlFlightOrderCancelHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightOrderCancelResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightOrderCancel",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/order/action/cancel`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightOrderCancelResponse>(await this.callApi(params, req, runtime), new IntlFlightOrderCancelResponse({}));
  }

  /**
   * 国际机票订单取消
   * 
   * @param request - IntlFlightOrderCancelRequest
   * @returns IntlFlightOrderCancelResponse
   */
  async intlFlightOrderCancel(request: IntlFlightOrderCancelRequest): Promise<IntlFlightOrderCancelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightOrderCancelHeaders({ });
    return await this.intlFlightOrderCancelWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票订单详情
   * 
   * @param request - IntlFlightOrderDetailRequest
   * @param headers - IntlFlightOrderDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightOrderDetailResponse
   */
  async intlFlightOrderDetailWithOptions(request: IntlFlightOrderDetailRequest, headers: IntlFlightOrderDetailHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightOrderDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightOrderDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/order/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightOrderDetailResponse>(await this.callApi(params, req, runtime), new IntlFlightOrderDetailResponse({}));
  }

  /**
   * 国际机票订单详情
   * 
   * @param request - IntlFlightOrderDetailRequest
   * @returns IntlFlightOrderDetailResponse
   */
  async intlFlightOrderDetail(request: IntlFlightOrderDetailRequest): Promise<IntlFlightOrderDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightOrderDetailHeaders({ });
    return await this.intlFlightOrderDetailWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票订单支付
   * 
   * @param tmpReq - IntlFlightOrderPayRequest
   * @param headers - IntlFlightOrderPayHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightOrderPayResponse
   */
  async intlFlightOrderPayWithOptions(tmpReq: IntlFlightOrderPayRequest, headers: IntlFlightOrderPayHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightOrderPayResponse> {
    Util.validateModel(tmpReq);
    let request = new IntlFlightOrderPayShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.extParams)) {
      request.extParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extParams, "ext_params", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.extParamsShrink)) {
      query["ext_params"] = request.extParamsShrink;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.totalPrice)) {
      query["total_price"] = request.totalPrice;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightOrderPay",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/order/action/pay`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightOrderPayResponse>(await this.callApi(params, req, runtime), new IntlFlightOrderPayResponse({}));
  }

  /**
   * 国际机票订单支付
   * 
   * @param request - IntlFlightOrderPayRequest
   * @returns IntlFlightOrderPayResponse
   */
  async intlFlightOrderPay(request: IntlFlightOrderPayRequest): Promise<IntlFlightOrderPayResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightOrderPayHeaders({ });
    return await this.intlFlightOrderPayWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票订单支付前校验
   * 
   * @param request - IntlFlightOrderPayCheckRequest
   * @param headers - IntlFlightOrderPayCheckHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightOrderPayCheckResponse
   */
  async intlFlightOrderPayCheckWithOptions(request: IntlFlightOrderPayCheckRequest, headers: IntlFlightOrderPayCheckHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightOrderPayCheckResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      query["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightOrderPayCheck",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/order/action/pay-check`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightOrderPayCheckResponse>(await this.callApi(params, req, runtime), new IntlFlightOrderPayCheckResponse({}));
  }

  /**
   * 国际机票订单支付前校验
   * 
   * @param request - IntlFlightOrderPayCheckRequest
   * @returns IntlFlightOrderPayCheckResponse
   */
  async intlFlightOrderPayCheck(request: IntlFlightOrderPayCheckRequest): Promise<IntlFlightOrderPayCheckResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightOrderPayCheckHeaders({ });
    return await this.intlFlightOrderPayCheckWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票报价商品详情
   * 
   * @param request - IntlFlightOtaItemDetailRequest
   * @param headers - IntlFlightOtaItemDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightOtaItemDetailResponse
   */
  async intlFlightOtaItemDetailWithOptions(otaItemId: string, request: IntlFlightOtaItemDetailRequest, headers: IntlFlightOtaItemDetailHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightOtaItemDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      query["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.language)) {
      query["language"] = request.language;
    }

    if (!Util.isUnset(request.supplierCode)) {
      query["supplier_code"] = request.supplierCode;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightOtaItemDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/items/${OpenApiUtil.getEncodeParam(otaItemId)}/action/ota-get`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightOtaItemDetailResponse>(await this.callApi(params, req, runtime), new IntlFlightOtaItemDetailResponse({}));
  }

  /**
   * 国际机票报价商品详情
   * 
   * @param request - IntlFlightOtaItemDetailRequest
   * @returns IntlFlightOtaItemDetailResponse
   */
  async intlFlightOtaItemDetail(otaItemId: string, request: IntlFlightOtaItemDetailRequest): Promise<IntlFlightOtaItemDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightOtaItemDetailHeaders({ });
    return await this.intlFlightOtaItemDetailWithOptions(otaItemId, request, headers, runtime);
  }

  /**
   * 国际机票航班报价查询
   * 
   * @param tmpReq - IntlFlightOtaSearchRequest
   * @param headers - IntlFlightOtaSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightOtaSearchResponse
   */
  async intlFlightOtaSearchWithOptions(tmpReq: IntlFlightOtaSearchRequest, headers: IntlFlightOtaSearchHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightOtaSearchResponse> {
    Util.validateModel(tmpReq);
    let request = new IntlFlightOtaSearchShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.searchJourneys)) {
      request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, "search_journeys", "json");
    }

    if (!Util.isUnset(tmpReq.searchPassengerList)) {
      request.searchPassengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchPassengerList, "search_passenger_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.btripUserId)) {
      query["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.buyerName)) {
      query["buyer_name"] = request.buyerName;
    }

    if (!Util.isUnset(request.cabinType)) {
      query["cabin_type"] = request.cabinType;
    }

    if (!Util.isUnset(request.directOnly)) {
      query["direct_only"] = request.directOnly;
    }

    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.language)) {
      query["language"] = request.language;
    }

    if (!Util.isUnset(request.needShareFlight)) {
      query["need_share_flight"] = request.needShareFlight;
    }

    if (!Util.isUnset(request.searchJourneysShrink)) {
      query["search_journeys"] = request.searchJourneysShrink;
    }

    if (!Util.isUnset(request.searchPassengerListShrink)) {
      query["search_passenger_list"] = request.searchPassengerListShrink;
    }

    if (!Util.isUnset(request.supplierCode)) {
      query["supplier_code"] = request.supplierCode;
    }

    if (!Util.isUnset(request.tripType)) {
      query["trip_type"] = request.tripType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightOtaSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/flights/action/ota-search`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightOtaSearchResponse>(await this.callApi(params, req, runtime), new IntlFlightOtaSearchResponse({}));
  }

  /**
   * 国际机票航班报价查询
   * 
   * @param request - IntlFlightOtaSearchRequest
   * @returns IntlFlightOtaSearchResponse
   */
  async intlFlightOtaSearch(request: IntlFlightOtaSearchRequest): Promise<IntlFlightOtaSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightOtaSearchHeaders({ });
    return await this.intlFlightOtaSearchWithOptions(request, headers, runtime);
  }

  /**
   * 国际机票航班可用证件查询
   * 
   * @param request - IntlFlightSegmentAvailableCertRequest
   * @param headers - IntlFlightSegmentAvailableCertHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IntlFlightSegmentAvailableCertResponse
   */
  async intlFlightSegmentAvailableCertWithOptions(otaItemId: string, request: IntlFlightSegmentAvailableCertRequest, headers: IntlFlightSegmentAvailableCertHeaders, runtime: $Util.RuntimeOptions): Promise<IntlFlightSegmentAvailableCertResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isvName)) {
      query["isv_name"] = request.isvName;
    }

    if (!Util.isUnset(request.language)) {
      query["language"] = request.language;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      query["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "IntlFlightSegmentAvailableCert",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/intl-flight/v1/items/${OpenApiUtil.getEncodeParam(otaItemId)}/action/segment-available-cert`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<IntlFlightSegmentAvailableCertResponse>(await this.callApi(params, req, runtime), new IntlFlightSegmentAvailableCertResponse({}));
  }

  /**
   * 国际机票航班可用证件查询
   * 
   * @param request - IntlFlightSegmentAvailableCertRequest
   * @returns IntlFlightSegmentAvailableCertResponse
   */
  async intlFlightSegmentAvailableCert(otaItemId: string, request: IntlFlightSegmentAvailableCertRequest): Promise<IntlFlightSegmentAvailableCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IntlFlightSegmentAvailableCertHeaders({ });
    return await this.intlFlightSegmentAvailableCertWithOptions(otaItemId, request, headers, runtime);
  }

  /**
   * 新增发票配置
   * 
   * @param request - InvoiceAddRequest
   * @param headers - InvoiceAddHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InvoiceAddResponse
   */
  async invoiceAddWithOptions(request: InvoiceAddRequest, headers: InvoiceAddHeaders, runtime: $Util.RuntimeOptions): Promise<InvoiceAddResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.address)) {
      body["address"] = request.address;
    }

    if (!Util.isUnset(request.bankName)) {
      body["bank_name"] = request.bankName;
    }

    if (!Util.isUnset(request.bankNo)) {
      body["bank_no"] = request.bankNo;
    }

    if (!Util.isUnset(request.taxNo)) {
      body["tax_no"] = request.taxNo;
    }

    if (!Util.isUnset(request.tel)) {
      body["tel"] = request.tel;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      body["third_part_id"] = request.thirdPartId;
    }

    if (!Util.isUnset(request.title)) {
      body["title"] = request.title;
    }

    if (!Util.isUnset(request.type)) {
      body["type"] = request.type;
    }

    if (!Util.isUnset(request.unitType)) {
      body["unit_type"] = request.unitType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InvoiceAdd",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/add-invoice`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InvoiceAddResponse>(await this.callApi(params, req, runtime), new InvoiceAddResponse({}));
  }

  /**
   * 新增发票配置
   * 
   * @param request - InvoiceAddRequest
   * @returns InvoiceAddResponse
   */
  async invoiceAdd(request: InvoiceAddRequest): Promise<InvoiceAddResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InvoiceAddHeaders({ });
    return await this.invoiceAddWithOptions(request, headers, runtime);
  }

  /**
   * 删除发票抬头
   * 
   * @param request - InvoiceDeleteRequest
   * @param headers - InvoiceDeleteHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InvoiceDeleteResponse
   */
  async invoiceDeleteWithOptions(request: InvoiceDeleteRequest, headers: InvoiceDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<InvoiceDeleteResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.thirdPartId)) {
      query["third_part_id"] = request.thirdPartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "InvoiceDelete",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/invoice`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InvoiceDeleteResponse>(await this.callApi(params, req, runtime), new InvoiceDeleteResponse({}));
  }

  /**
   * 删除发票抬头
   * 
   * @param request - InvoiceDeleteRequest
   * @returns InvoiceDeleteResponse
   */
  async invoiceDelete(request: InvoiceDeleteRequest): Promise<InvoiceDeleteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InvoiceDeleteHeaders({ });
    return await this.invoiceDeleteWithOptions(request, headers, runtime);
  }

  /**
   * 修改发票配置
   * 
   * @param request - InvoiceModifyRequest
   * @param headers - InvoiceModifyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InvoiceModifyResponse
   */
  async invoiceModifyWithOptions(request: InvoiceModifyRequest, headers: InvoiceModifyHeaders, runtime: $Util.RuntimeOptions): Promise<InvoiceModifyResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.address)) {
      body["address"] = request.address;
    }

    if (!Util.isUnset(request.bankName)) {
      body["bank_name"] = request.bankName;
    }

    if (!Util.isUnset(request.bankNo)) {
      body["bank_no"] = request.bankNo;
    }

    if (!Util.isUnset(request.taxNo)) {
      body["tax_no"] = request.taxNo;
    }

    if (!Util.isUnset(request.tel)) {
      body["tel"] = request.tel;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      body["third_part_id"] = request.thirdPartId;
    }

    if (!Util.isUnset(request.title)) {
      body["title"] = request.title;
    }

    if (!Util.isUnset(request.type)) {
      body["type"] = request.type;
    }

    if (!Util.isUnset(request.unitType)) {
      body["unit_type"] = request.unitType;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InvoiceModify",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/invoice`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InvoiceModifyResponse>(await this.callApi(params, req, runtime), new InvoiceModifyResponse({}));
  }

  /**
   * 修改发票配置
   * 
   * @param request - InvoiceModifyRequest
   * @returns InvoiceModifyResponse
   */
  async invoiceModify(request: InvoiceModifyRequest): Promise<InvoiceModifyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InvoiceModifyHeaders({ });
    return await this.invoiceModifyWithOptions(request, headers, runtime);
  }

  /**
   * 新增发票抬头可用员工
   * 
   * @param tmpReq - InvoiceRuleAddRequest
   * @param headers - InvoiceRuleAddHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InvoiceRuleAddResponse
   */
  async invoiceRuleAddWithOptions(tmpReq: InvoiceRuleAddRequest, headers: InvoiceRuleAddHeaders, runtime: $Util.RuntimeOptions): Promise<InvoiceRuleAddResponse> {
    Util.validateModel(tmpReq);
    let request = new InvoiceRuleAddShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entities)) {
      request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, "entities", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.entitiesShrink)) {
      body["entities"] = request.entitiesShrink;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      body["third_part_id"] = request.thirdPartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InvoiceRuleAdd",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/invoice-rule`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InvoiceRuleAddResponse>(await this.callApi(params, req, runtime), new InvoiceRuleAddResponse({}));
  }

  /**
   * 新增发票抬头可用员工
   * 
   * @param request - InvoiceRuleAddRequest
   * @returns InvoiceRuleAddResponse
   */
  async invoiceRuleAdd(request: InvoiceRuleAddRequest): Promise<InvoiceRuleAddResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InvoiceRuleAddHeaders({ });
    return await this.invoiceRuleAddWithOptions(request, headers, runtime);
  }

  /**
   * 删除发票抬头可用员工
   * 
   * @param tmpReq - InvoiceRuleDeleteRequest
   * @param headers - InvoiceRuleDeleteHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InvoiceRuleDeleteResponse
   */
  async invoiceRuleDeleteWithOptions(tmpReq: InvoiceRuleDeleteRequest, headers: InvoiceRuleDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<InvoiceRuleDeleteResponse> {
    Util.validateModel(tmpReq);
    let request = new InvoiceRuleDeleteShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entities)) {
      request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, "entities", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.delAll)) {
      query["del_all"] = request.delAll;
    }

    if (!Util.isUnset(request.entitiesShrink)) {
      query["entities"] = request.entitiesShrink;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      query["third_part_id"] = request.thirdPartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "InvoiceRuleDelete",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/invoice-rule`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InvoiceRuleDeleteResponse>(await this.callApi(params, req, runtime), new InvoiceRuleDeleteResponse({}));
  }

  /**
   * 删除发票抬头可用员工
   * 
   * @param request - InvoiceRuleDeleteRequest
   * @returns InvoiceRuleDeleteResponse
   */
  async invoiceRuleDelete(request: InvoiceRuleDeleteRequest): Promise<InvoiceRuleDeleteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InvoiceRuleDeleteHeaders({ });
    return await this.invoiceRuleDeleteWithOptions(request, headers, runtime);
  }

  /**
   * 保存发票规则
   * 
   * @param tmpReq - InvoiceRuleSaveRequest
   * @param headers - InvoiceRuleSaveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InvoiceRuleSaveResponse
   */
  async invoiceRuleSaveWithOptions(tmpReq: InvoiceRuleSaveRequest, headers: InvoiceRuleSaveHeaders, runtime: $Util.RuntimeOptions): Promise<InvoiceRuleSaveResponse> {
    Util.validateModel(tmpReq);
    let request = new InvoiceRuleSaveShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.entities)) {
      request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, "entities", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.allEmploye)) {
      body["all_employe"] = request.allEmploye;
    }

    if (!Util.isUnset(request.entitiesShrink)) {
      body["entities"] = request.entitiesShrink;
    }

    if (!Util.isUnset(request.scope)) {
      body["scope"] = request.scope;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      body["third_part_id"] = request.thirdPartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "InvoiceRuleSave",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/invoice-rule`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<InvoiceRuleSaveResponse>(await this.callApi(params, req, runtime), new InvoiceRuleSaveResponse({}));
  }

  /**
   * 保存发票规则
   * 
   * @param request - InvoiceRuleSaveRequest
   * @returns InvoiceRuleSaveResponse
   */
  async invoiceRuleSave(request: InvoiceRuleSaveRequest): Promise<InvoiceRuleSaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InvoiceRuleSaveHeaders({ });
    return await this.invoiceRuleSaveWithOptions(request, headers, runtime);
  }

  /**
   * 搜索用户可用发票抬头
   * 
   * @param request - InvoiceSearchRequest
   * @param headers - InvoiceSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InvoiceSearchResponse
   */
  async invoiceSearchWithOptions(request: InvoiceSearchRequest, headers: InvoiceSearchHeaders, runtime: $Util.RuntimeOptions): Promise<InvoiceSearchResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.thirdPartId)) {
      query["third_part_id"] = request.thirdPartId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "InvoiceSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/invoice`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<InvoiceSearchResponse>(await this.callApi(params, req, runtime), new InvoiceSearchResponse({}));
  }

  /**
   * 搜索用户可用发票抬头
   * 
   * @param request - InvoiceSearchRequest
   * @returns InvoiceSearchResponse
   */
  async invoiceSearch(request: InvoiceSearchRequest): Promise<InvoiceSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new InvoiceSearchHeaders({ });
    return await this.invoiceSearchWithOptions(request, headers, runtime);
  }

  /**
   * 员工特殊角色修改
   * 
   * @param tmpReq - IsvRuleSaveRequest
   * @param headers - IsvRuleSaveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IsvRuleSaveResponse
   */
  async isvRuleSaveWithOptions(tmpReq: IsvRuleSaveRequest, headers: IsvRuleSaveHeaders, runtime: $Util.RuntimeOptions): Promise<IsvRuleSaveResponse> {
    Util.validateModel(tmpReq);
    let request = new IsvRuleSaveShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.bookuserList)) {
      request.bookuserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookuserList, "bookuser_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyNeed)) {
      body["apply_need"] = request.applyNeed;
    }

    if (!Util.isUnset(request.bookType)) {
      body["book_type"] = request.bookType;
    }

    if (!Util.isUnset(request.bookuserListShrink)) {
      body["bookuser_list"] = request.bookuserListShrink;
    }

    if (!Util.isUnset(request.ruleNeed)) {
      body["rule_need"] = request.ruleNeed;
    }

    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "IsvRuleSave",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/rule`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<IsvRuleSaveResponse>(await this.callApi(params, req, runtime), new IsvRuleSaveResponse({}));
  }

  /**
   * 员工特殊角色修改
   * 
   * @param request - IsvRuleSaveRequest
   * @returns IsvRuleSaveResponse
   */
  async isvRuleSave(request: IsvRuleSaveRequest): Promise<IsvRuleSaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IsvRuleSaveHeaders({ });
    return await this.isvRuleSaveWithOptions(request, headers, runtime);
  }

  /**
   * 用户同步
   * 
   * @param tmpReq - IsvUserSaveRequest
   * @param headers - IsvUserSaveHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IsvUserSaveResponse
   */
  async isvUserSaveWithOptions(tmpReq: IsvUserSaveRequest, headers: IsvUserSaveHeaders, runtime: $Util.RuntimeOptions): Promise<IsvUserSaveResponse> {
    Util.validateModel(tmpReq);
    let request = new IsvUserSaveShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.userList)) {
      request.userListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userList, "user_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.userListShrink)) {
      body["user_list"] = request.userListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "IsvUserSave",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/isvuser/v1/isvuser`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<IsvUserSaveResponse>(await this.callApi(params, req, runtime), new IsvUserSaveResponse({}));
  }

  /**
   * 用户同步
   * 
   * @param request - IsvUserSaveRequest
   * @returns IsvUserSaveResponse
   */
  async isvUserSave(request: IsvUserSaveRequest): Promise<IsvUserSaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new IsvUserSaveHeaders({ });
    return await this.isvUserSaveWithOptions(request, headers, runtime);
  }

  /**
   * 查询因公用餐记账数据
   * 
   * @param request - MealBillSettlementQueryRequest
   * @param headers - MealBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MealBillSettlementQueryResponse
   */
  async mealBillSettlementQueryWithOptions(request: MealBillSettlementQueryRequest, headers: MealBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<MealBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "MealBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/meal/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<MealBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new MealBillSettlementQueryResponse({}));
  }

  /**
   * 查询因公用餐记账数据
   * 
   * @param request - MealBillSettlementQueryRequest
   * @returns MealBillSettlementQueryResponse
   */
  async mealBillSettlementQuery(request: MealBillSettlementQueryRequest): Promise<MealBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new MealBillSettlementQueryHeaders({ });
    return await this.mealBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 获取用餐订单详情
   * 
   * @param request - MealOrderDetailQueryRequest
   * @param headers - MealOrderDetailQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MealOrderDetailQueryResponse
   */
  async mealOrderDetailQueryWithOptions(orderId: string, request: MealOrderDetailQueryRequest, headers: MealOrderDetailQueryHeaders, runtime: $Util.RuntimeOptions): Promise<MealOrderDetailQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "MealOrderDetailQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/meal/v1/orders/${OpenApiUtil.getEncodeParam(orderId)}`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<MealOrderDetailQueryResponse>(await this.callApi(params, req, runtime), new MealOrderDetailQueryResponse({}));
  }

  /**
   * 获取用餐订单详情
   * 
   * @param request - MealOrderDetailQueryRequest
   * @returns MealOrderDetailQueryResponse
   */
  async mealOrderDetailQuery(orderId: string, request: MealOrderDetailQueryRequest): Promise<MealOrderDetailQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new MealOrderDetailQueryHeaders({ });
    return await this.mealOrderDetailQueryWithOptions(orderId, request, headers, runtime);
  }

  /**
   * 获取用餐订单列表
   * 
   * @param request - MealOrderListQueryRequest
   * @param headers - MealOrderListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MealOrderListQueryResponse
   */
  async mealOrderListQueryWithOptions(request: MealOrderListQueryRequest, headers: MealOrderListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<MealOrderListQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "MealOrderListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/meal/v1/orders`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<MealOrderListQueryResponse>(await this.callApi(params, req, runtime), new MealOrderListQueryResponse({}));
  }

  /**
   * 获取用餐订单列表
   * 
   * @param request - MealOrderListQueryRequest
   * @returns MealOrderListQueryResponse
   */
  async mealOrderListQuery(request: MealOrderListQueryRequest): Promise<MealOrderListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new MealOrderListQueryHeaders({ });
    return await this.mealOrderListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 月账单确认
   * 
   * @param request - MonthBillConfirmRequest
   * @param headers - MonthBillConfirmHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MonthBillConfirmResponse
   */
  async monthBillConfirmWithOptions(request: MonthBillConfirmRequest, headers: MonthBillConfirmHeaders, runtime: $Util.RuntimeOptions): Promise<MonthBillConfirmResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.mailBillDate)) {
      body["mail_bill_date"] = request.mailBillDate;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "MonthBillConfirm",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/bill/v1/status/action/confirm`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<MonthBillConfirmResponse>(await this.callApi(params, req, runtime), new MonthBillConfirmResponse({}));
  }

  /**
   * 月账单确认
   * 
   * @param request - MonthBillConfirmRequest
   * @returns MonthBillConfirmResponse
   */
  async monthBillConfirm(request: MonthBillConfirmRequest): Promise<MonthBillConfirmResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new MonthBillConfirmHeaders({ });
    return await this.monthBillConfirmWithOptions(request, headers, runtime);
  }

  /**
   * 查询企业月账单
   * 
   * @param request - MonthBillGetRequest
   * @param headers - MonthBillGetHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MonthBillGetResponse
   */
  async monthBillGetWithOptions(request: MonthBillGetRequest, headers: MonthBillGetHeaders, runtime: $Util.RuntimeOptions): Promise<MonthBillGetResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.billMonth)) {
      query["bill_month"] = request.billMonth;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "MonthBillGet",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/open/v1/month-bill`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<MonthBillGetResponse>(await this.callApi(params, req, runtime), new MonthBillGetResponse({}));
  }

  /**
   * 查询企业月账单
   * 
   * @param request - MonthBillGetRequest
   * @returns MonthBillGetResponse
   */
  async monthBillGet(request: MonthBillGetRequest): Promise<MonthBillGetResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new MonthBillGetHeaders({ });
    return await this.monthBillGetWithOptions(request, headers, runtime);
  }

  /**
   * 添加项目
   * 
   * @param request - ProjectAddRequest
   * @param headers - ProjectAddHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ProjectAddResponse
   */
  async projectAddWithOptions(request: ProjectAddRequest, headers: ProjectAddHeaders, runtime: $Util.RuntimeOptions): Promise<ProjectAddResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.code)) {
      body["code"] = request.code;
    }

    if (!Util.isUnset(request.projectName)) {
      body["project_name"] = request.projectName;
    }

    if (!Util.isUnset(request.thirdPartCostCenterId)) {
      body["third_part_cost_center_id"] = request.thirdPartCostCenterId;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      body["third_part_id"] = request.thirdPartId;
    }

    if (!Util.isUnset(request.thirdPartInvoiceId)) {
      body["third_part_invoice_id"] = request.thirdPartInvoiceId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ProjectAdd",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/cost/v1/project`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ProjectAddResponse>(await this.callApi(params, req, runtime), new ProjectAddResponse({}));
  }

  /**
   * 添加项目
   * 
   * @param request - ProjectAddRequest
   * @returns ProjectAddResponse
   */
  async projectAdd(request: ProjectAddRequest): Promise<ProjectAddResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ProjectAddHeaders({ });
    return await this.projectAddWithOptions(request, headers, runtime);
  }

  /**
   * 删除项目
   * 
   * @param request - ProjectDeleteRequest
   * @param headers - ProjectDeleteHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ProjectDeleteResponse
   */
  async projectDeleteWithOptions(request: ProjectDeleteRequest, headers: ProjectDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<ProjectDeleteResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.thirdPartId)) {
      query["third_part_id"] = request.thirdPartId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ProjectDelete",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/cost/v1/project`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<ProjectDeleteResponse>(await this.callApi(params, req, runtime), new ProjectDeleteResponse({}));
  }

  /**
   * 删除项目
   * 
   * @param request - ProjectDeleteRequest
   * @returns ProjectDeleteResponse
   */
  async projectDelete(request: ProjectDeleteRequest): Promise<ProjectDeleteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ProjectDeleteHeaders({ });
    return await this.projectDeleteWithOptions(request, headers, runtime);
  }

  /**
   * 变更项目
   * 
   * @param request - ProjectModifyRequest
   * @param headers - ProjectModifyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ProjectModifyResponse
   */
  async projectModifyWithOptions(request: ProjectModifyRequest, headers: ProjectModifyHeaders, runtime: $Util.RuntimeOptions): Promise<ProjectModifyResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.code)) {
      body["code"] = request.code;
    }

    if (!Util.isUnset(request.projectName)) {
      body["project_name"] = request.projectName;
    }

    if (!Util.isUnset(request.thirdPartCostCenterId)) {
      body["third_part_cost_center_id"] = request.thirdPartCostCenterId;
    }

    if (!Util.isUnset(request.thirdPartId)) {
      body["third_part_id"] = request.thirdPartId;
    }

    if (!Util.isUnset(request.thirdPartInvoiceId)) {
      body["third_part_invoice_id"] = request.thirdPartInvoiceId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ProjectModify",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/cost/v1/project`,
      method: "PUT",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ProjectModifyResponse>(await this.callApi(params, req, runtime), new ProjectModifyResponse({}));
  }

  /**
   * 变更项目
   * 
   * @param request - ProjectModifyRequest
   * @returns ProjectModifyResponse
   */
  async projectModify(request: ProjectModifyRequest): Promise<ProjectModifyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new ProjectModifyHeaders({ });
    return await this.projectModifyWithOptions(request, headers, runtime);
  }

  /**
   * 获取单个员工信息
   * 
   * @param request - QueryEmployeeDetailRequest
   * @param headers - QueryEmployeeDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryEmployeeDetailResponse
   */
  async queryEmployeeDetailWithOptions(request: QueryEmployeeDetailRequest, headers: QueryEmployeeDetailHeaders, runtime: $Util.RuntimeOptions): Promise<QueryEmployeeDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.outEmployeeId)) {
      query["out_employee_id"] = request.outEmployeeId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "QueryEmployeeDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/employeeDetail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<QueryEmployeeDetailResponse>(await this.callApi(params, req, runtime), new QueryEmployeeDetailResponse({}));
  }

  /**
   * 获取单个员工信息
   * 
   * @param request - QueryEmployeeDetailRequest
   * @returns QueryEmployeeDetailResponse
   */
  async queryEmployeeDetail(request: QueryEmployeeDetailRequest): Promise<QueryEmployeeDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new QueryEmployeeDetailHeaders({ });
    return await this.queryEmployeeDetailWithOptions(request, headers, runtime);
  }

  /**
   * 查询子企业列表
   * 
   * @param request - QueryGroupCorpListRequest
   * @param headers - QueryGroupCorpListHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryGroupCorpListResponse
   */
  async queryGroupCorpListWithOptions(request: QueryGroupCorpListRequest, headers: QueryGroupCorpListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupCorpListResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "QueryGroupCorpList",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/sub_corps/v1/corps/action/corpList`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<QueryGroupCorpListResponse>(await this.callApi(params, req, runtime), new QueryGroupCorpListResponse({}));
  }

  /**
   * 查询子企业列表
   * 
   * @param request - QueryGroupCorpListRequest
   * @returns QueryGroupCorpListResponse
   */
  async queryGroupCorpList(request: QueryGroupCorpListRequest): Promise<QueryGroupCorpListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new QueryGroupCorpListHeaders({ });
    return await this.queryGroupCorpListWithOptions(request, headers, runtime);
  }

  /**
   * 报销单查询
   * 
   * @param request - QueryReimbursementOrderRequest
   * @param headers - QueryReimbursementOrderHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryReimbursementOrderResponse
   */
  async queryReimbursementOrderWithOptions(request: QueryReimbursementOrderRequest, headers: QueryReimbursementOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryReimbursementOrderResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.reimbOrderNo)) {
      query["reimb_order_no"] = request.reimbOrderNo;
    }

    if (!Util.isUnset(request.subCorpId)) {
      query["sub_corp_id"] = request.subCorpId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "QueryReimbursementOrder",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/reimbursement/v1/order`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<QueryReimbursementOrderResponse>(await this.callApi(params, req, runtime), new QueryReimbursementOrderResponse({}));
  }

  /**
   * 报销单查询
   * 
   * @param request - QueryReimbursementOrderRequest
   * @returns QueryReimbursementOrderResponse
   */
  async queryReimbursementOrder(request: QueryReimbursementOrderRequest): Promise<QueryReimbursementOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new QueryReimbursementOrderHeaders({ });
    return await this.queryReimbursementOrderWithOptions(request, headers, runtime);
  }

  /**
   * 单个人员同步
   * 
   * @param tmpReq - SyncSingleUserRequest
   * @param headers - SyncSingleUserHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SyncSingleUserResponse
   */
  async syncSingleUserWithOptions(tmpReq: SyncSingleUserRequest, headers: SyncSingleUserHeaders, runtime: $Util.RuntimeOptions): Promise<SyncSingleUserResponse> {
    Util.validateModel(tmpReq);
    let request = new SyncSingleUserShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.thirdDepartIdList)) {
      request.thirdDepartIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdDepartIdList, "third_depart_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.email)) {
      body["email"] = request.email;
    }

    if (!Util.isUnset(request.jobNo)) {
      body["job_no"] = request.jobNo;
    }

    if (!Util.isUnset(request.leaveStatus)) {
      body["leave_status"] = request.leaveStatus;
    }

    if (!Util.isUnset(request.managerUserId)) {
      body["manager_user_id"] = request.managerUserId;
    }

    if (!Util.isUnset(request.phone)) {
      body["phone"] = request.phone;
    }

    if (!Util.isUnset(request.position)) {
      body["position"] = request.position;
    }

    if (!Util.isUnset(request.positionLevel)) {
      body["position_level"] = request.positionLevel;
    }

    if (!Util.isUnset(request.realNameEn)) {
      body["real_name_en"] = request.realNameEn;
    }

    if (!Util.isUnset(request.thirdDepartIdListShrink)) {
      body["third_depart_id_list"] = request.thirdDepartIdListShrink;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      body["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "SyncSingleUser",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/single-user/action/sync`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SyncSingleUserResponse>(await this.callApi(params, req, runtime), new SyncSingleUserResponse({}));
  }

  /**
   * 单个人员同步
   * 
   * @param request - SyncSingleUserRequest
   * @returns SyncSingleUserResponse
   */
  async syncSingleUser(request: SyncSingleUserRequest): Promise<SyncSingleUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new SyncSingleUserHeaders({ });
    return await this.syncSingleUserWithOptions(request, headers, runtime);
  }

  /**
   * 同步三方用户映射关系
   * 
   * @param request - SyncThirdUserMappingRequest
   * @param headers - SyncThirdUserMappingHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SyncThirdUserMappingResponse
   */
  async syncThirdUserMappingWithOptions(request: SyncThirdUserMappingRequest, headers: SyncThirdUserMappingHeaders, runtime: $Util.RuntimeOptions): Promise<SyncThirdUserMappingResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.status)) {
      body["status"] = request.status;
    }

    if (!Util.isUnset(request.thirdChannelType)) {
      body["third_channel_type"] = request.thirdChannelType;
    }

    if (!Util.isUnset(request.thirdUserId)) {
      body["third_user_id"] = request.thirdUserId;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "SyncThirdUserMapping",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/third-users/action/mapping`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SyncThirdUserMappingResponse>(await this.callApi(params, req, runtime), new SyncThirdUserMappingResponse({}));
  }

  /**
   * 同步三方用户映射关系
   * 
   * @param request - SyncThirdUserMappingRequest
   * @returns SyncThirdUserMappingResponse
   */
  async syncThirdUserMapping(request: SyncThirdUserMappingRequest): Promise<SyncThirdUserMappingResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new SyncThirdUserMappingHeaders({ });
    return await this.syncThirdUserMappingWithOptions(request, headers, runtime);
  }

  /**
   * 查询淘宝账号信息
   * 
   * @param headers - TBAccountInfoQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TBAccountInfoQueryResponse
   */
  async tBAccountInfoQueryWithOptions(userId: string, headers: TBAccountInfoQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TBAccountInfoQueryResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "TBAccountInfoQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/account/v1/tb-accounts/${OpenApiUtil.getEncodeParam(userId)}`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TBAccountInfoQueryResponse>(await this.callApi(params, req, runtime), new TBAccountInfoQueryResponse({}));
  }

  /**
   * 查询淘宝账号信息
   * @returns TBAccountInfoQueryResponse
   */
  async tBAccountInfoQuery(userId: string): Promise<TBAccountInfoQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TBAccountInfoQueryHeaders({ });
    return await this.tBAccountInfoQueryWithOptions(userId, headers, runtime);
  }

  /**
   * 解绑淘宝账号
   * 
   * @param headers - TBAccountUnbindHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TBAccountUnbindResponse
   */
  async tBAccountUnbindWithOptions(userId: string, headers: TBAccountUnbindHeaders, runtime: $Util.RuntimeOptions): Promise<TBAccountUnbindResponse> {
    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
    });
    let params = new $OpenApi.Params({
      action: "TBAccountUnbind",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/account/v1/tb-accounts/${OpenApiUtil.getEncodeParam(userId)}/action/unbind`,
      method: "PATCH",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TBAccountUnbindResponse>(await this.callApi(params, req, runtime), new TBAccountUnbindResponse({}));
  }

  /**
   * 解绑淘宝账号
   * @returns TBAccountUnbindResponse
   */
  async tBAccountUnbind(userId: string): Promise<TBAccountUnbindResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TBAccountUnbindHeaders({ });
    return await this.tBAccountUnbindWithOptions(userId, headers, runtime);
  }

  /**
   * 机票改签申请
   * 
   * @param tmpReq - TicketChangingApplyRequest
   * @param headers - TicketChangingApplyHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TicketChangingApplyResponse
   */
  async ticketChangingApplyWithOptions(tmpReq: TicketChangingApplyRequest, headers: TicketChangingApplyHeaders, runtime: $Util.RuntimeOptions): Promise<TicketChangingApplyResponse> {
    Util.validateModel(tmpReq);
    let request = new TicketChangingApplyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.modifyFlightInfoList)) {
      request.modifyFlightInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modifyFlightInfoList, "modify_flight_info_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.disSubOrderId)) {
      body["dis_sub_order_id"] = request.disSubOrderId;
    }

    if (!Util.isUnset(request.isVoluntary)) {
      body["is_voluntary"] = request.isVoluntary;
    }

    if (!Util.isUnset(request.modifyFlightInfoListShrink)) {
      body["modify_flight_info_list"] = request.modifyFlightInfoListShrink;
    }

    if (!Util.isUnset(request.otaItemId)) {
      body["ota_item_id"] = request.otaItemId;
    }

    if (!Util.isUnset(request.reason)) {
      body["reason"] = request.reason;
    }

    if (!Util.isUnset(request.sessionId)) {
      body["session_id"] = request.sessionId;
    }

    if (!Util.isUnset(request.whetherRetry)) {
      body["whether_retry"] = request.whetherRetry;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TicketChangingApply",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/ticket-changing/action/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TicketChangingApplyResponse>(await this.callApi(params, req, runtime), new TicketChangingApplyResponse({}));
  }

  /**
   * 机票改签申请
   * 
   * @param request - TicketChangingApplyRequest
   * @returns TicketChangingApplyResponse
   */
  async ticketChangingApply(request: TicketChangingApplyRequest): Promise<TicketChangingApplyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TicketChangingApplyHeaders({ });
    return await this.ticketChangingApplyWithOptions(request, headers, runtime);
  }

  /**
   * 机票改签取消
   * 
   * @param request - TicketChangingCancelRequest
   * @param headers - TicketChangingCancelHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TicketChangingCancelResponse
   */
  async ticketChangingCancelWithOptions(request: TicketChangingCancelRequest, headers: TicketChangingCancelHeaders, runtime: $Util.RuntimeOptions): Promise<TicketChangingCancelResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.disSubOrderId)) {
      query["dis_sub_order_id"] = request.disSubOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TicketChangingCancel",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/ticket-changing/action/cancel`,
      method: "DELETE",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TicketChangingCancelResponse>(await this.callApi(params, req, runtime), new TicketChangingCancelResponse({}));
  }

  /**
   * 机票改签取消
   * 
   * @param request - TicketChangingCancelRequest
   * @returns TicketChangingCancelResponse
   */
  async ticketChangingCancel(request: TicketChangingCancelRequest): Promise<TicketChangingCancelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TicketChangingCancelHeaders({ });
    return await this.ticketChangingCancelWithOptions(request, headers, runtime);
  }

  /**
   * 机票改签详情
   * 
   * @param request - TicketChangingDetailRequest
   * @param headers - TicketChangingDetailHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TicketChangingDetailResponse
   */
  async ticketChangingDetailWithOptions(request: TicketChangingDetailRequest, headers: TicketChangingDetailHeaders, runtime: $Util.RuntimeOptions): Promise<TicketChangingDetailResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.disSubOrderId)) {
      query["dis_sub_order_id"] = request.disSubOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TicketChangingDetail",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/ticket-changing/action/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TicketChangingDetailResponse>(await this.callApi(params, req, runtime), new TicketChangingDetailResponse({}));
  }

  /**
   * 机票改签详情
   * 
   * @param request - TicketChangingDetailRequest
   * @returns TicketChangingDetailResponse
   */
  async ticketChangingDetail(request: TicketChangingDetailRequest): Promise<TicketChangingDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TicketChangingDetailHeaders({ });
    return await this.ticketChangingDetailWithOptions(request, headers, runtime);
  }

  /**
   * 机票改签询价
   * 
   * @param request - TicketChangingEnquiryRequest
   * @param headers - TicketChangingEnquiryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TicketChangingEnquiryResponse
   */
  async ticketChangingEnquiryWithOptions(request: TicketChangingEnquiryRequest, headers: TicketChangingEnquiryHeaders, runtime: $Util.RuntimeOptions): Promise<TicketChangingEnquiryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.arrCity)) {
      query["arr_city"] = request.arrCity;
    }

    if (!Util.isUnset(request.depCity)) {
      query["dep_city"] = request.depCity;
    }

    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.isVoluntary)) {
      query["is_voluntary"] = request.isVoluntary;
    }

    if (!Util.isUnset(request.modifyDepartDate)) {
      query["modify_depart_date"] = request.modifyDepartDate;
    }

    if (!Util.isUnset(request.modifyFlightNo)) {
      query["modify_flight_no"] = request.modifyFlightNo;
    }

    if (!Util.isUnset(request.sessionId)) {
      query["session_id"] = request.sessionId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TicketChangingEnquiry",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/ticket-changing/action/enquiry`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TicketChangingEnquiryResponse>(await this.callApi(params, req, runtime), new TicketChangingEnquiryResponse({}));
  }

  /**
   * 机票改签询价
   * 
   * @param request - TicketChangingEnquiryRequest
   * @returns TicketChangingEnquiryResponse
   */
  async ticketChangingEnquiry(request: TicketChangingEnquiryRequest): Promise<TicketChangingEnquiryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TicketChangingEnquiryHeaders({ });
    return await this.ticketChangingEnquiryWithOptions(request, headers, runtime);
  }

  /**
   * 机票改签可改签航班列表
   * 
   * @param tmpReq - TicketChangingFlightListRequest
   * @param headers - TicketChangingFlightListHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TicketChangingFlightListResponse
   */
  async ticketChangingFlightListWithOptions(tmpReq: TicketChangingFlightListRequest, headers: TicketChangingFlightListHeaders, runtime: $Util.RuntimeOptions): Promise<TicketChangingFlightListResponse> {
    Util.validateModel(tmpReq);
    let request = new TicketChangingFlightListShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.travelerInfoList)) {
      request.travelerInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerInfoList, "traveler_info_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.arrCity)) {
      query["arr_city"] = request.arrCity;
    }

    if (!Util.isUnset(request.depCity)) {
      query["dep_city"] = request.depCity;
    }

    if (!Util.isUnset(request.depDate)) {
      query["dep_date"] = request.depDate;
    }

    if (!Util.isUnset(request.disOrderId)) {
      query["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.isVoluntary)) {
      query["is_voluntary"] = request.isVoluntary;
    }

    if (!Util.isUnset(request.travelerInfoListShrink)) {
      query["traveler_info_list"] = request.travelerInfoListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TicketChangingFlightList",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/huge/dtb-flight/v1/ticket-changing-flight/action/list`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TicketChangingFlightListResponse>(await this.callApi(params, req, runtime), new TicketChangingFlightListResponse({}));
  }

  /**
   * 机票改签可改签航班列表
   * 
   * @param request - TicketChangingFlightListRequest
   * @returns TicketChangingFlightListResponse
   */
  async ticketChangingFlightList(request: TicketChangingFlightListRequest): Promise<TicketChangingFlightListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TicketChangingFlightListHeaders({ });
    return await this.ticketChangingFlightListWithOptions(request, headers, runtime);
  }

  /**
   * 机票改签航班支付
   * 
   * @param tmpReq - TicketChangingPayRequest
   * @param headers - TicketChangingPayHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TicketChangingPayResponse
   */
  async ticketChangingPayWithOptions(tmpReq: TicketChangingPayRequest, headers: TicketChangingPayHeaders, runtime: $Util.RuntimeOptions): Promise<TicketChangingPayResponse> {
    Util.validateModel(tmpReq);
    let request = new TicketChangingPayShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.extra)) {
      request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, "extra", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.corpPayPrice)) {
      body["corp_pay_price"] = request.corpPayPrice;
    }

    if (!Util.isUnset(request.disOrderId)) {
      body["dis_order_id"] = request.disOrderId;
    }

    if (!Util.isUnset(request.disSubOrderId)) {
      body["dis_sub_order_id"] = request.disSubOrderId;
    }

    if (!Util.isUnset(request.extraShrink)) {
      body["extra"] = request.extraShrink;
    }

    if (!Util.isUnset(request.personalPayPrice)) {
      body["personal_pay_price"] = request.personalPayPrice;
    }

    if (!Util.isUnset(request.totalPayPrice)) {
      body["total_pay_price"] = request.totalPayPrice;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TicketChangingPay",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/dtb-flight/v1/ticket-changing/action/pay`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TicketChangingPayResponse>(await this.callApi(params, req, runtime), new TicketChangingPayResponse({}));
  }

  /**
   * 机票改签航班支付
   * 
   * @param request - TicketChangingPayRequest
   * @returns TicketChangingPayResponse
   */
  async ticketChangingPay(request: TicketChangingPayRequest): Promise<TicketChangingPayResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TicketChangingPayHeaders({ });
    return await this.ticketChangingPayWithOptions(request, headers, runtime);
  }

  /**
   * 火车票改签申请
   * 
   * @param tmpReq - TrainApplyChangeRequest
   * @param headers - TrainApplyChangeHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainApplyChangeResponse
   */
  async trainApplyChangeWithOptions(tmpReq: TrainApplyChangeRequest, headers: TrainApplyChangeHeaders, runtime: $Util.RuntimeOptions): Promise<TrainApplyChangeResponse> {
    Util.validateModel(tmpReq);
    let request = new TrainApplyChangeShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.changeTrainInfoS)) {
      request.changeTrainInfoSShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.changeTrainInfoS, "change_train_info_s", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.changeTrainInfoSShrink)) {
      query["change_train_info_s"] = request.changeTrainInfoSShrink;
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.acceptNoSeat)) {
      body["accept_no_seat"] = request.acceptNoSeat;
    }

    if (!Util.isUnset(request.forceMatch)) {
      body["force_match"] = request.forceMatch;
    }

    if (!Util.isUnset(request.isPayNow)) {
      body["is_pay_now"] = request.isPayNow;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outChangeApplyId)) {
      body["out_change_apply_id"] = request.outChangeApplyId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainApplyChange",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/change/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainApplyChangeResponse>(await this.callApi(params, req, runtime), new TrainApplyChangeResponse({}));
  }

  /**
   * 火车票改签申请
   * 
   * @param request - TrainApplyChangeRequest
   * @returns TrainApplyChangeResponse
   */
  async trainApplyChange(request: TrainApplyChangeRequest): Promise<TrainApplyChangeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainApplyChangeHeaders({ });
    return await this.trainApplyChangeWithOptions(request, headers, runtime);
  }

  /**
   * 火车票退票申请
   * 
   * @param tmpReq - TrainApplyRefundRequest
   * @param headers - TrainApplyRefundHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainApplyRefundResponse
   */
  async trainApplyRefundWithOptions(tmpReq: TrainApplyRefundRequest, headers: TrainApplyRefundHeaders, runtime: $Util.RuntimeOptions): Promise<TrainApplyRefundResponse> {
    Util.validateModel(tmpReq);
    let request = new TrainApplyRefundShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.refundTrainInfos)) {
      request.refundTrainInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundTrainInfos, "refund_train_infos", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.outRefundId)) {
      body["out_refund_id"] = request.outRefundId;
    }

    if (!Util.isUnset(request.refundTrainInfosShrink)) {
      body["refund_train_infos"] = request.refundTrainInfosShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainApplyRefund",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/refund/apply`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainApplyRefundResponse>(await this.callApi(params, req, runtime), new TrainApplyRefundResponse({}));
  }

  /**
   * 火车票退票申请
   * 
   * @param request - TrainApplyRefundRequest
   * @returns TrainApplyRefundResponse
   */
  async trainApplyRefund(request: TrainApplyRefundRequest): Promise<TrainApplyRefundResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainApplyRefundHeaders({ });
    return await this.trainApplyRefundWithOptions(request, headers, runtime);
  }

  /**
   * 查询火车票记账数据
   * 
   * @param request - TrainBillSettlementQueryRequest
   * @param headers - TrainBillSettlementQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainBillSettlementQueryResponse
   */
  async trainBillSettlementQueryWithOptions(request: TrainBillSettlementQueryRequest, headers: TrainBillSettlementQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TrainBillSettlementQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.periodEnd)) {
      query["period_end"] = request.periodEnd;
    }

    if (!Util.isUnset(request.periodStart)) {
      query["period_start"] = request.periodStart;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TrainBillSettlementQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/bill-settlement`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TrainBillSettlementQueryResponse>(await this.callApi(params, req, runtime), new TrainBillSettlementQueryResponse({}));
  }

  /**
   * 查询火车票记账数据
   * 
   * @param request - TrainBillSettlementQueryRequest
   * @returns TrainBillSettlementQueryResponse
   */
  async trainBillSettlementQuery(request: TrainBillSettlementQueryRequest): Promise<TrainBillSettlementQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainBillSettlementQueryHeaders({ });
    return await this.trainBillSettlementQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询火车超标审批详情
   * 
   * @param request - TrainExceedApplyQueryRequest
   * @param headers - TrainExceedApplyQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainExceedApplyQueryResponse
   */
  async trainExceedApplyQueryWithOptions(request: TrainExceedApplyQueryRequest, headers: TrainExceedApplyQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TrainExceedApplyQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.businessInstanceId)) {
      query["business_instance_id"] = request.businessInstanceId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TrainExceedApplyQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/train-exceed`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TrainExceedApplyQueryResponse>(await this.callApi(params, req, runtime), new TrainExceedApplyQueryResponse({}));
  }

  /**
   * 查询火车超标审批详情
   * 
   * @param request - TrainExceedApplyQueryRequest
   * @returns TrainExceedApplyQueryResponse
   */
  async trainExceedApplyQuery(request: TrainExceedApplyQueryRequest): Promise<TrainExceedApplyQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainExceedApplyQueryHeaders({ });
    return await this.trainExceedApplyQueryWithOptions(request, headers, runtime);
  }

  /**
   * 火车票改签费用预估
   * 
   * @param tmpReq - TrainFeeCalculateChangeRequest
   * @param headers - TrainFeeCalculateChangeHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainFeeCalculateChangeResponse
   */
  async trainFeeCalculateChangeWithOptions(tmpReq: TrainFeeCalculateChangeRequest, headers: TrainFeeCalculateChangeHeaders, runtime: $Util.RuntimeOptions): Promise<TrainFeeCalculateChangeResponse> {
    Util.validateModel(tmpReq);
    let request = new TrainFeeCalculateChangeShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.changeTrainDetails)) {
      request.changeTrainDetailsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.changeTrainDetails, "change_train_details", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.changeTrainDetailsShrink)) {
      body["change_train_details"] = request.changeTrainDetailsShrink;
    }

    if (!Util.isUnset(request.distributeOrderId)) {
      body["distribute_order_id"] = request.distributeOrderId;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainFeeCalculateChange",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/change/fee`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainFeeCalculateChangeResponse>(await this.callApi(params, req, runtime), new TrainFeeCalculateChangeResponse({}));
  }

  /**
   * 火车票改签费用预估
   * 
   * @param request - TrainFeeCalculateChangeRequest
   * @returns TrainFeeCalculateChangeResponse
   */
  async trainFeeCalculateChange(request: TrainFeeCalculateChangeRequest): Promise<TrainFeeCalculateChangeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainFeeCalculateChangeHeaders({ });
    return await this.trainFeeCalculateChangeWithOptions(request, headers, runtime);
  }

  /**
   * 火车票退票费用预估
   * 
   * @param tmpReq - TrainFeeCalculateRefundRequest
   * @param headers - TrainFeeCalculateRefundHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainFeeCalculateRefundResponse
   */
  async trainFeeCalculateRefundWithOptions(tmpReq: TrainFeeCalculateRefundRequest, headers: TrainFeeCalculateRefundHeaders, runtime: $Util.RuntimeOptions): Promise<TrainFeeCalculateRefundResponse> {
    Util.validateModel(tmpReq);
    let request = new TrainFeeCalculateRefundShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.refundTrainInfos)) {
      request.refundTrainInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundTrainInfos, "refund_train_infos", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.distributeOrderId)) {
      body["distribute_order_id"] = request.distributeOrderId;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.refundTrainInfosShrink)) {
      body["refund_train_infos"] = request.refundTrainInfosShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainFeeCalculateRefund",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/refund/fee`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainFeeCalculateRefundResponse>(await this.callApi(params, req, runtime), new TrainFeeCalculateRefundResponse({}));
  }

  /**
   * 火车票退票费用预估
   * 
   * @param request - TrainFeeCalculateRefundRequest
   * @returns TrainFeeCalculateRefundResponse
   */
  async trainFeeCalculateRefund(request: TrainFeeCalculateRefundRequest): Promise<TrainFeeCalculateRefundResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainFeeCalculateRefundHeaders({ });
    return await this.trainFeeCalculateRefundWithOptions(request, headers, runtime);
  }

  /**
   * 火车票车次详情查询
   * 
   * @param request - TrainNoInfoSearchRequest
   * @param headers - TrainNoInfoSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainNoInfoSearchResponse
   */
  async trainNoInfoSearchWithOptions(request: TrainNoInfoSearchRequest, headers: TrainNoInfoSearchHeaders, runtime: $Util.RuntimeOptions): Promise<TrainNoInfoSearchResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.arrLocation)) {
      body["arr_location"] = request.arrLocation;
    }

    if (!Util.isUnset(request.depDate)) {
      body["dep_date"] = request.depDate;
    }

    if (!Util.isUnset(request.depLocation)) {
      body["dep_location"] = request.depLocation;
    }

    if (!Util.isUnset(request.lineKey)) {
      body["line_key"] = request.lineKey;
    }

    if (!Util.isUnset(request.middleDate)) {
      body["middle_date"] = request.middleDate;
    }

    if (!Util.isUnset(request.middleStation)) {
      body["middle_station"] = request.middleStation;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.trainNo)) {
      body["train_no"] = request.trainNo;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainNoInfoSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/search/info`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainNoInfoSearchResponse>(await this.callApi(params, req, runtime), new TrainNoInfoSearchResponse({}));
  }

  /**
   * 火车票车次详情查询
   * 
   * @param request - TrainNoInfoSearchRequest
   * @returns TrainNoInfoSearchResponse
   */
  async trainNoInfoSearch(request: TrainNoInfoSearchRequest): Promise<TrainNoInfoSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainNoInfoSearchHeaders({ });
    return await this.trainNoInfoSearchWithOptions(request, headers, runtime);
  }

  /**
   * 火车票车次列表查询
   * 
   * @param tmpReq - TrainNoListSearchRequest
   * @param headers - TrainNoListSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainNoListSearchResponse
   */
  async trainNoListSearchWithOptions(tmpReq: TrainNoListSearchRequest, headers: TrainNoListSearchHeaders, runtime: $Util.RuntimeOptions): Promise<TrainNoListSearchResponse> {
    Util.validateModel(tmpReq);
    let request = new TrainNoListSearchShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.option)) {
      request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, "option", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.arrLocation)) {
      body["arr_location"] = request.arrLocation;
    }

    if (!Util.isUnset(request.depDate)) {
      body["dep_date"] = request.depDate;
    }

    if (!Util.isUnset(request.depLocation)) {
      body["dep_location"] = request.depLocation;
    }

    if (!Util.isUnset(request.optionShrink)) {
      body["option"] = request.optionShrink;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainNoListSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/search/list`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainNoListSearchResponse>(await this.callApi(params, req, runtime), new TrainNoListSearchResponse({}));
  }

  /**
   * 火车票车次列表查询
   * 
   * @param request - TrainNoListSearchRequest
   * @returns TrainNoListSearchResponse
   */
  async trainNoListSearch(request: TrainNoListSearchRequest): Promise<TrainNoListSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainNoListSearchHeaders({ });
    return await this.trainNoListSearchWithOptions(request, headers, runtime);
  }

  /**
   * 火车票订单取消
   * 
   * @param request - TrainOrderCancelRequest
   * @param headers - TrainOrderCancelHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderCancelResponse
   */
  async trainOrderCancelWithOptions(request: TrainOrderCancelRequest, headers: TrainOrderCancelHeaders, runtime: $Util.RuntimeOptions): Promise<TrainOrderCancelResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.changeOrderId)) {
      body["change_order_id"] = request.changeOrderId;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outChangeOrderId)) {
      body["out_change_order_id"] = request.outChangeOrderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderCancel",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/order/cancel`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderCancelResponse>(await this.callApi(params, req, runtime), new TrainOrderCancelResponse({}));
  }

  /**
   * 火车票订单取消
   * 
   * @param request - TrainOrderCancelRequest
   * @returns TrainOrderCancelResponse
   */
  async trainOrderCancel(request: TrainOrderCancelRequest): Promise<TrainOrderCancelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderCancelHeaders({ });
    return await this.trainOrderCancelWithOptions(request, headers, runtime);
  }

  /**
   * 火车票改签确认
   * 
   * @param request - TrainOrderChangeConfirmRequest
   * @param headers - TrainOrderChangeConfirmHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderChangeConfirmResponse
   */
  async trainOrderChangeConfirmWithOptions(request: TrainOrderChangeConfirmRequest, headers: TrainOrderChangeConfirmHeaders, runtime: $Util.RuntimeOptions): Promise<TrainOrderChangeConfirmResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.changeApplyId)) {
      body["change_apply_id"] = request.changeApplyId;
    }

    if (!Util.isUnset(request.changeSettleAmount)) {
      body["change_settle_amount"] = request.changeSettleAmount;
    }

    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outChangeApplyId)) {
      body["out_change_apply_id"] = request.outChangeApplyId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderChangeConfirm",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/change/confirm`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderChangeConfirmResponse>(await this.callApi(params, req, runtime), new TrainOrderChangeConfirmResponse({}));
  }

  /**
   * 火车票改签确认
   * 
   * @param request - TrainOrderChangeConfirmRequest
   * @returns TrainOrderChangeConfirmResponse
   */
  async trainOrderChangeConfirm(request: TrainOrderChangeConfirmRequest): Promise<TrainOrderChangeConfirmResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderChangeConfirmHeaders({ });
    return await this.trainOrderChangeConfirmWithOptions(request, headers, runtime);
  }

  /**
   * 火车票正向预订
   * 
   * @param tmpReq - TrainOrderCreateRequest
   * @param headers - TrainOrderCreateHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderCreateResponse
   */
  async trainOrderCreateWithOptions(tmpReq: TrainOrderCreateRequest, headers: TrainOrderCreateHeaders, runtime: $Util.RuntimeOptions): Promise<TrainOrderCreateResponse> {
    Util.validateModel(tmpReq);
    let request = new TrainOrderCreateShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.bookTrainInfos)) {
      request.bookTrainInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookTrainInfos, "book_train_infos", "json");
    }

    if (!Util.isUnset(tmpReq.businessInfo)) {
      request.businessInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.businessInfo, "business_info", "json");
    }

    if (!Util.isUnset(tmpReq.contactInfo)) {
      request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, "contact_info", "json");
    }

    if (!Util.isUnset(tmpReq.passengerOpenInfoS)) {
      request.passengerOpenInfoSShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerOpenInfoS, "passenger_open_info_s", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.acceptNoSeat)) {
      body["accept_no_seat"] = request.acceptNoSeat;
    }

    if (!Util.isUnset(request.bookTrainInfosShrink)) {
      body["book_train_infos"] = request.bookTrainInfosShrink;
    }

    if (!Util.isUnset(request.btripUserId)) {
      body["btrip_user_id"] = request.btripUserId;
    }

    if (!Util.isUnset(request.btripUserName)) {
      body["btrip_user_name"] = request.btripUserName;
    }

    if (!Util.isUnset(request.businessInfoShrink)) {
      body["business_info"] = request.businessInfoShrink;
    }

    if (!Util.isUnset(request.contactInfoShrink)) {
      body["contact_info"] = request.contactInfoShrink;
    }

    if (!Util.isUnset(request.forceMatch)) {
      body["force_match"] = request.forceMatch;
    }

    if (!Util.isUnset(request.isPayNow)) {
      body["is_pay_now"] = request.isPayNow;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.passengerOpenInfoSShrink)) {
      body["passenger_open_info_s"] = request.passengerOpenInfoSShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderCreate",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/order/create`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderCreateResponse>(await this.callApi(params, req, runtime), new TrainOrderCreateResponse({}));
  }

  /**
   * 火车票正向预订
   * 
   * @param request - TrainOrderCreateRequest
   * @returns TrainOrderCreateResponse
   */
  async trainOrderCreate(request: TrainOrderCreateRequest): Promise<TrainOrderCreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderCreateHeaders({ });
    return await this.trainOrderCreateWithOptions(request, headers, runtime);
  }

  /**
   * 火车票订单详情
   * 
   * @param request - TrainOrderDetailQueryRequest
   * @param headers - TrainOrderDetailQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderDetailQueryResponse
   */
  async trainOrderDetailQueryWithOptions(request: TrainOrderDetailQueryRequest, headers: TrainOrderDetailQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TrainOrderDetailQueryResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderDetailQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/order/query`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderDetailQueryResponse>(await this.callApi(params, req, runtime), new TrainOrderDetailQueryResponse({}));
  }

  /**
   * 火车票订单详情
   * 
   * @param request - TrainOrderDetailQueryRequest
   * @returns TrainOrderDetailQueryResponse
   */
  async trainOrderDetailQuery(request: TrainOrderDetailQueryRequest): Promise<TrainOrderDetailQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderDetailQueryHeaders({ });
    return await this.trainOrderDetailQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询火车票订单列表
   * 
   * @param request - TrainOrderListQueryRequest
   * @param headers - TrainOrderListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderListQueryResponse
   */
  async trainOrderListQueryWithOptions(request: TrainOrderListQueryRequest, headers: TrainOrderListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TrainOrderListQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.allApply)) {
      query["all_apply"] = request.allApply;
    }

    if (!Util.isUnset(request.applyId)) {
      query["apply_id"] = request.applyId;
    }

    if (!Util.isUnset(request.departId)) {
      query["depart_id"] = request.departId;
    }

    if (!Util.isUnset(request.endTime)) {
      query["end_time"] = request.endTime;
    }

    if (!Util.isUnset(request.page)) {
      query["page"] = request.page;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["start_time"] = request.startTime;
    }

    if (!Util.isUnset(request.thirdpartApplyId)) {
      query["thirdpart_apply_id"] = request.thirdpartApplyId;
    }

    if (!Util.isUnset(request.updateEndTime)) {
      query["update_end_time"] = request.updateEndTime;
    }

    if (!Util.isUnset(request.updateStartTime)) {
      query["update_start_time"] = request.updateStartTime;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/order-list`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderListQueryResponse>(await this.callApi(params, req, runtime), new TrainOrderListQueryResponse({}));
  }

  /**
   * 查询火车票订单列表
   * 
   * @param request - TrainOrderListQueryRequest
   * @returns TrainOrderListQueryResponse
   */
  async trainOrderListQuery(request: TrainOrderListQueryRequest): Promise<TrainOrderListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderListQueryHeaders({ });
    return await this.trainOrderListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 火车票订单支付
   * 
   * @param request - TrainOrderPayRequest
   * @param headers - TrainOrderPayHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderPayResponse
   */
  async trainOrderPayWithOptions(request: TrainOrderPayRequest, headers: TrainOrderPayHeaders, runtime: $Util.RuntimeOptions): Promise<TrainOrderPayResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      body["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.outOrderId)) {
      body["out_order_id"] = request.outOrderId;
    }

    if (!Util.isUnset(request.payAmount)) {
      body["pay_amount"] = request.payAmount;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderPay",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/order/pay`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderPayResponse>(await this.callApi(params, req, runtime), new TrainOrderPayResponse({}));
  }

  /**
   * 火车票订单支付
   * 
   * @param request - TrainOrderPayRequest
   * @returns TrainOrderPayResponse
   */
  async trainOrderPay(request: TrainOrderPayRequest): Promise<TrainOrderPayResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderPayHeaders({ });
    return await this.trainOrderPayWithOptions(request, headers, runtime);
  }

  /**
   * 查询火车票订单详情（含票信息）
   * 
   * @param request - TrainOrderQueryRequest
   * @param headers - TrainOrderQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderQueryResponse
   */
  async trainOrderQueryWithOptions(request: TrainOrderQueryRequest, headers: TrainOrderQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TrainOrderQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/order`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderQueryResponse>(await this.callApi(params, req, runtime), new TrainOrderQueryResponse({}));
  }

  /**
   * 查询火车票订单详情（含票信息）
   * 
   * @param request - TrainOrderQueryRequest
   * @returns TrainOrderQueryResponse
   */
  async trainOrderQuery(request: TrainOrderQueryRequest): Promise<TrainOrderQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderQueryHeaders({ });
    return await this.trainOrderQueryWithOptions(request, headers, runtime);
  }

  /**
   * 火车票订单查询V2
   * 
   * @param request - TrainOrderQueryV2Request
   * @param headers - TrainOrderQueryV2Headers
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainOrderQueryV2Response
   */
  async trainOrderQueryV2WithOptions(request: TrainOrderQueryV2Request, headers: TrainOrderQueryV2Headers, runtime: $Util.RuntimeOptions): Promise<TrainOrderQueryV2Response> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.orderId)) {
      query["order_id"] = request.orderId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TrainOrderQueryV2",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v2/order`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TrainOrderQueryV2Response>(await this.callApi(params, req, runtime), new TrainOrderQueryV2Response({}));
  }

  /**
   * 火车票订单查询V2
   * 
   * @param request - TrainOrderQueryV2Request
   * @returns TrainOrderQueryV2Response
   */
  async trainOrderQueryV2(request: TrainOrderQueryV2Request): Promise<TrainOrderQueryV2Response> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainOrderQueryV2Headers({ });
    return await this.trainOrderQueryV2WithOptions(request, headers, runtime);
  }

  /**
   * 查询火车站数据
   * 
   * @param request - TrainStationSearchRequest
   * @param headers - TrainStationSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainStationSearchResponse
   */
  async trainStationSearchWithOptions(request: TrainStationSearchRequest, headers: TrainStationSearchHeaders, runtime: $Util.RuntimeOptions): Promise<TrainStationSearchResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.keyword)) {
      query["keyword"] = request.keyword;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TrainStationSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/city/v1/train`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TrainStationSearchResponse>(await this.callApi(params, req, runtime), new TrainStationSearchResponse({}));
  }

  /**
   * 查询火车站数据
   * 
   * @param request - TrainStationSearchRequest
   * @returns TrainStationSearchResponse
   */
  async trainStationSearch(request: TrainStationSearchRequest): Promise<TrainStationSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainStationSearchHeaders({ });
    return await this.trainStationSearchWithOptions(request, headers, runtime);
  }

  /**
   * 火车票经停站查询
   * 
   * @param request - TrainStopoverSearchRequest
   * @param headers - TrainStopoverSearchHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainStopoverSearchResponse
   */
  async trainStopoverSearchWithOptions(request: TrainStopoverSearchRequest, headers: TrainStopoverSearchHeaders, runtime: $Util.RuntimeOptions): Promise<TrainStopoverSearchResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.arrStation)) {
      body["arr_station"] = request.arrStation;
    }

    if (!Util.isUnset(request.depStation)) {
      body["dep_station"] = request.depStation;
    }

    if (!Util.isUnset(request.trainDate)) {
      body["train_date"] = request.trainDate;
    }

    if (!Util.isUnset(request.trainNo)) {
      body["train_no"] = request.trainNo;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "TrainStopoverSearch",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/train/v1/search/stopover`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TrainStopoverSearchResponse>(await this.callApi(params, req, runtime), new TrainStopoverSearchResponse({}));
  }

  /**
   * 火车票经停站查询
   * 
   * @param request - TrainStopoverSearchRequest
   * @returns TrainStopoverSearchResponse
   */
  async trainStopoverSearch(request: TrainStopoverSearchRequest): Promise<TrainStopoverSearchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainStopoverSearchHeaders({ });
    return await this.trainStopoverSearchWithOptions(request, headers, runtime);
  }

  /**
   * 查询火车票凭证扫描件
   * 
   * @param request - TrainTicketScanQueryRequest
   * @param headers - TrainTicketScanQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TrainTicketScanQueryResponse
   */
  async trainTicketScanQueryWithOptions(request: TrainTicketScanQueryRequest, headers: TrainTicketScanQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TrainTicketScanQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.billDate)) {
      query["bill_date"] = request.billDate;
    }

    if (!Util.isUnset(request.billId)) {
      query["bill_id"] = request.billId;
    }

    if (!Util.isUnset(request.invoiceSubTaskId)) {
      query["invoice_sub_task_id"] = request.invoiceSubTaskId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.serialNumber)) {
      query["serial_number"] = request.serialNumber;
    }

    if (!Util.isUnset(request.ticketNo)) {
      query["ticket_no"] = request.ticketNo;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TrainTicketScanQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/scan/v1/train-ticket`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TrainTicketScanQueryResponse>(await this.callApi(params, req, runtime), new TrainTicketScanQueryResponse({}));
  }

  /**
   * 查询火车票凭证扫描件
   * 
   * @param request - TrainTicketScanQueryRequest
   * @returns TrainTicketScanQueryResponse
   */
  async trainTicketScanQuery(request: TrainTicketScanQueryRequest): Promise<TrainTicketScanQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TrainTicketScanQueryHeaders({ });
    return await this.trainTicketScanQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询差标列表
   * 
   * @param request - TravelStandardListQueryRequest
   * @param headers - TravelStandardListQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TravelStandardListQueryResponse
   */
  async travelStandardListQueryWithOptions(request: TravelStandardListQueryRequest, headers: TravelStandardListQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TravelStandardListQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.fromGroup)) {
      query["from_group"] = request.fromGroup;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["rule_name"] = request.ruleName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TravelStandardListQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/travel-manage/v1/standards/list`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TravelStandardListQueryResponse>(await this.callApi(params, req, runtime), new TravelStandardListQueryResponse({}));
  }

  /**
   * 查询差标列表
   * 
   * @param request - TravelStandardListQueryRequest
   * @returns TravelStandardListQueryResponse
   */
  async travelStandardListQuery(request: TravelStandardListQueryRequest): Promise<TravelStandardListQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TravelStandardListQueryHeaders({ });
    return await this.travelStandardListQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询差标详情
   * 
   * @param tmpReq - TravelStandardQueryRequest
   * @param headers - TravelStandardQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TravelStandardQueryResponse
   */
  async travelStandardQueryWithOptions(tmpReq: TravelStandardQueryRequest, headers: TravelStandardQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TravelStandardQueryResponse> {
    Util.validateModel(tmpReq);
    let request = new TravelStandardQueryShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.serviceTypeList)) {
      request.serviceTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serviceTypeList, "service_type_list", "json");
    }

    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.fromGroup)) {
      query["from_group"] = request.fromGroup;
    }

    if (!Util.isUnset(request.ruleCode)) {
      query["rule_code"] = request.ruleCode;
    }

    if (!Util.isUnset(request.serviceTypeListShrink)) {
      query["service_type_list"] = request.serviceTypeListShrink;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TravelStandardQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/travel-manage/v1/standards/detail`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TravelStandardQueryResponse>(await this.callApi(params, req, runtime), new TravelStandardQueryResponse({}));
  }

  /**
   * 查询差标详情
   * 
   * @param request - TravelStandardQueryRequest
   * @returns TravelStandardQueryResponse
   */
  async travelStandardQuery(request: TravelStandardQueryRequest): Promise<TravelStandardQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TravelStandardQueryHeaders({ });
    return await this.travelStandardQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询业务流程
   * 
   * @param request - TripBusinessInstanceQueryRequest
   * @param headers - TripBusinessInstanceQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TripBusinessInstanceQueryResponse
   */
  async tripBusinessInstanceQueryWithOptions(request: TripBusinessInstanceQueryRequest, headers: TripBusinessInstanceQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TripBusinessInstanceQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.businessInstanceId)) {
      query["business_instance_id"] = request.businessInstanceId;
    }

    if (!Util.isUnset(request.thirdBusinessId)) {
      query["third_business_id"] = request.thirdBusinessId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      query["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TripBusinessInstanceQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/business`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TripBusinessInstanceQueryResponse>(await this.callApi(params, req, runtime), new TripBusinessInstanceQueryResponse({}));
  }

  /**
   * 查询业务流程
   * 
   * @param request - TripBusinessInstanceQueryRequest
   * @returns TripBusinessInstanceQueryResponse
   */
  async tripBusinessInstanceQuery(request: TripBusinessInstanceQueryRequest): Promise<TripBusinessInstanceQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TripBusinessInstanceQueryHeaders({ });
    return await this.tripBusinessInstanceQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询抄送信息
   * 
   * @param request - TripCCInfoQueryRequest
   * @param headers - TripCCInfoQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TripCCInfoQueryResponse
   */
  async tripCCInfoQueryWithOptions(request: TripCCInfoQueryRequest, headers: TripCCInfoQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TripCCInfoQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.businessInstanceId)) {
      query["business_instance_id"] = request.businessInstanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["node_id"] = request.nodeId;
    }

    if (!Util.isUnset(request.thirdBusinessId)) {
      query["third_business_id"] = request.thirdBusinessId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TripCCInfoQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/cc`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TripCCInfoQueryResponse>(await this.callApi(params, req, runtime), new TripCCInfoQueryResponse({}));
  }

  /**
   * 查询抄送信息
   * 
   * @param request - TripCCInfoQueryRequest
   * @returns TripCCInfoQueryResponse
   */
  async tripCCInfoQuery(request: TripCCInfoQueryRequest): Promise<TripCCInfoQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TripCCInfoQueryHeaders({ });
    return await this.tripCCInfoQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询审批任务列表
   * 
   * @param request - TripTaskQueryRequest
   * @param headers - TripTaskQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TripTaskQueryResponse
   */
  async tripTaskQueryWithOptions(request: TripTaskQueryRequest, headers: TripTaskQueryHeaders, runtime: $Util.RuntimeOptions): Promise<TripTaskQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.businessInstanceId)) {
      query["business_instance_id"] = request.businessInstanceId;
    }

    if (!Util.isUnset(request.thirdBusinessId)) {
      query["third_business_id"] = request.thirdBusinessId;
    }

    if (!Util.isUnset(request.userId)) {
      query["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userName)) {
      query["user_name"] = request.userName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TripTaskQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/apply/v1/tasks`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<TripTaskQueryResponse>(await this.callApi(params, req, runtime), new TripTaskQueryResponse({}));
  }

  /**
   * 查询审批任务列表
   * 
   * @param request - TripTaskQueryRequest
   * @returns TripTaskQueryResponse
   */
  async tripTaskQuery(request: TripTaskQueryRequest): Promise<TripTaskQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new TripTaskQueryHeaders({ });
    return await this.tripTaskQueryWithOptions(request, headers, runtime);
  }

  /**
   * 更新企业自定义角色
   * 
   * @param request - UpdateCustomRoleRequest
   * @param headers - UpdateCustomRoleHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateCustomRoleResponse
   */
  async updateCustomRoleWithOptions(request: UpdateCustomRoleRequest, headers: UpdateCustomRoleHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCustomRoleResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.roleId)) {
      body["role_id"] = request.roleId;
    }

    if (!Util.isUnset(request.roleName)) {
      body["role_name"] = request.roleName;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "UpdateCustomRole",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/role/v1/customRoles/update`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateCustomRoleResponse>(await this.callApi(params, req, runtime), new UpdateCustomRoleResponse({}));
  }

  /**
   * 更新企业自定义角色
   * 
   * @param request - UpdateCustomRoleRequest
   * @returns UpdateCustomRoleResponse
   */
  async updateCustomRole(request: UpdateCustomRoleRequest): Promise<UpdateCustomRoleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new UpdateCustomRoleHeaders({ });
    return await this.updateCustomRoleWithOptions(request, headers, runtime);
  }

  /**
   * 修改企业部门
   * 
   * @param tmpReq - UpdateDepartmentRequest
   * @param headers - UpdateDepartmentHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateDepartmentResponse
   */
  async updateDepartmentWithOptions(tmpReq: UpdateDepartmentRequest, headers: UpdateDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateDepartmentResponse> {
    Util.validateModel(tmpReq);
    let request = new UpdateDepartmentShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.managerEmployeeIdList)) {
      request.managerEmployeeIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managerEmployeeIdList, "manager_employee_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.deptName)) {
      body["dept_name"] = request.deptName;
    }

    if (!Util.isUnset(request.managerEmployeeIdListShrink)) {
      body["manager_employee_id_list"] = request.managerEmployeeIdListShrink;
    }

    if (!Util.isUnset(request.outDeptId)) {
      body["out_dept_id"] = request.outDeptId;
    }

    if (!Util.isUnset(request.outDeptPid)) {
      body["out_dept_pid"] = request.outDeptPid;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "UpdateDepartment",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/department/v2/update`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateDepartmentResponse>(await this.callApi(params, req, runtime), new UpdateDepartmentResponse({}));
  }

  /**
   * 修改企业部门
   * 
   * @param request - UpdateDepartmentRequest
   * @returns UpdateDepartmentResponse
   */
  async updateDepartment(request: UpdateDepartmentRequest): Promise<UpdateDepartmentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new UpdateDepartmentHeaders({ });
    return await this.updateDepartmentWithOptions(request, headers, runtime);
  }

  /**
   * 更新员工信息
   * 
   * @param tmpReq - UpdateEmployeeRequest
   * @param headers - UpdateEmployeeHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateEmployeeResponse
   */
  async updateEmployeeWithOptions(tmpReq: UpdateEmployeeRequest, headers: UpdateEmployeeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateEmployeeResponse> {
    Util.validateModel(tmpReq);
    let request = new UpdateEmployeeShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!Util.isUnset(tmpReq.baseCityCodeList)) {
      request.baseCityCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.baseCityCodeList, "base_city_code_list", "json");
    }

    if (!Util.isUnset(tmpReq.certList)) {
      request.certListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certList, "cert_list", "json");
    }

    if (!Util.isUnset(tmpReq.customRoleCodeList)) {
      request.customRoleCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customRoleCodeList, "custom_role_code_list", "json");
    }

    if (!Util.isUnset(tmpReq.outDeptIdList)) {
      request.outDeptIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outDeptIdList, "out_dept_id_list", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.attribute)) {
      body["attribute"] = request.attribute;
    }

    if (!Util.isUnset(request.avatar)) {
      body["avatar"] = request.avatar;
    }

    if (!Util.isUnset(request.baseCityCodeListShrink)) {
      body["base_city_code_list"] = request.baseCityCodeListShrink;
    }

    if (!Util.isUnset(request.birthday)) {
      body["birthday"] = request.birthday;
    }

    if (!Util.isUnset(request.certListShrink)) {
      body["cert_list"] = request.certListShrink;
    }

    if (!Util.isUnset(request.customRoleCodeListShrink)) {
      body["custom_role_code_list"] = request.customRoleCodeListShrink;
    }

    if (!Util.isUnset(request.email)) {
      body["email"] = request.email;
    }

    if (!Util.isUnset(request.gender)) {
      body["gender"] = request.gender;
    }

    if (!Util.isUnset(request.isAdmin)) {
      body["is_admin"] = request.isAdmin;
    }

    if (!Util.isUnset(request.isBoss)) {
      body["is_boss"] = request.isBoss;
    }

    if (!Util.isUnset(request.isDeptLeader)) {
      body["is_dept_leader"] = request.isDeptLeader;
    }

    if (!Util.isUnset(request.jobNo)) {
      body["job_no"] = request.jobNo;
    }

    if (!Util.isUnset(request.managerUserId)) {
      body["manager_user_id"] = request.managerUserId;
    }

    if (!Util.isUnset(request.outDeptIdListShrink)) {
      body["out_dept_id_list"] = request.outDeptIdListShrink;
    }

    if (!Util.isUnset(request.phone)) {
      body["phone"] = request.phone;
    }

    if (!Util.isUnset(request.positionLevel)) {
      body["position_level"] = request.positionLevel;
    }

    if (!Util.isUnset(request.realName)) {
      body["real_name"] = request.realName;
    }

    if (!Util.isUnset(request.realNameEn)) {
      body["real_name_en"] = request.realNameEn;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    if (!Util.isUnset(request.userNick)) {
      body["user_nick"] = request.userNick;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "UpdateEmployee",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/employee/v2/update`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateEmployeeResponse>(await this.callApi(params, req, runtime), new UpdateEmployeeResponse({}));
  }

  /**
   * 更新员工信息
   * 
   * @param request - UpdateEmployeeRequest
   * @returns UpdateEmployeeResponse
   */
  async updateEmployee(request: UpdateEmployeeRequest): Promise<UpdateEmployeeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new UpdateEmployeeHeaders({ });
    return await this.updateEmployeeWithOptions(request, headers, runtime);
  }

  /**
   * 更新员工在职状态
   * 
   * @param request - UpdateEmployeeLeaveStatusRequest
   * @param headers - UpdateEmployeeLeaveStatusHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateEmployeeLeaveStatusResponse
   */
  async updateEmployeeLeaveStatusWithOptions(request: UpdateEmployeeLeaveStatusRequest, headers: UpdateEmployeeLeaveStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateEmployeeLeaveStatusResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.isLeave)) {
      body["is_leave"] = request.isLeave;
    }

    if (!Util.isUnset(request.userId)) {
      body["user_id"] = request.userId;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
      realHeaders["x-acs-btrip-corp-token"] = Util.toJSONString(headers.xAcsBtripCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "UpdateEmployeeLeaveStatus",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/employee/v2/updateLeaveStatus`,
      method: "POST",
      authType: "AK",
      style: "ROA",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateEmployeeLeaveStatusResponse>(await this.callApi(params, req, runtime), new UpdateEmployeeLeaveStatusResponse({}));
  }

  /**
   * 更新员工在职状态
   * 
   * @param request - UpdateEmployeeLeaveStatusRequest
   * @returns UpdateEmployeeLeaveStatusResponse
   */
  async updateEmployeeLeaveStatus(request: UpdateEmployeeLeaveStatusRequest): Promise<UpdateEmployeeLeaveStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new UpdateEmployeeLeaveStatusHeaders({ });
    return await this.updateEmployeeLeaveStatusWithOptions(request, headers, runtime);
  }

  /**
   * 人员查询
   * 
   * @param request - UserQueryRequest
   * @param headers - UserQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UserQueryResponse
   */
  async userQueryWithOptions(request: UserQueryRequest, headers: UserQueryHeaders, runtime: $Util.RuntimeOptions): Promise<UserQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.modifiedTimeGreaterOrEqualThan)) {
      query["modified_time_greater_or_equal_than"] = request.modifiedTimeGreaterOrEqualThan;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    if (!Util.isUnset(request.pageToken)) {
      query["page_token"] = request.pageToken;
    }

    if (!Util.isUnset(request.thirdPartJobNo)) {
      query["third_part_job_no"] = request.thirdPartJobNo;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UserQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/user/v1/user`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<UserQueryResponse>(await this.callApi(params, req, runtime), new UserQueryResponse({}));
  }

  /**
   * 人员查询
   * 
   * @param request - UserQueryRequest
   * @returns UserQueryResponse
   */
  async userQuery(request: UserQueryRequest): Promise<UserQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new UserQueryHeaders({ });
    return await this.userQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询增值税发票扫描件
   * 
   * @param request - VatInvoiceScanQueryRequest
   * @param headers - VatInvoiceScanQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns VatInvoiceScanQueryResponse
   */
  async vatInvoiceScanQueryWithOptions(request: VatInvoiceScanQueryRequest, headers: VatInvoiceScanQueryHeaders, runtime: $Util.RuntimeOptions): Promise<VatInvoiceScanQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.billDate)) {
      query["bill_date"] = request.billDate;
    }

    if (!Util.isUnset(request.billId)) {
      query["bill_id"] = request.billId;
    }

    if (!Util.isUnset(request.invoiceSubTaskId)) {
      query["invoice_sub_task_id"] = request.invoiceSubTaskId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["page_no"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["page_size"] = request.pageSize;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "VatInvoiceScanQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/scan/v1/vat-invoice`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<VatInvoiceScanQueryResponse>(await this.callApi(params, req, runtime), new VatInvoiceScanQueryResponse({}));
  }

  /**
   * 查询增值税发票扫描件
   * 
   * @param request - VatInvoiceScanQueryRequest
   * @returns VatInvoiceScanQueryResponse
   */
  async vatInvoiceScanQuery(request: VatInvoiceScanQueryRequest): Promise<VatInvoiceScanQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new VatInvoiceScanQueryHeaders({ });
    return await this.vatInvoiceScanQueryWithOptions(request, headers, runtime);
  }

  /**
   * 查询账期待申请的发票数据
   * 
   * @param request - WaitApplyInvoiceTaskDetailQueryRequest
   * @param headers - WaitApplyInvoiceTaskDetailQueryHeaders
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns WaitApplyInvoiceTaskDetailQueryResponse
   */
  async waitApplyInvoiceTaskDetailQueryWithOptions(request: WaitApplyInvoiceTaskDetailQueryRequest, headers: WaitApplyInvoiceTaskDetailQueryHeaders, runtime: $Util.RuntimeOptions): Promise<WaitApplyInvoiceTaskDetailQueryResponse> {
    Util.validateModel(request);
    let query : {[key: string ]: any} = { };
    if (!Util.isUnset(request.billDate)) {
      query["bill_date"] = request.billDate;
    }

    let realHeaders : {[key: string ]: string} = { };
    if (!Util.isUnset(headers.commonHeaders)) {
      realHeaders = headers.commonHeaders;
    }

    if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
      realHeaders["x-acs-btrip-so-corp-token"] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
    }

    let req = new $OpenApi.OpenApiRequest({
      headers: realHeaders,
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "WaitApplyInvoiceTaskDetailQuery",
      version: "2022-05-20",
      protocol: "HTTPS",
      pathname: `/invoice/v1/wait-apply-task`,
      method: "GET",
      authType: "AK",
      style: "ROA",
      reqBodyType: "json",
      bodyType: "json",
    });
    return $tea.cast<WaitApplyInvoiceTaskDetailQueryResponse>(await this.callApi(params, req, runtime), new WaitApplyInvoiceTaskDetailQueryResponse({}));
  }

  /**
   * 查询账期待申请的发票数据
   * 
   * @param request - WaitApplyInvoiceTaskDetailQueryRequest
   * @returns WaitApplyInvoiceTaskDetailQueryResponse
   */
  async waitApplyInvoiceTaskDetailQuery(request: WaitApplyInvoiceTaskDetailQueryRequest): Promise<WaitApplyInvoiceTaskDetailQueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers = new WaitApplyInvoiceTaskDetailQueryHeaders({ });
    return await this.waitApplyInvoiceTaskDetailQueryWithOptions(request, headers, runtime);
  }

}
