// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { DescribeApplicationInstancesResponseBodyDataInstancesSidecarContainersStatus } from "./DescribeApplicationInstancesResponseBodyDataInstancesSidecarContainersStatus";


export class DescribeApplicationInstancesResponseBodyDataInstances extends $dara.Model {
  /**
   * @remarks
   * The start time of the instance creation process. Unit: milliseconds.
   * 
   * @example
   * 1558442609000
   */
  createTimeStamp?: number;
  debugStatus?: boolean;
  /**
   * @remarks
   * The elastic IP address (EIP).
   * 
   * @example
   * 8.129.XX.XXX
   */
  eip?: string;
  /**
   * @remarks
   * The end time of the instance creation process. Unit: milliseconds.
   * 
   * @example
   * 1642757283000
   */
  finishTimeStamp?: number;
  /**
   * @remarks
   * The ID of the group to which the instance belongs.
   * 
   * @example
   * b2a8a925-477a-4ed7-b825-d5e22500****
   */
  groupId?: string;
  /**
   * @remarks
   * The address of the repository.
   * 
   * >  If you deploy the application by using a JAR or WAR package, the image generated by SAE is not available for download.
   * 
   * @example
   * registry-vpc.cn-beijing.aliyuncs.com/sae-demo-image/cartservice:1.0
   */
  imageUrl?: string;
  /**
   * @remarks
   * The internal IP address of the instance.
   * 
   * @example
   * 192.168.X.X
   */
  instanceContainerIp?: string;
  /**
   * @remarks
   * The number of times that the instance restarted.
   * 
   * @example
   * 0
   */
  instanceContainerRestarts?: number;
  /**
   * @remarks
   * The state of the instance. Valid values:
   * 
   * *   **Error**: An error occurred during the instance startup.
   * *   **CrashLoopBackOff**: The container failed to start. An error occurred during the startup process and persisted after the restart.
   * *   **ErrImagePull**: An error occurred while the container image was being pulled from the instance.
   * *   **ImagePullBackOff**: The container image could not be obtained.
   * *   **Pending**: The instance is waiting to be scheduled.
   * *   **Unknown**: An unknown exception occurred.
   * *   **Terminating**: The instance creation process is being terminated.
   * *   **NotFound**: The instance cannot be found.
   * *   **PodInitializing**: The instance is being initialized.
   * *   **Init:0/1**: The instance is initialized.
   * *   **Running**: The instance is running.
   * 
   * @example
   * Running
   */
  instanceContainerStatus?: string;
  /**
   * @remarks
   * The configurations of health checks. Valid values:
   * 
   * *   **WithoutHealthCheckConfig**: Liveness and readiness checks are not configured.
   * *   **WithoutLivenessConfig**: The liveness check is not configured.
   * *   **WithoutReadinessConfig**: The readiness check is not configured.
   * *   **NotCheckedYet**: The health checks are not performed or are in progress.
   * *   **LivenessUnhealthy**: The instance failed the liveness check.
   * *   **ReadinessUnhealthy**: The instance failed the readiness check.
   * *   **Unhealthy**: The instance failed both liveness and readiness checks.
   * *   **Healthy**: The instance passed both liveness and readiness checks.
   * 
   * @example
   * WithoutHealthCheckConfig
   */
  instanceHealthStatus?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * b2a8a925-477a-4ed7-b825-d5e22500****
   */
  instanceId?: string;
  mainContainerStatus?: string;
  /**
   * @remarks
   * The version of the package.
   * 
   * @example
   * 1609939496200
   */
  packageVersion?: string;
  sidecarContainersStatus?: DescribeApplicationInstancesResponseBodyDataInstancesSidecarContainersStatus[];
  timestamp?: number;
  unhealthyMessage?: string;
  /**
   * @remarks
   * The ID of the zone where the instance is deployed.
   * 
   * @example
   * vsw-***
   */
  vSwitchId?: string;
  static names(): { [key: string]: string } {
    return {
      createTimeStamp: 'CreateTimeStamp',
      debugStatus: 'DebugStatus',
      eip: 'Eip',
      finishTimeStamp: 'FinishTimeStamp',
      groupId: 'GroupId',
      imageUrl: 'ImageUrl',
      instanceContainerIp: 'InstanceContainerIp',
      instanceContainerRestarts: 'InstanceContainerRestarts',
      instanceContainerStatus: 'InstanceContainerStatus',
      instanceHealthStatus: 'InstanceHealthStatus',
      instanceId: 'InstanceId',
      mainContainerStatus: 'MainContainerStatus',
      packageVersion: 'PackageVersion',
      sidecarContainersStatus: 'SidecarContainersStatus',
      timestamp: 'Timestamp',
      unhealthyMessage: 'UnhealthyMessage',
      vSwitchId: 'VSwitchId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTimeStamp: 'number',
      debugStatus: 'boolean',
      eip: 'string',
      finishTimeStamp: 'number',
      groupId: 'string',
      imageUrl: 'string',
      instanceContainerIp: 'string',
      instanceContainerRestarts: 'number',
      instanceContainerStatus: 'string',
      instanceHealthStatus: 'string',
      instanceId: 'string',
      mainContainerStatus: 'string',
      packageVersion: 'string',
      sidecarContainersStatus: { 'type': 'array', 'itemType': DescribeApplicationInstancesResponseBodyDataInstancesSidecarContainersStatus },
      timestamp: 'number',
      unhealthyMessage: 'string',
      vSwitchId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.sidecarContainersStatus)) {
      $dara.Model.validateArray(this.sidecarContainersStatus);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

