// This file is auto-generated, don't edit it
/**
 */
import Util, * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import OpenApiUtil from '@alicloud/openapi-util';
import EndpointUtil from '@alicloud/endpoint-util';
import * as $tea from '@alicloud/tea-typescript';

export class DataResultValue extends $tea.Model {
  sqlId?: string;
  instanceId?: string;
  count?: number;
  static names(): { [key: string]: string } {
    return {
      sqlId: 'sqlId',
      instanceId: 'instanceId',
      count: 'count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sqlId: 'string',
      instanceId: 'string',
      count: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DataSessionStatClientStatsValue extends $tea.Model {
  /**
   * @remarks
   * The number of clients whose IP addresses are active.
   * 
   * @example
   * 0
   */
  activeCount?: number;
  /**
   * @remarks
   * The total number of IP addresses of clients.
   * 
   * @example
   * 11
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      activeCount: 'ActiveCount',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activeCount: 'number',
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DataSessionStatDbStatsValue extends $tea.Model {
  /**
   * @remarks
   * The number of active namespaces.
   * 
   * @example
   * 0
   */
  activeCount?: number;
  /**
   * @remarks
   * The total number of namespaces.
   * 
   * @example
   * 11
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      activeCount: 'ActiveCount',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activeCount: 'number',
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DataValue extends $tea.Model {
  /**
   * @remarks
   * The timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1681975870000
   */
  timestamp?: string;
  /**
   * @remarks
   * The value of the metric.
   * 
   * @example
   * 478.28
   */
  value?: any;
  static names(): { [key: string]: string } {
    return {
      timestamp: 'Timestamp',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      timestamp: 'string',
      value: 'any',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddHDMInstanceRequest extends $tea.Model {
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PostgreSQL**
   * *   **SQLServer**
   * *   **PolarDBMySQL**
   * *   **PolarDBPostgreSQL**
   * *   **Redis**
   * *   **MongoDB**
   * *   **PolarDBOracle**
   * *   **PolarDBX**
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  flushAccount?: string;
  /**
   * @remarks
   * The name of the instance.
   * 
   * @example
   * yuecq--test****
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The type of the instance on which the database is deployed. Valid values:
   * 
   * *   **RDS**: an Alibaba Cloud database instance.
   * *   **ECS**: an Elastic Compute Service (ECS) instance on which a self-managed database is deployed.
   * *   **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
   * 
   * >  IDC refers to your data center.
   * 
   * This parameter is required.
   * 
   * @example
   * ECS
   */
  instanceArea?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The endpoint that is used to access the instance over internal networks.
   * 
   * @example
   * rm-2ze1jdv45i7l6****.mysql.rds.aliyuncs.com
   */
  ip?: string;
  /**
   * @remarks
   * The network type of the instance.
   * 
   * @example
   * VPC
   */
  networkType?: string;
  /**
   * @remarks
   * The password for the username.
   * 
   * @example
   * 122****
   */
  password?: string;
  /**
   * @remarks
   * The port that is used to access the instance over internal networks.
   * 
   * @example
   * 3306
   */
  port?: string;
  /**
   * @remarks
   * The ID of the region in which the instance resides.
   * 
   * @example
   * cn-hangzhou
   */
  region?: string;
  /**
   * @remarks
   * The username that is used to log on to the database.
   * 
   * @example
   * test****
   */
  username?: string;
  /**
   * @remarks
   * The virtual private cloud (VPC) ID.
   * 
   * @example
   * vpc-m5e666n89m2bx8jar****
   */
  vpcId?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  context?: string;
  static names(): { [key: string]: string } {
    return {
      engine: 'Engine',
      flushAccount: 'FlushAccount',
      instanceAlias: 'InstanceAlias',
      instanceArea: 'InstanceArea',
      instanceId: 'InstanceId',
      ip: 'Ip',
      networkType: 'NetworkType',
      password: 'Password',
      port: 'Port',
      region: 'Region',
      username: 'Username',
      vpcId: 'VpcId',
      context: '__context',
    };
  }

  static types(): { [key: string]: any } {
    return {
      engine: 'string',
      flushAccount: 'string',
      instanceAlias: 'string',
      instanceArea: 'string',
      instanceId: 'string',
      ip: 'string',
      networkType: 'string',
      password: 'string',
      port: 'string',
      region: 'string',
      username: 'string',
      vpcId: 'string',
      context: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddHDMInstanceResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: AddHDMInstanceResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: AddHDMInstanceResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddHDMInstanceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddHDMInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddHDMInstanceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCacheAnalysisJobRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the backup file. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/61081.html) operation to query the ID.
   * 
   * *   If you need to specify multiple backup file IDs, separate them with commas (,). For example, you can set this parameter to `12345,67890`.
   * *   If you do not specify this parameter, the system automatically backs up the task and performs cache analysis on the backup file.
   * 
   * @example
   * 12345
   */
  backupSetId?: string;
  /**
   * @remarks
   * The ID of the ApsaraDB for Redis instance.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the data node on the instance. You can specify this parameter to query the monitoring information about the specified node.
   * 
   * >  If you specify the BackupSetId parameter, the system ignores the NodeId parameter. You can call the [DescribeLogicInstanceTopology](https://help.aliyun.com/document_detail/94665.html) operation to query the node ID.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The delimiters used to identify the prefixes of keys. You do not need to specify this parameter if one or more of the following default delimiters are used: `: ; , _ - + @ = | #`
   * 
   * @example
   * &
   */
  separators?: string;
  static names(): { [key: string]: string } {
    return {
      backupSetId: 'BackupSetId',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      separators: 'Separators',
    };
  }

  static types(): { [key: string]: any } {
    return {
      backupSetId: 'string',
      instanceId: 'string',
      nodeId: 'string',
      separators: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCacheAnalysisJobResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: CreateCacheAnalysisJobResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CreateCacheAnalysisJobResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCacheAnalysisJobResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCacheAnalysisJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCacheAnalysisJobResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudBenchTasksRequest extends $tea.Model {
  /**
   * @remarks
   * The total number of stress testing tasks that you want to create. Valid values: **0** to **30**. Default value: **1**.
   * 
   * @example
   * 1
   */
  amount?: string;
  /**
   * @remarks
   * The ID of the backup set. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/26273.html) operation to query the ID of the backup set.
   * 
   * @example
   * 229132
   */
  backupId?: string;
  /**
   * @remarks
   * The time when the backup starts. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
   * 
   * @example
   * 2021-04-23T13:22:14Z
   */
  backupTime?: string;
  /**
   * @remarks
   * The type of the stress testing client. Valid values:
   * 
   * *   **ECS**: indicates that you must create the [DBGateway](https://help.aliyun.com/document_detail/64905.html).
   * *   **DAS_ECS**: indicates that DAS automatically purchases and deploys an Elastic Compute Service (ECS) instance for stress testing.
   * 
   * This parameter is required.
   * 
   * @example
   * ECS
   */
  clientType?: string;
  /**
   * @remarks
   * The description of the stress testing task.
   * 
   * This parameter is required.
   * 
   * @example
   * test-das-bench-0501
   * 
   * **if can be null:**
   * false
   */
  description?: string;
  /**
   * @remarks
   * The endpoint of the destination instance. The specified endpoint must be the endpoint of an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance.
   * 
   * >  This parameter takes effect only if you set **DstType** to **ConnectionString**.
   * 
   * @example
   * rm-de21209****.mysql.rds.aliyuncs.com
   */
  dstConnectionString?: string;
  /**
   * @remarks
   * The ID of the destination instance. The instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance. You can call the [GetInstanceInspections](https://help.aliyun.com/document_detail/202857.html) operation to query the ID.
   * 
   * >  This parameter must be specified if you set **DstType** to **Instance**.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  dstInstanceId?: string;
  /**
   * @remarks
   * The port number of the instance that you want to access.
   * 
   * >  This parameter takes effect only if you set **DstType** to **ConnectionString**.
   * 
   * @example
   * 3306
   */
  dstPort?: string;
  /**
   * @remarks
   * The name of the privileged account for the destination instance.
   * 
   * @example
   * root
   */
  dstSuperAccount?: string;
  /**
   * @remarks
   * The password of the privileged account for the destination instance.
   * 
   * @example
   * test123
   */
  dstSuperPassword?: string;
  /**
   * @remarks
   * The type of the identifier that is used to indicate the destination instance. Valid values:
   * 
   * *   **Instance**: the instance ID. This is the default value.
   * *   **ConnectionString**: the endpoint of the instance.
   * 
   * @example
   * Instance
   */
  dstType?: string;
  /**
   * @remarks
   * The specification of the Data Transmission Service (DTS) migration task. You can call the [DescribeCloudbenchTask](https://help.aliyun.com/document_detail/230669.html) operation to query the specification.
   * 
   * >  You must migrate the basic data in the source instance to the destination instance before you start a stress testing task. When you create a DTS migration task, you must specify this parameter.
   * 
   * @example
   * medium
   */
  dtsJobClass?: string;
  /**
   * @remarks
   * The ID of the DTS migration task. You can call the [ConfigureDtsJob](https://help.aliyun.com/document_detail/208399.html) operation to query the ID.
   * 
   * >  After a DTS migration task is created in the DTS console, you must specify this parameter.
   * 
   * @example
   * 23127
   */
  dtsJobId?: string;
  /**
   * @remarks
   * The state that specifies the last operation that is performed for the stress testing task. Valid values:
   * 
   * *   **WAIT_TARGET**: prepares the destination instance
   * *   **WAIT_DBGATEWAY**: prepares the DBGateway
   * *   **WAIT_SQL**: prepares the full SQL statistics
   * *   **WAIT_LOGIC**: prepares to replay the traffic
   * 
   * >  When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task becomes completed.
   * 
   * @example
   * WAIT_TARGET
   */
  endState?: string;
  /**
   * @remarks
   * The ID of the virtual private cloud (VPC) in which the database gateway (DBGateway) is deployed.
   * 
   * >  This parameter must be specified if you set **ClientType** to **ECS**.
   * 
   * @example
   * vpc-t4nsnwvpbc1h76ja4****
   */
  gatewayVpcId?: string;
  /**
   * @remarks
   * The IP address or domain name of the DBGateway.
   * 
   * >  This parameter must be specified if you set **ClientType** to **ECS**.
   * 
   * @example
   * 172.30.XX.XX
   */
  gatewayVpcIp?: string;
  /**
   * @remarks
   * The rate at which the traffic captured from the source instance is replayed on the destination instance. The value must be a positive integer. Valid values: **1** to **30**. Default value: **1**.
   * 
   * @example
   * 1
   */
  rate?: string;
  /**
   * @remarks
   * The duration of the stress testing task for which the traffic is captured from the source instance. Unit: milliseconds.
   * 
   * @example
   * 86400000
   */
  requestDuration?: string;
  /**
   * @remarks
   * The time when the stress testing task ends. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296001
   */
  requestEndTime?: string;
  /**
   * @remarks
   * The time when the stress testing task starts. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  requestStartTime?: string;
  /**
   * @remarks
   * The duration within which the traffic generation stressing test takes effect. Unit: milliseconds.
   * 
   * >  This parameter must be specified if you set **TaskType** to **smart pressure test**.
   * 
   * @example
   * 86400000
   */
  smartPressureTime?: string;
  /**
   * @remarks
   * The ID of the source instance. The instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance. You can call the [GetInstanceInspections](https://help.aliyun.com/document_detail/202857.html) operation to query the ID.
   * 
   * >  This parameter must be specified if you set **DstType** to **Instance**.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  srcInstanceId?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  srcPublicIp?: string;
  /**
   * @remarks
   * The name of the privileged account for the source instance. Set the value to **admin**.
   * 
   * >  This parameter must be specified if you set **DstType** to **Instance**.
   * 
   * @example
   * admin
   */
  srcSuperAccount?: string;
  /**
   * @remarks
   * The password of the privileged account for the source instance.
   * 
   * >  This parameter must be specified if you set **DstType** to **Instance**.
   * 
   * @example
   * test123
   */
  srcSuperPassword?: string;
  /**
   * @remarks
   * The type of the stress testing task. Valid values:
   * 
   * *   **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
   * *   **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
   * 
   * This parameter is required.
   * 
   * @example
   * pressure test
   */
  taskType?: string;
  /**
   * @remarks
   * The temporary directory generated for stress testing.
   * 
   * @example
   * /tmp/bench/
   */
  workDir?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'Amount',
      backupId: 'BackupId',
      backupTime: 'BackupTime',
      clientType: 'ClientType',
      description: 'Description',
      dstConnectionString: 'DstConnectionString',
      dstInstanceId: 'DstInstanceId',
      dstPort: 'DstPort',
      dstSuperAccount: 'DstSuperAccount',
      dstSuperPassword: 'DstSuperPassword',
      dstType: 'DstType',
      dtsJobClass: 'DtsJobClass',
      dtsJobId: 'DtsJobId',
      endState: 'EndState',
      gatewayVpcId: 'GatewayVpcId',
      gatewayVpcIp: 'GatewayVpcIp',
      rate: 'Rate',
      requestDuration: 'RequestDuration',
      requestEndTime: 'RequestEndTime',
      requestStartTime: 'RequestStartTime',
      smartPressureTime: 'SmartPressureTime',
      srcInstanceId: 'SrcInstanceId',
      srcPublicIp: 'SrcPublicIp',
      srcSuperAccount: 'SrcSuperAccount',
      srcSuperPassword: 'SrcSuperPassword',
      taskType: 'TaskType',
      workDir: 'WorkDir',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'string',
      backupId: 'string',
      backupTime: 'string',
      clientType: 'string',
      description: 'string',
      dstConnectionString: 'string',
      dstInstanceId: 'string',
      dstPort: 'string',
      dstSuperAccount: 'string',
      dstSuperPassword: 'string',
      dstType: 'string',
      dtsJobClass: 'string',
      dtsJobId: 'string',
      endState: 'string',
      gatewayVpcId: 'string',
      gatewayVpcIp: 'string',
      rate: 'string',
      requestDuration: 'string',
      requestEndTime: 'string',
      requestStartTime: 'string',
      smartPressureTime: 'string',
      srcInstanceId: 'string',
      srcPublicIp: 'string',
      srcSuperAccount: 'string',
      srcSuperPassword: 'string',
      taskType: 'string',
      workDir: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudBenchTasksResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: CreateCloudBenchTasksResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CreateCloudBenchTasksResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudBenchTasksResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCloudBenchTasksResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCloudBenchTasksResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDiagnosticReportRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  DBInstanceId?: string;
  /**
   * @remarks
   * The end of the time range to create the diagnostic report. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The start time must be later than the end time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993001
   */
  endTime?: string;
  /**
   * @remarks
   * The beginning of the time range to create the diagnostic report. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993000
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      DBInstanceId: 'DBInstanceId',
      endTime: 'EndTime',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBInstanceId: 'string',
      endTime: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDiagnosticReportResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   * 
   * @example
   * 70af71852fcdf2c5dc7b90596e2cf05b
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * ac544623-f6ad-45fd-9a74-9be3db65****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDiagnosticReportResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDiagnosticReportResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDiagnosticReportResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateKillInstanceSessionTaskRequest extends $tea.Model {
  /**
   * @remarks
   * The database account that has the permissions to terminate sessions.
   * 
   * This parameter is required.
   * 
   * @example
   * testUser
   */
  dbUser?: string;
  /**
   * @remarks
   * The password of the database account.
   * 
   * This parameter is required.
   * 
   * @example
   * testPassword
   */
  dbUserPassword?: string;
  /**
   * @remarks
   * The account whose sessions do not need to be terminated.
   * 
   * >  Set this parameter to a JSON array. Separate database accounts with commas (,). Example: [\\"Database account 1\\",\\"Database account 2\\"].
   * 
   * @example
   * [\\"db_user1\\",\\"db_user2\\"]
   */
  ignoredUsers?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * Specifies whether to terminate all sessions.
   * 
   * *   **true**
   * *   **false**
   * 
   * >  If you set this parameter to **true**, sessions of the accounts that are specified by **IgnoredUsers**, sessions of internal O\\&M accounts of Alibaba Cloud, and **Binlog Dump** sessions are not terminated.
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  killAllSessions?: boolean;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster. If you do not specify a node ID and set **KillAllSessions** to **true**, the system traverses all nodes in the PolarDB for MySQL cluster and terminates the active sessions on each node.
   * 
   * @example
   * pi-bp1v203xzzh0a****
   */
  nodeId?: string;
  /**
   * @remarks
   * The IDs of sessions that need to be terminated.
   * 
   * >  Set this parameter to a JSON array. Separate session IDs with commas (,). Example: [\\"Session ID1\\",\\"Session ID2\\"]. If **KillAllSessions** is set to **true**, this parameter does not take effect.
   * 
   * @example
   * [10805639,10805623,10805645,10805553,10805566,10805616]
   */
  sessionIds?: string;
  static names(): { [key: string]: string } {
    return {
      dbUser: 'DbUser',
      dbUserPassword: 'DbUserPassword',
      ignoredUsers: 'IgnoredUsers',
      instanceId: 'InstanceId',
      killAllSessions: 'KillAllSessions',
      nodeId: 'NodeId',
      sessionIds: 'SessionIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbUser: 'string',
      dbUserPassword: 'string',
      ignoredUsers: 'string',
      instanceId: 'string',
      killAllSessions: 'boolean',
      nodeId: 'string',
      sessionIds: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateKillInstanceSessionTaskResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The ID of the task that terminated the sessions.
   * 
   * >  If the sessions of a PolarDB for MySQL cluster were terminated, **NodeId** is left empty, and **KillAllSessions** is set to **true**, the task IDs are returned based on the number of nodes. Example: ["f77d535b45405bd462b21caa3ee8\\*\\*\\*\\*", "e93ab549abb081eb5dcd5396a29b\\*\\*\\*\\*"].
   * 
   * @example
   * f77d535b45405bd462b21caa3ee8****
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateKillInstanceSessionTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateKillInstanceSessionTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateKillInstanceSessionTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateKillInstanceSessionTaskWithMaintainUserRequest extends $tea.Model {
  ignoredUsers?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  killAllSessions?: boolean;
  nodeId?: string;
  sessionIds?: string;
  static names(): { [key: string]: string } {
    return {
      ignoredUsers: 'IgnoredUsers',
      instanceId: 'InstanceId',
      killAllSessions: 'KillAllSessions',
      nodeId: 'NodeId',
      sessionIds: 'SessionIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ignoredUsers: 'string',
      instanceId: 'string',
      killAllSessions: 'boolean',
      nodeId: 'string',
      sessionIds: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateKillInstanceSessionTaskWithMaintainUserResponseBody extends $tea.Model {
  code?: number;
  data?: string;
  message?: string;
  requestId?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateKillInstanceSessionTaskWithMaintainUserResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateKillInstanceSessionTaskWithMaintainUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateKillInstanceSessionTaskWithMaintainUserResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLatestDeadLockAnalysisRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * pc-bp1u5mas9exx7****
   */
  instanceId?: string;
  /**
   * @example
   * pi-bp16v3824rt73****
   */
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLatestDeadLockAnalysisResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: number;
  /**
   * @example
   * true
   */
  data?: boolean;
  /**
   * @example
   * Successful
   */
  message?: string;
  /**
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: 'boolean',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLatestDeadLockAnalysisResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateLatestDeadLockAnalysisResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateLatestDeadLockAnalysisResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateQueryOptimizeTagRequest extends $tea.Model {
  /**
   * @remarks
   * The remarks.
   * 
   * The remarks can be 1 to 300 characters in length.
   * 
   * @example
   * Slow SQL queries of offline synchronization. No optimization is required.
   */
  comments?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**: ApsaraDB RDS for MySQL
   * *   **PolarDBMySQL**: PolarDB for MySQL
   * *   **PostgreSQL**: ApsaraDB RDS for PostgreSQL
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The SQL template IDs. You can call the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405261.html) operation to obtain the SQL template ID. Separate multiple SQL template IDs with commas (,).
   * 
   * This parameter is required.
   * 
   * @example
   * 6068ce044e3dc9b903979672fb0b69df,d12515c015fc9f41a0778a9e1de0e941
   */
  sqlIds?: string;
  /**
   * @remarks
   * The status of **Tags**. Valid values:
   * 
   * *   **0**: removes all tags added to the SQL templates that are specified by **SqlIds** and leaves **Tags** empty.
   * *   **1**: adds the tags specified by **Tags** to the SQL templates that are specified by **SqlIds**.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The SQL tags. Separate multiple SQL tags with commas (,). Valid values:
   * 
   * *   **DAS_IMPORTANT**: The SQL template is important.
   * *   **DAS_NOT_IMPORTANT**: The SQL template is unimportant.
   * *   **USER_IGNORE**: The scheduling of the SQL template does not need to be optimized.
   * *   **DAS_IN_PLAN**: The scheduling of the SQL template needs to be optimized.
   * 
   * This parameter is required.
   * 
   * @example
   * DAS_IN_PLAN,DAS_NOT_IMPORTANT
   */
  tags?: string;
  static names(): { [key: string]: string } {
    return {
      comments: 'Comments',
      engine: 'Engine',
      instanceId: 'InstanceId',
      sqlIds: 'SqlIds',
      status: 'Status',
      tags: 'Tags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comments: 'string',
      engine: 'string',
      instanceId: 'string',
      sqlIds: 'string',
      status: 'number',
      tags: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateQueryOptimizeTagResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * Indicates whether the tags were added to the SQL templates.
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  data?: boolean;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'boolean',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateQueryOptimizeTagResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateQueryOptimizeTagResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateQueryOptimizeTagResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRequestDiagnosisRequest extends $tea.Model {
  /**
   * @remarks
   * The name of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * das
   */
  database?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-0iwhhl8gx0ld6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter must be specified for PolarDB for MySQL, PolarDB for PostgreSQL (Compatible with Oracle), and ApsaraDB for MongoDB instances.
   * 
   * @example
   * 202****
   */
  nodeId?: string;
  /**
   * @remarks
   * The SQL statement that you want to diagnose.
   * 
   * This parameter is required.
   * 
   * @example
   * select * from test where name = \\"mockUser\\"
   */
  sql?: string;
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      sql: 'Sql',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: 'string',
      instanceId: 'string',
      nodeId: 'string',
      sql: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRequestDiagnosisResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The diagnostics ID, which is the unique identifier of the diagnosis. This parameter can be used to query the result of the diagnosis.
   * 
   * @example
   * 61820b594664275c4429****
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 800FBAF5-A539-5B97-A09E-C63AB2F7****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRequestDiagnosisResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateRequestDiagnosisResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateRequestDiagnosisResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSqlLogTaskRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
   * 
   * @example
   * 1608888296000
   */
  endTime?: number;
  /**
   * @remarks
   * The filter conditions.
   */
  filters?: CreateSqlLogTaskRequestFilters[];
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * pc-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The name of the task.
   * 
   * @example
   * test01
   */
  name?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is available only for instances that run in a cluster architecture. You can specify this parameter to query the offline tasks of a specific node. By default, if this parameter is not specified, the information about the offline tasks of the primary node is returned.
   * 
   * @example
   * pi-uf6k5f6g3912i0dqz
   */
  nodeId?: string;
  /**
   * @remarks
   * The role of the node of the PolarDB-X 2.0 database instance. Valid values:
   * 
   * *   **polarx_cn**: compute node
   * *   **polarx_dn**: data node
   * 
   * @example
   * polarx_cn
   */
  role?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
   * 
   * @example
   * 1596177993000
   */
  startTime?: number;
  /**
   * @remarks
   * The type of the task. Valid values:
   * 
   * *   **Export**
   * *   **Query**
   * *   **Insight**
   * 
   * @example
   * Export
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      filters: 'Filters',
      instanceId: 'InstanceId',
      name: 'Name',
      nodeId: 'NodeId',
      role: 'Role',
      startTime: 'StartTime',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      filters: { 'type': 'array', 'itemType': CreateSqlLogTaskRequestFilters },
      instanceId: 'string',
      name: 'string',
      nodeId: 'string',
      role: 'string',
      startTime: 'number',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSqlLogTaskResponseBody extends $tea.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The returned data.
   */
  data?: CreateSqlLogTaskResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, error information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 83D9D59B-057A-54A9-BFF9-CF2B42F05645
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CreateSqlLogTaskResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSqlLogTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSqlLogTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSqlLogTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStorageAnalysisTaskRequest extends $tea.Model {
  /**
   * @remarks
   * The database name. If you specify a database, the operation analyzes the storage usage of the specified database.
   * 
   * @example
   * testdb01
   */
  dbName?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID. For ApsaraDB for MongoDB instances, you can use this parameter to specify a node for storage analysis. You can call the [DescribeRoleZoneInfo](https://help.aliyun.com/document_detail/123802.html) operation to query the information about nodes of an ApsaraDB for MongoDB instance.
   * 
   * *   If you set this parameter to a value in the **InsName** format, such as `d-bp1872fa24d5****`, you can call this operation to analyze the hidden node that corresponds to the node ID.
   * *   If you set this parameter to a value in the `InsName#RoleId` format, such as `d-bp1872fa24d5****#299****5`, you can call this operation to analyze the specified node.
   * 
   * >  If you run a storage analysis task on an ApsaraDB for MongoDB replica set instance and you do not specify this parameter, only the hidden node of the instance is analyzed by default. If you run a storage analysis task on an ApsaraDB for MongoDB sharded cluster instance, we recommend that you set this parameter to specify a node.
   * 
   * @example
   * 23302528
   */
  nodeId?: string;
  /**
   * @remarks
   * The table name. If you specify a table in the specified database, the operation analyzes the storage usage of the specified table. If you specify a table, you must also specify the database to which the table belongs by using **DbName**.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      dbName: 'DbName',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbName: 'string',
      instanceId: 'string',
      nodeId: 'string',
      tableName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStorageAnalysisTaskResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   */
  data?: CreateStorageAnalysisTaskResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request is successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: CreateStorageAnalysisTaskResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStorageAnalysisTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateStorageAnalysisTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateStorageAnalysisTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudBenchTaskRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the stress testing task. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * e5cec704-0518-430f-8263-76f4dcds****
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudBenchTaskResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudBenchTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteCloudBenchTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteCloudBenchTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteStopGatewayRequest extends $tea.Model {
  /**
   * @remarks
   * The ID that can uniquely identify the DBGateway. You can obtain the DBGateway ID by calling the [DescribeCloudbenchTask](https://help.aliyun.com/document_detail/230669.html) operation. The DBGateway ID is the value of the **ClientGatewayId** field in the response.
   * 
   * This parameter is required.
   * 
   * @example
   * 22938c83fcfbced4b4869b9695e3****
   */
  gatewayId?: string;
  static names(): { [key: string]: string } {
    return {
      gatewayId: 'GatewayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      gatewayId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteStopGatewayResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The result of the DeleteStopGateway operation. Valid values:
   * 
   * *   **0**: The metadata of the DBGateway is deleted.
   * *   **-1**: A system error occurs.
   * *   **-2**: The DBGateway does not exist.
   * *   **-3**: The DBGateway is not stopped and the metadata cannot be deleted.
   * *   **-4**: The metadata of the DBGateway fails to be deleted.
   * 
   * @example
   * 0
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * FC6C0929-29E1-59FD-8DFE-70D9D41E****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteStopGatewayResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteStopGatewayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteStopGatewayResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * pc-2ze1prap1k46r****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The configurations of the auto scaling feature for instances.
   */
  data?: DescribeAutoScalingConfigResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeAutoScalingConfigResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAutoScalingConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAutoScalingConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingHistoryRequest extends $tea.Model {
  /**
   * @remarks
   * The type of the auto scaling task that you want to query. Set the value to **SPEC**, which indicates that you can query the history of only automatic performance scaling tasks.
   * 
   * This parameter is required.
   * 
   * @example
   * SPEC
   */
  autoScalingTaskType?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * > The end time must be later than the start time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1676605305796
   */
  endTime?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * > Only ApsaraDB RDS for MySQL instances are supported.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * > The maximum time range that can be specified is 45 days.
   * 
   * This parameter is required.
   * 
   * @example
   * 1675833788056
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      autoScalingTaskType: 'AutoScalingTaskType',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoScalingTaskType: 'string',
      endTime: 'number',
      instanceId: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingHistoryResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned. The status code 200 indicates that the request was successful.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The history of auto scaling.
   */
  data?: DescribeAutoScalingHistoryResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * > If the request was successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeAutoScalingHistoryResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingHistoryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAutoScalingHistoryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAutoScalingHistoryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the instance.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the cache analysis task. You can obtain the task ID from the response parameters of the [CreateCacheAnalysisJob](https://help.aliyun.com/document_detail/180982.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * sf79-sd99-sa37-****
   */
  jobId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobId: 'JobId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The details of the cache analysis task.
   */
  data?: DescribeCacheAnalysisJobResponseBodyData;
  /**
   * @remarks
   * The message that is returned for the request.
   * 
   * >  If the request is successful, **Successful** is returned. If the request fails, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeCacheAnalysisJobResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCacheAnalysisJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCacheAnalysisJobResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993001
   */
  endTime?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The page number. The value must be an integer that is greater than 0. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993000
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      instanceId: 'string',
      pageNo: 'string',
      pageSize: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The list of cache analysis tasks.
   */
  data?: DescribeCacheAnalysisJobsResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeCacheAnalysisJobsResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCacheAnalysisJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCacheAnalysisJobsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudBenchTasksRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time.
   * 
   * @example
   * 1596177993001
   */
  endTime?: string;
  /**
   * @remarks
   * The page number. The value must be a positive integer. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. The value must be a positive integer. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1596177993000
   */
  startTime?: string;
  /**
   * @remarks
   * The status of the stress testing task. Valid values:
   * 
   * *   **SUCCESS**: The task is successful.
   * *   **IGNORED**: The task is ignored.
   * *   **RUNNING**: The task is running.
   * *   **EXCEPTION**: The task is abnormal.
   * 
   * @example
   * SUCCESS
   */
  status?: string;
  /**
   * @remarks
   * The type of the stress testing task. Valid values:
   * 
   * *   **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
   * *   **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
   * 
   * @example
   * pressure test
   */
  taskType?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      startTime: 'StartTime',
      status: 'Status',
      taskType: 'TaskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      pageNo: 'string',
      pageSize: 'string',
      startTime: 'string',
      status: 'string',
      taskType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudBenchTasksResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: DescribeCloudBenchTasksResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeCloudBenchTasksResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudBenchTasksResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCloudBenchTasksResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCloudBenchTasksResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the stress testing task. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * e5cec704-0518-430f-8263-76f4dcds****
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: DescribeCloudbenchTaskResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeCloudbenchTaskResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCloudbenchTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCloudbenchTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskConfigRequest extends $tea.Model {
  /**
   * @remarks
   * The task ID. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the task ID.
   * 
   * This parameter is required.
   * 
   * @example
   * e5cec704-0518-430f-8263-76f4dcds****
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskConfigResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: DescribeCloudbenchTaskConfigResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeCloudbenchTaskConfigResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCloudbenchTaskConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCloudbenchTaskConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDiagnosticReportListRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  DBInstanceId?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1668420492000
   */
  endTime?: string;
  /**
   * @remarks
   * The page number. The value must be a positive integer. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1668398892000
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      DBInstanceId: 'DBInstanceId',
      endTime: 'EndTime',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBInstanceId: 'string',
      endTime: 'string',
      pageNo: 'string',
      pageSize: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDiagnosticReportListResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The information of the diagnostics reports. Valid values:
   * 
   * *   **total**: the number of diagnostics reports.
   * *   **score**: the health score.
   * *   **diagnosticTime**: the time when the diagnostics report was generated. The time is displayed in UTC.
   * *   **startTime**: the start time of the query. The time is displayed in UTC.
   * *   **endTime**: the end time of the query. The time is displayed in UTC.
   * 
   * @example
   * {     "total": 1,     "list": [       {         "score": 100,         "diagnosticTime": "2022-11-14T08:17:00Z",         "startTime": "2022-11-14T07:16:59Z",         "endTime": "2022-11-14T08:16:59Z"       }     ]   }
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * D00DB161-FEF6-5428-B37A-8D29A4C2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDiagnosticReportListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDiagnosticReportListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDiagnosticReportListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](https://help.aliyun.com/document_detail/60933.html) operation to query the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](https://help.aliyun.com/document_detail/190794.html) operation to query the ID.
   * 
   * @example
   * r-****-db-0
   */
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The list of hot keys and large keys.
   */
  data?: DescribeHotBigKeysResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeHotBigKeysResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeHotBigKeysResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeHotBigKeysResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotKeysRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](https://help.aliyun.com/document_detail/60933.html) operation to query the instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](https://help.aliyun.com/document_detail/190794.html) operation to query the data shard ID.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotKeysResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The details of the hot keys.
   */
  data?: DescribeHotKeysResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeHotKeysResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotKeysResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeHotKeysResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeHotKeysResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceDasProRequest extends $tea.Model {
  /**
   * @remarks
   * The database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceDasProResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition is enabled for the database instance. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  data?: boolean;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 9CB97BC4-6479-55D0-B9D0-EA925AFE****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'boolean',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceDasProResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeInstanceDasProResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeInstanceDasProResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncRequest extends $tea.Model {
  /**
   * @example
   * 1662518540764
   */
  endTime?: number;
  filters?: DescribeSlowLogHistogramAsyncRequestFilters[];
  /**
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @example
   * r-****-db-0
   */
  nodeId?: string;
  /**
   * @example
   * 1596177993000
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      filters: 'Filters',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      filters: { 'type': 'array', 'itemType': DescribeSlowLogHistogramAsyncRequestFilters },
      instanceId: 'string',
      nodeId: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * AsyncResult<Histogram>。
   */
  data?: DescribeSlowLogHistogramAsyncResponseBodyData;
  /**
   * @example
   * Successful
   */
  message?: string;
  /**
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeSlowLogHistogramAsyncResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSlowLogHistogramAsyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSlowLogHistogramAsyncResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticRequest extends $tea.Model {
  /**
   * @example
   * true
   */
  asc?: boolean;
  /**
   * @example
   * 1608888296000
   */
  endTime?: number;
  filters?: DescribeSlowLogStatisticRequestFilters[];
  /**
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @example
   * count
   */
  orderBy?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 1568269711000
   */
  startTime?: number;
  /**
   * @example
   * 04ea3310df40c3fa8a6b4854db49f79a
   */
  templateId?: string;
  /**
   * @example
   * SQL
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      endTime: 'EndTime',
      filters: 'Filters',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      orderBy: 'OrderBy',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      startTime: 'StartTime',
      templateId: 'TemplateId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'boolean',
      endTime: 'number',
      filters: { 'type': 'array', 'itemType': DescribeSlowLogStatisticRequestFilters },
      instanceId: 'string',
      nodeId: 'string',
      orderBy: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      startTime: 'number',
      templateId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * AsyncResult<DBLogRecords<SlowLogStat>>
   */
  data?: DescribeSlowLogStatisticResponseBodyData;
  /**
   * @example
   * Successful
   */
  message?: string;
  /**
   * @example
   * 52D540CF-C517-1F57-BB42-9035F96******
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeSlowLogStatisticResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSlowLogStatisticResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSlowLogStatisticResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogConfigRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogConfigResponseBody extends $tea.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data that is returned.
   */
  data?: DescribeSqlLogConfigResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0A74B755-98B7-59DB-8724-1321B394****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeSqlLogConfigResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSqlLogConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSqlLogConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogRecordsRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
   * 
   * @example
   * 1608888296000
   */
  endTime?: number;
  /**
   * @remarks
   * The filter conditions.
   */
  filters?: DescribeSqlLogRecordsRequestFilters[];
  /**
   * @remarks
   * The database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * pc-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * *   For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this parameter is valid only for instances of the Cluster Edition. If you do not specify this parameter, the log details of the primary node is queried by default.
   * *   For PolarDB-X 2.0 instances, set this parameter to **polarx_cn** if the node is a compute node, or **polarx_dn** if the node is a data node.
   * 
   * @example
   * pi-uf6k5f6g3912i****
   */
  nodeId?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The role of the node of the PolarDB-X 2.0 instance. Valid values:
   * 
   * *   \\*\\*polarx_cn\\*\\*: compute node
   * *   \\*\\*polarx_dn\\*\\*: data node
   * 
   * @example
   * polarx_cn
   */
  role?: string;
  /**
   * @remarks
   * The beginning of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
   * 
   * @example
   * 1596177993000
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      filters: 'Filters',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      role: 'Role',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      filters: { 'type': 'array', 'itemType': DescribeSqlLogRecordsRequestFilters },
      instanceId: 'string',
      nodeId: 'string',
      pageNo: 'number',
      pageSize: 'number',
      role: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogRecordsResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code that is returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data that is returned.
   */
  data?: DescribeSqlLogRecordsResponseBodyData;
  /**
   * @remarks
   * The message that is returned.
   * 
   * >  If the request is successful, **Successful** is returned. If the request fails, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * F43E7FB3-CE67-5FFD-A59C-EFD278BCD7BE
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeSqlLogRecordsResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogRecordsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSqlLogRecordsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSqlLogRecordsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogStatisticRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogStatisticResponseBody extends $tea.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: DescribeSqlLogStatisticResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeSqlLogStatisticResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogStatisticResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSqlLogStatisticResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSqlLogStatisticResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTaskRequest extends $tea.Model {
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * r-bp1nti25tc7bq5****
   */
  instanceId?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * a4f5c4494dbd6713185d87a97aa53e8
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNo: 'number',
      pageSize: 'number',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTaskResponseBody extends $tea.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: DescribeSqlLogTaskResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeSqlLogTaskResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSqlLogTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSqlLogTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTasksRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  endTime?: number;
  /**
   * @remarks
   * The filter parameters.
   */
  filters?: DescribeSqlLogTasksRequestFilters[];
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * r-bp1nti25tc7bq5****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is available only for instances that are deployed in the cluster architecture. You can specify this parameter to query the tasks of a specific node. If this parameter is not specified, the tasks of the primary node are returned by default.
   * 
   * @example
   * pi-bp1o58x3ib7e6z496
   */
  nodeId?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Valid values: 1 to 100. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1596177993000
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      filters: 'Filters',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      filters: { 'type': 'array', 'itemType': DescribeSqlLogTasksRequestFilters },
      instanceId: 'string',
      nodeId: 'string',
      pageNo: 'number',
      pageSize: 'number',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTasksResponseBody extends $tea.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: DescribeSqlLogTasksResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeSqlLogTasksResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTasksResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSqlLogTasksResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSqlLogTasksResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopBigKeysRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * > 
   * 
   * *   The end time must be later than the start time.
   * 
   * *   Only data within the last four days can be queried.
   * 
   * *   The maximum interval between the **start time** and the** end time** is 3 hours.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993001
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](https://help.aliyun.com/document_detail/60933.html) operation to query the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](https://help.aliyun.com/document_detail/190794.html) operation to query the ID.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993000
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      endTime: 'string',
      instanceId: 'string',
      nodeId: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopBigKeysResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information about the large keys.
   * 
   * > This parameter is left empty If no large keys exist within the specified time range.
   */
  data?: DescribeTopBigKeysResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeTopBigKeysResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopBigKeysResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTopBigKeysResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTopBigKeysResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopHotKeysRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * > 
   * 
   * *   The end time must be later than the start time.
   * 
   * *   Only data within the last four days can be queried.
   * 
   * *   The maximum interval between the **start time** and the** end time** is 3 hours.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993001
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](https://help.aliyun.com/document_detail/60933.html) operation to query the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](https://help.aliyun.com/document_detail/190794.html) operation to query the ID.
   * 
   * @example
   * r-****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1596177993000
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      endTime: 'string',
      instanceId: 'string',
      nodeId: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopHotKeysResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information about the hot keys.
   */
  data?: DescribeTopHotKeysResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeTopHotKeysResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopHotKeysResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTopHotKeysResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTopHotKeysResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAllSqlConcurrencyControlRulesRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * >  You must specify this parameter only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAllSqlConcurrencyControlRulesResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAllSqlConcurrencyControlRulesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableAllSqlConcurrencyControlRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableAllSqlConcurrencyControlRulesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoResourceOptimizeRulesRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\", \\"Instance ID2\\"]`.
   * 
   * This parameter is required.
   * 
   * @example
   * [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
   */
  instanceIds?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceIds: 'InstanceIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceIds: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoResourceOptimizeRulesResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: DisableAutoResourceOptimizeRulesResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: DisableAutoResourceOptimizeRulesResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoResourceOptimizeRulesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableAutoResourceOptimizeRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableAutoResourceOptimizeRulesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoThrottleRulesRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The database instance IDs.
   * 
   * >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\",\\"Instance ID2\\"]`.
   * 
   * This parameter is required.
   * 
   * @example
   * [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
   */
  instanceIds?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceIds: 'InstanceIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceIds: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoThrottleRulesResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   */
  data?: DisableAutoThrottleRulesResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: DisableAutoThrottleRulesResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoThrottleRulesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableAutoThrottleRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableAutoThrottleRulesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableDasProRequest extends $tea.Model {
  /**
   * @remarks
   * The database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId that you set when you call this operation.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableDasProResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableDasProResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableDasProResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableDasProResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableInstanceDasConfigRequest extends $tea.Model {
  /**
   * @remarks
   * The database engine. Set the value to Redis.
   * 
   * This parameter is required.
   * 
   * @example
   * Redis
   */
  engine?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-bp1nti25tc7bq5****
   */
  instanceId?: string;
  /**
   * @remarks
   * The type of auto scaling. Valid values:
   * 
   * *   **specScale**: The specifications of a database instance are automatically scaled up or down.
   * *   **shardScale**: The number of shards for a database instance is automatically increased or decreased.
   * *   **bandwidthScale**: The bandwidth of a database instance is automatically increased or decreased.
   * 
   * This parameter is required.
   * 
   * @example
   * bandwidthScale
   */
  scaleType?: string;
  static names(): { [key: string]: string } {
    return {
      engine: 'Engine',
      instanceId: 'InstanceId',
      scaleType: 'ScaleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      engine: 'string',
      instanceId: 'string',
      scaleType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableInstanceDasConfigResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The result of disabling the auto scaling feature for the database instance.
   * 
   * @example
   * success
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableInstanceDasConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableInstanceDasConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableInstanceDasConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableSqlConcurrencyControlRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * >  The database instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the throttling rule that is applied to the instance. You can call the [GetRunningSqlConcurrencyControlRules](https://help.aliyun.com/document_detail/223538.html) operation to query the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  itemId?: number;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
      itemId: 'ItemId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
      itemId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableSqlConcurrencyControlResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   * 
   * @example
   * Null
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableSqlConcurrencyControlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableSqlConcurrencyControlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableSqlConcurrencyControlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableDasProRequest extends $tea.Model {
  /**
   * @remarks
   * The database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The storage duration of SQL Explorer data. Unit: day. Default value: **30**. Valid values:
   * 
   * *   **30**
   * *   **180**
   * *   **365**
   * *   **1095**
   * *   **1825**
   * 
   * @example
   * 30
   */
  sqlRetention?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      sqlRetention: 'SqlRetention',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      sqlRetention: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableDasProResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableDasProResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EnableDasProResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EnableDasProResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableSqlConcurrencyControlRequest extends $tea.Model {
  /**
   * @remarks
   * The duration within which the SQL throttling rule takes effect. Unit: seconds.
   * 
   * >  The throttling rule takes effect only within this duration.
   * 
   * This parameter is required.
   * 
   * @example
   * 300
   */
  concurrencyControlTime?: number;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * >  You must specify the instance ID only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The maximum number of concurrent SQL statements. Set this parameter to a positive integer.
   * 
   * >  When the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
   * 
   * This parameter is required.
   * 
   * @example
   * 3
   */
  maxConcurrency?: number;
  /**
   * @remarks
   * The keywords that are used to identify the SQL statements that need to be throttled.
   * 
   * >  If you specify multiple SQL keywords, separate them with tildes (~). If the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
   * 
   * This parameter is required.
   * 
   * @example
   * call~open~api~test~4~from~POP
   */
  sqlKeywords?: string;
  /**
   * @remarks
   * The type of the SQL statements. Valid values:
   * 
   * *   **SELECT**
   * *   **UPDATE**
   * *   **DELETE**
   * 
   * This parameter is required.
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  static names(): { [key: string]: string } {
    return {
      concurrencyControlTime: 'ConcurrencyControlTime',
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
      maxConcurrency: 'MaxConcurrency',
      sqlKeywords: 'SqlKeywords',
      sqlType: 'SqlType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrencyControlTime: 'number',
      consoleContext: 'string',
      instanceId: 'string',
      maxConcurrency: 'number',
      sqlKeywords: 'string',
      sqlType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableSqlConcurrencyControlResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   * 
   * @example
   * Null
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableSqlConcurrencyControlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EnableSqlConcurrencyControlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EnableSqlConcurrencyControlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestListByCodeRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
   * 
   * @example
   * 1642566830000
   */
  end?: number;
  /**
   * @remarks
   * The error code. You can call the [GetAsyncErrorRequestStatByCode](https://help.aliyun.com/document_detail/409804.html) operation to query the MySQL error codes that may be generated in the SQL Explorer results of an instance.
   * 
   * @example
   * 1064
   */
  errorCode?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * pi-wz9s658475e58****
   */
  nodeId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
   * 
   * @example
   * 1642556990714
   */
  start?: number;
  static names(): { [key: string]: string } {
    return {
      end: 'End',
      errorCode: 'ErrorCode',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      start: 'Start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      end: 'number',
      errorCode: 'string',
      instanceId: 'string',
      nodeId: 'string',
      start: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestListByCodeResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   * 
   * @example
   * {         "fail": false,         "data": [             {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****"             },             {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****"             }         ],         "resultId": "async__c39d43ece52d35267cc4b92a0c26****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644559407740     }
   */
  data?: GetAsyncErrorRequestListByCodeResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 9CB97BC4-6479-55D0-B9D0-EA925AFE****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetAsyncErrorRequestListByCodeResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestListByCodeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAsyncErrorRequestListByCodeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAsyncErrorRequestListByCodeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatByCodeRequest extends $tea.Model {
  /**
   * @remarks
   * The name of a database.
   * 
   * @example
   * testdb01
   */
  dbName?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
   * 
   * @example
   * 1642566830000
   */
  end?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter must be specified for PolarDB for MySQL clusters.
   * 
   * @example
   * pi-wz9s658475e58****
   */
  nodeId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The start time must be within the storage duration of the SQL Explorer feature of the database instance and can be up to 90 days earlier than the current time.
   * 
   * @example
   * 1642556990714
   */
  start?: number;
  static names(): { [key: string]: string } {
    return {
      dbName: 'DbName',
      end: 'End',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      start: 'Start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbName: 'string',
      end: 'number',
      instanceId: 'string',
      nodeId: 'string',
      start: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatByCodeResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   * 
   * @example
   * {     "fail": false,     "data": [       {         "instanceId": "rm-2ze8g2am97624****",         "count": 1,         "errorCode": "1062"       },       {         "instanceId": "rm-2ze8g2am97624****",         "count": 2,         "errorCode": "1064"      }     ],     "resultId": "async__fcd7c35788e62324622c3b4a03de****",     "isFinish": true,     "state": "SUCCESS",     "complete": true,     "timestamp": 1644560866961   }
   */
  data?: GetAsyncErrorRequestStatByCodeResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 840F51F7-9C01-538D-94F6-AE712905****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetAsyncErrorRequestStatByCodeResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatByCodeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAsyncErrorRequestStatByCodeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAsyncErrorRequestStatByCodeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatResultRequest extends $tea.Model {
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testdb01
   */
  dbName?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
   * 
   * @example
   * 1642566830000
   */
  end?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter must be specified for PolarDB for MySQL instances.
   * 
   * @example
   * pi-bp179lg03445l****
   */
  nodeId?: string;
  /**
   * @remarks
   * The ID of the SQL template. Separate multiple SQL IDs with commas (,). You can call the [GetAsyncErrorRequestListByCode](https://help.aliyun.com/document_detail/410746.html) operation to query the ID of the SQL query for which MySQL error code is returned.
   * 
   * @example
   * ad78a4e7d3ce81590c9dc2d5f4bc****,0f92feacd92c048b06a16617a633****
   */
  sqlIdList?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The beginning of the time range to query must be within the storage duration of the database instance and can be up to 90 days earlier than the current time.
   * 
   * @example
   * 1642556990714
   */
  start?: number;
  static names(): { [key: string]: string } {
    return {
      dbName: 'DbName',
      end: 'End',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      sqlIdList: 'SqlIdList',
      start: 'Start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbName: 'string',
      end: 'number',
      instanceId: 'string',
      nodeId: 'string',
      sqlIdList: 'string',
      start: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatResultResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   * 
   * @example
   * {         "fail": false,         "data": {             "ad78a4e7d3ce81590c9dc2d5f4bc****": {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 1             },             "0f92feacd92c048b06a16617a633****": {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 2             }         },         "resultId": "async__61f45ee381b2fa4e8a6545e3bee9****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644558576717     }
   */
  data?: GetAsyncErrorRequestStatResultResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 3FC3F8EB-3564-5D1A-B187-3B03E5B0****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetAsyncErrorRequestStatResultResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatResultResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAsyncErrorRequestStatResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAsyncErrorRequestStatResultResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoIncrementUsageStatisticRequest extends $tea.Model {
  /**
   * @remarks
   * The database name. If you specify a database, the operation queries the usage of auto-increment table IDs in the specified database. Otherwise, the operation queries the usage of auto-increment table IDs in all databases on the instance.
   * 
   * >  Specify the parameter value as a JSON array, such as [\\"db1\\",\\"db2\\"]. Separate multiple database names with commas (,).
   * 
   * @example
   * [\\"db1\\",\\"db2\\"]
   */
  dbNames?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The usage threshold of auto-increment IDs. Only usage that exceeds the threshold can be returned. Valid values are decimals that range from 0 to 1.
   * 
   * This parameter is required.
   * 
   * @example
   * 0.9
   */
  ratioFilter?: number;
  /**
   * @remarks
   * Specifies whether to query real-time data. Valid values:
   * 
   * *   **true**: queries data in real time except for data generated in the last 10 minutes.****
   * *   **false**: queries data generated in the last 2 hours. If no such data exists, queries the latest data.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  realTime?: boolean;
  static names(): { [key: string]: string } {
    return {
      dbNames: 'DbNames',
      instanceId: 'InstanceId',
      ratioFilter: 'RatioFilter',
      realTime: 'RealTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbNames: 'string',
      instanceId: 'string',
      ratioFilter: 'number',
      realTime: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoIncrementUsageStatisticResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetAutoIncrementUsageStatisticResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request is successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0A74B755-98B7-59DB-8724-1321B394****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetAutoIncrementUsageStatisticResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoIncrementUsageStatisticResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAutoIncrementUsageStatisticResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAutoIncrementUsageStatisticResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoResourceOptimizeRulesRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The database instance IDs.
   * 
   * *   Specify the parameter value as a JSON array, such as `[\\"Database account 1\\",\\"Database account 2\\"]`. Separate database instance IDs with commas (,).
   * 
   * *   By default, if you leave this parameter empty, all database instances for which the automatic fragment recycling feature has been enabled within the current Alibaba Cloud account are returned. The following types of database instances are returned:
   * 
   *     *   Database instances for which the automatic fragment recycling feature is currently enabled.
   *     *   Database instances for which the automatic fragment recycling feature was once enabled but is currently disabled, including those for which DAS Enterprise Edition has been disabled but excluding those that have been released.
   * 
   * @example
   * [\\"rm-2ze8g2am97624****\\",\\"rm-2vc54m2a6pd6p****\\",\\"rm-2ze9xrhze0709****\\",\\"rm-2ze8g2am97627****\\"]
   */
  instanceIds?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceIds: 'InstanceIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceIds: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoResourceOptimizeRulesResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetAutoResourceOptimizeRulesResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetAutoResourceOptimizeRulesResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoResourceOptimizeRulesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAutoResourceOptimizeRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAutoResourceOptimizeRulesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoThrottleRulesRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The database instance IDs.
   * 
   * *   Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\",\\"Instance ID2\\"]`.
   * 
   * *   By default, if you leave this parameter empty, all database instances for which the automatic SQL throttling feature has been enabled within the current Alibaba Cloud account are returned. The following types of database instances are returned:
   * 
   *     *   Database instances for which the automatic SQL throttling feature is currently enabled.
   *     *   Database instances for which the automatic SQL throttling feature was once enabled but is currently disabled. Released database instances are not included.
   * 
   * @example
   * [\\"rm-2ze8g2am97624****\\",\\"rm-2vc54m2a6pd6p****\\",\\"rm-2ze9xrhze0709****\\"]
   */
  instanceIds?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceIds: 'InstanceIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceIds: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoThrottleRulesResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetAutoThrottleRulesResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetAutoThrottleRulesResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoThrottleRulesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAutoThrottleRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAutoThrottleRulesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventContentRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The unique identifier of the event. You can call the [GetAutonomousNotifyEventsInRange](https://help.aliyun.com/document_detail/288371.html) operation to query the unique identifier returned by the SpanId response parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 7e7b2774-95b8-4fa3-bd9c-0ab47cb7****
   */
  spanId?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  context?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      spanId: 'SpanId',
      context: '__context',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      spanId: 'string',
      context: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventContentResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The details of the notification events.
   * 
   * @example
   * {\\"taskId\\":\\"7e1ba595-0889-48ff-a6ff-010f54991d****\\",\\"taskType\\":\\"SQL_OPTIMIZE\\",\\"advisorId\\":\\"636dc5f34664dd56ff0****\\",\\"sqlId\\":\\"e2b1d6c1ee1bb29555a828b59f16****\\",\\"indexAdviceCount\\":1,\\"indexAdvices\\":[{\\"schemaName\\":\\"das\\",\\"tableName\\":\\"students\\",\\"indexName\\":\\"idx_name\\",\\"columns\\":[\\"name\\"],\\"unique\\":false,\\"ddlAddIndex\\":\\"ALTER TABLE `das`.`students` ADD INDEX `idx_name` (`name`)\\",\\"priority\\":0,\\"optimizeId\\":\\"96232794517277511\\"}],\\"tuningAdvices\\":[],\\"improvement\\":8127.25,\\"supportLevel\\":3,\\"priority\\":\\"HIGH\\"}
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventContentResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAutonomousNotifyEventContentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAutonomousNotifyEventContentResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventsInRangeRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1568265711221
   */
  endTime?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  eventContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The urgency level of the events. If you specify this parameter, the MinLevel parameter does not take effect. Valid values:
   * 
   * *   **Notice**: events for which the system sends notifications.
   * *   **Optimization**: events that need to be optimized.
   * *   **Warn**: events for which the system sends warnings.
   * *   **Critical**: critical events.
   * 
   * @example
   * Warn
   */
  level?: string;
  /**
   * @remarks
   * The minimum urgency level of the events. Valid values:
   * 
   * *   **Notice**: events for which the system sends notifications.
   * *   **Optimization**: events that need to be optimized.
   * *   **Warn**: events for which the system sends warnings.
   * *   **Critical**: critical events.
   * 
   * @example
   * Notice
   */
  minLevel?: string;
  /**
   * @remarks
   * The ID of the node in a PolarDB for MySQL cluster. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/98094.html) operation to query the node ID returned by the DBNodeId response parameter.
   * 
   * >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The page number. The value must be a positive integer. Default value: 1.
   * 
   * @example
   * 1
   */
  pageOffset?: string;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 30
   */
  pageSize?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1568269711000
   */
  startTime?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  context?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      eventContext: 'EventContext',
      instanceId: 'InstanceId',
      level: 'Level',
      minLevel: 'MinLevel',
      nodeId: 'NodeId',
      pageOffset: 'PageOffset',
      pageSize: 'PageSize',
      startTime: 'StartTime',
      context: '__context',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      eventContext: 'string',
      instanceId: 'string',
      level: 'string',
      minLevel: 'string',
      nodeId: 'string',
      pageOffset: 'string',
      pageSize: 'string',
      startTime: 'string',
      context: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventsInRangeResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: GetAutonomousNotifyEventsInRangeResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetAutonomousNotifyEventsInRangeResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventsInRangeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAutonomousNotifyEventsInRangeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAutonomousNotifyEventsInRangeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBlockingDetailListRequest extends $tea.Model {
  /**
   * @remarks
   * The name of the database. Separate multiple database names with commas (,).
   * 
   * @example
   * school1,school2
   */
  dbNameList?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1682490480548
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-t4nfalp2ap421312z
   */
  instanceId?: string;
  /**
   * @remarks
   * The page number. The value must be an integer that is greater than 0. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. The value must be an integer that is greater than 0. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The hash value of the SQL statement. The hash values of SQL statements of the same type are the same.
   * 
   * @example
   * DC08B955CAD25E7B
   */
  queryHash?: string;
  /**
   * @remarks
   * The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1679429913757
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      dbNameList: 'DbNameList',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      queryHash: 'QueryHash',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbNameList: 'string',
      endTime: 'string',
      instanceId: 'string',
      pageNo: 'string',
      pageSize: 'string',
      queryHash: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBlockingDetailListResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetBlockingDetailListResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request is successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetBlockingDetailListResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBlockingDetailListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetBlockingDetailListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetBlockingDetailListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBInstanceConnectivityDiagnosisRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The source IP address.
   * 
   * This parameter is required.
   * 
   * @example
   * 47.110.180.62
   */
  srcIp?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      srcIp: 'SrcIp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      srcIp: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBInstanceConnectivityDiagnosisResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: GetDBInstanceConnectivityDiagnosisResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * > If the request was successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetDBInstanceConnectivityDiagnosisResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBInstanceConnectivityDiagnosisResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDBInstanceConnectivityDiagnosisResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDBInstanceConnectivityDiagnosisResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasProServiceUsageRequest extends $tea.Model {
  /**
   * @remarks
   * The database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasProServiceUsageResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   * 
   * @example
   * {         "storageFreeQuotaInMB": 5120,         "ip": "rm-2ze8g2am97624****.mysql.****.com",         "custinsId": 12448331,         "userId": "196278346919****",         "uuid": "hdm_b0ae36343407609bf3e8df8709d8****",         "expireTime": 1924963200000,         "instanceId": "rm-2ze8g2am97624****",         "storageUsed": 10773752667393,         "engine": "MySQL",         "instanceAlias": "TESTDB01_PROD",         "port": 3310,         "vpcId": "hdm_****",         "commodityInstanceId": "daspro-****",         "startTime": 1606381940000,         "isSpare": false,         "region": "cn-shanghai",         "serviceUnitId": "5",         "sqlRetention": 30     }
   */
  data?: GetDasProServiceUsageResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetDasProServiceUsageResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasProServiceUsageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDasProServiceUsageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDasProServiceUsageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasSQLLogHotDataRequest extends $tea.Model {
  /**
   * @remarks
   * The account of the database.
   * 
   * >  You can specify multiple database accounts that are separated by spaces. Example: `user1 user2 user3`.
   * 
   * @example
   * testuser
   */
  accountName?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * pi-bp179lg03445l****
   */
  childDBInstanceIDs?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * >  You can specify multiple database names that are separated by spaces. Example: `DB1 DB2 DB3`.
   * 
   * @example
   * testDB
   */
  DBName?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
   * 
   * This parameter is required.
   * 
   * @example
   * 1684820697000
   */
  end?: number;
  /**
   * @remarks
   * The error code of SQL execution. You can call the [GetAsyncErrorRequestStatByCode](https://help.aliyun.com/document_detail/409804.html) operation to query MySQL error codes in SQL Explorer data.
   * 
   * @example
   * 1064
   */
  fail?: string;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * >  You can specify multiple IP addresses that are separated by spaces. Example: `IP1 IP2 IP3`.
   * 
   * @example
   * 47.100.XX.XX
   */
  hostAddress?: string;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The logical relationship among multiple keywords.
   * 
   * *   **or**
   * *   **and**
   * 
   * @example
   * or
   */
  logicalOperator?: string;
  /**
   * @remarks
   * The maximum execution duration. Unit: microseconds. You can specify this parameter to query the SQL statements whose execution duration is smaller than the value of this parameter.
   * 
   * @example
   * 100
   */
  maxLatancy?: number;
  /**
   * @remarks
   * The maximum number of entries per page. Valid values: 5 to 100.
   * 
   * @example
   * 10
   */
  maxRecordsPerPage?: number;
  /**
   * @remarks
   * The reserved parameter. This parameter is not supported.
   * 
   * @example
   * None
   */
  maxRows?: number;
  /**
   * @remarks
   * The maximum number of scanned rows. You can specify this parameter to query the SQL statements that scan a smaller number of rows than the value of this parameter.
   * 
   * @example
   * 10000
   */
  maxScanRows?: number;
  /**
   * @remarks
   * The reserved parameter. This parameter is not supported.
   * 
   * @example
   * None
   */
  maxSpillCnt?: number;
  /**
   * @remarks
   * The minimum execution duration. Unit: microseconds. You can specify this parameter to query the SQL statements whose execution duration is greater than or equal to the value of this parameter.
   * 
   * @example
   * 10
   */
  minLatancy?: number;
  /**
   * @remarks
   * The reserved parameter. This parameter is not supported.
   * 
   * @example
   * None
   */
  minRows?: number;
  /**
   * @remarks
   * The minimum number of scanned rows. You can specify this parameter to query the SQL statements that scan a larger or an equal number of rows than the value of this parameter.
   * 
   * @example
   * 10
   */
  minScanRows?: number;
  /**
   * @remarks
   * The reserved parameter. This parameter is not supported.
   * 
   * @example
   * None
   */
  minSpillCnt?: number;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 2
   */
  pageNumbers?: number;
  /**
   * @remarks
   * The keyword that is used for the query.
   * 
   * >  Fuzzy search is not supported. You can query data by using multiple keywords. Separate keywords with spaces.
   * 
   * @example
   * test
   */
  queryKeyword?: string;
  /**
   * @remarks
   * The reserved parameter. This parameter is not supported.
   * 
   * @example
   * None
   */
  role?: string;
  /**
   * @remarks
   * The basis on which you want to sort the query results.
   * 
   * *   **SCAN_ROWS**: the number of scanned rows.
   * *   **UPDATE_ROWS**: the number of updated rows.
   * *   **CONSUME**: the time consumed.
   * *   **ORIGIN_TIME**: the execution duration.
   * 
   * @example
   * SCAN_ROWS
   */
  sortKey?: string;
  /**
   * @remarks
   * The order in which you want to sort the query results.
   * 
   * *   **ase**: ascending order.
   * *   **desc**: descending order.
   * 
   * @example
   * ase
   */
  sortMethod?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * *   **SELECT**
   * *   **UPDATE**
   * *   **DELETE**
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The beginning of the time range to query must be later than the time when DAS Enterprise Edition is enabled, and can be up to seven days earlier than the current time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1684734297000
   */
  start?: number;
  /**
   * @remarks
   * The execution results. You can specify **0** to query the SQL statements that are successfully executed. You can also specify an error code to query the corresponding SQL statements that fail to be executed.
   * 
   * @example
   * 0
   */
  state?: string;
  /**
   * @remarks
   * The thread ID.
   * 
   * >  You can specify multiple thread IDs that are separated by spaces. Example: `Thread ID1 Thread ID2 Thread ID3`.
   * 
   * @example
   * 657
   */
  threadID?: string;
  /**
   * @remarks
   * The reserved parameter. This parameter is not supported.
   * 
   * @example
   * None
   */
  traceId?: string;
  /**
   * @remarks
   * The transaction ID.
   * 
   * @example
   * 0
   */
  transactionId?: string;
  static names(): { [key: string]: string } {
    return {
      accountName: 'AccountName',
      childDBInstanceIDs: 'ChildDBInstanceIDs',
      DBName: 'DBName',
      end: 'End',
      fail: 'Fail',
      hostAddress: 'HostAddress',
      instanceId: 'InstanceId',
      logicalOperator: 'LogicalOperator',
      maxLatancy: 'MaxLatancy',
      maxRecordsPerPage: 'MaxRecordsPerPage',
      maxRows: 'MaxRows',
      maxScanRows: 'MaxScanRows',
      maxSpillCnt: 'MaxSpillCnt',
      minLatancy: 'MinLatancy',
      minRows: 'MinRows',
      minScanRows: 'MinScanRows',
      minSpillCnt: 'MinSpillCnt',
      pageNumbers: 'PageNumbers',
      queryKeyword: 'QueryKeyword',
      role: 'Role',
      sortKey: 'SortKey',
      sortMethod: 'SortMethod',
      sqlType: 'SqlType',
      start: 'Start',
      state: 'State',
      threadID: 'ThreadID',
      traceId: 'TraceId',
      transactionId: 'TransactionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountName: 'string',
      childDBInstanceIDs: 'string',
      DBName: 'string',
      end: 'number',
      fail: 'string',
      hostAddress: 'string',
      instanceId: 'string',
      logicalOperator: 'string',
      maxLatancy: 'number',
      maxRecordsPerPage: 'number',
      maxRows: 'number',
      maxScanRows: 'number',
      maxSpillCnt: 'number',
      minLatancy: 'number',
      minRows: 'number',
      minScanRows: 'number',
      minSpillCnt: 'number',
      pageNumbers: 'number',
      queryKeyword: 'string',
      role: 'string',
      sortKey: 'string',
      sortMethod: 'string',
      sqlType: 'string',
      start: 'number',
      state: 'string',
      threadID: 'string',
      traceId: 'string',
      transactionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasSQLLogHotDataResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetDasSQLLogHotDataResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * > If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0A74B755-98B7-59DB-8724-1321B394****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetDasSQLLogHotDataResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasSQLLogHotDataResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDasSQLLogHotDataResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDasSQLLogHotDataResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * pc-bp1u5mas9exx7****
   */
  instanceId?: string;
  /**
   * @example
   * pi-bp16v3824rt73****
   */
  nodeId?: string;
  /**
   * @example
   * AUTO
   */
  source?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * a0e390cd5aca9ae964448f040153****
   */
  textId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      source: 'Source',
      textId: 'TextId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nodeId: 'string',
      source: 'string',
      textId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  data?: string;
  /**
   * @example
   * Successful
   */
  message?: string;
  /**
   * @example
   * 9CB97BC4-6479-55D0-B9D0-EA925AFE****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: string;
  /**
   * @example
   * None
   */
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDeadLockDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDeadLockDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailListRequest extends $tea.Model {
  /**
   * @remarks
   * The name of the database. When you specify multiple databases, you must separate the database names with commas (,).
   * 
   * @example
   * school1,school2
   */
  dbNameList?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1702360530292
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze2016723b328gs2
   */
  instanceId?: string;
  /**
   * @remarks
   * The page number. The value must be an integer that is greater than 0. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 5
   */
  pageSize?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1701755730292
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      dbNameList: 'DbNameList',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbNameList: 'string',
      endTime: 'string',
      instanceId: 'string',
      pageNo: 'string',
      pageSize: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailListResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetDeadLockDetailListResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request is successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 840F51F7-9C01-538D-94F6-AE712905****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetDeadLockDetailListResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDeadLockDetailListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDeadLockDetailListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockHistoryRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1732069466000
   */
  endTime?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * pc-bp1u5mas9exx7****
   */
  instanceId?: string;
  /**
   * @example
   * pi-bp16v3824rt73****
   */
  nodeId?: string;
  /**
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * AUTO
   */
  source?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1731983066000
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      source: 'Source',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      instanceId: 'string',
      nodeId: 'string',
      pageNo: 'number',
      pageSize: 'number',
      source: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockHistoryResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: string;
  /**
   * @example
   * {
   *     "total": 2,
   *     "list": [
   *         {
   *             "accountId": "108************",
   *             "textId": "35303d12d52d29ba73bb85fa2d5b****",
   *             "gmtModified": 1732712680000,
   *             "lockTime": 1732687047000,
   *             "gmtCreate": 1732712680000,
   *             "nodeId": "pi-8****************",
   *             "uuid": "pc-8v**************"
   *         },
   *         {
   *             "accountId": "108************",
   *             "textId": "50a24bdcc5fe7e03f92a55ae7574****",
   *             "gmtModified": 1732626448000,
   *             "lockTime": 1722500305000,
   *             "gmtCreate": 1732626448000,
   *             "nodeId": "pi-8****************",
   *             "uuid": "pc-8v**************"
   *         }
   *     ]
   * }
   */
  data?: string;
  /**
   * @example
   * Successful
   */
  message?: string;
  /**
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: string;
  /**
   * @example
   * None
   */
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockHistoryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDeadLockHistoryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDeadLockHistoryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadlockHistogramRequest extends $tea.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1732069466000
   */
  endTime?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * pc-bp1u5mas9exx7****
   */
  instanceId?: string;
  /**
   * @example
   * pi-bp16v3824rt73****
   */
  nodeId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1731983066000
   */
  startTime?: number;
  /**
   * @example
   * SUCCESS
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      startTime: 'StartTime',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      instanceId: 'string',
      nodeId: 'string',
      startTime: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadlockHistogramResponseBody extends $tea.Model {
  /**
   * @example
   * 200
   */
  code?: number;
  data?: GetDeadlockHistogramResponseBodyData[];
  /**
   * @example
   * Successful
   */
  message?: string;
  /**
   * @example
   * 0A74B755-98B7-59DB-8724-1321B394****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: { 'type': 'array', 'itemType': GetDeadlockHistogramResponseBodyData },
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadlockHistogramResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDeadlockHistogramResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDeadlockHistogramResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEndpointSwitchTaskRequest extends $tea.Model {
  taskId?: string;
  uid?: string;
  userId?: string;
  context?: string;
  accessKey?: string;
  signature?: string;
  skipAuth?: string;
  timestamp?: string;
  static names(): { [key: string]: string } {
    return {
      taskId: 'TaskId',
      uid: 'Uid',
      userId: 'UserId',
      context: '__context',
      accessKey: 'accessKey',
      signature: 'signature',
      skipAuth: 'skipAuth',
      timestamp: 'timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskId: 'string',
      uid: 'string',
      userId: 'string',
      context: 'string',
      accessKey: 'string',
      signature: 'string',
      skipAuth: 'string',
      timestamp: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEndpointSwitchTaskResponseBody extends $tea.Model {
  code?: string;
  data?: GetEndpointSwitchTaskResponseBodyData;
  message?: string;
  requestId?: string;
  success?: string;
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetEndpointSwitchTaskResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEndpointSwitchTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetEndpointSwitchTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetEndpointSwitchTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetErrorRequestSampleRequest extends $tea.Model {
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testdb01
   */
  dbName?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval cannot exceed 24 hours.
   * 
   * @example
   * 1642566830000
   */
  end?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * pi-bp179lg03445l****
   */
  nodeId?: string;
  /**
   * @remarks
   * The SQL query ID. You can call the [GetAsyncErrorRequestListByCode](https://help.aliyun.com/document_detail/410746.html) operation to query the ID of the SQL query for which MySQL error code is returned.
   * 
   * @example
   * 2cd4432556c3dab9d825ba363637****
   */
  sqlId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
   * 
   * @example
   * 1642556990714
   */
  start?: number;
  static names(): { [key: string]: string } {
    return {
      dbName: 'DbName',
      end: 'End',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      sqlId: 'SqlId',
      start: 'Start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbName: 'string',
      end: 'number',
      instanceId: 'string',
      nodeId: 'string',
      sqlId: 'string',
      start: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetErrorRequestSampleResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   * 
   * @example
   * [         {             "sqlId": "2cd4432556c3dab9d825ba363637****",             "database": "dbgateway",             "originHost": "172.16.1****",             "tables": [                 "meter_****"             ],             "instanceId": "rm-2ze8g2am97624****",             "errorCode": "1062",             "user": "dbgat****",             "sql": "insert into meter_****\\n        ( \\n        ****\\n     )\\n        values (now(), now(), \\"bbbc8624-5e19-455a-9714-8466f688****\\", \\"2022-02-10 14:00:00\\", \\"{\\"endTime\\":\\"2022-02-10 14:00:00\\",\\"endTimestamp\\":1644472800,\\"startTime\\":\\"2022-02-10 13:00:00\\",\\"startTimestamp\\":1644469200}\\", null, null)",             "timestamp": 1644476100435         }]
   */
  data?: GetErrorRequestSampleResponseBodyData[];
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: { 'type': 'array', 'itemType': GetErrorRequestSampleResponseBodyData },
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetErrorRequestSampleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetErrorRequestSampleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetErrorRequestSampleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEventSubscriptionRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEventSubscriptionResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetEventSubscriptionResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetEventSubscriptionResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEventSubscriptionResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetEventSubscriptionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetEventSubscriptionResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestOriginStatByInstanceIdRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to sort the results in ascending order. By default, the results are not sorted in ascending order.
   * 
   * @example
   * Disabled
   */
  asc?: boolean;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
   * 
   * This parameter is required.
   * 
   * @example
   * 1644803409000
   */
  end?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * pi-bp12v7243x012****
   */
  nodeId?: string;
  /**
   * @remarks
   * The field by which the results to be returned are sorted. Default value: **count**. Valid values:
   * 
   * *   **count**: the number of executions.
   * *   **avgRt**: the average execution duration.
   * *   **rtRate**: the execution duration percentage.
   * *   **rowsExamined**: the total number of scanned rows.
   * *   **avgRowsExamined**: the average number of scanned rows.
   * *   **avgRowsReturned**: the average number of returned rows.
   * 
   * @example
   * count
   */
  orderBy?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 20.
   * 
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The role of the PolarDB-X 2.0 node. Valid values:
   * 
   * *   **polarx_cn**: compute node.
   * *   **polarx_en**: data node.
   * 
   * @example
   * polarx_cn
   */
  role?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
   * 
   * >  If the database instance is an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL instance, or a PolarDB-X 2.0 instance, statistics can be collected based on the SQL statement type.
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The start time must be within the storage duration of the SQL Explorer of the database instance, and can be up to 90 days earlier than the current time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1644716649000
   */
  start?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      end: 'End',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      orderBy: 'OrderBy',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      role: 'Role',
      sqlType: 'SqlType',
      start: 'Start',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'boolean',
      end: 'number',
      instanceId: 'string',
      nodeId: 'string',
      orderBy: 'string',
      pageNo: 'number',
      pageSize: 'number',
      role: 'string',
      sqlType: 'string',
      start: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestOriginStatByInstanceIdResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetFullRequestOriginStatByInstanceIdResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetFullRequestOriginStatByInstanceIdResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestOriginStatByInstanceIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetFullRequestOriginStatByInstanceIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetFullRequestOriginStatByInstanceIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestSampleByInstanceIdRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval between the start time and the end time must be equal to or greater than 1 hour.
   * 
   * This parameter is required.
   * 
   * @example
   * 1660104621000
   */
  end?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The role of the PolarDB-X 2.0 node. Valid values:
   * 
   * *   **polarx_cn**: compute node.
   * *   **polarx_en**: data node.
   * 
   * @example
   * polarx_cn
   */
  role?: string;
  /**
   * @remarks
   * The SQL statement ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 651b56fe9418d48edb8fdf0980ec****
   */
  sqlId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1660097421000
   */
  start?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      end: 'End',
      instanceId: 'InstanceId',
      role: 'Role',
      sqlId: 'SqlId',
      start: 'Start',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      end: 'number',
      instanceId: 'string',
      role: 'string',
      sqlId: 'string',
      start: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestSampleByInstanceIdResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetFullRequestSampleByInstanceIdResponseBodyData[];
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0A74B755-98B7-59DB-8724-1321B394****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: { 'type': 'array', 'itemType': GetFullRequestSampleByInstanceIdResponseBodyData },
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestSampleByInstanceIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetFullRequestSampleByInstanceIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetFullRequestSampleByInstanceIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestStatResultByInstanceIdRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to sort the results in ascending order. By default, the results are not sorted in ascending order.
   * 
   * @example
   * Disabled
   */
  asc?: boolean;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * dbtest01
   */
  dbName?: string;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. The interval cannot exceed one day.
   * 
   * This parameter is required.
   * 
   * @example
   * 1645668213000
   */
  end?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The keywords that are used for query.
   * 
   * @example
   * dbtest01
   */
  keyword?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * pi-bp12v7243x012****
   */
  nodeId?: string;
  /**
   * @remarks
   * The field by which to sort the returned entries. Default value: **count**. Valid values:
   * 
   * *   **count**: the number of executions.
   * *   **avgRt**: the average execution duration.
   * *   **rtRate**: the execution duration percentage.
   * *   **rowsExamined**: the total number of scanned rows.
   * *   **avgRowsExamined**: the average number of scanned rows.
   * *   **avgRowsReturned**: the average number of returned rows.
   * 
   * @example
   * count
   */
  orderBy?: string;
  /**
   * @remarks
   * The IP address of the client that executes the SQL statement.
   * 
   * >  This parameter is optional. If this parameter is specified, the full request statistics of the specified IP address are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
   * 
   * @example
   * 172.26.XX.XXX
   */
  originHost?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 20.
   * 
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The role of the node in the PolarDB-X 2.0 instance. Valid values:
   * 
   * *   **polarx_cn**: compute node.
   * *   **polarx_dn**: data node.
   * 
   * @example
   * polarx_cn
   */
  role?: string;
  /**
   * @remarks
   * The SQL ID.
   * 
   * >  If this parameter is specified, the full request statistics of the specified SQL query are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
   * 
   * @example
   * d71f82be1eef72bd105128204d2e****
   */
  sqlId?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **LOGIN**, **LOGOUT**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
   * 
   * >  If your database instance is an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, or a PolarDB-X 2.0 instance, the statistics can be collected based on the SQL statement type.
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The start time can be up to 90 days earlier than the current time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1645581813000
   */
  start?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that was used to create the database instance.
   * 
   * >  This parameter is optional. The system can automatically obtain the Alibaba Cloud account ID based on the value of InstanceId when you call the GetFullRequestOriginStatByInstanceId operation.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      dbName: 'DbName',
      end: 'End',
      instanceId: 'InstanceId',
      keyword: 'Keyword',
      nodeId: 'NodeId',
      orderBy: 'OrderBy',
      originHost: 'OriginHost',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      role: 'Role',
      sqlId: 'SqlId',
      sqlType: 'SqlType',
      start: 'Start',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'boolean',
      dbName: 'string',
      end: 'number',
      instanceId: 'string',
      keyword: 'string',
      nodeId: 'string',
      orderBy: 'string',
      originHost: 'string',
      pageNo: 'number',
      pageSize: 'number',
      role: 'string',
      sqlId: 'string',
      sqlType: 'string',
      start: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestStatResultByInstanceIdResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetFullRequestStatResultByInstanceIdResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7172BECE-588A-5961-8126-C216E16B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetFullRequestStatResultByInstanceIdResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestStatResultByInstanceIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetFullRequestStatResultByInstanceIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetFullRequestStatResultByInstanceIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMAliyunResourceSyncResultRequest extends $tea.Model {
  taskId?: string;
  uid?: string;
  userId?: string;
  context?: string;
  accessKey?: string;
  signature?: string;
  skipAuth?: string;
  timestamp?: string;
  static names(): { [key: string]: string } {
    return {
      taskId: 'TaskId',
      uid: 'Uid',
      userId: 'UserId',
      context: '__context',
      accessKey: 'accessKey',
      signature: 'signature',
      skipAuth: 'skipAuth',
      timestamp: 'timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskId: 'string',
      uid: 'string',
      userId: 'string',
      context: 'string',
      accessKey: 'string',
      signature: 'string',
      skipAuth: 'string',
      timestamp: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMAliyunResourceSyncResultResponseBody extends $tea.Model {
  code?: string;
  data?: GetHDMAliyunResourceSyncResultResponseBodyData;
  message?: string;
  requestId?: string;
  success?: string;
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetHDMAliyunResourceSyncResultResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMAliyunResourceSyncResultResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetHDMAliyunResourceSyncResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetHDMAliyunResourceSyncResultResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMLastAliyunResourceSyncResultRequest extends $tea.Model {
  uid?: string;
  userId?: string;
  context?: string;
  accessKey?: string;
  signature?: string;
  skipAuth?: string;
  timestamp?: string;
  static names(): { [key: string]: string } {
    return {
      uid: 'Uid',
      userId: 'UserId',
      context: '__context',
      accessKey: 'accessKey',
      signature: 'signature',
      skipAuth: 'skipAuth',
      timestamp: 'timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      uid: 'string',
      userId: 'string',
      context: 'string',
      accessKey: 'string',
      signature: 'string',
      skipAuth: 'string',
      timestamp: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMLastAliyunResourceSyncResultResponseBody extends $tea.Model {
  code?: string;
  data?: GetHDMLastAliyunResourceSyncResultResponseBodyData;
  message?: string;
  requestId?: string;
  success?: string;
  synchro?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      synchro: 'Synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetHDMLastAliyunResourceSyncResultResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
      synchro: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMLastAliyunResourceSyncResultResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetHDMLastAliyunResourceSyncResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetHDMLastAliyunResourceSyncResultResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceInspectionsRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1655427625000
   */
  endTime?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **Redis**
   * *   **PolarDBMySQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The type of the instance on which the database is deployed. Valid values:
   * 
   * *   **RDS**: an Alibaba Cloud database instance.
   * *   **ECS**: an ECS instance on which a self-managed database is deployed.
   * *   **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
   * 
   * >  The value IDC specifies that the instance is deployed in a data center.
   * 
   * This parameter is required.
   * 
   * @example
   * RDS
   */
  instanceArea?: string;
  /**
   * @remarks
   * The page number. The value must be a positive integer. Default value: 1.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The resource group ID.
   * 
   * @example
   * rg-aek2eil6npi****
   */
  resourceGroupId?: string;
  /**
   * @remarks
   * The filter condition, which can be specified in one of the following formats:
   * 
   * *   Specify the ID of a single instance in the {"InstanceId":"Instance ID"} format.
   * *   Specify the IDs of multiple instances in the {"InstanceIds":["Instance ID1","Instance ID2"]} format. Separate the instance IDs with commas (,).
   * *   Specify the region in which the instance resides in the {"region":"Region of the instance"} format.
   * 
   * @example
   * {"InstanceId":"rm-bp10usoc1erj7****"}
   */
  searchMap?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1655416825000
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      engine: 'Engine',
      instanceArea: 'InstanceArea',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      resourceGroupId: 'ResourceGroupId',
      searchMap: 'SearchMap',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      engine: 'string',
      instanceArea: 'string',
      pageNo: 'string',
      pageSize: 'string',
      resourceGroupId: 'string',
      searchMap: 'string',
      startTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceInspectionsResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The details.
   */
  data?: GetInstanceInspectionsResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetInstanceInspectionsResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceInspectionsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetInstanceInspectionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetInstanceInspectionsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceMissingIndexListRequest extends $tea.Model {
  /**
   * @remarks
   * The query condition based on the average cost savings.
   * 
   * @example
   * <=|8
   */
  avgTotalUserCost?: string;
  /**
   * @remarks
   * The query condition based on the performance improvement.
   * 
   * @example
   * >|10000
   */
  avgUserImpact?: string;
  /**
   * @remarks
   * The end time of the last seek.
   * 
   * @example
   * 1681869544000
   */
  endTime?: string;
  /**
   * @remarks
   * The query condition based on the number of indexes.
   * 
   * @example
   * >=|8
   */
  indexCount?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * >  Only ApsaraDB RDS for SQL Server instances are supported.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-************
   */
  instanceId?: string;
  /**
   * @remarks
   * The object name.
   * 
   * @example
   * bas_customer
   */
  objectName?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The query condition based on the total number of pages.
   * 
   * @example
   * >=|100
   */
  reservedPages?: string;
  /**
   * @remarks
   * The query condition based on the table size.
   * 
   * @example
   * >=|100
   */
  reservedSize?: string;
  /**
   * @remarks
   * The query condition based on the number of table rows.
   * 
   * @example
   * >=|100000
   */
  rowCount?: string;
  /**
   * @remarks
   * The start time of the last seek.
   * 
   * @example
   * 1679414400000
   */
  startTime?: string;
  /**
   * @remarks
   * The query condition based on the number of compilations.
   * 
   * @example
   * >=|10000
   */
  uniqueCompiles?: string;
  /**
   * @remarks
   * The query condition based on the number of scans.
   * 
   * @example
   * >=|10000
   */
  userScans?: string;
  /**
   * @remarks
   * The query condition based on the number of seeks.
   * 
   * @example
   * >=|1000
   */
  userSeeks?: string;
  static names(): { [key: string]: string } {
    return {
      avgTotalUserCost: 'AvgTotalUserCost',
      avgUserImpact: 'AvgUserImpact',
      endTime: 'EndTime',
      indexCount: 'IndexCount',
      instanceId: 'InstanceId',
      objectName: 'ObjectName',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      reservedPages: 'ReservedPages',
      reservedSize: 'ReservedSize',
      rowCount: 'RowCount',
      startTime: 'StartTime',
      uniqueCompiles: 'UniqueCompiles',
      userScans: 'UserScans',
      userSeeks: 'UserSeeks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgTotalUserCost: 'string',
      avgUserImpact: 'string',
      endTime: 'string',
      indexCount: 'string',
      instanceId: 'string',
      objectName: 'string',
      pageNo: 'string',
      pageSize: 'string',
      reservedPages: 'string',
      reservedSize: 'string',
      rowCount: 'string',
      startTime: 'string',
      uniqueCompiles: 'string',
      userScans: 'string',
      userSeeks: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceMissingIndexListResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: GetInstanceMissingIndexListResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0A74B755-98B7-59DB-8724-1321B394****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetInstanceMissingIndexListResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceMissingIndexListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetInstanceMissingIndexListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetInstanceMissingIndexListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceSqlOptimizeStatisticRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1662518540764
   */
  endTime?: string;
  /**
   * @remarks
   * Specifies whether to filter instances for which DAS Enterprise Edition is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * >  If you set this parameter to **true**, only database instances for which DAS Enterprise Edition is disabled are queried. If you set this parameter to **false**, all database instances are queried.
   * 
   * @example
   * false
   */
  filterEnable?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * >  The database instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * 
   * This parameter is required.
   * 
   * @example
   * pc-wz90h9560rvdz****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  For ApsaraDB RDS for MySQL Cluster Edition instances or PolarDB for MySQL clusters, you must specify the node ID.
   * 
   * @example
   * pi-bp12v7243x012****
   */
  nodeId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1661308902060
   */
  startTime?: string;
  /**
   * @remarks
   * The duration threshold for automatic SQL optimization events. After this parameter is specified, the system collects statistics on automatic SQL optimization events whose duration does not exceed the specified threshold.
   * 
   * >  This parameter is a reserved parameter and does not take effect.
   * 
   * @example
   * None
   */
  threshold?: string;
  /**
   * @remarks
   * Specifies whether to merge automatic SQL optimization events. Valid values:
   * 
   * *   **true**: merges automatic SQL optimization events.
   * *   **false**: does not merge automatic SQL optimization events.
   * 
   * >  This parameter is a reserved parameter and does not take effect.
   * 
   * @example
   * true
   */
  useMerging?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      filterEnable: 'FilterEnable',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      startTime: 'StartTime',
      threshold: 'Threshold',
      useMerging: 'UseMerging',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      filterEnable: 'string',
      instanceId: 'string',
      nodeId: 'string',
      startTime: 'string',
      threshold: 'string',
      useMerging: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceSqlOptimizeStatisticResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The details of the automatic SQL optimization events.
   */
  data?: GetInstanceSqlOptimizeStatisticResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetInstanceSqlOptimizeStatisticResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceSqlOptimizeStatisticResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetInstanceSqlOptimizeStatisticResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetInstanceSqlOptimizeStatisticResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetKillInstanceSessionTaskResultRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  You must specify this parameter if your database instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * pi-8vbkfj5a756um****
   */
  nodeId?: string;
  /**
   * @remarks
   * The task ID. You can obtain the task ID from the response parameters of the [CreateKillInstanceSessionTask](https://help.aliyun.com/document_detail/609246.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * f77d535b45405bd462b21caa3ee8****
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nodeId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetKillInstanceSessionTaskResultResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetKillInstanceSessionTaskResultResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetKillInstanceSessionTaskResultResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetKillInstanceSessionTaskResultResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetKillInstanceSessionTaskResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetKillInstanceSessionTaskResultResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMongoDBCurrentOpRequest extends $tea.Model {
  /**
   * @remarks
   * The `db.currentOp()` command that is used to filter sessions. For more information, see [db.currentOp()](https://docs.mongodb.com/manual/reference/method/db.currentOp/) of MongoDB Documentation.
   * 
   * @example
   * { "active" : true }
   */
  filterDoc?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * dds-uf608087********
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  If you do not specify a node ID, the sessions of the primary node are queried by default.
   * 
   * @example
   * 23302531
   */
  nodeId?: string;
  /**
   * @remarks
   * A reserved parameter. You do not need to specify the parameter.
   * 
   * @example
   * None
   */
  role?: string;
  static names(): { [key: string]: string } {
    return {
      filterDoc: 'FilterDoc',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      role: 'Role',
    };
  }

  static types(): { [key: string]: any } {
    return {
      filterDoc: 'string',
      instanceId: 'string',
      nodeId: 'string',
      role: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMongoDBCurrentOpResponseBody extends $tea.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The details of the sessions.
   */
  data?: GetMongoDBCurrentOpResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * FC6C0929-29E1-59FD-8DFE-70D9D41E****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetMongoDBCurrentOpResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMongoDBCurrentOpResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetMongoDBCurrentOpResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetMongoDBCurrentOpResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * >  Only ApsaraDB RDS for MySQL, PolarDB for MySQL, and PolarDB-X 2.0 instances are supported.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  You must specify this parameter for PolarDB for MySQL clusters. If you do not specify a node ID, the session data of the primary node is returned by default.
   * 
   * @example
   * pi-wz954ryd8f893****
   */
  nodeId?: string;
  /**
   * @remarks
   * The asynchronous request ID.
   * 
   * >  GetMySQLAllSessionAsync is an asynchronous operation. After a request is sent, the system does not return complete results but returns a **request ID**. You need to use the **request ID** to initiate requests until the value of the **isFinish** field in the returned results is **true**, the complete results are returned. This indicates that to obtain complete data, you must call this operation at least twice.
   * 
   * @example
   * async__507044db6c4eadfa2dab9b084e80****
   */
  resultId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      resultId: 'ResultId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nodeId: 'string',
      resultId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetMySQLAllSessionAsyncResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetMySQLAllSessionAsyncResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetMySQLAllSessionAsyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetMySQLAllSessionAsyncResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPartitionsHeatmapRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * pxc-hzrciqy62c****
   */
  instanceId?: string;
  /**
   * @remarks
   * The time range to be queried. Valid values:
   * 
   * *   **LAST_ONE_HOURS**: the last hour.
   * *   **LAST_SIX_HOURS**: the last six hours.
   * *   **LAST_ONE_DAYS**: the last day.
   * *   **LAST_THREE_DAYS**: the last three days.
   * *   **LAST_SEVEN_DAYS**: the last seven days.
   * 
   * @example
   * LAST_SIX_HOURS
   */
  timeRange?: string;
  /**
   * @remarks
   * The type of the data to be queried. Valid values:
   * 
   * *   **READ_ROWS**: the read rows.
   * *   **WRITTEN_ROWS**: the written rows.
   * *   **READ_WRITTEN_ROWS**: the read and written rows.
   * *   **UPDATE_ROWS**: the updated rows.
   * *   **INSERTED_ROWS**: the inserted rows.
   * *   **DELETED_ROWS**: the deleted rows.
   * *   **READ_ROWS_WITH_DN**: the read rows returned from a data node.
   * *   **WRITTEN_ROWS_WITH_DN**: the written rows returned from a data node.
   * *   **READ_WRITTEN_ROWS_WITH_DN**: the read and written rows returned from a data node.
   * 
   * @example
   * WRITTEN_ROWS_WITH_DN
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
      timeRange: 'TimeRange',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
      timeRange: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPartitionsHeatmapResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The hot data of the PolarDB-X 2.0 instance. The data is returned in JSON format.
   * 
   * @example
   * {
   *     "boundAxis": [
   *         {
   *             "bound": "A,B,C,D",
   *             "labels": [
   *                 "L1",
   *                 "L2",
   *                 "L3",
   *                 "L4"
   *             ],
   *             "rows": 3171
   *         },
   *         {
   *             "bound": "A,B,C,D",
   *             "labels": [
   *                 "L1",
   *                 "L2",
   *                 "L3",
   *                 "L4"
   *             ],
   *             "rows": 277128
   *         }
   *     ],
   *     "dataMap": {
   *         "READ_WRITTEN_ROWS": [
   *             [
   *                 0,
   *                 0,
   *                 0
   *             ],
   *             [
   *                 0,
   *                 0,
   *                 0
   *             ]
   *         ]
   *     },
   *     "timeAxis": [
   *         1671701056070,
   *         1671701116551,
   *         1671701177020
   *     ]
   * }
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * D00DB161-FEF6-5428-B37A-8D29A4C2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPartitionsHeatmapResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetPartitionsHeatmapResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetPartitionsHeatmapResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsMetricTrendsRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. You can view the data of up to seven days in the previous 30 days.
   * 
   * @example
   * 1678432430967
   */
  endTime?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-m5ea73876ukci****
   */
  instanceId?: string;
  /**
   * @remarks
   * The metric whose trend you want to query. Valid values:
   * 
   * *   **count**: the number of executions.
   * *   **avgRt**: the average execution duration.
   * *   **rtRate**: the execution duration percentage.
   * *   **rowsExamined**: the total number of scanned rows.
   * 
   * @example
   * Count
   */
  metric?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is required if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL clusters.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1677461663092
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      metric: 'Metric',
      nodeId: 'NodeId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      instanceId: 'string',
      metric: 'string',
      nodeId: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsMetricTrendsResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: { [key: string]: DataValue[] };
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * F4C27966-284E-51C4-9407-DB50CAB8****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DataValue } },
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsMetricTrendsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetPfsMetricTrendsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetPfsMetricTrendsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSampleRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. You can view the data of up to seven days in the previous 30 days.
   * 
   * This parameter is required.
   * 
   * @example
   * 1678074351197
   */
  endTime?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * >  Only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters are supported
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  For ApsaraDB RDS for MySQL Cluster Edition instances or PolarDB for MySQL clusters, you must specify the node ID.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The SQL ID.
   * 
   * @example
   * 651b56fe9418d48edb8fdf0980ec****
   */
  sqlId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1676511134614
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      sqlId: 'SqlId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      instanceId: 'string',
      nodeId: 'string',
      sqlId: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSampleResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The SQL sample data.
   */
  data?: GetPfsSqlSampleResponseBodyData[];
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 9CB97BC4-6479-55D0-B9D0-EA925AFE****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: { 'type': 'array', 'itemType': GetPfsSqlSampleResponseBodyData },
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSampleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetPfsSqlSampleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetPfsSqlSampleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSummariesRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to sort the returned entries in ascending order. Default value: **false**. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  asc?: boolean;
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time. You can view the data of up to seven days within the last month.
   * 
   * @example
   * 1679297005999
   */
  endTime?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-uf61swc4cru0b****
   */
  instanceId?: string;
  /**
   * @remarks
   * The keywords of the SQL template. Separate multiple keywords with spaces.
   * 
   * @example
   * select update
   */
  keywords?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is required if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL cluster.
   * 
   * @example
   * r-****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The field by which to sort the returned entries. Default value: **count**.
   * 
   * *   **count**: the number of executions.
   * *   **avgRt**: the average execution duration.
   * *   **rtRate**: the execution duration percentage.
   * *   **rowsExamined**: the total number of scanned rows.
   * *   **avgRowsExamined**: the average number of scanned rows.
   * *   **avgRowsReturned**: the average number of returned rows.
   * 
   * @example
   * count
   */
  orderBy?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 10. Valid values: 1 to 100.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The SQL ID.
   * 
   * >  If this parameter is specified, the full request statistics of the specified SQL query are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
   * 
   * @example
   * 651b56fe9418d48edb8fdf0980ec****
   */
  sqlId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1675833788056
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      keywords: 'Keywords',
      nodeId: 'NodeId',
      orderBy: 'OrderBy',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      sqlId: 'SqlId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'boolean',
      endTime: 'number',
      instanceId: 'string',
      keywords: 'string',
      nodeId: 'string',
      orderBy: 'string',
      pageNo: 'number',
      pageSize: 'number',
      sqlId: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSummariesResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetPfsSqlSummariesResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 54F3DBAE-9420-511A-9C29-265E8C04****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetPfsSqlSummariesResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSummariesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetPfsSqlSummariesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetPfsSqlSummariesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataStatsRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
   * 
   * *   **true**: sorts the returned entries in ascending order.
   * *   **false**: does not sort the returned entries in ascending order.
   * 
   * @example
   * true
   */
  asc?: string;
  /**
   * @remarks
   * The name of the database to be queried.
   * 
   * @example
   * testdb01
   */
  dbNames?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PolarDBMySQL**
   * *   **PostgreSQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance IDs. Separate multiple IDs with commas (,).
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceIds?: string;
  /**
   * @remarks
   * The keywords of the SQL template. Separate multiple keywords with spaces.
   * 
   * @example
   * select update
   */
  keywords?: string;
  /**
   * @remarks
   * The logical relationship between multiple keywords. Valid values:
   * 
   * *   **or**
   * *   **and**
   * 
   * @example
   * or
   */
  logicalOperator?: string;
  /**
   * @remarks
   * Specifies whether to query only SQL templates that need to be optimized. Default value: **false**. Valid values:
   * 
   * *   **true**: queries only SQL templates that need to be optimized.
   * *   **false**: does not query only SQL statements that need to be optimized.
   * 
   * @example
   * false
   */
  onlyOptimizedSql?: string;
  /**
   * @remarks
   * The field by which to sort the returned entries. Default value: **count**. Valid values:
   * 
   * *   **count**: the number of executions.
   * *   **maxQueryTime**: the longest execution time.
   * *   **avgQueryTime**: the average execution time.
   * *   **maxLockTime**: the longest lock wait time.
   * *   **avgLockTime**: the longest lock wait time.
   * *   **maxRowsExamined**: the largest number of scanned rows.
   * *   **avgRowsExamined**: the average number of scanned rows.
   * *   **maxRowsSent**: the largest number of returned rows.
   * *   **avgRowsSent**: the average number of returned rows.
   * 
   * @example
   * count
   */
  orderBy?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The region in which the instance resides. Valid values:
   * 
   * *   **cn-china**: Chinese mainland
   * *   **cn-hongkong**: China (Hong Kong)
   * *   **ap-southeast-1**: Singapore
   * 
   * This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
   * 
   * >  Set this parameter to **cn-china** for the instances that are created in the regions in the Chinese mainland.
   * 
   * @example
   * cn-china
   */
  region?: string;
  /**
   * @remarks
   * The tags that are used to filter SQL templates. Separate multiple tags with commas (,). For more information, see [Query governance](https://help.aliyun.com/document_detail/290038.html).
   * 
   * @example
   * DAS_NOT_IMPORTANT
   */
  rules?: string;
  /**
   * @remarks
   * The SQL template ID. You can query the ID of a template by calling the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405235.html) operation.
   * 
   * @example
   * 2e8147b5ca2dfc640dfd5e43d96a****
   */
  sqlIds?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  tagNames?: string;
  /**
   * @remarks
   * The time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
   * 
   * This parameter is required.
   * 
   * @example
   * 1642953600000
   */
  time?: string;
  /**
   * @remarks
   * The account of the database to be queried.
   * 
   * @example
   * testUser
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      dbNames: 'DbNames',
      engine: 'Engine',
      instanceIds: 'InstanceIds',
      keywords: 'Keywords',
      logicalOperator: 'LogicalOperator',
      onlyOptimizedSql: 'OnlyOptimizedSql',
      orderBy: 'OrderBy',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      region: 'Region',
      rules: 'Rules',
      sqlIds: 'SqlIds',
      tagNames: 'TagNames',
      time: 'Time',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'string',
      dbNames: 'string',
      engine: 'string',
      instanceIds: 'string',
      keywords: 'string',
      logicalOperator: 'string',
      onlyOptimizedSql: 'string',
      orderBy: 'string',
      pageNo: 'string',
      pageSize: 'string',
      region: 'string',
      rules: 'string',
      sqlIds: 'string',
      tagNames: 'string',
      time: 'string',
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataStatsResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetQueryOptimizeDataStatsResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeDataStatsResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataStatsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeDataStatsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeDataStatsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTopRequest extends $tea.Model {
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PolarDBMySQL**
   * *   **PostgreSQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance IDs. Separate multiple IDs with commas (,).
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceIds?: string;
  /**
   * @remarks
   * The region in which the instance resides. Valid values:
   * 
   * *   **cn-china**: Chinese mainland
   * *   **cn-hongkong**: China (Hong Kong)
   * *   **ap-southeast-1**: Singapore
   * 
   * This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
   * 
   * >  Set this parameter to **cn-china** for all your instances that reside in the regions in the Chinese mainland.
   * 
   * @example
   * cn-china
   */
  region?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  tagNames?: string;
  /**
   * @remarks
   * The time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1642953600000
   */
  time?: string;
  /**
   * @remarks
   * The type of instances that you want to query. Valid values:
   * 
   * *   **RED**: the best-performing instances
   * *   **BLACK**: the worst-performing instances
   * 
   * This parameter is required.
   * 
   * @example
   * RED
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      engine: 'Engine',
      instanceIds: 'InstanceIds',
      region: 'Region',
      tagNames: 'TagNames',
      time: 'Time',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      engine: 'string',
      instanceIds: 'string',
      region: 'string',
      tagNames: 'string',
      time: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTopResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: GetQueryOptimizeDataTopResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeDataTopResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTopResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeDataTopResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeDataTopResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTrendRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time, but not later than 00:00:00 (UTC+8) on the current day.
   * 
   * This parameter is required.
   * 
   * @example
   * 1643040000000
   */
  end?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PolarDBMySQL**
   * *   **PostgreSQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance IDs. Separate multiple IDs with commas (,).
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceIds?: string;
  /**
   * @remarks
   * The region in which the instance resides. Valid values:
   * 
   * *   **cn-china**: Chinese mainland.
   * *   **cn-hongkong**: China (Hong Kong).
   * *   **ap-southeast-1**: Singapore.
   * 
   * This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region specified by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
   * 
   * >  If your instances reside in the regions inside the Chinese mainland, set this parameter to **cn-china**.
   * 
   * @example
   * cn-china
   */
  region?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  You can specify a start time up to two months earlier than the current time.
   * 
   * This parameter is required.
   * 
   * @example
   * 1642435200000
   */
  start?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  tagNames?: string;
  static names(): { [key: string]: string } {
    return {
      end: 'End',
      engine: 'Engine',
      instanceIds: 'InstanceIds',
      region: 'Region',
      start: 'Start',
      tagNames: 'TagNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      end: 'string',
      engine: 'string',
      instanceIds: 'string',
      region: 'string',
      start: 'string',
      tagNames: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTrendResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: GetQueryOptimizeDataTrendResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeDataTrendResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTrendResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeDataTrendResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeDataTrendResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorSampleRequest extends $tea.Model {
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PolarDBMySQL**
   * *   **PostgreSQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The SQL template ID. You can call the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405235.html) operation to obtain the SQL template ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 2e8147b5ca2dfc640dfd5e43d96a****
   */
  sqlId?: string;
  /**
   * @remarks
   * The date to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1642953600000
   */
  time?: string;
  static names(): { [key: string]: string } {
    return {
      engine: 'Engine',
      instanceId: 'InstanceId',
      sqlId: 'SqlId',
      time: 'Time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      engine: 'string',
      instanceId: 'string',
      sqlId: 'string',
      time: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorSampleResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: GetQueryOptimizeExecErrorSampleResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeExecErrorSampleResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorSampleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeExecErrorSampleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeExecErrorSampleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorStatsRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
   * 
   * *   **true**: sorts the returned entries in ascending order.
   * *   **false**: does not sort the returned entries in ascending order.
   * 
   * @example
   * true
   */
  asc?: string;
  /**
   * @remarks
   * The name of the database to be queried.
   * 
   * @example
   * testdb01
   */
  dbNames?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PolarDBMySQL**
   * *   **PostgreSQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance IDs. Separate multiple IDs with commas (,).
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceIds?: string;
  /**
   * @remarks
   * The keywords of the SQL template. Separate multiple keywords with spaces.
   * 
   * @example
   * select update
   */
  keywords?: string;
  /**
   * @remarks
   * The logical relationship between multiple keywords. Valid values:
   * 
   * *   **or**
   * *   **and**
   * 
   * @example
   * or
   */
  logicalOperator?: string;
  /**
   * @remarks
   * The field by which to sort the returned entries. Only error_count is supported, which specifies that the entries are sorted based on the number of failed executions.
   * 
   * @example
   * error_count
   */
  orderBy?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: string;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: string;
  /**
   * @remarks
   * The region in which the instance resides. Valid values:
   * 
   * *   **cn-china**: Chinese mainland
   * *   **cn-hongkong**: China (Hong Kong)
   * *   **ap-southeast-1**: Singapore
   * 
   * This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
   * 
   * >  Set this parameter to **cn-china** for the instances that are created in the regions in the Chinese mainland.
   * 
   * @example
   * cn-china
   */
  region?: string;
  /**
   * @remarks
   * The time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
   * 
   * This parameter is required.
   * 
   * @example
   * 1642953600000
   */
  time?: string;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      dbNames: 'DbNames',
      engine: 'Engine',
      instanceIds: 'InstanceIds',
      keywords: 'Keywords',
      logicalOperator: 'LogicalOperator',
      orderBy: 'OrderBy',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      region: 'Region',
      time: 'Time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'string',
      dbNames: 'string',
      engine: 'string',
      instanceIds: 'string',
      keywords: 'string',
      logicalOperator: 'string',
      orderBy: 'string',
      pageNo: 'string',
      pageSize: 'string',
      region: 'string',
      time: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorStatsResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: GetQueryOptimizeExecErrorStatsResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeExecErrorStatsResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorStatsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeExecErrorStatsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeExecErrorStatsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeRuleListRequest extends $tea.Model {
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PolarDBMySQL**
   * *   **PostgreSQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance IDs. Separate multiple IDs with commas (,).
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceIds?: string;
  /**
   * @remarks
   * The region in which the instance resides. Valid values:
   * 
   * *   **cn-china**: Chinese mainland
   * *   **cn-hongkong**: China (Hong Kong)
   * *   **ap-southeast-1**: Singapore
   * 
   * This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
   * 
   * >  If your instances reside in the regions in the Chinese mainland, set this parameter to **cn-china**.
   * 
   * @example
   * cn-china
   */
  region?: string;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  tagNames?: string;
  static names(): { [key: string]: string } {
    return {
      engine: 'Engine',
      instanceIds: 'InstanceIds',
      region: 'Region',
      tagNames: 'TagNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      engine: 'string',
      instanceIds: 'string',
      region: 'string',
      tagNames: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeRuleListResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: GetQueryOptimizeRuleListResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeRuleListResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeRuleListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeRuleListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeRuleListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeShareUrlRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  asc?: boolean;
  /**
   * @remarks
   * The name of the database to be queried.
   * 
   * @example
   * testdb01
   */
  dbNames?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**: ApsaraDB RDS for MySQL
   * *   **PolarDBMySQL**: PolarDB for MySQL
   * *   **PostgreSQL**: ApsaraDB RDS for PostgreSQL
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance IDs. Separate multiple IDs with commas (,).
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceIds?: string;
  /**
   * @remarks
   * The keywords of the SQL template. Separate multiple keywords with spaces.
   * 
   * @example
   * select update
   */
  keywords?: string;
  /**
   * @remarks
   * The logical relationship between multiple keywords. Valid values:
   * 
   * *   **or**
   * *   **and**
   * 
   * @example
   * or
   */
  logicalOperator?: string;
  /**
   * @remarks
   * Specifies whether to query only SQL templates that need to be optimized. Default value: **false**. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  onlyOptimizedSql?: boolean;
  /**
   * @remarks
   * The field by which to sort the returned entries. Default value: **count**. Valid values:
   * 
   * *   **count**: the number of executions.
   * *   **maxQueryTime**: the longest execution duration.
   * *   **avgQueryTime**: the average execution duration.
   * *   **maxLockTime**: the longest lock wait duration.
   * *   **avgLockTime**: the average lock wait duration.
   * *   **maxRowsExamined**: the largest number of scanned rows.
   * *   **avgRowsExamined**: the average number of scanned rows.
   * *   **maxRowsSent**: the largest number of returned rows.
   * *   **avgRowsSent**: the average number of returned rows.
   * 
   * @example
   * count
   */
  orderBy?: string;
  /**
   * @remarks
   * The page number. Pages start from page 1. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The region in which the instance resides. Valid values:
   * 
   * *   **cn-china**: Chinese mainland
   * *   **cn-hongkong**: China (Hong Kong)
   * *   **ap-southeast-1**: Singapore
   * 
   * This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
   * 
   * >  If your instances reside in the regions in the Chinese mainland, set this parameter to **cn-china**.
   * 
   * @example
   * cn-china
   */
  region?: string;
  /**
   * @remarks
   * The tags that are used to filter SQL templates. Separate multiple tags with commas (,). For more information, see [Query governance](https://help.aliyun.com/document_detail/290038.html).
   * 
   * @example
   * DAS_NOT_IMPORTANT
   */
  rules?: string;
  /**
   * @remarks
   * The SQL template IDs. You can call the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405261.html) operation to obtain the SQL template IDs.
   * 
   * @example
   * 6068ce044e3dc9b903979672fb0b69df,d12515c015fc9f41a0778a9e1de0****
   */
  sqlIds?: string;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  tagNames?: string;
  /**
   * @remarks
   * The date to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1642953600000
   */
  time?: number;
  /**
   * @remarks
   * The account of the database to be queried.
   * 
   * @example
   * testUser
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      dbNames: 'DbNames',
      engine: 'Engine',
      instanceIds: 'InstanceIds',
      keywords: 'Keywords',
      logicalOperator: 'LogicalOperator',
      onlyOptimizedSql: 'OnlyOptimizedSql',
      orderBy: 'OrderBy',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      region: 'Region',
      rules: 'Rules',
      sqlIds: 'SqlIds',
      tagNames: 'TagNames',
      time: 'Time',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'boolean',
      dbNames: 'string',
      engine: 'string',
      instanceIds: 'string',
      keywords: 'string',
      logicalOperator: 'string',
      onlyOptimizedSql: 'boolean',
      orderBy: 'string',
      pageNo: 'number',
      pageSize: 'number',
      region: 'string',
      rules: 'string',
      sqlIds: 'string',
      tagNames: 'string',
      time: 'number',
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeShareUrlResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The share URL.
   * 
   * @example
   * https://hdm.console.aliyun.com/#/queryOptimize?Keywords=&OnlyOptimizedSql=true&Time=1684771200000&Engine=MySQL&InstanceIds=&Rules=&PageNo=1&PageSize=10&OrderBy=count&Asc=false&SqlIds=&dbNames=&region=cn-china&user=
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeShareUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeShareUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeShareUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeSolutionRequest extends $tea.Model {
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PolarDBMySQL**
   * *   **PostgreSQL**
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance ID. You can call the [GetQueryOptimizeDataStats](https://help.aliyun.com/document_detail/405261.html) operation to query the instance ID.
   * 
   * @example
   * rm-bp1o3z6beqpej****
   */
  instanceId?: string;
  /**
   * @remarks
   * The tag ID. For more information, see [Query governance](https://help.aliyun.com/document_detail/290038.html).
   * 
   * This parameter is required.
   * 
   * @example
   * LARGE_ROWS_EXAMINED
   */
  ruleIds?: string;
  /**
   * @remarks
   * The SQL template ID. You can call the [GetQueryOptimizeDataStats](https://help.aliyun.com/document_detail/405261.html) operation to query the SQL template ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 05fecf7e7b3efd123c4d5197035f****
   */
  sqlId?: string;
  static names(): { [key: string]: string } {
    return {
      engine: 'Engine',
      instanceId: 'InstanceId',
      ruleIds: 'RuleIds',
      sqlId: 'SqlId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      engine: 'string',
      instanceId: 'string',
      ruleIds: 'string',
      sqlId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeSolutionResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetQueryOptimizeSolutionResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 30FF4E40-17F3-5A51-AB23-43F30D9B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeSolutionResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeSolutionResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeSolutionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeSolutionResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeTagRequest extends $tea.Model {
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**: ApsaraDB RDS for MySQL
   * *   **PolarDBMySQL**: PolarDB for MySQL
   * *   **PostgreSQL**: ApsaraDB RDS for PostgreSQL
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The SQL template ID. You can call the [GetQueryOptimizeDataStats](https://help.aliyun.com/document_detail/405261.html) operation to query the SQL template ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 29d9fef63e347d39c3436658a5fe5f2b
   */
  sqlId?: string;
  static names(): { [key: string]: string } {
    return {
      engine: 'Engine',
      instanceId: 'InstanceId',
      sqlId: 'SqlId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      engine: 'string',
      instanceId: 'string',
      sqlId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeTagResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The returned SQL tag data.
   */
  data?: GetQueryOptimizeTagResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetQueryOptimizeTagResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeTagResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetQueryOptimizeTagResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetQueryOptimizeTagResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRedisAllSessionRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-2zemyfd1sh1u2i****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRedisAllSessionResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The session data.
   */
  data?: GetRedisAllSessionResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 40C6E9AF-6C23-5614-AA83-34344CC6****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetRedisAllSessionResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRedisAllSessionResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetRedisAllSessionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetRedisAllSessionResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisPageRequest extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1634972640000
   */
  endTime?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-0iwhhl8gx0ld6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  You must specify the node ID if your database instance is a PolarDB for MySQL, PolarDB for PostgreSQL (Compatible with Oracle), or ApsaraDB for MongoDB instance.
   * 
   * @example
   * 202****
   */
  nodeId?: string;
  /**
   * @remarks
   * The page number. The value must be a positive integer. Default value: 1.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. The value must be a positive integer. Default value: 10.
   * 
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 1633071840000
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      instanceId: 'string',
      nodeId: 'string',
      pageNo: 'number',
      pageSize: 'number',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisPageResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetRequestDiagnosisPageResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 800FBAF5-A539-5B97-A09E-C63AB2F7****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetRequestDiagnosisPageResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisPageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetRequestDiagnosisPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetRequestDiagnosisPageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisResultRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-0iwhhl8gx0ld6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The unique ID of the diagnostic task.[](~~341609~~)
   * 
   * >  If you set MessageId to the task ID of the automatic SQL optimization feature, no result is returned.
   * 
   * This parameter is required.
   * 
   * @example
   * 61820b594664275c4429****
   */
  messageId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster, a PolarDB for PostgreSQL (compatible with Oracle) instance, or an ApsaraDB for MongoDB database.
   * 
   * @example
   * 202****
   */
  nodeId?: string;
  /**
   * @remarks
   * The source of the task.
   * 
   * >  This parameter is required if you call this operation in the DAS console. You do not need to specify this parameter when you call this operation.
   * 
   * @example
   * None
   */
  source?: string;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * >  This parameter is required if you call this operation in the DAS console. You do not need to specify this parameter when you call this operation.
   * 
   * @example
   * None
   */
  sqlId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      messageId: 'MessageId',
      nodeId: 'NodeId',
      source: 'Source',
      sqlId: 'SqlId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      messageId: 'string',
      nodeId: 'string',
      source: 'string',
      sqlId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisResultResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The returned data.
   */
  data?: GetRequestDiagnosisResultResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 800FBAF5-A539-5B97-A09E-C63AB2F7****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetRequestDiagnosisResultResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisResultResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetRequestDiagnosisResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetRequestDiagnosisResultResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRunningSqlConcurrencyControlRulesRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * >  You must specify this parameter only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The page number. The value must be a positive integer. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. The value must be a positive integer. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
      pageNo: 'number',
      pageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRunningSqlConcurrencyControlRulesResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: GetRunningSqlConcurrencyControlRulesResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetRunningSqlConcurrencyControlRulesResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRunningSqlConcurrencyControlRulesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetRunningSqlConcurrencyControlRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetRunningSqlConcurrencyControlRulesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlKeywordsFromSqlTextRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze5hpn2b99d2****
   */
  instanceId?: string;
  /**
   * @remarks
   * The SQL statement based on which a throttling keyword string is to be generated.
   * 
   * This parameter is required.
   * 
   * @example
   * SELECT * FROM test where name = \\"das\\"
   */
  sqlText?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
      sqlText: 'SqlText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
      sqlText: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The throttling keyword string that was generated based on the SQL statement.
   * 
   * @example
   * SELECT~FROM~test~where~name
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 30A643F5-D7A6-55F5-AB75-DF501427****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlKeywordsFromSqlTextResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlRulesHistoryRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * >  Only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters are supported.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The page number. The value must be an integer that is greater than 0. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. The value must be an integer that is greater than 0. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
      pageNo: 'number',
      pageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlRulesHistoryResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: GetSqlConcurrencyControlRulesHistoryResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetSqlConcurrencyControlRulesHistoryResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlRulesHistoryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetSqlConcurrencyControlRulesHistoryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetSqlConcurrencyControlRulesHistoryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlOptimizeAdviceRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The end date of the time range to query. Specify the date in the *yyyyMMdd* format. The time must be in UTC.
   * 
   * *   The default value of this parameter is one day before the current day.
   * *   The value must be earlier than the current day. The interval between the start date and the end date cannot exceed 30 days.
   * 
   * @example
   * 20210917
   */
  endDt?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**: ApsaraDB RDS for MySQL.
   * *   **PolarDBMySQL**: PolarDB for MySQL.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * >  You must specify the instance ID only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceIds?: string;
  /**
   * @remarks
   * The region in which the instance resides. Valid values:
   * 
   * *   **cn-china**: Chinese mainland.
   * *   **cn-hongkong**: China (Hong Kong).
   * *   **ap-southeast-1**: Singapore.
   * 
   * This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region specified by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect, and the system obtains data from the region in which the first specified instance resides.****
   * 
   * >  If your instances reside in the regions inside the Chinese mainland, set this parameter to **cn-china**.
   * 
   * @example
   * cn-china
   */
  region?: string;
  /**
   * @remarks
   * The start date of the time range to query. Specify the date in the *yyyyMMdd* format. The time must be in UTC.
   * 
   * *   The default value of this parameter is one day before the current day.
   * *   The value must be earlier than the current day.
   * 
   * @example
   * 20210916
   */
  startDt?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      endDt: 'EndDt',
      engine: 'Engine',
      instanceIds: 'InstanceIds',
      region: 'Region',
      startDt: 'StartDt',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      endDt: 'string',
      engine: 'string',
      instanceIds: 'string',
      region: 'string',
      startDt: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlOptimizeAdviceResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  data?: GetSqlOptimizeAdviceResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetSqlOptimizeAdviceResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlOptimizeAdviceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetSqlOptimizeAdviceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetSqlOptimizeAdviceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStorageAnalysisResultRequest extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-bp10xxxxxxxxx
   */
  instanceId?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is reserved.
   * 
   * @example
   * 202****
   */
  nodeId?: string;
  /**
   * @remarks
   * The task ID. You can obtain the task ID from the response of the [CreateStorageAnalysisTask](https://help.aliyun.com/document_detail/2639140.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * 910f83f4b96df0524ddc5749f615****
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nodeId: 'NodeId',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nodeId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStorageAnalysisResultResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: GetStorageAnalysisResultResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request is successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: GetStorageAnalysisResultResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStorageAnalysisResultResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetStorageAnalysisResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetStorageAnalysisResultResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class KillInstanceAllSessionRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * r-8vbcyr4sw0c4yc****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class KillInstanceAllSessionResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class KillInstanceAllSessionResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: KillInstanceAllSessionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: KillInstanceAllSessionResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigRequest extends $tea.Model {
  /**
   * @remarks
   * The configuration item of the bandwidth auto scaling feature.
   */
  bandwidth?: ModifyAutoScalingConfigRequestBandwidth;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The configuration item of the resource auto scaling feature.
   */
  resource?: ModifyAutoScalingConfigRequestResource;
  /**
   * @remarks
   * The configuration item of the shard auto scaling feature.
   */
  shard?: ModifyAutoScalingConfigRequestShard;
  /**
   * @remarks
   * The configuration item of the specification auto scaling feature.
   */
  spec?: ModifyAutoScalingConfigRequestSpec;
  /**
   * @remarks
   * The configuration item of the automatic storage expansion feature.
   */
  storage?: ModifyAutoScalingConfigRequestStorage;
  static names(): { [key: string]: string } {
    return {
      bandwidth: 'Bandwidth',
      instanceId: 'InstanceId',
      resource: 'Resource',
      shard: 'Shard',
      spec: 'Spec',
      storage: 'Storage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bandwidth: ModifyAutoScalingConfigRequestBandwidth,
      instanceId: 'string',
      resource: ModifyAutoScalingConfigRequestResource,
      shard: ModifyAutoScalingConfigRequestShard,
      spec: ModifyAutoScalingConfigRequestSpec,
      storage: ModifyAutoScalingConfigRequestStorage,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyAutoScalingConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyAutoScalingConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifySqlLogConfigRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to enable DAS Enterprise Edition. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * >  This parameter is required if you want to enable DAS Enterprise Edition. By default, the latest version of DAS Enterprise Edition that supports the database instance is enabled.
   * 
   * @example
   * true
   */
  enable?: boolean;
  /**
   * @remarks
   * A reserved parameter.
   */
  filters?: ModifySqlLogConfigRequestFilters[];
  /**
   * @remarks
   * The number of days for which the SQL Explorer and Audit data is stored in hot storage. Valid values: 1 to 7.
   * 
   * >  This parameter is required if only DAS Enterprise Edition V3 can be enabled for the database instance.
   * 
   * @example
   * 1
   */
  hotRetention?: number;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * rr-2ze770smbq3tpr2o9
   */
  instanceId?: string;
  /**
   * @remarks
   * Specifies whether to enable the SQL Explorer feature. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * >  This parameter is required if only DAS Enterprise Edition V3 can be enabled for the database instance.
   * 
   * @example
   * true
   */
  requestEnable?: boolean;
  /**
   * @remarks
   * The total storage duration of the SQL Explorer and Audit data. Unit: day. Valid values:
   * 
   * *   7
   * *   30
   * *   180
   * *   365
   * 
   * >  If you want to enable DAS Enterprise Edition V3, the value of this parameter must be greater than or equal to 30.
   * 
   * @example
   * 30
   */
  retention?: number;
  static names(): { [key: string]: string } {
    return {
      enable: 'Enable',
      filters: 'Filters',
      hotRetention: 'HotRetention',
      instanceId: 'InstanceId',
      requestEnable: 'RequestEnable',
      retention: 'Retention',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enable: 'boolean',
      filters: { 'type': 'array', 'itemType': ModifySqlLogConfigRequestFilters },
      hotRetention: 'number',
      instanceId: 'string',
      requestEnable: 'boolean',
      retention: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifySqlLogConfigResponseBody extends $tea.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 403
   */
  code?: string;
  /**
   * @remarks
   * The data returned.
   */
  data?: ModifySqlLogConfigResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 03C88D8E-1541-518E-8BFF-BEC6589B6334
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * False
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: ModifySqlLogConfigResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifySqlLogConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifySqlLogConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifySqlLogConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCloudBenchTaskRequest extends $tea.Model {
  /**
   * @remarks
   * The stress testing task ID. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the task ID.
   * 
   * This parameter is required.
   * 
   * @example
   * e5cec704-0518-430f-8263-76f4dcds****
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCloudBenchTaskResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of returned entries.
   */
  data?: RunCloudBenchTaskResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: RunCloudBenchTaskResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCloudBenchTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RunCloudBenchTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RunCloudBenchTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetEventSubscriptionRequest extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to enable the event subscription feature. Valid values:
   * 
   * *   **0**: disables the event subscription feature.
   * *   **1**: enables the event subscription feature.
   * 
   * @example
   * 1
   */
  active?: string;
  /**
   * @remarks
   * The notification method. Valid values:
   * 
   * *   **hdm_alarm_sms**: text message.
   * *   **dingtalk**: DingTalk chatbot.
   * *   **hdm_alarm_sms_and_email**: text message and email.
   * *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
   * 
   * @example
   * hdm_alarm_sms,dingtalk
   */
  channelType?: string;
  /**
   * @remarks
   * The name of the contact group that receives alert notifications. Separate multiple names with commas (,).
   * 
   * @example
   * Default contact group
   */
  contactGroupName?: string;
  /**
   * @remarks
   * The name of the contact who receives alert notifications. Separate multiple names with commas (,).
   * 
   * @example
   * Default contact
   */
  contactName?: string;
  /**
   * @remarks
   * The notification rules based on the event type. If you leave this parameter empty, the values of **MinInterval** and **ChannelType** prevail.
   * 
   * Specify this parameter in the following format: `{"silenced": {"Event type 1":Specifies whether to enable adaptive silence, "Event type 2":Specify whether to enable adaptive silence},"min_interval": {"Event type 1":Minimum interval between event notifications, "Event type 2":Minimum interval between event notifications},"alert_type": {"Event type 1":"Notification method", "Event type 2":"Notification method"}}`.
   * 
   * *   **silenced**: specifies whether to enable adaptive silence. After you enable adaptive silence, the interval between consecutive alert notifications for an event is the greater one of the minimum interval specified by **min_interval** and one third of the event duration. Valid values:
   * 
   *     *   1: enables adaptive silence.
   *     *   2: disables adaptive silence.
   * 
   * *   **min_interval**: the minimum interval between event notifications. Unit: seconds.
   * 
   * *   **alert_type**: the notification method. Valid values:
   * 
   *     *   **hdm_alarm_sms**: text message.
   *     *   **dingtalk**: DingTalk chatbot.
   *     *   **hdm_alarm_sms_and_email**: text message and email.
   *     *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
   * 
   * @example
   * {"silenced": {"AutoScale":1, "SQLThrottle":0, "TimeSeriesAbnormal": 1}, "min_interval": {"AutoScale":300, "SQLThrottle":360, "TimeSeriesAbnormal": 120}, "alert_type": {"AutoScale":"hdm_alarm_sms", "SQLThrottle":"hdm_alarm_sms_and_email", "TimeSeriesAbnormal": "hdm_alarm_sms,dingtalk"}}
   */
  dispatchRule?: string;
  /**
   * @remarks
   * The supported event scenarios. You can set the value to **AllContext**, which indicates that all scenarios are supported.
   * 
   * @example
   * AllContext
   */
  eventContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The language of event notifications. You can set the value to **zh-CN**, which indicates that event notifications are sent in Chinese.
   * 
   * @example
   * zh-CN
   */
  lang?: string;
  /**
   * @remarks
   * The risk level of the events. Valid values:
   * 
   * *   **Notice**: events that trigger notifications, including events at the **Notice**, **Optimization**, **Warn**, and **Critical** levels.
   * *   **Optimization**: events that trigger optimizations, including events at the **Optimization**, **Warn**, and **Critical** levels.
   * *   **Warn**: events that trigger warnings, including events at the **Warn** and **Critical** levels.
   * *   **Critical**: events that trigger critical warnings.
   * 
   * The following content describes the events at each level in detail:
   * 
   * *   Notice: events that are related to database exceptions for which no suggestions are generated.
   * *   Optimization: events for which optimization suggestions are generated based on the status of the database.
   * *   Warn: events that may affect the running of the database.
   * *   Critical: events that affect the running of the database.
   * 
   * @example
   * Optimization
   */
  level?: string;
  /**
   * @remarks
   * The minimum interval between consecutive event notifications. Unit: seconds.
   * 
   * @example
   * 60
   */
  minInterval?: string;
  /**
   * @remarks
   * The alert severity based on the event type.
   * 
   * Specify this parameter in the following format: `{"Event type 1":"Alert severity", "Event type 2":"Alert severity"}`.
   * 
   * Valid values of event types:
   * 
   * *   **AutoScale**: auto scaling event.
   * *   **SQLThrottle**: throttling event.
   * *   **TimeSeriesAbnormal**: event for detecting time series anomalies.
   * *   **SQLOptimize**: SQL optimization event.
   * *   **ResourceOptimize**: storage optimization event.
   * 
   * Valid values of alert severities:
   * 
   * *   **info**
   * *   **noticed**
   * *   **warning**
   * *   **critical**
   * 
   * @example
   * {"AutoScale":"critical","SQLThrottle":"info","TimeSeriesAbnormal":"warning"}
   */
  severity?: string;
  static names(): { [key: string]: string } {
    return {
      active: 'Active',
      channelType: 'ChannelType',
      contactGroupName: 'ContactGroupName',
      contactName: 'ContactName',
      dispatchRule: 'DispatchRule',
      eventContext: 'EventContext',
      instanceId: 'InstanceId',
      lang: 'Lang',
      level: 'Level',
      minInterval: 'MinInterval',
      severity: 'Severity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      active: 'string',
      channelType: 'string',
      contactGroupName: 'string',
      contactName: 'string',
      dispatchRule: 'string',
      eventContext: 'string',
      instanceId: 'string',
      lang: 'string',
      level: 'string',
      minInterval: 'string',
      severity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetEventSubscriptionResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The detailed information.
   */
  data?: SetEventSubscriptionResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 097F0C56-B252-515A-B602-FC56EF93EF8A
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: SetEventSubscriptionResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetEventSubscriptionResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetEventSubscriptionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetEventSubscriptionResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoResourceOptimizeRulesAsyncRequest extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The database instance IDs.
   * 
   * >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\", \\"Instance ID2\\"]`.
   * 
   * This parameter is required.
   * 
   * @example
   * [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
   */
  instanceIds?: string;
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId** returned in the response to re-initiate the call until the value of **isFinish** is **true**.**** In this case, you must call this operation at least twice.
   * 
   * @example
   * async__507044db6c4eadfa2dab9b084e80****
   */
  resultId?: string;
  /**
   * @remarks
   * The fragmentation rate that triggers automatic fragment recycling of a single physical table. Valid values: **0.10** to **0.99**.
   * 
   * This parameter is required.
   * 
   * @example
   * 0.2
   */
  tableFragmentationRatio?: number;
  /**
   * @remarks
   * The minimum storage usage that triggers automatic fragment recycling of a single physical table. Valid values: **5** to **100**. Unit: GB.
   * 
   * This parameter is required.
   * 
   * @example
   * 10
   */
  tableSpaceSize?: number;
  static names(): { [key: string]: string } {
    return {
      consoleContext: 'ConsoleContext',
      instanceIds: 'InstanceIds',
      resultId: 'ResultId',
      tableFragmentationRatio: 'TableFragmentationRatio',
      tableSpaceSize: 'TableSpaceSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleContext: 'string',
      instanceIds: 'string',
      resultId: 'string',
      tableFragmentationRatio: 'number',
      tableSpaceSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoResourceOptimizeRulesAsyncResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: UpdateAutoResourceOptimizeRulesAsyncResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 9CB97BC4-6479-55D0-B9D0-EA925AFE****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: UpdateAutoResourceOptimizeRulesAsyncResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoResourceOptimizeRulesAsyncResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAutoResourceOptimizeRulesAsyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAutoResourceOptimizeRulesAsyncResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoSqlOptimizeStatusRequest extends $tea.Model {
  /**
   * @remarks
   * The database instance IDs. Separate multiple IDs with commas (,).
   * 
   * >  You can specify up to 50 instance IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * rm-bp10usoc1erj7****,rm-bp10usoc1erj7****
   */
  instances?: string;
  /**
   * @remarks
   * The status of the automatic SQL optimization feature. Valid values:
   * 
   * *   **0**: The automatic SQL optimization feature is disabled.
   * *   **1**: **SQL diagnosis and automatic index creation** is specified.
   * *   **3**: **SQL diagnosis only** is specified.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      instances: 'Instances',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instances: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoSqlOptimizeStatusResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The returned data.
   */
  data?: UpdateAutoSqlOptimizeStatusResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * A52AD37C-35ED-581A-AC23-2232BE54****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: UpdateAutoSqlOptimizeStatusResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoSqlOptimizeStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAutoSqlOptimizeStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAutoSqlOptimizeStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoThrottleRulesAsyncRequest extends $tea.Model {
  /**
   * @remarks
   * The duration threshold for triggering automatic SQL throttling. Set this parameter to an integer that is greater than or equal to 2. Unit: minutes.
   * 
   * This parameter is required.
   * 
   * @example
   * 2
   */
  abnormalDuration?: number;
  /**
   * @remarks
   * The threshold for the number of active sessions.
   * 
   * *   If this parameter and CpuUsage are in the **OR** relationship, set this parameter to an integer that is greater than or equal to 16.
   * *   If this parameter and CpuUsage are in the **AND** relationship, set this parameter to an integer that is greater than or equal to 2.
   * 
   * This parameter is required.
   * 
   * @example
   * 16
   */
  activeSessions?: number;
  /**
   * @remarks
   * The end time of the throttling window. The time must be in UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 23:59Z
   */
  allowThrottleEndTime?: string;
  /**
   * @remarks
   * The start time of the throttling window. The time must be in UTC.
   * 
   * This parameter is required.
   * 
   * @example
   * 00:00Z
   */
  allowThrottleStartTime?: string;
  /**
   * @remarks
   * Specifies whether to terminate abnormal SQL statements in execution at the same time. Valid values:
   * 
   * >  Abnormal SQL statements use the same template as the SQL statements to be throttled.
   * 
   * *   **true**
   * *   **false**
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  autoKillSession?: boolean;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  consoleContext?: string;
  /**
   * @remarks
   * The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
   * 
   * *   **AND**
   * *   **OR**
   * 
   * This parameter is required.
   * 
   * @example
   * OR
   */
  cpuSessionRelation?: string;
  /**
   * @remarks
   * The threshold for CPU utilization. Valid values: 70% to 100%.
   * 
   * This parameter is required.
   * 
   * @example
   * 70
   */
  cpuUsage?: number;
  /**
   * @remarks
   * The database instance IDs.
   * 
   * >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\", \\"Instance ID2\\"]`.
   * 
   * This parameter is required.
   * 
   * @example
   * [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
   */
  instanceIds?: string;
  /**
   * @remarks
   * The maximum throttling duration. Set this parameter to a positive integer. Unit: minutes.
   * 
   * This parameter is required.
   * 
   * @example
   * 10
   */
  maxThrottleTime?: number;
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * >  You can leave this parameter empty when you call the operation to initiate the request for the first time, and use the value of this parameter contained in the response to the first request for subsequent requests.
   * 
   * @example
   * async__507044db6c4eadfa2dab9b084e80****
   */
  resultId?: string;
  static names(): { [key: string]: string } {
    return {
      abnormalDuration: 'AbnormalDuration',
      activeSessions: 'ActiveSessions',
      allowThrottleEndTime: 'AllowThrottleEndTime',
      allowThrottleStartTime: 'AllowThrottleStartTime',
      autoKillSession: 'AutoKillSession',
      consoleContext: 'ConsoleContext',
      cpuSessionRelation: 'CpuSessionRelation',
      cpuUsage: 'CpuUsage',
      instanceIds: 'InstanceIds',
      maxThrottleTime: 'MaxThrottleTime',
      resultId: 'ResultId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abnormalDuration: 'number',
      activeSessions: 'number',
      allowThrottleEndTime: 'string',
      allowThrottleStartTime: 'string',
      autoKillSession: 'boolean',
      consoleContext: 'string',
      cpuSessionRelation: 'string',
      cpuUsage: 'number',
      instanceIds: 'string',
      maxThrottleTime: 'number',
      resultId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoThrottleRulesAsyncResponseBody extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The data returned.
   */
  data?: UpdateAutoThrottleRulesAsyncResponseBodyData;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B6D17591-B48B-4D31-9CD6-9B9796B2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: UpdateAutoThrottleRulesAsyncResponseBodyData,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoThrottleRulesAsyncResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAutoThrottleRulesAsyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAutoThrottleRulesAsyncResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddHDMInstanceResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The user ID of the caller.
   * 
   * @example
   * 31063db679****
   */
  callerUid?: string;
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * InvalidRequestURL
   */
  error?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The endpoint of the instance.
   * 
   * @example
   * rm-de21209****.mysql.rds.aliyuncs.com
   */
  ip?: string;
  /**
   * @remarks
   * The ID of the instance owner.
   * 
   * @example
   * 325352345
   */
  ownerId?: string;
  /**
   * @remarks
   * The port number of the instance that you want to access.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The role of the current API caller.
   * 
   * @example
   * master
   */
  role?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * @example
   * L0EPfLS****=SCE00000*****
   */
  tenantId?: string;
  /**
   * @remarks
   * The client token that is used to ensure the idempotence of the request.
   * 
   * @example
   * tokenID
   */
  token?: string;
  /**
   * @remarks
   * The unique identifier of the instance.
   * 
   * @example
   * hdm_3063db6792965c080a4bcb6e6304****
   */
  uuid?: string;
  /**
   * @remarks
   * The VPC ID.
   * 
   * @example
   * vpc-m5e666n89m2bx8jar****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      callerUid: 'CallerUid',
      code: 'Code',
      error: 'Error',
      instanceId: 'InstanceId',
      ip: 'Ip',
      ownerId: 'OwnerId',
      port: 'Port',
      role: 'Role',
      tenantId: 'TenantId',
      token: 'Token',
      uuid: 'Uuid',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callerUid: 'string',
      code: 'number',
      error: 'string',
      instanceId: 'string',
      ip: 'string',
      ownerId: 'string',
      port: 'number',
      role: 'string',
      tenantId: 'string',
      token: 'string',
      uuid: 'string',
      vpcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo extends $tea.Model {
  /**
   * @remarks
   * The number of bytes that are occupied by the key.
   * 
   * @example
   * 12345
   */
  bytes?: number;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 127
   */
  count?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The data type of the key.
   * 
   * @example
   * hashtable
   */
  encoding?: string;
  /**
   * @remarks
   * The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
   * 
   * @example
   * 1596256542547
   */
  expirationTimeMillis?: number;
  /**
   * @remarks
   * The name of the key.
   * 
   * @example
   * task_x****
   */
  key?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The data type of the ApsaraDB for Redis instance.
   * 
   * @example
   * hash
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bytes: 'Bytes',
      count: 'Count',
      db: 'Db',
      encoding: 'Encoding',
      expirationTimeMillis: 'ExpirationTimeMillis',
      key: 'Key',
      nodeId: 'NodeId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bytes: 'number',
      count: 'number',
      db: 'number',
      encoding: 'string',
      expirationTimeMillis: 'number',
      key: 'string',
      nodeId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCacheAnalysisJobResponseBodyDataBigKeys extends $tea.Model {
  keyInfo?: CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      keyInfo: 'KeyInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyInfo: { 'type': 'array', 'itemType': CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCacheAnalysisJobResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of elements in the key.
   */
  bigKeys?: CreateCacheAnalysisJobResponseBodyDataBigKeys;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the cache analysis task.
   * 
   * >  This parameter can be used to query a specific cache analysis task. When you call the CreateCacheAnalysisJob operation, it takes some time to create a cache analysis task. As a result, the analysis results cannot be immediately returned. You can call the [DescribeCacheAnalysisJob](https://help.aliyun.com/document_detail/180983.html) operation to query the analysis results of the specified cache analysis task.
   * 
   * @example
   * sf79-sd99-sa37-****
   */
  jobId?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The state of the cache analysis task. Valid values:
   * 
   * *   **BACKUP**: The data is being backed up.
   * *   **ANALYZING**: The data is being analyzed.
   * *   **FINISHED**: The data is analyzed.
   * *   **FAILED**: An error occurred.
   * 
   * @example
   * BACKUP
   */
  taskState?: string;
  static names(): { [key: string]: string } {
    return {
      bigKeys: 'BigKeys',
      instanceId: 'InstanceId',
      jobId: 'JobId',
      message: 'Message',
      nodeId: 'NodeId',
      taskState: 'TaskState',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bigKeys: CreateCacheAnalysisJobResponseBodyDataBigKeys,
      instanceId: 'string',
      jobId: 'string',
      message: 'string',
      nodeId: 'string',
      taskState: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudBenchTasksResponseBodyData extends $tea.Model {
  taskIds?: string[];
  static names(): { [key: string]: string } {
    return {
      taskIds: 'taskIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSqlLogTaskRequestFilters extends $tea.Model {
  /**
   * @remarks
   * The name of the filter parameter.
   * 
   * >  For more information about the supported filter parameters and their valid values, see the following **supplement about the Key parameter**.
   * 
   * @example
   * KeyWords
   */
  key?: string;
  /**
   * @remarks
   * The value of the filter parameter.
   * 
   * @example
   * select
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSqlLogTaskResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The time when the task was created. This value is a UNIX timestamp. Unit: milliseconds.
   * 
   * @example
   * 1681363254423
   */
  createTime?: number;
  /**
   * @remarks
   * The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  end?: number;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * pc-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The name of the task.
   * 
   * @example
   * Export_test
   */
  name?: string;
  /**
   * @remarks
   * The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1596177993000
   */
  start?: number;
  /**
   * @remarks
   * The state of the task. Valid values:
   * 
   * *   **INIT**: The task is to be scheduled.
   * *   **RUNNING**: The task is running.
   * *   **FAILED**: The task failed.
   * *   **CANCELED**: The task is canceled.
   * *   **COMPLETED**: The task is complete.
   * 
   * >  You can view the result of a task that is in the **COMPLETED** state.
   * 
   * @example
   * COMPLETED
   */
  status?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * 54f8041743ca3a9ac5cb9342d050527c
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      end: 'End',
      instanceId: 'InstanceId',
      name: 'Name',
      start: 'Start',
      status: 'Status',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'number',
      end: 'number',
      instanceId: 'string',
      name: 'string',
      start: 'number',
      status: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStorageAnalysisTaskResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the task is created. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  createTaskSuccess?: boolean;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * unknown error
   */
  errorMessage?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * 910f83f4b96df0524ddc5749f61539f8
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      createTaskSuccess: 'CreateTaskSuccess',
      errorMessage: 'ErrorMessage',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTaskSuccess: 'boolean',
      errorMessage: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponseBodyDataBandwidth extends $tea.Model {
  /**
   * @remarks
   * The average bandwidth usage threshold that triggers automatic bandwidth downgrade. Unit: %.
   * 
   * @example
   * 30
   */
  bandwidthUsageLowerThreshold?: number;
  /**
   * @remarks
   * The average bandwidth usage threshold that triggers automatic bandwidth adjustment. Unit: %.
   * 
   * @example
   * 70
   */
  bandwidthUsageUpperThreshold?: number;
  /**
   * @remarks
   * Indicates whether the automatic bandwidth downgrade feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  downgrade?: boolean;
  /**
   * @remarks
   * The observation window of the automatic bandwidth adjustment feature. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
   * 
   * *   **s**: seconds.
   * *   **m**: minutes.
   * *   **h**: hours.
   * *   **d**: days.
   * 
   * >  A value of **5m** indicates 5 minutes.
   * 
   * @example
   * 5m
   */
  observationWindowSize?: string;
  /**
   * @remarks
   * Indicates whether the automatic bandwidth adjustment feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  upgrade?: boolean;
  static names(): { [key: string]: string } {
    return {
      bandwidthUsageLowerThreshold: 'BandwidthUsageLowerThreshold',
      bandwidthUsageUpperThreshold: 'BandwidthUsageUpperThreshold',
      downgrade: 'Downgrade',
      observationWindowSize: 'ObservationWindowSize',
      upgrade: 'Upgrade',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bandwidthUsageLowerThreshold: 'number',
      bandwidthUsageUpperThreshold: 'number',
      downgrade: 'boolean',
      observationWindowSize: 'string',
      upgrade: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponseBodyDataResource extends $tea.Model {
  /**
   * @remarks
   * The scale-out step size of CPU.
   * 
   * @example
   * 2
   */
  cpuStep?: number;
  /**
   * @remarks
   * The average CPU utilization threshold that triggers automatic scale-out of local resources. Unit: %.
   * 
   * @example
   * 70
   */
  cpuUsageUpperThreshold?: number;
  /**
   * @remarks
   * The observation window of the automatic scale-in feature for local resources. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
   * 
   * *   **s**: seconds.
   * *   **m**: minutes.
   * *   **h**: hours.
   * *   **d**: days.
   * 
   * >  A value of **5m** indicates 5 minutes.
   * 
   * @example
   * 5m
   */
  downgradeObservationWindowSize?: string;
  /**
   * @remarks
   * Indicates whether the auto scaling feature is enabled for local resources. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  enable?: boolean;
  /**
   * @remarks
   * The observation window of the automatic scale-out feature for local resources. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
   * 
   * *   **s**: seconds.
   * *   **m**: minutes.
   * *   **h**: hours.
   * *   **d**: days.
   * 
   * >  A value of **5m** indicates 5 minutes.
   * 
   * @example
   * 5m
   */
  upgradeObservationWindowSize?: string;
  static names(): { [key: string]: string } {
    return {
      cpuStep: 'CpuStep',
      cpuUsageUpperThreshold: 'CpuUsageUpperThreshold',
      downgradeObservationWindowSize: 'DowngradeObservationWindowSize',
      enable: 'Enable',
      upgradeObservationWindowSize: 'UpgradeObservationWindowSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cpuStep: 'number',
      cpuUsageUpperThreshold: 'number',
      downgradeObservationWindowSize: 'string',
      enable: 'boolean',
      upgradeObservationWindowSize: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponseBodyDataShard extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the feature of automatically removing shards is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  downgrade?: boolean;
  /**
   * @remarks
   * The observation window of the feature of automatically removing shards. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
   * 
   * *   **s**: seconds.
   * *   **m**: minutes.
   * *   **h**: hours.
   * *   **d**: days.
   * 
   * >  A value of **1d** indicates one day.
   * 
   * @example
   * 1d
   */
  downgradeObservationWindowSize?: string;
  /**
   * @remarks
   * The maximum number of shards in the instance.
   * 
   * @example
   * 16
   */
  maxShards?: number;
  /**
   * @remarks
   * The average memory usage threshold that triggers automatic removal of shards. Unit: %.
   * 
   * @example
   * 30
   */
  memUsageLowerThreshold?: number;
  /**
   * @remarks
   * The average memory usage threshold that triggers automatic adding of shards. Unit: %.
   * 
   * @example
   * 70
   */
  memUsageUpperThreshold?: number;
  /**
   * @remarks
   * The minimum number of shards in the instance.
   * 
   * @example
   * 4
   */
  minShards?: number;
  /**
   * @remarks
   * Indicates whether the feature of automatically adding shards is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  upgrade?: boolean;
  /**
   * @remarks
   * The observation window of the feature of automatically adding shards. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
   * 
   * *   **s**: seconds.
   * *   **m**: minutes.
   * *   **h**: hours.
   * *   **d**: days.
   * 
   * >  A value of **5m** indicates 5 minutes.
   * 
   * @example
   * 5m
   */
  upgradeObservationWindowSize?: string;
  static names(): { [key: string]: string } {
    return {
      downgrade: 'Downgrade',
      downgradeObservationWindowSize: 'DowngradeObservationWindowSize',
      maxShards: 'MaxShards',
      memUsageLowerThreshold: 'MemUsageLowerThreshold',
      memUsageUpperThreshold: 'MemUsageUpperThreshold',
      minShards: 'MinShards',
      upgrade: 'Upgrade',
      upgradeObservationWindowSize: 'UpgradeObservationWindowSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downgrade: 'boolean',
      downgradeObservationWindowSize: 'string',
      maxShards: 'number',
      memUsageLowerThreshold: 'number',
      memUsageUpperThreshold: 'number',
      minShards: 'number',
      upgrade: 'boolean',
      upgradeObservationWindowSize: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponseBodyDataSpec extends $tea.Model {
  /**
   * @remarks
   * The quiescent period. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
   * 
   * *   **s**: seconds.
   * *   **m**: minutes.
   * *   **h**: hours.
   * *   **d**: days.
   * 
   * >  A value of **5m** indicates 5 minutes.
   * 
   * @example
   * 5m
   */
  coolDownTime?: string;
  /**
   * @remarks
   * The average CPU utilization threshold that triggers automatic specification scale-up. Unit: %.
   * 
   * @example
   * 70
   */
  cpuUsageUpperThreshold?: number;
  /**
   * @remarks
   * Indicates whether the automatic specification scale-down feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  downgrade?: boolean;
  /**
   * @remarks
   * The maximum number of read-only nodes of the instance.
   * 
   * @example
   * 10
   */
  maxReadOnlyNodes?: number;
  /**
   * @remarks
   * The maximum specifications to which the cluster can be scaled up. For more information about the specifications of each type of supported database instances, see the following topics:
   * 
   * *   PolarDB for MySQL Cluster Edition instances: [Compute node specifications of PolarDB for MySQL Enterprise Edition](https://help.aliyun.com/document_detail/102542.html)
   * *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: [Specifications](https://help.aliyun.com/document_detail/276974.html)
   * 
   * @example
   * polar.mysql.x8.12xlarge
   */
  maxSpec?: string;
  /**
   * @remarks
   * The average memory usage threshold that triggers automatic specification scale-up. Unit: %.
   * 
   * @example
   * 70
   */
  memUsageUpperThreshold?: number;
  /**
   * @remarks
   * The observation window. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
   * 
   * *   **s**: seconds.
   * *   **m**: minutes.
   * *   **h**: hours.
   * *   **d**: days.
   * 
   * >  A value of **5m** indicates 5 minutes.
   * 
   * @example
   * 5m
   */
  observationWindowSize?: string;
  /**
   * @remarks
   * Indicates whether the automatic specification scale-up feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  upgrade?: boolean;
  static names(): { [key: string]: string } {
    return {
      coolDownTime: 'CoolDownTime',
      cpuUsageUpperThreshold: 'CpuUsageUpperThreshold',
      downgrade: 'Downgrade',
      maxReadOnlyNodes: 'MaxReadOnlyNodes',
      maxSpec: 'MaxSpec',
      memUsageUpperThreshold: 'MemUsageUpperThreshold',
      observationWindowSize: 'ObservationWindowSize',
      upgrade: 'Upgrade',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coolDownTime: 'string',
      cpuUsageUpperThreshold: 'number',
      downgrade: 'boolean',
      maxReadOnlyNodes: 'number',
      maxSpec: 'string',
      memUsageUpperThreshold: 'number',
      observationWindowSize: 'string',
      upgrade: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponseBodyDataStorage extends $tea.Model {
  /**
   * @remarks
   * The average storage usage threshold that triggers automatic storage expansion. Unit: %.
   * 
   * @example
   * 70
   */
  diskUsageUpperThreshold?: number;
  /**
   * @remarks
   * The maximum storage size. Unit: GB.
   * 
   * @example
   * 32000
   */
  maxStorage?: number;
  /**
   * @remarks
   * Indicates whether the automatic storage expansion feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  upgrade?: boolean;
  static names(): { [key: string]: string } {
    return {
      diskUsageUpperThreshold: 'DiskUsageUpperThreshold',
      maxStorage: 'MaxStorage',
      upgrade: 'Upgrade',
    };
  }

  static types(): { [key: string]: any } {
    return {
      diskUsageUpperThreshold: 'number',
      maxStorage: 'number',
      upgrade: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingConfigResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The configurations of the automatic bandwidth adjustment feature.
   */
  bandwidth?: DescribeAutoScalingConfigResponseBodyDataBandwidth;
  /**
   * @remarks
   * The configurations of the auto scaling feature for local resources.
   */
  resource?: DescribeAutoScalingConfigResponseBodyDataResource;
  /**
   * @remarks
   * The configurations of the auto scaling feature for shards.
   */
  shard?: DescribeAutoScalingConfigResponseBodyDataShard;
  /**
   * @remarks
   * The configurations of the auto scaling feature for specifications.
   */
  spec?: DescribeAutoScalingConfigResponseBodyDataSpec;
  /**
   * @remarks
   * The configurations of the automatic storage expansion feature.
   */
  storage?: DescribeAutoScalingConfigResponseBodyDataStorage;
  static names(): { [key: string]: string } {
    return {
      bandwidth: 'Bandwidth',
      resource: 'Resource',
      shard: 'Shard',
      spec: 'Spec',
      storage: 'Storage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bandwidth: DescribeAutoScalingConfigResponseBodyDataBandwidth,
      resource: DescribeAutoScalingConfigResponseBodyDataResource,
      shard: DescribeAutoScalingConfigResponseBodyDataShard,
      spec: DescribeAutoScalingConfigResponseBodyDataSpec,
      storage: DescribeAutoScalingConfigResponseBodyDataStorage,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingHistoryResponseBodyDataSpecHistory extends $tea.Model {
  /**
   * @remarks
   * The error code returned by the scaling task. Valid values:
   * 
   * *   **Insufficient_Balance**: The account has insufficient balance or an unpaid order.
   * *   **REACH_SPEC_UPPERBOUND**: The instance type reaches the upper limit.
   * *   **Control_Error_Timeout_Msg**: The management task timed out.
   * *   **Invoke_Rds_Api_Error_Msg**: Failed to call the ApsaraDB RDS API.
   * 
   * @example
   * Insufficient_Balance
   */
  errorCode?: string;
  /**
   * @remarks
   * The original number of CPU cores of the instance.
   * 
   * @example
   * 4
   */
  originCore?: number;
  /**
   * @remarks
   * The original instance type.
   * 
   * @example
   * mysql.n2.large.2c
   */
  originInstanceClass?: string;
  /**
   * @remarks
   * The original memory size of the instance. Unit: GB.
   * 
   * @example
   * 8
   */
  originMemory?: number;
  /**
   * @remarks
   * The type of the automatic performance scaling task. Valid values:
   * 
   * *   **SCALE_UP**: automatic instance type scale-up task.
   * *   **SCALE_DOWN**: automatic instance type scale-down task.
   * 
   * @example
   * SCALE_UP
   */
  scaleType?: string;
  /**
   * @remarks
   * The destination number of CPU cores of the instance.
   * 
   * @example
   * 8
   */
  targetCore?: number;
  /**
   * @remarks
   * The destination instance type.
   * 
   * @example
   * mysql.n2.xlarge.2c
   */
  targetInstanceClass?: string;
  /**
   * @remarks
   * The destination memory size of the instance. Unit: GB.
   * 
   * @example
   * 16
   */
  targetMemory?: number;
  /**
   * @remarks
   * The status of the task. Valid values:
   * 
   * *   **true**: The task was successful.
   * *   **false**: The task failed.
   * 
   * @example
   * true
   */
  taskExcuteStatus?: boolean;
  /**
   * @remarks
   * The time when the task was run. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1684830763000
   */
  taskTime?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      originCore: 'OriginCore',
      originInstanceClass: 'OriginInstanceClass',
      originMemory: 'OriginMemory',
      scaleType: 'ScaleType',
      targetCore: 'TargetCore',
      targetInstanceClass: 'TargetInstanceClass',
      targetMemory: 'TargetMemory',
      taskExcuteStatus: 'TaskExcuteStatus',
      taskTime: 'TaskTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      originCore: 'number',
      originInstanceClass: 'string',
      originMemory: 'number',
      scaleType: 'string',
      targetCore: 'number',
      targetInstanceClass: 'string',
      targetMemory: 'number',
      taskExcuteStatus: 'boolean',
      taskTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoScalingHistoryResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The history of automatic bandwidth scaling of ApsaraDB for Redis instances. This feature is not supported.
   */
  bandwidth?: { [key: string]: any }[];
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The history of resource scale-out of ApsaraDB for Redis instances. This feature is not supported.
   */
  resource?: { [key: string]: any }[];
  /**
   * @remarks
   * The history of automatic shard scale-out of ApsaraDB for Redis instances. This feature is not supported.
   */
  shard?: { [key: string]: any }[];
  /**
   * @remarks
   * The history of automatic performance scaling.
   */
  specHistory?: DescribeAutoScalingHistoryResponseBodyDataSpecHistory[];
  /**
   * @remarks
   * The history of storage expansion. This feature is not supported.
   */
  storage?: { [key: string]: any }[];
  static names(): { [key: string]: string } {
    return {
      bandwidth: 'Bandwidth',
      instanceId: 'InstanceId',
      resource: 'Resource',
      shard: 'Shard',
      specHistory: 'SpecHistory',
      storage: 'Storage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bandwidth: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
      instanceId: 'string',
      resource: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
      shard: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
      specHistory: { 'type': 'array', 'itemType': DescribeAutoScalingHistoryResponseBodyDataSpecHistory },
      storage: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo extends $tea.Model {
  /**
   * @remarks
   * The number of bytes that are occupied by the key.
   * 
   * @example
   * 12345
   */
  bytes?: number;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 127
   */
  count?: number;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The data type of the key.
   * 
   * @example
   * hashtable
   */
  encoding?: string;
  /**
   * @remarks
   * The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
   * 
   * @example
   * 1596256542547
   */
  expirationTimeMillis?: number;
  /**
   * @remarks
   * The key name.
   * 
   * @example
   * task_x****
   */
  key?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The data type of the instance.
   * 
   * @example
   * hash
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bytes: 'Bytes',
      count: 'Count',
      db: 'Db',
      encoding: 'Encoding',
      expirationTimeMillis: 'ExpirationTimeMillis',
      key: 'Key',
      nodeId: 'NodeId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bytes: 'number',
      count: 'number',
      db: 'number',
      encoding: 'string',
      expirationTimeMillis: 'number',
      key: 'string',
      nodeId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataBigKeys extends $tea.Model {
  keyInfo?: DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      keyInfo: 'KeyInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyInfo: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo extends $tea.Model {
  /**
   * @remarks
   * The number of bytes that are occupied by the key.
   * 
   * @example
   * 12345
   */
  bytes?: number;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 127
   */
  count?: number;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The data type of the key.
   * 
   * @example
   * hashtable
   */
  encoding?: string;
  /**
   * @remarks
   * The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
   * 
   * @example
   * 1596256542547
   */
  expirationTimeMillis?: number;
  /**
   * @remarks
   * The key name.
   * 
   * @example
   * task_x****
   */
  key?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The data type of the instance.
   * 
   * @example
   * hash
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bytes: 'Bytes',
      count: 'Count',
      db: 'Db',
      encoding: 'Encoding',
      expirationTimeMillis: 'ExpirationTimeMillis',
      key: 'Key',
      nodeId: 'NodeId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bytes: 'number',
      count: 'number',
      db: 'number',
      encoding: 'string',
      expirationTimeMillis: 'number',
      key: 'string',
      nodeId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum extends $tea.Model {
  keyInfo?: DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      keyInfo: 'KeyInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyInfo: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel extends $tea.Model {
  /**
   * @remarks
   * The time when the cache analysis task was complete. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1717469347000
   */
  analysisTs?: number;
  /**
   * @remarks
   * The expiration level. Valid values:
   * 
   * *   **0**: The key never expires.
   * *   **1**: The key has expired.
   * *   **2**: The key has expired for 0 to 1 hour.
   * *   **3**: The key has expired for 1 to 3 hours.
   * *   **4**: The key has expired for 3 to 12 hours.
   * *   **5**: The key has expired for 12 to 24 hours.
   * *   **6**: The key has expired for one to two days.
   * *   **7**: The key has expired for three to seven days.
   * *   **8**: The key has expired for more than seven days.
   * 
   * @example
   * 0
   */
  level?: number;
  /**
   * @remarks
   * The number of bytes occupied by the keys that have expired.
   * 
   * @example
   * 8064
   */
  totalBytes?: number;
  /**
   * @remarks
   * The total number of the keys that have expired.
   * 
   * @example
   * 62
   */
  totalKeys?: number;
  static names(): { [key: string]: string } {
    return {
      analysisTs: 'AnalysisTs',
      level: 'Level',
      totalBytes: 'TotalBytes',
      totalKeys: 'TotalKeys',
    };
  }

  static types(): { [key: string]: any } {
    return {
      analysisTs: 'number',
      level: 'number',
      totalBytes: 'number',
      totalKeys: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount extends $tea.Model {
  expiryLevel?: DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel[];
  static names(): { [key: string]: string } {
    return {
      expiryLevel: 'ExpiryLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expiryLevel: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix extends $tea.Model {
  /**
   * @remarks
   * The number of bytes that are occupied by the key.
   * 
   * @example
   * 12345
   */
  bytes?: number;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 127
   */
  count?: number;
  /**
   * @remarks
   * The number of keys that contain the prefix.
   * 
   * @example
   * 123
   */
  keyNum?: number;
  /**
   * @remarks
   * The prefix of the key.
   * 
   * @example
   * task_
   */
  prefix?: string;
  /**
   * @remarks
   * The data type of the instance.
   * 
   * @example
   * hash
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bytes: 'Bytes',
      count: 'Count',
      keyNum: 'KeyNum',
      prefix: 'Prefix',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bytes: 'number',
      count: 'number',
      keyNum: 'number',
      prefix: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes extends $tea.Model {
  prefix?: DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix[];
  static names(): { [key: string]: string } {
    return {
      prefix: 'Prefix',
    };
  }

  static types(): { [key: string]: any } {
    return {
      prefix: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo extends $tea.Model {
  /**
   * @remarks
   * The number of bytes that are occupied by the key.
   * 
   * @example
   * 12345
   */
  bytes?: number;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 127
   */
  count?: number;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The data type of the key.
   * 
   * @example
   * hashtable
   */
  encoding?: string;
  /**
   * @remarks
   * The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
   * 
   * @example
   * 1596256542547
   */
  expirationTimeMillis?: number;
  /**
   * @remarks
   * The key name.
   * 
   * @example
   * task_x****
   */
  key?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The data type of the instance.
   * 
   * @example
   * hash
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bytes: 'Bytes',
      count: 'Count',
      db: 'Db',
      encoding: 'Encoding',
      expirationTimeMillis: 'ExpirationTimeMillis',
      key: 'Key',
      nodeId: 'NodeId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bytes: 'number',
      count: 'number',
      db: 'number',
      encoding: 'string',
      expirationTimeMillis: 'number',
      key: 'string',
      nodeId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes extends $tea.Model {
  keyInfo?: DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      keyInfo: 'KeyInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyInfo: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo extends $tea.Model {
  /**
   * @remarks
   * The number of bytes that are occupied by the key.
   * 
   * @example
   * 12345
   */
  bytes?: number;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 127
   */
  count?: number;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The data type of the key.
   * 
   * @example
   * hashtable
   */
  encoding?: string;
  /**
   * @remarks
   * The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
   * 
   * @example
   * 1596256542547
   */
  expirationTimeMillis?: number;
  /**
   * @remarks
   * The key name.
   * 
   * @example
   * task_x****
   */
  key?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The data type of the instance.
   * 
   * @example
   * hash
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bytes: 'Bytes',
      count: 'Count',
      db: 'Db',
      encoding: 'Encoding',
      expirationTimeMillis: 'ExpirationTimeMillis',
      key: 'Key',
      nodeId: 'NodeId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bytes: 'number',
      count: 'number',
      db: 'number',
      encoding: 'string',
      expirationTimeMillis: 'number',
      key: 'string',
      nodeId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum extends $tea.Model {
  keyInfo?: DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      keyInfo: 'KeyInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyInfo: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The details of the large keys. The returned large keys are sorted in descending order based on the number of bytes occupied by the keys.
   */
  bigKeys?: DescribeCacheAnalysisJobResponseBodyDataBigKeys;
  /**
   * @remarks
   * The details of the large keys. The returned large keys are sorted in descending order based on the number of keys.
   */
  bigKeysOfNum?: DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum;
  /**
   * @remarks
   * The statistics of the keys that have expired.
   */
  expiryKeysLevelCount?: DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the cache analysis task.
   * 
   * @example
   * sf79-sd99-sa37-****
   */
  jobId?: string;
  /**
   * @remarks
   * The prefixes of the keys.
   */
  keyPrefixes?: DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes;
  /**
   * @remarks
   * The message that is returned for the request.
   * 
   * >  If the request is successful, **Successful** is returned. If the request fails, an error message that contains information such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The state of the cache analysis task. Valid values:
   * 
   * *   **BACKUP**: The data is being backed up.
   * *   **ANALYZING**: The data is being analyzed.
   * *   **FINISHED**: The data is analyzed.
   * *   **FAILED**: An error occurred.
   * 
   * @example
   * BACKUP
   */
  taskState?: string;
  /**
   * @remarks
   * The details of permanent keys. The returned keys are sorted in descending order based on the number of bytes occupied by the keys.
   */
  unexBigKeysOfBytes?: DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes;
  /**
   * @remarks
   * The details of permanent keys. The returned keys are sorted in descending order based on the number of keys.
   */
  unexBigKeysOfNum?: DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum;
  static names(): { [key: string]: string } {
    return {
      bigKeys: 'BigKeys',
      bigKeysOfNum: 'BigKeysOfNum',
      expiryKeysLevelCount: 'ExpiryKeysLevelCount',
      instanceId: 'InstanceId',
      jobId: 'JobId',
      keyPrefixes: 'KeyPrefixes',
      message: 'Message',
      nodeId: 'NodeId',
      taskState: 'TaskState',
      unexBigKeysOfBytes: 'UnexBigKeysOfBytes',
      unexBigKeysOfNum: 'UnexBigKeysOfNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bigKeys: DescribeCacheAnalysisJobResponseBodyDataBigKeys,
      bigKeysOfNum: DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum,
      expiryKeysLevelCount: DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount,
      instanceId: 'string',
      jobId: 'string',
      keyPrefixes: DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes,
      message: 'string',
      nodeId: 'string',
      taskState: 'string',
      unexBigKeysOfBytes: DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes,
      unexBigKeysOfNum: DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo extends $tea.Model {
  /**
   * @remarks
   * The number of bytes that are occupied by the key.
   * 
   * @example
   * 12345
   */
  bytes?: number;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 127
   */
  count?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The data type of the key.
   * 
   * @example
   * hashtable
   */
  encoding?: string;
  /**
   * @remarks
   * The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
   * 
   * @example
   * 1596256542547
   */
  expirationTimeMillis?: number;
  /**
   * @remarks
   * The name of the key.
   * 
   * @example
   * task_*****
   */
  key?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The data type of the instance.
   * 
   * @example
   * hash
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bytes: 'Bytes',
      count: 'Count',
      db: 'Db',
      encoding: 'Encoding',
      expirationTimeMillis: 'ExpirationTimeMillis',
      key: 'Key',
      nodeId: 'NodeId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bytes: 'number',
      count: 'number',
      db: 'number',
      encoding: 'string',
      expirationTimeMillis: 'number',
      key: 'string',
      nodeId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys extends $tea.Model {
  keyInfo?: DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      keyInfo: 'KeyInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyInfo: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob extends $tea.Model {
  /**
   * @remarks
   * The details about the large keys.
   * 
   * > The sub-parameters of this parameter and the content of the sub-parameters are not returned. To query the detailed information about the cache analysis tasks, call the [DescribeCacheAnalysisJob](https://help.aliyun.com/document_detail/443012.html) operation.
   */
  bigKeys?: DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * r-bp18ff4a195d****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the cache analysis task.
   * 
   * @example
   * sf79-sd99-sa37-****
   */
  jobId?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The state of the cache analysis task. Valid values:
   * 
   * * **BACKUP**: The data is being backed up.
   * * **ANALYZING**: The data is being analyzed.
   * * **FINISHED**: The data is analyzed.
   * * **FAILED**: An error occurred.
   * 
   * @example
   * BACKUP
   */
  taskState?: string;
  static names(): { [key: string]: string } {
    return {
      bigKeys: 'BigKeys',
      instanceId: 'InstanceId',
      jobId: 'JobId',
      message: 'Message',
      nodeId: 'NodeId',
      taskState: 'TaskState',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bigKeys: DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys,
      instanceId: 'string',
      jobId: 'string',
      message: 'string',
      nodeId: 'string',
      taskState: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsResponseBodyDataList extends $tea.Model {
  cacheAnalysisJob?: DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob[];
  static names(): { [key: string]: string } {
    return {
      cacheAnalysisJob: 'CacheAnalysisJob',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cacheAnalysisJob: { 'type': 'array', 'itemType': DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCacheAnalysisJobsResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The ID of the data node on the instance.
   */
  list?: DescribeCacheAnalysisJobsResponseBodyDataList;
  /**
   * @remarks
   * The page number. The value must be an integer that is greater than 0. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 4
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: DescribeCacheAnalysisJobsResponseBodyDataList,
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks extends $tea.Model {
  /**
   * @remarks
   * The archiving task ID.
   * 
   * @example
   * \\"202105211430070112231480820340758****
   */
  archiveJobId?: string;
  /**
   * @remarks
   * The name of the table that was archived to Object Storage Service (OSS).
   * 
   * @example
   * custins15546355_161604665****
   */
  archiveOssTableName?: string;
  /**
   * @remarks
   * The archiving status of the file that stores the analysis result of full SQL statistics. Valid values:
   * 
   * * **0**: The file archiving is not started.
   * * **1**: The file is archived.
   * * **2**: An error occurred.
   * * **3**: The file is being archived.
   * * **4**: The archived file does not need to be downloaded.
   * 
   * @example
   * 1
   */
  archiveState?: number;
  /**
   * @remarks
   * The ID of the backup set. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/26273.html) operation to query the ID of the backup set.
   * 
   * @example
   * 229132
   */
  backupId?: string;
  /**
   * @remarks
   * The backup type. Valid values:
   * 
   * * **TIMESTAMP**: Data is restored to the state at a specific point in time.
   * * **BACKUPID**: Data is restored from a backup set that is identified by an ID.
   * 
   * @example
   * TIMESTAMP
   */
  backupType?: string;
  /**
   * @remarks
   * The substep in the stress testing task. Valid values:
   * 
   * * **NEW**: Initialize the stress testing task.
   * * **WAIT_BUY_ECS**: Purchase an ECS instance.
   * * **WAIT_START_ECS**: Start the ECS instance.
   * * **WAIT_INSTALL_JDK**: Install the Java Development Kit (JDK).
   * * **WAIT_INSTALL_DBGATEWAY**: Install the database gateway (DBGateway).
   * * **ADD_SECURITY_IPS_STEP**: Configure the whitelist of the security group.
   * * **ARCHIVE**: Archive the file that stores the analysis results of full SQL statistics.
   * * **DOWNLOAD**: Download the file that stores the analysis result of full SQL statistics.
   * * **PROCEED**: Preprocess the file that stores the analysis result of full SQL statistics.
   * * **PRE_LOAD**: Preload the file that stores the analysis result of full SQL statistics.
   * * **VALIDATE**: Verify the functionality of stress testing.
   * * **PRESSURE**: Start the stress testing task.
   * 
   * @example
   * PROCEED
   */
  benchStep?: string;
  /**
   * @remarks
   * The status that indicates the substep performed for the stress testing task. Valid values:
   * 
   * * **NEW**: The task is being initialized.
   * * **RUNNING**: The task is running.
   * * **FAILED**: The task failed.
   * * **FINISHED**: The task is complete.
   * * **Terminated**: The task is terminated.
   * * **Deleted**: The task is deleted.
   * 
   * @example
   * FINISHED
   */
  benchStepStatus?: string;
  /**
   * @remarks
   * The DBGateway ID of the stress testing client.
   * 
   * @example
   * 58598b2af48a0193dfc16fc6964ef****
   */
  clientGatewayId?: string;
  /**
   * @remarks
   * The type of the stress testing client. Valid values:
   * 
   * * **ECS**: indicates that you must prepare the DBGateway.
   * * **DAS_ECS**: indicates that DAS automatically purchases and deploys an ECS instance for stress testing.
   * 
   * @example
   * ECS
   */
  clientType?: string;
  /**
   * @remarks
   * The description of the stress testing task.
   * 
   * @example
   * test-das-bench-0501
   */
  description?: string;
  /**
   * @remarks
   * The UUID of the destination instance.
   * 
   * @example
   * hdm_d887b5ccf99fa0dc9a1e5aaac368****
   */
  dstInstanceUuid?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  dstIp?: string;
  /**
   * @remarks
   * The port number of the destination instance.
   * 
   * @example
   * 3306
   */
  dstPort?: number;
  /**
   * @remarks
   * The type of the identifier that is used to indicate the destination instance. Valid values:
   * 
   * * **Instance** (default): the instance ID.
   * * **ConnectionString**: the endpoint of the instance.
   * 
   * @example
   * Instance
   */
  dstType?: string;
  /**
   * @remarks
   * The specification of the DTS instance.
   * 
   * > For more information about the specifications of DTS instances and the test performance of each instance, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).
   * 
   * @example
   * medium
   */
  dtsJobClass?: string;
  /**
   * @remarks
   * The ID of the DTS migration task.
   * 
   * @example
   * i03e3zty16i****
   */
  dtsJobId?: string;
  /**
   * @remarks
   * The name of the Data Transmission Service (DTS) migration task.
   * 
   * @example
   * RDS_TO_RDS_MIGRATION
   */
  dtsJobName?: string;
  /**
   * @remarks
   * The status of the DTS migration task. Valid values:
   * 
   * * **NOT_STARTED**: The task is not started.
   * * **PRE_CHECKING**: The task is in precheck.
   * * **PRE_CHECK_FAILED**: The precheck failed.
   * * **CHECKING**: The task is being checked.
   * * **MIGRATING**: The data is being migrated.
   * * **CATCHED**: The data is migrated from the source instance to the destination instance.
   * * **SUSPENDING**: The task is suspended.
   * * **MIGRATION_FAILED**: The data failed to be migrated.
   * * **FINISHED**: The task is complete.
   * * **INITIALIZING**: The synchronization is being initialized.
   * * **INITIALIZE_FAILED**: The synchronization failed to be initialized.
   * * **SYNCHRONIZING**: The data is being synchronized.
   * * **MODIFYING**: The roles of the instances are being changed.
   * * **SWITCHING**: The roles of the instances are being switched.
   * * **FAILED**: The task failed.
   * 
   * @example
   * CHECKING
   */
  dtsJobState?: number;
  /**
   * @remarks
   * The status of the DTS migration task. Valid values:
   * 
   * * **NOT_STARTED**: The task is not started.
   * * **PRE_CHECKING**: The task is in precheck.
   * * **PRE_CHECK_FAILED**: The precheck failed.
   * * **CHECKING**: The task is being checked.
   * * **MIGRATING**: The data is being migrated.
   * * **CATCHED**: The data is migrated from the source instance to the destination instance.
   * * **SUSPENDING**: The task is suspended.
   * * **MIGRATION_FAILED**: The data failed to be migrated.
   * * **FINISHED**: The task is complete.
   * * **INITIALIZING**: The synchronization is being initialized.
   * * **INITIALIZE_FAILED**: The synchronization failed to be initialized.
   * * **SYNCHRONIZING**: The data is being synchronized.
   * * **MODIFYING**: The roles of the instances are being changed.
   * * **SWITCHING**: The roles of the instances are being switched.
   * * **FAILED**: The task failed.
   * 
   * @example
   * PRE_CHECK_FAILED
   */
  dtsJobStatus?: string;
  /**
   * @remarks
   * The ID of the Elastic Compute Service (ECS) instance.
   * 
   * @example
   * i-bp1ecr5go2go1****
   */
  ecsInstanceId?: string;
  /**
   * @remarks
   * The state that indicates the last operation performed for the stress testing task. Valid values:
   * 
   * * **WAIT_TARGET**: prepares the destination instance.
   * * **WAIT_DBGATEWAY**: prepares the DBGateway.
   * * **WAIT_SQL**: prepares the full SQL statistics.
   * * **WAIT_LOGIC**: prepares to replay the traffic.
   * 
   * > When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task is complete.
   * 
   * @example
   * WAIT_TARGET
   */
  endState?: string;
  /**
   * @remarks
   * The error code returned for the substep of the stress testing task.
   * 
   * @example
   * 10109
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the task failed.
   * 
   * @example
   * DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].
   */
  errorMessage?: string;
  /**
   * @remarks
   * The additional information.
   * 
   * @example
   * Null
   */
  external?: string;
  /**
   * @remarks
   * The rate at which the stress testing task replayed the traffic. This value is a positive integer. Valid values: **0** to **30**. Default value: **1**.
   * 
   * @example
   * 1
   */
  rate?: number;
  /**
   * @remarks
   * The duration of the stress testing task. Unit: millisecond.
   * 
   * @example
   * 86400000
   */
  requestDuration?: number;
  /**
   * @remarks
   * The duration of the stress testing task of the smart pressure test type. Unit: millisecond.
   * 
   * @example
   * 86400000
   */
  smartPressureTime?: number;
  /**
   * @remarks
   * The source of the task. Valid values:
   * 
   * * **DAS**
   * * **OPEN_API**
   * 
   * @example
   * DAS
   */
  source?: string;
  /**
   * @remarks
   * The reused information about the analysis result of full SQL statistics.
   * 
   * @example
   * {"sqlUuid":"task_a37d2f07-45cb-4413-a2a6-c66c68****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-1800626.meta"}
   */
  sqlCompleteReuse?: string;
  /**
   * @remarks
   * The database engine of the source instance. Valid values:
   * 
   * @example
   * RDS
   */
  srcInstanceArea?: string;
  /**
   * @remarks
   * The UUID of the source instance.
   * 
   * @example
   * hdm_3063db6792965c080a4bcb6e6304****
   */
  srcInstanceUuid?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  srcPublicIp?: string;
  /**
   * @remarks
   * The state that indicates the operation performed for the stress testing task. Valid values:
   * 
   * * **WAIT_TARGET**: prepares the destination instance.
   * * **WAIT_DBGATEWAY**: prepares the DBGateway.
   * * **WAIT_SQL**: prepares the full SQL statistics.
   * * **WAIT_LOGIC**: prepares to replay the traffic.
   * 
   * @example
   * WAIT_TARGET
   */
  state?: string;
  /**
   * @remarks
   * The status of the stress testing task. Valid values:
   * 
   * * **SUCCESS**: The task was successful.
   * * **IGNORED**: The task was ignored.
   * * **RUNNING**: The task is running.
   * * **EXCEPTION**: The task is abnormal.
   * 
   * @example
   * RUNNING
   */
  status?: string;
  /**
   * @remarks
   * The name of the table that is used for stress testing.
   * 
   * @example
   * [{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]
   */
  tableSchema?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * e5cec704-0518-430f-8263-76f4dcds****
   */
  taskId?: string;
  /**
   * @remarks
   * The type of the stress testing task. Valid values:
   * 
   * * **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
   * * **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
   * 
   * @example
   * pressure test
   */
  taskType?: string;
  /**
   * @remarks
   * The topic that contains the consumed data. This topic is a topic in Message Queue for Apache Kafka.
   * 
   * @example
   * das
   */
  topic?: string;
  /**
   * @remarks
   * The Alibaba Cloud account ID.
   * 
   * @example
   * 1091411816252****
   */
  userId?: string;
  /**
   * @remarks
   * The version of the stress testing task. Valid values:
   * 
   * * **V2.0**
   * * **V3.0**
   * 
   * @example
   * V3.0
   */
  version?: string;
  /**
   * @remarks
   * The path of the temporary directory that is generated for stress testing.
   * 
   * @example
   * /tmp/bench/
   */
  workDir?: string;
  static names(): { [key: string]: string } {
    return {
      archiveJobId: 'ArchiveJobId',
      archiveOssTableName: 'ArchiveOssTableName',
      archiveState: 'ArchiveState',
      backupId: 'BackupId',
      backupType: 'BackupType',
      benchStep: 'BenchStep',
      benchStepStatus: 'BenchStepStatus',
      clientGatewayId: 'ClientGatewayId',
      clientType: 'ClientType',
      description: 'Description',
      dstInstanceUuid: 'DstInstanceUuid',
      dstIp: 'DstIp',
      dstPort: 'DstPort',
      dstType: 'DstType',
      dtsJobClass: 'DtsJobClass',
      dtsJobId: 'DtsJobId',
      dtsJobName: 'DtsJobName',
      dtsJobState: 'DtsJobState',
      dtsJobStatus: 'DtsJobStatus',
      ecsInstanceId: 'EcsInstanceId',
      endState: 'EndState',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      external: 'External',
      rate: 'Rate',
      requestDuration: 'RequestDuration',
      smartPressureTime: 'SmartPressureTime',
      source: 'Source',
      sqlCompleteReuse: 'SqlCompleteReuse',
      srcInstanceArea: 'SrcInstanceArea',
      srcInstanceUuid: 'SrcInstanceUuid',
      srcPublicIp: 'SrcPublicIp',
      state: 'State',
      status: 'Status',
      tableSchema: 'TableSchema',
      taskId: 'TaskId',
      taskType: 'TaskType',
      topic: 'Topic',
      userId: 'UserId',
      version: 'Version',
      workDir: 'WorkDir',
    };
  }

  static types(): { [key: string]: any } {
    return {
      archiveJobId: 'string',
      archiveOssTableName: 'string',
      archiveState: 'number',
      backupId: 'string',
      backupType: 'string',
      benchStep: 'string',
      benchStepStatus: 'string',
      clientGatewayId: 'string',
      clientType: 'string',
      description: 'string',
      dstInstanceUuid: 'string',
      dstIp: 'string',
      dstPort: 'number',
      dstType: 'string',
      dtsJobClass: 'string',
      dtsJobId: 'string',
      dtsJobName: 'string',
      dtsJobState: 'number',
      dtsJobStatus: 'string',
      ecsInstanceId: 'string',
      endState: 'string',
      errorCode: 'string',
      errorMessage: 'string',
      external: 'string',
      rate: 'number',
      requestDuration: 'number',
      smartPressureTime: 'number',
      source: 'string',
      sqlCompleteReuse: 'string',
      srcInstanceArea: 'string',
      srcInstanceUuid: 'string',
      srcPublicIp: 'string',
      state: 'string',
      status: 'string',
      tableSchema: 'string',
      taskId: 'string',
      taskType: 'string',
      topic: 'string',
      userId: 'string',
      version: 'string',
      workDir: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudBenchTasksResponseBodyDataList extends $tea.Model {
  cloudbenchTasks?: DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks[];
  static names(): { [key: string]: string } {
    return {
      cloudbenchTasks: 'cloudbenchTasks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cloudbenchTasks: { 'type': 'array', 'itemType': DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudBenchTasksResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The detailed information of the stress testing task.
   */
  list?: DescribeCloudBenchTasksResponseBodyDataList;
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 2
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: DescribeCloudBenchTasksResponseBodyDataList,
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The ID of the archiving task.
   * 
   * @example
   * \\"202105211430070112231480820340758****
   */
  archiveJobId?: string;
  /**
   * @remarks
   * The name of the table that was archived to Object Storage Service (OSS).
   * 
   * @example
   * custins15546355_161604665****
   */
  archiveOssTableName?: string;
  /**
   * @remarks
   * The archiving state of the file that stores the analysis result of full SQL statistics. Valid values:
   * 
   * *   **0**: The file archiving is not started.
   * *   **1**: The file is archived.
   * *   **2**: An error occurred.
   * *   **3**: The file is being archived.
   * *   **4**: The archived file does not need to be downloaded.
   * 
   * @example
   * 1
   */
  archiveState?: number;
  /**
   * @remarks
   * The ID of the backup set. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/26273.html) operation to query the ID of the backup set.
   * 
   * @example
   * 229132
   */
  backupId?: string;
  /**
   * @remarks
   * The backup type. Valid values:
   * 
   * *   **TIMESTAMP**
   * *   **BACKUPID**
   * 
   * @example
   * TIMESTAMP
   */
  backupType?: string;
  /**
   * @remarks
   * The substep in the stress testing task. Valid values:
   * 
   * *   **NEW**: initializes the stress testing task.
   * *   **WAIT_BUY_ECS**: purchases an ECS instance.
   * *   **WAIT_START_ECS**: starts an ECS instance.
   * *   **WAIT_INSTALL_JDK**: installs the Java Development Kit (JDK).
   * *   **WAIT_INSTALL_DBGATEWAY**: installs the database gateway (DBGateway).
   * *   **ADD_SECURITY_IPS_STEP**: configure a security group whitelist.
   * *   **ARCHIVE**: archives the full SQL statistics.
   * *   **DOWNLOAD**: downloads the file that stores the analysis result of full SQL statistics.
   * *   **PROCEED**: preprocesses the file that stores the analysis result of full SQL statistics.
   * *   **PRE_LOAD**: preloads the file that stores the analysis result of full SQL statistics.
   * *   **VALIDATE**: verifies the functionality of stress testing.
   * *   **PRESSURE**: starts the stress testing task.
   * 
   * @example
   * PROCEED
   */
  benchStep?: string;
  /**
   * @remarks
   * The status that indicates the substep performed on the stress testing task. Valid values:
   * 
   * *   **NEW**: The task is being initialized.
   * *   **RUNNING**: The task is running.
   * *   **FAILED**: The task failed.
   * *   **FINISHED**: The task is complete.
   * *   **Terminated**: The task is terminated.
   * *   **Deleted**: The task is deleted.
   * 
   * @example
   * FINISHED
   */
  benchStepStatus?: string;
  /**
   * @remarks
   * The DBGateway ID of the stress testing client.
   * 
   * @example
   * 58598b2af48a0193dfc16fc6964ef****
   */
  clientGatewayId?: string;
  /**
   * @remarks
   * The type of the stress testing client. Valid values:
   * 
   * *   **ECS**: indicates that you must create the [DBGateway](https://help.aliyun.com/document_detail/64905.html).
   * *   **DAS_ECS**: indicates that DAS automatically purchases and deploys an ECS instance for stress testing.
   * 
   * @example
   * ECS
   */
  clientType?: string;
  /**
   * @remarks
   * The description of the stress testing task.
   * 
   * @example
   * test-das-bench-0501
   */
  description?: string;
  /**
   * @remarks
   * The UUID of the destination instance.
   * 
   * @example
   * hdm_d887b5ccf99fa0dc9a1e5aaac368****
   */
  dstInstanceUuid?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  dstIp?: string;
  /**
   * @remarks
   * The port number of the destination instance.
   * 
   * @example
   * 3306
   */
  dstPort?: number;
  /**
   * @remarks
   * The type of the identifier that is used to indicate the destination instance. Valid values:
   * 
   * *   **Instance** (default): the instance ID.
   * *   **ConnectionString**: the endpoint of the instance.
   * 
   * @example
   * Instance
   */
  dstType?: string;
  /**
   * @remarks
   * The specification of the DTS task.
   * 
   * @example
   * medium
   */
  dtsJobClass?: string;
  /**
   * @remarks
   * The ID of the DTS migration task.
   * 
   * @example
   * i03e3zty16i****
   */
  dtsJobId?: string;
  /**
   * @remarks
   * The name of the Data Transmission Service (DTS) task.
   * 
   * @example
   * RDS_TO_RDS_MIGRATION
   */
  dtsJobName?: string;
  /**
   * @remarks
   * The state of the DTS task. Valid values:
   * 
   * *   **NOT_STARTED**: The task is not started.
   * *   **PRE_CHECKING**: The task is in precheck.
   * *   **PRE_CHECK_FAILED**: The precheck failed.
   * *   **CHECKING**: The task is being checked.
   * *   **MIGRATING**: The data is being migrated.
   * *   **CATCHED**: The data is migrated from the source instance to the destination instance.
   * *   **SUSPENDING**: The task is suspended.
   * *   **MIGRATION_FAILED**: The data failed to be migrated.
   * *   **FINISHED**: The task is complete.
   * *   **INITIALIZING**: The synchronization is being initialized.
   * *   **INITIALIZE_FAILED**: The synchronization failed to be initialized.
   * *   **SYNCHRONIZING**: The data is being synchronized.
   * *   **MODIFYING**: The objects to be synchronized are being changed.
   * *   **SWITCHING**: The roles of the instances are being switched.
   * *   **FAILED**: The task failed.
   * 
   * @example
   * CHECKING
   */
  dtsJobState?: number;
  /**
   * @remarks
   * The state of the DTS task. Valid values:
   * 
   * *   **NOT_STARTED**: The task is not started.
   * *   **PRE_CHECKING**: The task is in precheck.
   * *   **PRE_CHECK_FAILED**: The precheck failed.
   * *   **CHECKING**: The task is being checked.
   * *   **MIGRATING**: The data is being migrated.
   * *   **CATCHED**: The data is migrated from the source instance to the destination instance.
   * *   **SUSPENDING**: The task is suspended.
   * *   **MIGRATION_FAILED**: The data failed to be migrated.
   * *   **FINISHED**: The task is complete.
   * *   **INITIALIZING**: The synchronization is being initialized.
   * *   **INITIALIZE_FAILED**: The synchronization failed to be initialized.
   * *   **SYNCHRONIZING**: The data is being synchronized.
   * *   **MODIFYING**: The objects to be synchronized are being changed.
   * *   **SWITCHING**: The roles of the instances are being switched.
   * *   **FAILED**: The task failed.
   * 
   * @example
   * PRE_CHECKING
   */
  dtsJobStatus?: string;
  /**
   * @remarks
   * The ID of the Elastic Compute Service (ECS) instance.
   * 
   * @example
   * i-bp1ecr5go2go1****
   */
  ecsInstanceId?: string;
  /**
   * @remarks
   * The state that specifies the last operation that is performed for the stress testing task. Valid values:
   * 
   * *   **WAIT_TARGET**: prepares the destination instance.
   * *   **WAIT_DBGATEWAY**: prepares the DBGateway.
   * *   **WAIT_SQL**: prepares the full SQL statistics.
   * *   **WAIT_LOGIC**: prepares to replay the traffic.
   * 
   * >  When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task becomes completed.
   * 
   * @example
   * WAIT_LOGIC
   */
  endState?: string;
  /**
   * @remarks
   * The error code returned for the substep of the stress testing task.
   * 
   * @example
   * 10910
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].
   */
  errorMessage?: string;
  /**
   * @remarks
   * The additional information.
   * 
   * @example
   * Null
   */
  external?: string;
  /**
   * @remarks
   * The rate at which the stress testing task replayed the traffic. The value is a positive integer. Valid values:**1** to **30**. Default value: **1**.
   * 
   * @example
   * 1
   */
  rate?: number;
  /**
   * @remarks
   * The duration of the stress testing task for which traffic was captured from the source instance.
   * 
   * @example
   * 864000
   */
  requestDuration?: number;
  /**
   * @remarks
   * The duration of the stress testing task for which the traffic was generated on the destination instance. Unit: milliseconds.
   * 
   * @example
   * 86400000
   */
  smartPressureTime?: number;
  /**
   * @remarks
   * The source of the task. Valid values:
   * 
   * *   **DAS**
   * *   **OPEN_API**
   * 
   * @example
   * DAS
   */
  source?: string;
  /**
   * @remarks
   * The reuse information about the analysis result of full SQL statistics.
   * 
   * @example
   * {"sqlUuid":"task_a37d2f07-45cb-****-a2a6-c66c62****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-180****.meta"}
   */
  sqlCompleteReuse?: string;
  /**
   * @remarks
   * The database type of the source instance. Valid values:
   * 
   * @example
   * RDS
   */
  srcInstanceArea?: string;
  /**
   * @remarks
   * The UUID of the source instance.
   * 
   * @example
   * a364e414-e68b-4e5c-9166-65b3a153****
   */
  srcInstanceUuid?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  srcPublicIp?: string;
  /**
   * @remarks
   * The state that indicates the operation performed for the stress testing task. Valid values:
   * 
   * *   **WAIT_TARGET**: prepares the destination instance.
   * *   **WAIT_DBGATEWAY**: prepares the DBGateway.
   * *   **WAIT_SQL**: prepares the full SQL statistics.
   * *   **WAIT_LOGIC**: prepares to replay the traffic.
   * 
   * @example
   * WAIT_TARGET
   */
  state?: string;
  /**
   * @remarks
   * The state of the stress testing task. Valid values:
   * 
   * *   **SUCCESS**: The task is successful.
   * *   **IGNORED**: The task is ignored.
   * *   **RUNNING**: The task is running.
   * *   **EXCEPTION**: An error occurred.
   * 
   * @example
   * RUNNING
   */
  status?: string;
  /**
   * @remarks
   * The name of the table that is used for stress testing.
   * 
   * @example
   * [{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]
   */
  tableSchema?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * e5cec704-0518-430f-8263-76f4dcds****
   */
  taskId?: string;
  /**
   * @remarks
   * The type of the stress testing task. Valid values:
   * 
   * *   **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
   * *   **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
   * 
   * @example
   * pressure test
   */
  taskType?: string;
  /**
   * @remarks
   * The topic that contains the consumed data. This topic is a topic in Message Queue for Apache Kafka.
   * 
   * @example
   * das
   */
  topic?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account.
   * 
   * @example
   * 109141182625****
   */
  userId?: string;
  /**
   * @remarks
   * The version of the stress testing task. Valid values:
   * 
   * *   **V2.0**
   * *   **V3.0**
   * 
   * @example
   * V3.0
   */
  version?: string;
  /**
   * @remarks
   * The temporary directory generated for stress testing.
   * 
   * @example
   * /tmp/bench/
   */
  workDir?: string;
  static names(): { [key: string]: string } {
    return {
      archiveJobId: 'ArchiveJobId',
      archiveOssTableName: 'ArchiveOssTableName',
      archiveState: 'ArchiveState',
      backupId: 'BackupId',
      backupType: 'BackupType',
      benchStep: 'BenchStep',
      benchStepStatus: 'BenchStepStatus',
      clientGatewayId: 'ClientGatewayId',
      clientType: 'ClientType',
      description: 'Description',
      dstInstanceUuid: 'DstInstanceUuid',
      dstIp: 'DstIp',
      dstPort: 'DstPort',
      dstType: 'DstType',
      dtsJobClass: 'DtsJobClass',
      dtsJobId: 'DtsJobId',
      dtsJobName: 'DtsJobName',
      dtsJobState: 'DtsJobState',
      dtsJobStatus: 'DtsJobStatus',
      ecsInstanceId: 'EcsInstanceId',
      endState: 'EndState',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      external: 'External',
      rate: 'Rate',
      requestDuration: 'RequestDuration',
      smartPressureTime: 'SmartPressureTime',
      source: 'Source',
      sqlCompleteReuse: 'SqlCompleteReuse',
      srcInstanceArea: 'SrcInstanceArea',
      srcInstanceUuid: 'SrcInstanceUuid',
      srcPublicIp: 'SrcPublicIp',
      state: 'State',
      status: 'Status',
      tableSchema: 'TableSchema',
      taskId: 'TaskId',
      taskType: 'TaskType',
      topic: 'Topic',
      userId: 'UserId',
      version: 'Version',
      workDir: 'WorkDir',
    };
  }

  static types(): { [key: string]: any } {
    return {
      archiveJobId: 'string',
      archiveOssTableName: 'string',
      archiveState: 'number',
      backupId: 'string',
      backupType: 'string',
      benchStep: 'string',
      benchStepStatus: 'string',
      clientGatewayId: 'string',
      clientType: 'string',
      description: 'string',
      dstInstanceUuid: 'string',
      dstIp: 'string',
      dstPort: 'number',
      dstType: 'string',
      dtsJobClass: 'string',
      dtsJobId: 'string',
      dtsJobName: 'string',
      dtsJobState: 'number',
      dtsJobStatus: 'string',
      ecsInstanceId: 'string',
      endState: 'string',
      errorCode: 'string',
      errorMessage: 'string',
      external: 'string',
      rate: 'number',
      requestDuration: 'number',
      smartPressureTime: 'number',
      source: 'string',
      sqlCompleteReuse: 'string',
      srcInstanceArea: 'string',
      srcInstanceUuid: 'string',
      srcPublicIp: 'string',
      state: 'string',
      status: 'string',
      tableSchema: 'string',
      taskId: 'string',
      taskType: 'string',
      topic: 'string',
      userId: 'string',
      version: 'string',
      workDir: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudbenchTaskConfigResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The path in which the files are archived.
   * 
   * @example
   * /tmp/das/cloudbench/archive-sqls/
   */
  archiveFolder?: string;
  /**
   * @remarks
   * The command that was run to start the stress testing task.
   * 
   * @example
   * java -jar /tmp/das/cloudbench/CloudBenchClient.jar --bench --rocksdb /tmp/das/cloudbench/rocksdb --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-a836-49e6-9f70-1c3822fc9239 --result_file /tmp/das/cloudbench/null.result --user cloudb**** --pwd \\"cloudbench@****\\" --host rm-bp1j5f8s5x26kq79216****.mysql.rds.aliyuncs.com --port 3306 --charset utf8mb4 --interval 1 --bench_time 3600 --rate_factor 1.0 --start_time 1621353601 --rt > /tmp/das/cloudbench/null.log
   */
  benchCmd?: string;
  /**
   * @remarks
   * The path to the JAR file that is used for stress testing.
   * 
   * @example
   * /tmp/das/cloudbench/CloudBenchClient.jar
   */
  clientJarPath?: string;
  /**
   * @remarks
   * The path to the JAR file that is stored in OSS. The JAR file is used for stress testing.
   * 
   * @example
   * https://cloudbench-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/CloudBenchClient.jar?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=28p%2BCe4tNHpr9VPOcHc3Si9iOb****
   */
  jarOnOss?: string;
  /**
   * @remarks
   * The command that was run to preload the file that stores the analysis result of full SQL statistics.
   * 
   * @example
   * java -jar /tmp/das/cloudbench/CloudBenchClient.jar --load --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-****-49e6-9f70-1c3822fc**** --rocksdb /tmp/das/cloudbench/rocksdb
   */
  loadCmd?: string;
  /**
   * @remarks
   * The name of the metadata file.
   * 
   * @example
   * cl-1621353601000-360****.meta
   */
  metaFileName?: string;
  /**
   * @remarks
   * The name of the metadata file stored in Object Storage Service (OSS).
   * 
   * @example
   * "https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.meta?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=Qsehg3tzeA57M%2BIixAbWPWAtvl****
   */
  metaFileOnOss?: string;
  /**
   * @remarks
   * The path to the metadata file.
   * 
   * @example
   * /tmp/das/cloudbench/cl-1621353601000-360****.meta
   */
  metaFilePath?: string;
  /**
   * @remarks
   * The command that was run to parse the file that stores the analysis result of full SQL statistics.
   * 
   * @example
   * cd /tmp/das/cloudbench && java -jar CloudBenchClient.jar --parse --threads 32 --file /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc9239.archiveSql --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --parent_patmp/das/cloudbench --source RDS --h /thost rm-bp1j5f8s5x266****.mysql.rds.aliyuncs.com --port 3306 --user cloudb**** --pwd \\"cloudbench@****\\" --cutSqlLen 8192 --db_black_list=information_schema,test,unknow,null
   */
  parseCmd?: string;
  /**
   * @remarks
   * The path to the file that is parsed. The file stores the analysis result of full SQL statistics.
   * 
   * @example
   * /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc****.archiveSql
   */
  parseFilePath?: string;
  /**
   * @remarks
   * The location where the RocksDB storage system is deployed in the stress testing client.
   * 
   * @example
   * /tmp/das/cloudbench/rocksdb
   */
  rocksDbPath?: string;
  /**
   * @remarks
   * The name of the file that stores the analysis result of full SQL statistics.
   * 
   * @example
   * cl-1621353601000-360****.sc
   */
  sqlFileName?: string;
  /**
   * @remarks
   * The name of the file that stores the analysis result of full SQL statistics and that is stored in OSS.
   * 
   * @example
   * https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.sc?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=LYMADwo%2BRrJeqR3e4d8OlIkVmw****
   */
  sqlFileOnOss?: string;
  /**
   * @remarks
   * The path to the file that stores the analysis result of full SQL statistics.
   * 
   * @example
   * /tmp/das/cloudbench/cl-1621353601000-360****.sc
   */
  sqlFilePath?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * e5cec704-0518-430f-8263-76f4dcds****
   */
  taskId?: string;
  /**
   * @remarks
   * The Alibaba Cloud account ID.
   * 
   * @example
   * 1091411816252****
   */
  userId?: string;
  /**
   * @remarks
   * The path of the temporary directory that is generated for stress testing.
   * 
   * @example
   * /tmp/bench/
   */
  workDir?: string;
  static names(): { [key: string]: string } {
    return {
      archiveFolder: 'ArchiveFolder',
      benchCmd: 'BenchCmd',
      clientJarPath: 'ClientJarPath',
      jarOnOss: 'JarOnOss',
      loadCmd: 'LoadCmd',
      metaFileName: 'MetaFileName',
      metaFileOnOss: 'MetaFileOnOss',
      metaFilePath: 'MetaFilePath',
      parseCmd: 'ParseCmd',
      parseFilePath: 'ParseFilePath',
      rocksDbPath: 'RocksDbPath',
      sqlFileName: 'SqlFileName',
      sqlFileOnOss: 'SqlFileOnOss',
      sqlFilePath: 'SqlFilePath',
      taskId: 'TaskId',
      userId: 'UserId',
      workDir: 'WorkDir',
    };
  }

  static types(): { [key: string]: any } {
    return {
      archiveFolder: 'string',
      benchCmd: 'string',
      clientJarPath: 'string',
      jarOnOss: 'string',
      loadCmd: 'string',
      metaFileName: 'string',
      metaFileOnOss: 'string',
      metaFilePath: 'string',
      parseCmd: 'string',
      parseFilePath: 'string',
      rocksDbPath: 'string',
      sqlFileName: 'string',
      sqlFileOnOss: 'string',
      sqlFilePath: 'string',
      taskId: 'string',
      userId: 'string',
      workDir: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysResponseBodyDataBigKeysBigKey extends $tea.Model {
  /**
   * @remarks
   * The database in which the key is stored.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The key.
   * 
   * @example
   * abc:def:eng
   */
  key?: string;
  /**
   * @remarks
   * The type of the key.
   * 
   * @example
   * zset
   */
  keyType?: string;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 2
   */
  size?: number;
  static names(): { [key: string]: string } {
    return {
      db: 'Db',
      key: 'Key',
      keyType: 'KeyType',
      nodeId: 'NodeId',
      size: 'Size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      db: 'number',
      key: 'string',
      keyType: 'string',
      nodeId: 'string',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysResponseBodyDataBigKeys extends $tea.Model {
  bigKey?: DescribeHotBigKeysResponseBodyDataBigKeysBigKey[];
  static names(): { [key: string]: string } {
    return {
      bigKey: 'BigKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bigKey: { 'type': 'array', 'itemType': DescribeHotBigKeysResponseBodyDataBigKeysBigKey },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysResponseBodyDataHotKeysHotKey extends $tea.Model {
  /**
   * @remarks
   * The database in which the key is stored.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The frequency at which the key is accessed, which indicates the queries per second (QPS) of the key.
   * 
   * @example
   * 5500~6000
   */
  hot?: string;
  /**
   * @remarks
   * The key.
   * 
   * @example
   * abc:def:eng
   */
  key?: string;
  /**
   * @remarks
   * The type of the key.
   * 
   * @example
   * zset
   */
  keyType?: string;
  /**
   * @remarks
   * The statistical value that is calculated based on the least frequently used (LFU) caching algorithm.
   * 
   * @example
   * 253
   */
  lfu?: number;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      db: 'Db',
      hot: 'Hot',
      key: 'Key',
      keyType: 'KeyType',
      lfu: 'Lfu',
      nodeId: 'NodeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      db: 'number',
      hot: 'string',
      key: 'string',
      keyType: 'string',
      lfu: 'number',
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysResponseBodyDataHotKeys extends $tea.Model {
  hotKey?: DescribeHotBigKeysResponseBodyDataHotKeysHotKey[];
  static names(): { [key: string]: string } {
    return {
      hotKey: 'HotKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotKey: { 'type': 'array', 'itemType': DescribeHotBigKeysResponseBodyDataHotKeysHotKey },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotBigKeysResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reason why the large key failed to be queried.
   * 
   * @example
   * current version doesn\\"t support
   */
  bigKeyMsg?: string;
  /**
   * @remarks
   * The list of large keys.
   */
  bigKeys?: DescribeHotBigKeysResponseBodyDataBigKeys;
  /**
   * @remarks
   * The reason why the hot key failed to be queried.
   * 
   * @example
   * current version doesn\\"t support
   */
  hotKeyMsg?: string;
  /**
   * @remarks
   * The list of hot keys.
   */
  hotKeys?: DescribeHotBigKeysResponseBodyDataHotKeys;
  static names(): { [key: string]: string } {
    return {
      bigKeyMsg: 'BigKeyMsg',
      bigKeys: 'BigKeys',
      hotKeyMsg: 'HotKeyMsg',
      hotKeys: 'HotKeys',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bigKeyMsg: 'string',
      bigKeys: DescribeHotBigKeysResponseBodyDataBigKeys,
      hotKeyMsg: 'string',
      hotKeys: DescribeHotBigKeysResponseBodyDataHotKeys,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotKeysResponseBodyDataHotKey extends $tea.Model {
  /**
   * @remarks
   * The database in which the key is stored.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The frequency at which the key is accessed, which indicates the queries per second (QPS) of the key.
   * 
   * @example
   * 5500~6000
   */
  hot?: string;
  /**
   * @remarks
   * The name of the key.
   * 
   * @example
   * abc:def:eng
   */
  key?: string;
  /**
   * @remarks
   * The type of the key.
   * 
   * @example
   * zset
   */
  keyType?: string;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 2
   */
  size?: number;
  static names(): { [key: string]: string } {
    return {
      db: 'Db',
      hot: 'Hot',
      key: 'Key',
      keyType: 'KeyType',
      size: 'Size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      db: 'number',
      hot: 'string',
      key: 'string',
      keyType: 'string',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHotKeysResponseBodyData extends $tea.Model {
  hotKey?: DescribeHotKeysResponseBodyDataHotKey[];
  static names(): { [key: string]: string } {
    return {
      hotKey: 'HotKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotKey: { 'type': 'array', 'itemType': DescribeHotKeysResponseBodyDataHotKey },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncRequestFilters extends $tea.Model {
  /**
   * @example
   * None
   */
  key?: string;
  /**
   * @example
   * None
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems extends $tea.Model {
  count?: number[];
  /**
   * @example
   * 2492
   */
  insId?: string;
  /**
   * @example
   * userAdmin
   */
  insRole?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      insId: 'InsId',
      insRole: 'InsRole',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: { 'type': 'array', 'itemType': 'number' },
      insId: 'string',
      insRole: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncResponseBodyDataDataItem extends $tea.Model {
  count?: number[];
  insItems?: DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems[];
  /**
   * @example
   * r-bp1hi0wg57s3n0i3n8-db-0
   */
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      insItems: 'InsItems',
      nodeId: 'NodeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: { 'type': 'array', 'itemType': 'number' },
      insItems: { 'type': 'array', 'itemType': DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems },
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncResponseBodyDataData extends $tea.Model {
  avgCPUTime?: number[];
  avgDocExamined?: number[];
  avgIOWrites?: number[];
  avgKeysExamined?: number[];
  avgLastRowsCountAffected?: number[];
  avgLockTime?: number[];
  avgLogicalIOReads?: number[];
  avgPhysicalIOReads?: number[];
  avgReturnNum?: number[];
  avgRowsCountAffected?: number[];
  avgRowsExamined?: number[];
  avgRowsSent?: number[];
  avgRt?: number[];
  CPUTime?: number[];
  count?: number[];
  docExamined?: number[];
  IOWrites?: number[];
  item?: DescribeSlowLogHistogramAsyncResponseBodyDataDataItem[];
  keysExamined?: number[];
  lastRowsCountAffected?: number[];
  lockTime?: number[];
  logicalIOReads?: number[];
  maxCPUTime?: number[];
  maxDocExamined?: number[];
  maxIOWrites?: number[];
  maxKeysExamined?: number[];
  maxLastRowsCountAffected?: number[];
  maxLockTime?: number[];
  maxLogicalIOReads?: number[];
  maxPhysicalIOReads?: number[];
  maxReturnNum?: number[];
  maxRowsCountAffected?: number[];
  maxRowsExamined?: number[];
  maxRowsSent?: number[];
  maxRt?: number[];
  physicalIOReads?: number[];
  returnNum?: number[];
  rowsCountAffected?: number[];
  rowsExamined?: number[];
  rowsSent?: number[];
  rt?: number[];
  /**
   * @example
   * 1
   */
  total?: number;
  ts?: number[];
  tsEnd?: number[];
  static names(): { [key: string]: string } {
    return {
      avgCPUTime: 'AvgCPUTime',
      avgDocExamined: 'AvgDocExamined',
      avgIOWrites: 'AvgIOWrites',
      avgKeysExamined: 'AvgKeysExamined',
      avgLastRowsCountAffected: 'AvgLastRowsCountAffected',
      avgLockTime: 'AvgLockTime',
      avgLogicalIOReads: 'AvgLogicalIOReads',
      avgPhysicalIOReads: 'AvgPhysicalIOReads',
      avgReturnNum: 'AvgReturnNum',
      avgRowsCountAffected: 'AvgRowsCountAffected',
      avgRowsExamined: 'AvgRowsExamined',
      avgRowsSent: 'AvgRowsSent',
      avgRt: 'AvgRt',
      CPUTime: 'CPUTime',
      count: 'Count',
      docExamined: 'DocExamined',
      IOWrites: 'IOWrites',
      item: 'Item',
      keysExamined: 'KeysExamined',
      lastRowsCountAffected: 'LastRowsCountAffected',
      lockTime: 'LockTime',
      logicalIOReads: 'LogicalIOReads',
      maxCPUTime: 'MaxCPUTime',
      maxDocExamined: 'MaxDocExamined',
      maxIOWrites: 'MaxIOWrites',
      maxKeysExamined: 'MaxKeysExamined',
      maxLastRowsCountAffected: 'MaxLastRowsCountAffected',
      maxLockTime: 'MaxLockTime',
      maxLogicalIOReads: 'MaxLogicalIOReads',
      maxPhysicalIOReads: 'MaxPhysicalIOReads',
      maxReturnNum: 'MaxReturnNum',
      maxRowsCountAffected: 'MaxRowsCountAffected',
      maxRowsExamined: 'MaxRowsExamined',
      maxRowsSent: 'MaxRowsSent',
      maxRt: 'MaxRt',
      physicalIOReads: 'PhysicalIOReads',
      returnNum: 'ReturnNum',
      rowsCountAffected: 'RowsCountAffected',
      rowsExamined: 'RowsExamined',
      rowsSent: 'RowsSent',
      rt: 'Rt',
      total: 'Total',
      ts: 'Ts',
      tsEnd: 'TsEnd',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgCPUTime: { 'type': 'array', 'itemType': 'number' },
      avgDocExamined: { 'type': 'array', 'itemType': 'number' },
      avgIOWrites: { 'type': 'array', 'itemType': 'number' },
      avgKeysExamined: { 'type': 'array', 'itemType': 'number' },
      avgLastRowsCountAffected: { 'type': 'array', 'itemType': 'number' },
      avgLockTime: { 'type': 'array', 'itemType': 'number' },
      avgLogicalIOReads: { 'type': 'array', 'itemType': 'number' },
      avgPhysicalIOReads: { 'type': 'array', 'itemType': 'number' },
      avgReturnNum: { 'type': 'array', 'itemType': 'number' },
      avgRowsCountAffected: { 'type': 'array', 'itemType': 'number' },
      avgRowsExamined: { 'type': 'array', 'itemType': 'number' },
      avgRowsSent: { 'type': 'array', 'itemType': 'number' },
      avgRt: { 'type': 'array', 'itemType': 'number' },
      CPUTime: { 'type': 'array', 'itemType': 'number' },
      count: { 'type': 'array', 'itemType': 'number' },
      docExamined: { 'type': 'array', 'itemType': 'number' },
      IOWrites: { 'type': 'array', 'itemType': 'number' },
      item: { 'type': 'array', 'itemType': DescribeSlowLogHistogramAsyncResponseBodyDataDataItem },
      keysExamined: { 'type': 'array', 'itemType': 'number' },
      lastRowsCountAffected: { 'type': 'array', 'itemType': 'number' },
      lockTime: { 'type': 'array', 'itemType': 'number' },
      logicalIOReads: { 'type': 'array', 'itemType': 'number' },
      maxCPUTime: { 'type': 'array', 'itemType': 'number' },
      maxDocExamined: { 'type': 'array', 'itemType': 'number' },
      maxIOWrites: { 'type': 'array', 'itemType': 'number' },
      maxKeysExamined: { 'type': 'array', 'itemType': 'number' },
      maxLastRowsCountAffected: { 'type': 'array', 'itemType': 'number' },
      maxLockTime: { 'type': 'array', 'itemType': 'number' },
      maxLogicalIOReads: { 'type': 'array', 'itemType': 'number' },
      maxPhysicalIOReads: { 'type': 'array', 'itemType': 'number' },
      maxReturnNum: { 'type': 'array', 'itemType': 'number' },
      maxRowsCountAffected: { 'type': 'array', 'itemType': 'number' },
      maxRowsExamined: { 'type': 'array', 'itemType': 'number' },
      maxRowsSent: { 'type': 'array', 'itemType': 'number' },
      maxRt: { 'type': 'array', 'itemType': 'number' },
      physicalIOReads: { 'type': 'array', 'itemType': 'number' },
      returnNum: { 'type': 'array', 'itemType': 'number' },
      rowsCountAffected: { 'type': 'array', 'itemType': 'number' },
      rowsExamined: { 'type': 'array', 'itemType': 'number' },
      rowsSent: { 'type': 'array', 'itemType': 'number' },
      rt: { 'type': 'array', 'itemType': 'number' },
      total: 'number',
      ts: { 'type': 'array', 'itemType': 'number' },
      tsEnd: { 'type': 'array', 'itemType': 'number' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogHistogramAsyncResponseBodyData extends $tea.Model {
  data?: DescribeSlowLogHistogramAsyncResponseBodyDataData;
  /**
   * @example
   * 10910
   */
  errorCode?: number;
  /**
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @example
   * Successful
   */
  message?: string;
  requestKey?: string;
  /**
   * @example
   * async__20ee808e72257f16a4fe024057ca****
   */
  resultId?: string;
  /**
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @example
   * 1645668213000
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      errorCode: 'ErrorCode',
      isFinish: 'IsFinish',
      message: 'Message',
      requestKey: 'RequestKey',
      resultId: 'ResultId',
      state: 'State',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: DescribeSlowLogHistogramAsyncResponseBodyDataData,
      errorCode: 'number',
      isFinish: 'boolean',
      message: 'string',
      requestKey: 'string',
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticRequestFilters extends $tea.Model {
  /**
   * @example
   * KeyWords
   */
  key?: string;
  /**
   * @example
   * select
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem extends $tea.Model {
  count?: number[];
  /**
   * @example
   * r-bp1s1m8hwzrm77kfvz-db-0
   */
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      nodeId: 'NodeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: { 'type': 'array', 'itemType': 'number' },
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram extends $tea.Model {
  avgLockTime?: number[];
  avgRowsExamined?: number[];
  avgRowsSent?: number[];
  avgRt?: number[];
  count?: number[];
  item?: DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem[];
  lockTime?: number[];
  maxLockTime?: number[];
  maxRowsExamined?: number[];
  maxRowsSent?: number[];
  maxRt?: number[];
  rowsExamined?: number[];
  rowsSent?: number[];
  rt?: number[];
  /**
   * @example
   * 7
   */
  total?: number;
  ts?: number[];
  tsEnd?: number[];
  static names(): { [key: string]: string } {
    return {
      avgLockTime: 'AvgLockTime',
      avgRowsExamined: 'AvgRowsExamined',
      avgRowsSent: 'AvgRowsSent',
      avgRt: 'AvgRt',
      count: 'Count',
      item: 'Item',
      lockTime: 'LockTime',
      maxLockTime: 'MaxLockTime',
      maxRowsExamined: 'MaxRowsExamined',
      maxRowsSent: 'MaxRowsSent',
      maxRt: 'MaxRt',
      rowsExamined: 'RowsExamined',
      rowsSent: 'RowsSent',
      rt: 'Rt',
      total: 'Total',
      ts: 'Ts',
      tsEnd: 'TsEnd',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgLockTime: { 'type': 'array', 'itemType': 'number' },
      avgRowsExamined: { 'type': 'array', 'itemType': 'number' },
      avgRowsSent: { 'type': 'array', 'itemType': 'number' },
      avgRt: { 'type': 'array', 'itemType': 'number' },
      count: { 'type': 'array', 'itemType': 'number' },
      item: { 'type': 'array', 'itemType': DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem },
      lockTime: { 'type': 'array', 'itemType': 'number' },
      maxLockTime: { 'type': 'array', 'itemType': 'number' },
      maxRowsExamined: { 'type': 'array', 'itemType': 'number' },
      maxRowsSent: { 'type': 'array', 'itemType': 'number' },
      maxRt: { 'type': 'array', 'itemType': 'number' },
      rowsExamined: { 'type': 'array', 'itemType': 'number' },
      rowsSent: { 'type': 'array', 'itemType': 'number' },
      rt: { 'type': 'array', 'itemType': 'number' },
      total: 'number',
      ts: { 'type': 'array', 'itemType': 'number' },
      tsEnd: { 'type': 'array', 'itemType': 'number' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag extends $tea.Model {
  comments?: string;
  /**
   * @remarks
   * SQL ID。
   * 
   * @example
   * a3931d8c3a9315dd5ed016d71cf*****
   */
  sqlId?: string;
  /**
   * @example
   * DAS_IN_PLAN
   */
  tags?: string;
  static names(): { [key: string]: string } {
    return {
      comments: 'Comments',
      sqlId: 'SqlId',
      tags: 'Tags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comments: 'string',
      sqlId: 'string',
      tags: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBodyDataDataLogsTrend extends $tea.Model {
  /**
   * @example
   * 1723775362
   */
  timestamp?: number;
  /**
   * @example
   * tf-testacc-oos-parameter
   */
  value?: any;
  static names(): { [key: string]: string } {
    return {
      timestamp: 'Timestamp',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      timestamp: 'number',
      value: 'any',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBodyDataDataLogs extends $tea.Model {
  /**
   * @example
   * edu_admin
   */
  accountName?: string;
  /**
   * @example
   * -
   */
  avgCPUTime?: number;
  /**
   * @example
   * 10000
   */
  avgDocExamined?: number;
  /**
   * @example
   * 1000
   */
  avgIOWrites?: number;
  /**
   * @example
   * 20000
   */
  avgKeysExamined?: number;
  /**
   * @example
   * 1000
   */
  avgLastRowsCountAffected?: number;
  /**
   * @example
   * -
   */
  avgLockTime?: number;
  /**
   * @example
   * 0.0
   */
  avgLockTimeSeconds?: number;
  /**
   * @example
   * 1000
   */
  avgLogicalIOReads?: number;
  /**
   * @example
   * 1000
   */
  avgPhysicalIOReads?: number;
  /**
   * @example
   * -
   */
  avgQueryTime?: number;
  /**
   * @example
   * 6.211
   */
  avgQueryTimeSeconds?: number;
  /**
   * @example
   * 1
   */
  avgReturnNum?: number;
  /**
   * @example
   * 1000
   */
  avgRowsCountAffected?: number;
  /**
   * @example
   * 53421.0
   */
  avgRowsExamined?: number;
  /**
   * @example
   * 2.0
   */
  avgRowsSent?: number;
  /**
   * @example
   * -
   */
  CPUTime?: number;
  /**
   * @example
   * SELECT b?.id,b?.t?,b?.id,b?.t? FROM testtb? b? JOIN testtb? b? ON b?.id=b?.id WHERE b?.t? LIKE ? ORDER BY b?.t? DESC
   */
  command?: string;
  /**
   * @example
   * 12
   */
  count?: number;
  /**
   * @example
   * 0.2034
   */
  countRate?: number;
  /**
   * @example
   * member_score
   */
  DBName?: string;
  /**
   * @example
   * work-wechat-api
   */
  database?: string;
  /**
   * @example
   * 0
   */
  dbInstanceName?: string;
  /**
   * @example
   * 2000000
   */
  docExamined?: number;
  /**
   * @example
   * 1
   */
  docsExamined?: number;
  histogram?: DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram;
  /**
   * @example
   * 172.23.142.178
   */
  hostAddress?: string;
  /**
   * @example
   * mongo-abc123456
   */
  hostInsId?: string;
  /**
   * @example
   * 1000
   */
  IOWrites?: number;
  /**
   * @example
   * rm-uf6zix1z2jh1y6fe5
   */
  insName?: string;
  /**
   * @example
   * __system
   */
  insRole?: string;
  /**
   * @example
   * 20000
   */
  keysExamined?: number;
  /**
   * @example
   * 1000
   */
  lastRowsCountAffected?: number;
  /**
   * @example
   * -
   */
  lockTime?: number;
  /**
   * @example
   * 0.0
   */
  lockTimeSeconds?: number;
  /**
   * @example
   * 1000
   */
  logicalIOReads?: number;
  /**
   * @example
   * -
   */
  maxCPUTime?: number;
  /**
   * @example
   * 1000000
   */
  maxDocExamined?: number;
  /**
   * @example
   * 1000
   */
  maxIOWrites?: number;
  /**
   * @example
   * 2000000
   */
  maxKeysExamined?: number;
  /**
   * @example
   * 1000
   */
  maxLastRowsCountAffected?: number;
  /**
   * @example
   * -
   */
  maxLockTime?: number;
  /**
   * @example
   * 0.0
   */
  maxLockTimeSeconds?: number;
  /**
   * @example
   * 1000
   */
  maxLogicalIOReads?: number;
  /**
   * @example
   * 1000
   */
  maxPhysicalIOReads?: number;
  /**
   * @example
   * -
   */
  maxQueryTime?: number;
  /**
   * @example
   * 14.402
   */
  maxQueryTimeSeconds?: number;
  /**
   * @example
   * 1
   */
  maxReturnNum?: number;
  /**
   * @example
   * 1000
   */
  maxRowsCountAffected?: number;
  /**
   * @example
   * 318613
   */
  maxRowsExamined?: number;
  /**
   * @example
   * 256
   */
  maxRowsSent?: number;
  /**
   * @example
   * database.collection
   */
  namespace?: string;
  /**
   * @example
   * DLNode
   */
  nodeType?: string;
  /**
   * @example
   * Insert
   */
  opType?: string;
  /**
   * @example
   * order-1
   */
  originAlias?: string;
  /**
   * @example
   * 1000
   */
  physicalIOReads?: number;
  /**
   * @example
   * SELECT b?.id,b?.t?,b?.id,b?.t? FROM testtb? b? JOIN testtb? b? ON b?.id=b?.id WHERE b?.t? LIKE ? ORDER BY b?.id DESC
   */
  psql?: string;
  /**
   * @example
   * sq-1pzcdMwRb
   */
  queryId?: string;
  /**
   * @example
   * 2024-12-25T03:00:00Z
   */
  queryStartTime?: string;
  /**
   * @example
   * 272.444
   */
  queryTime?: number;
  /**
   * @example
   * 0.1018
   */
  queryTimeRate?: number;
  /**
   * @example
   * 25.472
   */
  queryTimeSeconds?: number;
  returnItemNumbers?: string;
  /**
   * @example
   * 1
   */
  returnNum?: number;
  /**
   * @example
   * 1000
   */
  rowsCountAffected?: number;
  /**
   * @example
   * 2444081
   */
  rowsExamined?: number;
  /**
   * @example
   * 772
   */
  rowsSent?: number;
  /**
   * @example
   * SELECT \\"Hello, World!\\" FROM DUAL
   */
  SQLText?: string;
  /**
   * @example
   * HTTP
   */
  scheme?: string;
  /**
   * @remarks
   * SQL ID。
   * 
   * @example
   * 2dca88762ec6b3812504ab8a4b******
   */
  sqlId?: string;
  sqlTag?: DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag;
  /**
   * @example
   * LOGIN
   */
  sqlType?: string;
  /**
   * @example
   * r-8vba51c588ba3a94
   */
  subInstanceId?: string;
  /**
   * @example
   * users\\nifconfig\\n
   */
  tableName?: string;
  /**
   * @example
   * 1
   */
  threadId?: string;
  /**
   * @example
   * 1708568930
   */
  timestamp?: number;
  trend?: DescribeSlowLogStatisticResponseBodyDataDataLogsTrend[];
  /**
   * @example
   * user-1
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      accountName: 'AccountName',
      avgCPUTime: 'AvgCPUTime',
      avgDocExamined: 'AvgDocExamined',
      avgIOWrites: 'AvgIOWrites',
      avgKeysExamined: 'AvgKeysExamined',
      avgLastRowsCountAffected: 'AvgLastRowsCountAffected',
      avgLockTime: 'AvgLockTime',
      avgLockTimeSeconds: 'AvgLockTimeSeconds',
      avgLogicalIOReads: 'AvgLogicalIOReads',
      avgPhysicalIOReads: 'AvgPhysicalIOReads',
      avgQueryTime: 'AvgQueryTime',
      avgQueryTimeSeconds: 'AvgQueryTimeSeconds',
      avgReturnNum: 'AvgReturnNum',
      avgRowsCountAffected: 'AvgRowsCountAffected',
      avgRowsExamined: 'AvgRowsExamined',
      avgRowsSent: 'AvgRowsSent',
      CPUTime: 'CPUTime',
      command: 'Command',
      count: 'Count',
      countRate: 'CountRate',
      DBName: 'DBName',
      database: 'Database',
      dbInstanceName: 'DbInstanceName',
      docExamined: 'DocExamined',
      docsExamined: 'DocsExamined',
      histogram: 'Histogram',
      hostAddress: 'HostAddress',
      hostInsId: 'HostInsId',
      IOWrites: 'IOWrites',
      insName: 'InsName',
      insRole: 'InsRole',
      keysExamined: 'KeysExamined',
      lastRowsCountAffected: 'LastRowsCountAffected',
      lockTime: 'LockTime',
      lockTimeSeconds: 'LockTimeSeconds',
      logicalIOReads: 'LogicalIOReads',
      maxCPUTime: 'MaxCPUTime',
      maxDocExamined: 'MaxDocExamined',
      maxIOWrites: 'MaxIOWrites',
      maxKeysExamined: 'MaxKeysExamined',
      maxLastRowsCountAffected: 'MaxLastRowsCountAffected',
      maxLockTime: 'MaxLockTime',
      maxLockTimeSeconds: 'MaxLockTimeSeconds',
      maxLogicalIOReads: 'MaxLogicalIOReads',
      maxPhysicalIOReads: 'MaxPhysicalIOReads',
      maxQueryTime: 'MaxQueryTime',
      maxQueryTimeSeconds: 'MaxQueryTimeSeconds',
      maxReturnNum: 'MaxReturnNum',
      maxRowsCountAffected: 'MaxRowsCountAffected',
      maxRowsExamined: 'MaxRowsExamined',
      maxRowsSent: 'MaxRowsSent',
      namespace: 'Namespace',
      nodeType: 'NodeType',
      opType: 'OpType',
      originAlias: 'OriginAlias',
      physicalIOReads: 'PhysicalIOReads',
      psql: 'Psql',
      queryId: 'QueryId',
      queryStartTime: 'QueryStartTime',
      queryTime: 'QueryTime',
      queryTimeRate: 'QueryTimeRate',
      queryTimeSeconds: 'QueryTimeSeconds',
      returnItemNumbers: 'ReturnItemNumbers',
      returnNum: 'ReturnNum',
      rowsCountAffected: 'RowsCountAffected',
      rowsExamined: 'RowsExamined',
      rowsSent: 'RowsSent',
      SQLText: 'SQLText',
      scheme: 'Scheme',
      sqlId: 'SqlId',
      sqlTag: 'SqlTag',
      sqlType: 'SqlType',
      subInstanceId: 'SubInstanceId',
      tableName: 'TableName',
      threadId: 'ThreadId',
      timestamp: 'Timestamp',
      trend: 'Trend',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountName: 'string',
      avgCPUTime: 'number',
      avgDocExamined: 'number',
      avgIOWrites: 'number',
      avgKeysExamined: 'number',
      avgLastRowsCountAffected: 'number',
      avgLockTime: 'number',
      avgLockTimeSeconds: 'number',
      avgLogicalIOReads: 'number',
      avgPhysicalIOReads: 'number',
      avgQueryTime: 'number',
      avgQueryTimeSeconds: 'number',
      avgReturnNum: 'number',
      avgRowsCountAffected: 'number',
      avgRowsExamined: 'number',
      avgRowsSent: 'number',
      CPUTime: 'number',
      command: 'string',
      count: 'number',
      countRate: 'number',
      DBName: 'string',
      database: 'string',
      dbInstanceName: 'string',
      docExamined: 'number',
      docsExamined: 'number',
      histogram: DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram,
      hostAddress: 'string',
      hostInsId: 'string',
      IOWrites: 'number',
      insName: 'string',
      insRole: 'string',
      keysExamined: 'number',
      lastRowsCountAffected: 'number',
      lockTime: 'number',
      lockTimeSeconds: 'number',
      logicalIOReads: 'number',
      maxCPUTime: 'number',
      maxDocExamined: 'number',
      maxIOWrites: 'number',
      maxKeysExamined: 'number',
      maxLastRowsCountAffected: 'number',
      maxLockTime: 'number',
      maxLockTimeSeconds: 'number',
      maxLogicalIOReads: 'number',
      maxPhysicalIOReads: 'number',
      maxQueryTime: 'number',
      maxQueryTimeSeconds: 'number',
      maxReturnNum: 'number',
      maxRowsCountAffected: 'number',
      maxRowsExamined: 'number',
      maxRowsSent: 'number',
      namespace: 'string',
      nodeType: 'string',
      opType: 'string',
      originAlias: 'string',
      physicalIOReads: 'number',
      psql: 'string',
      queryId: 'string',
      queryStartTime: 'string',
      queryTime: 'number',
      queryTimeRate: 'number',
      queryTimeSeconds: 'number',
      returnItemNumbers: 'string',
      returnNum: 'number',
      rowsCountAffected: 'number',
      rowsExamined: 'number',
      rowsSent: 'number',
      SQLText: 'string',
      scheme: 'string',
      sqlId: 'string',
      sqlTag: DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag,
      sqlType: 'string',
      subInstanceId: 'string',
      tableName: 'string',
      threadId: 'string',
      timestamp: 'number',
      trend: { 'type': 'array', 'itemType': DescribeSlowLogStatisticResponseBodyDataDataLogsTrend },
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBodyDataData extends $tea.Model {
  /**
   * @example
   * rm-k2ja51w7cnusg5a1x
   */
  dbInstanceId?: number;
  /**
   * @example
   * 0
   */
  dbInstanceName?: string;
  /**
   * @example
   * 2024-08-08T02:15:00Z
   */
  endTime?: string;
  /**
   * @example
   * 10
   */
  itemsNumbers?: number;
  logs?: DescribeSlowLogStatisticResponseBodyDataDataLogs[];
  /**
   * @example
   * 10
   */
  maxRecordsPerPage?: number;
  /**
   * @example
   * pi-wz99g5rn7w1x8h0sf
   */
  nodeId?: string;
  /**
   * @example
   * 1
   */
  pageNumbers?: number;
  /**
   * @example
   * 2024-10-08T02:01:00Z
   */
  startTime?: string;
  /**
   * @example
   * 13
   */
  totalRecords?: number;
  static names(): { [key: string]: string } {
    return {
      dbInstanceId: 'DbInstanceId',
      dbInstanceName: 'DbInstanceName',
      endTime: 'EndTime',
      itemsNumbers: 'ItemsNumbers',
      logs: 'Logs',
      maxRecordsPerPage: 'MaxRecordsPerPage',
      nodeId: 'NodeId',
      pageNumbers: 'PageNumbers',
      startTime: 'StartTime',
      totalRecords: 'TotalRecords',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbInstanceId: 'number',
      dbInstanceName: 'string',
      endTime: 'string',
      itemsNumbers: 'number',
      logs: { 'type': 'array', 'itemType': DescribeSlowLogStatisticResponseBodyDataDataLogs },
      maxRecordsPerPage: 'number',
      nodeId: 'string',
      pageNumbers: 'number',
      startTime: 'string',
      totalRecords: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlowLogStatisticResponseBodyData extends $tea.Model {
  data?: DescribeSlowLogStatisticResponseBodyDataData;
  /**
   * @example
   * 10910
   */
  errorCode?: number;
  /**
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @example
   * Successful
   */
  message?: string;
  /**
   * @example
   * 123456789
   */
  requestKey?: string;
  /**
   * @example
   * async__665ee69612f1627c7fd9f3c85075****
   */
  resultId?: string;
  /**
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @example
   * 1735104224250
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      errorCode: 'ErrorCode',
      isFinish: 'IsFinish',
      message: 'Message',
      requestKey: 'RequestKey',
      resultId: 'ResultId',
      state: 'State',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: DescribeSlowLogStatisticResponseBodyDataData,
      errorCode: 'number',
      isFinish: 'boolean',
      message: 'string',
      requestKey: 'string',
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogConfigResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the cold data storage is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  coldEnable?: boolean;
  /**
   * @remarks
   * The number of days for which the SQL Explorer and Audit data is stored in cold storage.
   * 
   * @example
   * 23
   */
  coldRetention?: number;
  /**
   * @remarks
   * The time when the cold data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  coldStartTime?: number;
  /**
   * @remarks
   * The collector version. Valid values:
   * 
   * *   **MYSQL_V0**
   * *   **MYSQL_V1**
   * *   **MYSQL_V2**
   * *   **MYSQL_V3**
   * *   **PG_V1**
   * *   **rdspg_v1**
   * *   **polarpg_v1**
   * 
   * @example
   * MYSQL_V3
   */
  collectorVersion?: string;
  /**
   * @remarks
   * Indicates whether the hot data storage is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  hotEnable?: boolean;
  /**
   * @remarks
   * The number of days for which the SQL Explorer and Audit data is stored in hot storage.
   * 
   * @example
   * 7
   */
  hotRetention?: number;
  /**
   * @remarks
   * The time when the hot data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  hotStartTime?: number;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  logFilter?: string;
  /**
   * @remarks
   * Indicates whether the SQL Explorer feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  requestEnable?: boolean;
  /**
   * @remarks
   * The time when the SQL Explorer feature was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  requestStartTime?: number;
  /**
   * @remarks
   * The time when DAS Enterprise Edition V1 expired. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1715335200000
   */
  requestStopTime?: number;
  /**
   * @remarks
   * The total storage duration of the SQL Explorer and Audit data. The value of this parameter is the sum of the values of **HotRetention** and **ColdRetention**. Unit: day.
   * 
   * @example
   * 30
   */
  retention?: number;
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  sqlLogEnable?: boolean;
  sqlLogSource?: string;
  /**
   * @remarks
   * The state of data migration. Valid values:
   * 
   * *   **FINISH**: The historical data is migrated.
   * *   **RUNNING**: The historical data is being migrated.
   * *   **FAILURE**: The historical data fails to be migrated.
   * 
   * @example
   * FINISH
   */
  sqlLogState?: string;
  /**
   * @remarks
   * The time when DAS Enterprise Edition was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  sqlLogVisibleTime?: number;
  supportMigration?: boolean;
  /**
   * @remarks
   * The latest version of DAS Enterprise Edition that supports the database instance. Valid values:
   * 
   * *   **SQL_LOG_V0**: DAS Enterprise Edition V0.
   * *   **SQL_LOG_V1**: DAS Enterprise version V1.
   * *   **SQL_LOG_V2**: DAS Enterprise Edition V2.
   * *   **SQL_LOG_V3**: DAS Enterprise Edition V3.
   * *   **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
   * *   **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
   * 
   * @example
   * SQL_LOG_V3
   */
  supportVersion?: string;
  /**
   * @remarks
   * The version of DAS Enterprise Edition that is enabled for the database instance. Valid values:
   * 
   * *   **SQL_LOG_V0**: DAS Enterprise Edition V0.
   * *   **SQL_LOG_V1**: DAS Enterprise version V1.
   * *   **SQL_LOG_V2**: DAS Enterprise Edition V2.
   * *   **SQL_LOG_V3**: DAS Enterprise Edition V3.
   * *   **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
   * *   **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
   * 
   * @example
   * SQL_LOG_V3
   */
  version?: string;
  static names(): { [key: string]: string } {
    return {
      coldEnable: 'ColdEnable',
      coldRetention: 'ColdRetention',
      coldStartTime: 'ColdStartTime',
      collectorVersion: 'CollectorVersion',
      hotEnable: 'HotEnable',
      hotRetention: 'HotRetention',
      hotStartTime: 'HotStartTime',
      logFilter: 'LogFilter',
      requestEnable: 'RequestEnable',
      requestStartTime: 'RequestStartTime',
      requestStopTime: 'RequestStopTime',
      retention: 'Retention',
      sqlLogEnable: 'SqlLogEnable',
      sqlLogSource: 'SqlLogSource',
      sqlLogState: 'SqlLogState',
      sqlLogVisibleTime: 'SqlLogVisibleTime',
      supportMigration: 'SupportMigration',
      supportVersion: 'SupportVersion',
      version: 'Version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coldEnable: 'boolean',
      coldRetention: 'number',
      coldStartTime: 'number',
      collectorVersion: 'string',
      hotEnable: 'boolean',
      hotRetention: 'number',
      hotStartTime: 'number',
      logFilter: 'string',
      requestEnable: 'boolean',
      requestStartTime: 'number',
      requestStopTime: 'number',
      retention: 'number',
      sqlLogEnable: 'boolean',
      sqlLogSource: 'string',
      sqlLogState: 'string',
      sqlLogVisibleTime: 'number',
      supportMigration: 'boolean',
      supportVersion: 'string',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogRecordsRequestFilters extends $tea.Model {
  /**
   * @remarks
   * The filter parameter.
   * 
   * >  For more information about the supported filter parameters and their valid values, see the **Supported parameters and values for Key** section of this topic.
   * 
   * @example
   * keyWords
   */
  key?: string;
  /**
   * @remarks
   * The value of the filter parameter.
   * 
   * @example
   * select
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord extends $tea.Model {
  /**
   * @remarks
   * The account of the database.
   * 
   * @example
   * testname
   */
  accountName?: string;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  collection?: string;
  /**
   * @remarks
   * The amount of time that is consumed to execute the SQL statement. Unit: millisecond.
   * 
   * @example
   * 58
   */
  consume?: number;
  /**
   * @remarks
   * The CPU execution duration. Unit: microsecond.
   * 
   * @example
   * 100
   */
  cpuTime?: number;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * testdb
   */
  DBName?: string;
  /**
   * @remarks
   * The time when the SQL statement was executed. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
   * 
   * @example
   * 2023-12-07T02:15:32Z
   */
  executeTime?: string;
  /**
   * @remarks
   * The extended information. This parameter is a reserved parameter.
   * 
   * @example
   * None
   */
  ext?: string;
  /**
   * @remarks
   * The number of rows that are pulled by the compute nodes of the PolarDB-X 2.0 instance.
   * 
   * @example
   * 10
   */
  frows?: number;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 11.197.XX.XX
   */
  hostAddress?: string;
  /**
   * @remarks
   * The lock wait duration. Unit: millisecond.
   * 
   * @example
   * 0
   */
  lockTime?: number;
  /**
   * @remarks
   * The number of logical reads.
   * 
   * @example
   * 0
   */
  logicRead?: number;
  /**
   * @remarks
   * The node ID.
   * 
   * @example
   * pi-uf6k5f6g3912i****
   */
  nodeId?: string;
  /**
   * @remarks
   * The timestamp generated when the SQL statement was executed. The value of this parameter is a UNIX timestamp. Unit: millisecond.
   * 
   * @example
   * 1701886532000
   */
  originTime?: number;
  /**
   * @remarks
   * The parallel queue time of the PolarDB for MySQL instance. Unit: millisecond.
   * 
   * @example
   * 10
   */
  parallelDegree?: string;
  /**
   * @remarks
   * The parallelism of the PolarDB for MySQL cluster.
   * 
   * @example
   * 2
   */
  parallelQueueTime?: string;
  /**
   * @remarks
   * The number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  physicAsyncRead?: number;
  /**
   * @remarks
   * The total number of physical reads.
   * 
   * @example
   * 0
   */
  physicRead?: number;
  /**
   * @remarks
   * The number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  physicSyncRead?: number;
  /**
   * @remarks
   * The number of rows returned by the SQL statement.
   * 
   * @example
   * 0
   */
  returnRows?: number;
  /**
   * @remarks
   * The total number of rows that are updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
   * 
   * @example
   * 10
   */
  rows?: number;
  /**
   * @remarks
   * The number of scanned rows.
   * 
   * @example
   * 0
   */
  scanRows?: number;
  /**
   * @remarks
   * The number of requests that are sent from the compute nodes to the data nodes of the PolarDB-X 2.0 instance.
   * 
   * @example
   * 10
   */
  scnt?: number;
  /**
   * @remarks
   * The SQL statement ID.
   * 
   * @example
   * c67649d4a7fb62c4f8c7a447c52b5b17
   */
  sqlId?: string;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * select resource_id as cluster_id, tpl_name \\n\\tfrom dbfree_alert_resource_tpl_ref\\n\\twhere user_id=? and type=\\"cluster\\" group by resource_id, tpl_name
   */
  sqlText?: string;
  /**
   * @remarks
   * The type of the SQL statement.
   * 
   * @example
   * select
   */
  sqlType?: string;
  /**
   * @remarks
   * The execution status of the SQL statement.
   * 
   * *   **0**: The execution was successful.
   * *   **1**: The execution failed.
   * 
   * @example
   * 0
   */
  state?: string;
  /**
   * @remarks
   * The thread ID.
   * 
   * @example
   * None
   */
  threadId?: number;
  /**
   * @remarks
   * The trace ID of the PolarDB-X 2.0 instance. The value is the execution ID of the SQL statement on the data node.
   * 
   * @example
   * 14c93b7c7bf00000
   */
  traceId?: string;
  /**
   * @remarks
   * The transaction ID.
   * 
   * @example
   * 200000
   */
  trxId?: string;
  /**
   * @remarks
   * The number of rows that are updated.
   * 
   * @example
   * 0
   */
  updateRows?: number;
  /**
   * @remarks
   * Indicates whether the In-Memory Column Index (IMCI) feature is enabled for the PolarDB for MySQL cluster. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  useImciEngine?: string;
  /**
   * @remarks
   * The IP address that is resolved from the endpoint of the query link.
   * 
   * @example
   * 100.115.XX.XX
   */
  vip?: string;
  /**
   * @remarks
   * The number of writes to the ApsaraDB RDS for SQL Server instance.
   * 
   * @example
   * 10
   */
  writes?: number;
  static names(): { [key: string]: string } {
    return {
      accountName: 'AccountName',
      collection: 'Collection',
      consume: 'Consume',
      cpuTime: 'CpuTime',
      DBName: 'DBName',
      executeTime: 'ExecuteTime',
      ext: 'Ext',
      frows: 'Frows',
      hostAddress: 'HostAddress',
      lockTime: 'LockTime',
      logicRead: 'LogicRead',
      nodeId: 'NodeId',
      originTime: 'OriginTime',
      parallelDegree: 'ParallelDegree',
      parallelQueueTime: 'ParallelQueueTime',
      physicAsyncRead: 'PhysicAsyncRead',
      physicRead: 'PhysicRead',
      physicSyncRead: 'PhysicSyncRead',
      returnRows: 'ReturnRows',
      rows: 'Rows',
      scanRows: 'ScanRows',
      scnt: 'Scnt',
      sqlId: 'SqlId',
      sqlText: 'SqlText',
      sqlType: 'SqlType',
      state: 'State',
      threadId: 'ThreadId',
      traceId: 'TraceId',
      trxId: 'TrxId',
      updateRows: 'UpdateRows',
      useImciEngine: 'UseImciEngine',
      vip: 'Vip',
      writes: 'Writes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountName: 'string',
      collection: 'string',
      consume: 'number',
      cpuTime: 'number',
      DBName: 'string',
      executeTime: 'string',
      ext: 'string',
      frows: 'number',
      hostAddress: 'string',
      lockTime: 'number',
      logicRead: 'number',
      nodeId: 'string',
      originTime: 'number',
      parallelDegree: 'string',
      parallelQueueTime: 'string',
      physicAsyncRead: 'number',
      physicRead: 'number',
      physicSyncRead: 'number',
      returnRows: 'number',
      rows: 'number',
      scanRows: 'number',
      scnt: 'number',
      sqlId: 'string',
      sqlText: 'string',
      sqlType: 'string',
      state: 'string',
      threadId: 'number',
      traceId: 'string',
      trxId: 'string',
      updateRows: 'number',
      useImciEngine: 'string',
      vip: 'string',
      writes: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogRecordsResponseBodyDataItems extends $tea.Model {
  /**
   * @remarks
   * The SQL log data.
   */
  SQLLogRecord?: DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord[];
  static names(): { [key: string]: string } {
    return {
      SQLLogRecord: 'SQLLogRecord',
    };
  }

  static types(): { [key: string]: any } {
    return {
      SQLLogRecord: { 'type': 'array', 'itemType': DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogRecordsResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The end of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
   * 
   * @example
   * 1608888296000
   */
  endTime?: number;
  /**
   * @remarks
   * Indicates whether the task was complete. Valid values:
   * 
   * *   **0**: no
   * *   **1**: yes
   * 
   * >  If the value of **Finish** is 0 and the value of **JobId** is returned, the request is an asynchronous request and the return result cannot be directly obtained. You must query the return result based on the value of **JobId**. Specify JobId as the key of **Filters** and the value of **JobId** as the value of Filters. Example: `Filters=[{"Key": "JobId", "Value": "******"}]`.
   * 
   * @example
   * 1
   */
  finish?: string;
  /**
   * @remarks
   * The data.
   */
  items?: DescribeSqlLogRecordsResponseBodyDataItems;
  /**
   * @remarks
   * The ID of the asynchronous task.
   * 
   * @example
   * MzI4NTZfUUlOR0RBT19DTTlfTlUyMF9NWVNRTF9PREJTX0xWU18zMjg1Nl9teXNxbF9XZWQgTWFyIDA2IDE0OjUwOjQ3IENTVCAyMDI0XzBfMzBfRXhlY3V0ZVRpbWVfREVTQ19XZWQgTWFyIDA2IDE0OjM1OjQ3IENTVCAyMDI0Xw==_1709708406465
   */
  jobId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
   * 
   * @example
   * 1596177993000
   */
  startTime?: number;
  /**
   * @remarks
   * The total number of entries.
   * 
   * @example
   * 1
   */
  totalRecords?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      finish: 'Finish',
      items: 'Items',
      jobId: 'JobId',
      startTime: 'StartTime',
      totalRecords: 'TotalRecords',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      finish: 'string',
      items: DescribeSqlLogRecordsResponseBodyDataItems,
      jobId: 'string',
      startTime: 'number',
      totalRecords: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogStatisticResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The size of the SQL Explorer and Audit data that is stored in cold storage. Unit: bytes.
   * 
   * @example
   * 8585901
   */
  coldSqlSize?: number;
  /**
   * @remarks
   * The free quota for cold data storage. Unit: bytes.
   * 
   * @example
   * 5041450
   */
  freeColdSqlSize?: number;
  /**
   * @remarks
   * The free quota for hot data storage. Unit: bytes.
   * 
   * @example
   * 297245
   */
  freeHotSqlSize?: number;
  /**
   * @remarks
   * The size of the SQL Explorer and Audit data that is stored in hot storage. Unit: bytes.
   * 
   * @example
   * 1118042
   */
  hotSqlSize?: number;
  /**
   * @remarks
   * The size of the SQL Explorer and Audit data that was generated in the most recent day. Unit: bytes.
   * 
   * @example
   * 23
   */
  importSqlSize?: number;
  /**
   * @remarks
   * The timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1712568564928
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      coldSqlSize: 'ColdSqlSize',
      freeColdSqlSize: 'FreeColdSqlSize',
      freeHotSqlSize: 'FreeHotSqlSize',
      hotSqlSize: 'HotSqlSize',
      importSqlSize: 'ImportSqlSize',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coldSqlSize: 'number',
      freeColdSqlSize: 'number',
      freeHotSqlSize: 'number',
      hotSqlSize: 'number',
      importSqlSize: 'number',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTaskResponseBodyDataFilters extends $tea.Model {
  /**
   * @remarks
   * The name of the filter parameter.
   * 
   * >  For more information about the filter parameters, see the **Valid values of Key** section of this topic.
   * 
   * @example
   * keyWords
   */
  key?: string;
  /**
   * @remarks
   * The value of the filter parameter.
   * 
   * @example
   * select
   */
  value?: any;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'any',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTaskResponseBodyDataQueries extends $tea.Model {
  /**
   * @remarks
   * The database account.
   * 
   * @example
   * testname
   */
  accountName?: string;
  collection?: string;
  /**
   * @remarks
   * The execution duration. Unit: millisecond.
   * 
   * @example
   * 58
   */
  consume?: number;
  /**
   * @remarks
   * The CPU execution time. Unit: microsecond.
   * 
   * @example
   * 100
   */
  cpuTime?: number;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * testdb01
   */
  DBName?: string;
  /**
   * @remarks
   * The execution time. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
   * 
   * @example
   * 2023-12-07T02:15:32Z
   */
  executeTime?: string;
  /**
   * @remarks
   * The extended information. This parameter is a reserved parameter.
   * 
   * @example
   * None
   */
  ext?: string;
  /**
   * @remarks
   * The number of rows pulled by the CNs of the PolarDB-X 2.0 instance.
   * 
   * @example
   * 10
   */
  frows?: number;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 11.197.XX.XX
   */
  hostAddress?: string;
  /**
   * @remarks
   * The lock wait time. Unit: millisecond.
   * 
   * @example
   * 0
   */
  lockTime?: number;
  /**
   * @remarks
   * The number of logical reads.
   * 
   * @example
   * 0
   */
  logicRead?: number;
  /**
   * @remarks
   * The ID of the child node.
   * 
   * @example
   * pi-bp1o58x3ib7e6****
   */
  nodeId?: string;
  /**
   * @remarks
   * The execution timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1701886532000
   */
  originTime?: number;
  /**
   * @remarks
   * The wait time of parallel queries in the queue in the PolarDB for MySQL instance. Unit: millisecond.
   * 
   * @example
   * 10
   */
  parallelDegree?: string;
  /**
   * @remarks
   * The degree of parallelism (DOP) value of the PolarDB for MySQL instance.
   * 
   * @example
   * 2
   */
  parallelQueueTime?: string;
  /**
   * @remarks
   * The number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  physicAsyncRead?: number;
  /**
   * @remarks
   * The total number of physical reads.
   * 
   * @example
   * 0
   */
  physicRead?: number;
  /**
   * @remarks
   * The number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  physicSyncRead?: number;
  /**
   * @remarks
   * The number of rows returned.
   * 
   * @example
   * 0
   */
  returnRows?: number;
  /**
   * @remarks
   * The total number of rows updated or returned by the CNs of the PolarDB-X 2.0 instance.
   * 
   * @example
   * 10
   */
  rows?: number;
  /**
   * @remarks
   * The number of rows scanned.
   * 
   * @example
   * 0
   */
  scanRows?: number;
  /**
   * @remarks
   * The number of requests from the compute nodes (CNs) to the data nodes (DNs) in the PolarDB-X 2.0 instance.
   * 
   * @example
   * 10
   */
  scnt?: number;
  /**
   * @remarks
   * The ID of the SQL statement.
   * 
   * @example
   * a4111670e80596c5bf42cf5154438a91
   */
  sqlId?: string;
  /**
   * @remarks
   * The queried SQL statement.
   * 
   * @example
   * SELECT @@session.transaction_read_only
   */
  sqlText?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * *   **SELECT**
   * *   **UPDATE**
   * *   **DELETE**
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The execution result of the SQL statement. Valid values:
   * 
   * *   **0**: The execution was successful.
   * *   **1**: The execution failed.
   * 
   * @example
   * 0
   */
  state?: string;
  /**
   * @remarks
   * The thread ID.
   * 
   * @example
   * None
   */
  threadId?: number;
  /**
   * @remarks
   * The trace ID of the PolarDB-X 2.0 instance, which is the execution ID of the SQL statement on the DN.
   * 
   * @example
   * 14c93b7c7bf00000
   */
  traceId?: string;
  /**
   * @remarks
   * The transaction ID.
   * 
   * @example
   * 200000
   */
  trxId?: string;
  /**
   * @remarks
   * The number of rows updated.
   * 
   * @example
   * 0
   */
  updateRows?: number;
  /**
   * @remarks
   * Indicates whether the PolarDB for MySQL instance uses In-Memory Column Indexes (IMCIs). Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  useImciEngine?: string;
  /**
   * @remarks
   * The IP address to which the endpoint used for query is resolved.
   * 
   * @example
   * 10.146.XX.XX
   */
  vip?: string;
  /**
   * @remarks
   * The number of writes to the ApsaraDB RDS for SQL Server instance.
   * 
   * @example
   * 10
   */
  writes?: number;
  static names(): { [key: string]: string } {
    return {
      accountName: 'AccountName',
      collection: 'Collection',
      consume: 'Consume',
      cpuTime: 'CpuTime',
      DBName: 'DBName',
      executeTime: 'ExecuteTime',
      ext: 'Ext',
      frows: 'Frows',
      hostAddress: 'HostAddress',
      lockTime: 'LockTime',
      logicRead: 'LogicRead',
      nodeId: 'NodeId',
      originTime: 'OriginTime',
      parallelDegree: 'ParallelDegree',
      parallelQueueTime: 'ParallelQueueTime',
      physicAsyncRead: 'PhysicAsyncRead',
      physicRead: 'PhysicRead',
      physicSyncRead: 'PhysicSyncRead',
      returnRows: 'ReturnRows',
      rows: 'Rows',
      scanRows: 'ScanRows',
      scnt: 'Scnt',
      sqlId: 'SqlId',
      sqlText: 'SqlText',
      sqlType: 'SqlType',
      state: 'State',
      threadId: 'ThreadId',
      traceId: 'TraceId',
      trxId: 'TrxId',
      updateRows: 'UpdateRows',
      useImciEngine: 'UseImciEngine',
      vip: 'Vip',
      writes: 'Writes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountName: 'string',
      collection: 'string',
      consume: 'number',
      cpuTime: 'number',
      DBName: 'string',
      executeTime: 'string',
      ext: 'string',
      frows: 'number',
      hostAddress: 'string',
      lockTime: 'number',
      logicRead: 'number',
      nodeId: 'string',
      originTime: 'number',
      parallelDegree: 'string',
      parallelQueueTime: 'string',
      physicAsyncRead: 'number',
      physicRead: 'number',
      physicSyncRead: 'number',
      returnRows: 'number',
      rows: 'number',
      scanRows: 'number',
      scnt: 'number',
      sqlId: 'string',
      sqlText: 'string',
      sqlType: 'string',
      state: 'string',
      threadId: 'number',
      traceId: 'string',
      trxId: 'string',
      updateRows: 'number',
      useImciEngine: 'string',
      vip: 'string',
      writes: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTaskResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The time when the task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1681363254423
   */
  createTime?: number;
  /**
   * @remarks
   * The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  end?: number;
  /**
   * @remarks
   * Indicates whether the task has expired. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  expire?: boolean;
  /**
   * @remarks
   * The download URL of the export task.
   * 
   * @example
   * "https://das-sqllog-download-cn-hongkong.oss-cn-hongkong.aliyuncs.com/****"
   */
  export?: string;
  /**
   * @remarks
   * The filter parameters.
   */
  filters?: DescribeSqlLogTaskResponseBodyDataFilters[];
  /**
   * @remarks
   * The task name.
   */
  name?: string;
  /**
   * @remarks
   * The results of the offline querying task.
   */
  queries?: DescribeSqlLogTaskResponseBodyDataQueries[];
  /**
   * @remarks
   * The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1596177993000
   */
  start?: number;
  /**
   * @remarks
   * The task state. Valid values:
   * 
   * *   **INIT**: The task is to be scheduled.
   * *   **RUNNING**: The task is running.
   * *   **FAILED**: The task failed.
   * *   **CANCELED**: The task is canceled.
   * *   **COMPLETED**: The task is complete.
   * 
   * >  If a task is in the **COMPLETED** state, you can view the results of the task.
   * 
   * @example
   * COMPLETED
   */
  status?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * 9a4f5c4494dbd6713185d87a97aa53e8
   */
  taskId?: string;
  /**
   * @remarks
   * The task type. Valid values:
   * 
   * *   **Export**
   * *   **Query**
   * 
   * @example
   * Query
   */
  taskType?: string;
  /**
   * @remarks
   * The total number of tasks.
   * 
   * @example
   * 1
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      end: 'End',
      expire: 'Expire',
      export: 'Export',
      filters: 'Filters',
      name: 'Name',
      queries: 'Queries',
      start: 'Start',
      status: 'Status',
      taskId: 'TaskId',
      taskType: 'TaskType',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'number',
      end: 'number',
      expire: 'boolean',
      export: 'string',
      filters: { 'type': 'array', 'itemType': DescribeSqlLogTaskResponseBodyDataFilters },
      name: 'string',
      queries: { 'type': 'array', 'itemType': DescribeSqlLogTaskResponseBodyDataQueries },
      start: 'number',
      status: 'string',
      taskId: 'string',
      taskType: 'string',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTasksRequestFilters extends $tea.Model {
  /**
   * @remarks
   * The name of the filter parameter.
   * 
   * >  For more information about the filter parameters, see the **Valid values of Key** section of this topic.
   * 
   * @example
   * delimiter
   */
  key?: string;
  /**
   * @remarks
   * The value of the filter parameter.
   * 
   * @example
   * ,
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTasksResponseBodyDataListFilters extends $tea.Model {
  /**
   * @remarks
   * The name of the filter parameter.
   * 
   * >  For more information about the filter parameters, see the **Valid values of Key** section of this topic.
   * 
   * @example
   * delimiter
   */
  key?: string;
  /**
   * @remarks
   * The value of the filter parameter.
   * 
   * @example
   * ,
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTasksResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The time when the analysis task was complete. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1712751923000
   */
  analysisTaskFinishTime?: number;
  /**
   * @remarks
   * The state of the analysis task.
   * 
   * >  This parameter is a system parameter. You do not need to pay attention to the parameter.
   * 
   * @example
   * SCAN_ANALYZE_COMPLETED
   */
  analysisTaskStatus?: string;
  /**
   * @remarks
   * The time when the task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1681363254423
   */
  createTime?: number;
  /**
   * @remarks
   * The time when the task ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1705975320000
   */
  end?: number;
  /**
   * @remarks
   * Indicates whether the task expired. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  expire?: boolean;
  /**
   * @remarks
   * The filter parameters.
   */
  filters?: DescribeSqlLogTasksResponseBodyDataListFilters[];
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * rm-2zew761kf7ho18752
   */
  instanceId?: string;
  /**
   * @remarks
   * The number of log records.
   * 
   * @example
   * 99999
   */
  logCount?: number;
  /**
   * @remarks
   * The task name.
   * 
   * @example
   * test01
   */
  name?: string;
  /**
   * @remarks
   * The task progress.
   * 
   * @example
   * 100
   */
  progress?: number;
  /**
   * @remarks
   * The URL that is returned if the value of TaskType is **Export**.
   * 
   * @example
   * https://das-sqllog-download-cn-shanghai.oss-cn-shanghai.aliyuncs.com/la
   */
  result?: string;
  /**
   * @remarks
   * The number of files that are scanned.
   * 
   * @example
   * 3000
   */
  scanFileSize?: number;
  /**
   * @remarks
   * The time when the task started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683859555482
   */
  start?: number;
  /**
   * @remarks
   * The task state. Valid values:
   * 
   * *   **INIT**: The task is to be scheduled.
   * *   **RUNNING**: The task is running.
   * *   **FAILED**: The task failed.
   * *   **CANCELED**: The task is canceled.
   * *   **COMPLETED**: The task is complete.
   * 
   * >  If a task is in the **COMPLETED** state, you can view the results of the task.
   * 
   * @example
   * RUNNING
   */
  status?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * 9a4f5c4494dbd6713185d87a97aa53e8
   */
  taskId?: string;
  /**
   * @remarks
   * The task type. Valid values:
   * 
   * *   **Export**
   * *   **Query**
   * 
   * @example
   * Export
   */
  taskType?: string;
  static names(): { [key: string]: string } {
    return {
      analysisTaskFinishTime: 'AnalysisTaskFinishTime',
      analysisTaskStatus: 'AnalysisTaskStatus',
      createTime: 'CreateTime',
      end: 'End',
      expire: 'Expire',
      filters: 'Filters',
      instanceId: 'InstanceId',
      logCount: 'LogCount',
      name: 'Name',
      progress: 'Progress',
      result: 'Result',
      scanFileSize: 'ScanFileSize',
      start: 'Start',
      status: 'Status',
      taskId: 'TaskId',
      taskType: 'TaskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      analysisTaskFinishTime: 'number',
      analysisTaskStatus: 'string',
      createTime: 'number',
      end: 'number',
      expire: 'boolean',
      filters: { 'type': 'array', 'itemType': DescribeSqlLogTasksResponseBodyDataListFilters },
      instanceId: 'string',
      logCount: 'number',
      name: 'string',
      progress: 'number',
      result: 'string',
      scanFileSize: 'number',
      start: 'number',
      status: 'string',
      taskId: 'string',
      taskType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSqlLogTasksResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The details of the data returned.
   */
  list?: DescribeSqlLogTasksResponseBodyDataList[];
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The number of tasks.
   * 
   * @example
   * 40
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': DescribeSqlLogTasksResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopBigKeysResponseBodyDataBigKey extends $tea.Model {
  /**
   * @remarks
   * The database in which the key is stored.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The key.
   * 
   * @example
   * abc:def:eng
   */
  key?: string;
  /**
   * @remarks
   * The type of the key.
   * 
   * @example
   * zset
   */
  keyType?: string;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The number of elements in the key.
   * 
   * @example
   * 2
   */
  size?: number;
  static names(): { [key: string]: string } {
    return {
      db: 'Db',
      key: 'Key',
      keyType: 'KeyType',
      nodeId: 'NodeId',
      size: 'Size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      db: 'number',
      key: 'string',
      keyType: 'string',
      nodeId: 'string',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopBigKeysResponseBodyData extends $tea.Model {
  bigKey?: DescribeTopBigKeysResponseBodyDataBigKey[];
  static names(): { [key: string]: string } {
    return {
      bigKey: 'BigKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bigKey: { 'type': 'array', 'itemType': DescribeTopBigKeysResponseBodyDataBigKey },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopHotKeysResponseBodyDataHotKey extends $tea.Model {
  /**
   * @remarks
   * The database in which the key is stored.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The frequency at which the key is accessed, which indicates the QPS of the key.
   * 
   * @example
   * 5500~6000
   */
  hot?: string;
  /**
   * @remarks
   * The key.
   * 
   * @example
   * abc:def:eng
   */
  key?: string;
  /**
   * @remarks
   * The type of the key.
   * 
   * @example
   * zset
   */
  keyType?: string;
  /**
   * @remarks
   * The statistical value that is calculated based on the least frequently used (LFU) caching algorithm.
   * 
   * @example
   * 253
   */
  lfu?: number;
  /**
   * @remarks
   * The ID of the data shard on the ApsaraDB for Redis instance.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      db: 'Db',
      hot: 'Hot',
      key: 'Key',
      keyType: 'KeyType',
      lfu: 'Lfu',
      nodeId: 'NodeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      db: 'number',
      hot: 'string',
      key: 'string',
      keyType: 'string',
      lfu: 'number',
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTopHotKeysResponseBodyData extends $tea.Model {
  hotKey?: DescribeTopHotKeysResponseBodyDataHotKey[];
  static names(): { [key: string]: string } {
    return {
      hotKey: 'HotKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hotKey: { 'type': 'array', 'itemType': DescribeTopHotKeysResponseBodyDataHotKey },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the automatic tablespace fragment recycling feature is disabled. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * false
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * cannot found instance by rm-2ze9xrhze0709****
   */
  errorMessage?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze9xrhze0709****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      errorMessage: 'ErrorMessage',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      errorMessage: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the automatic tablespace fragment recycling feature is disabled. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * true
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoResourceOptimizeRulesResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of database instances for which the automatic tablespace fragment recycling feature failed to be disabled.
   * 
   * @example
   * 1
   */
  configFailInstanceCount?: number;
  /**
   * @remarks
   * The list of database instances for which the automatic tablespace fragment recycling feature failed to be disabled.
   */
  configFailInstanceList?: DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList[];
  /**
   * @remarks
   * The number of database instances for which the automatic tablespace fragment recycling feature is disabled.
   * 
   * @example
   * 1
   */
  configSuccessInstanceCount?: number;
  /**
   * @remarks
   * The list of database instances for which the automatic tablespace fragment recycling feature is disabled.
   */
  configSuccessInstanceList?: DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList[];
  /**
   * @remarks
   * The total number of database instances.
   * 
   * @example
   * 2
   */
  totalInstanceCount?: number;
  static names(): { [key: string]: string } {
    return {
      configFailInstanceCount: 'ConfigFailInstanceCount',
      configFailInstanceList: 'ConfigFailInstanceList',
      configSuccessInstanceCount: 'ConfigSuccessInstanceCount',
      configSuccessInstanceList: 'ConfigSuccessInstanceList',
      totalInstanceCount: 'TotalInstanceCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configFailInstanceCount: 'number',
      configFailInstanceList: { 'type': 'array', 'itemType': DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList },
      configSuccessInstanceCount: 'number',
      configSuccessInstanceList: { 'type': 'array', 'itemType': DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList },
      totalInstanceCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the automatic SQL throttling feature is disabled. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * false
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * cannot found instance by rm-2ze9xrhze0709****
   */
  errorMessage?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze9xrhze0709****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      errorMessage: 'ErrorMessage',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      errorMessage: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the automatic SQL throttling feature is disabled. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * true
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableAutoThrottleRulesResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of database instances for which the automatic SQL throttling feature failed to be disabled.
   * 
   * @example
   * 1
   */
  configFailInstanceCount?: number;
  /**
   * @remarks
   * The database instances for which the automatic SQL throttling feature failed to be disabled.
   */
  configFailInstanceList?: DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList[];
  /**
   * @remarks
   * The number of database instances for which the automatic SQL throttling feature is disabled.
   * 
   * @example
   * 1
   */
  configSuccessInstanceCount?: number;
  /**
   * @remarks
   * The database instances for which the automatic SQL throttling feature is disabled.
   */
  configSuccessInstanceList?: DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList[];
  /**
   * @remarks
   * The total number of database instances.
   * 
   * @example
   * 2
   */
  totalInstanceCount?: number;
  static names(): { [key: string]: string } {
    return {
      configFailInstanceCount: 'ConfigFailInstanceCount',
      configFailInstanceList: 'ConfigFailInstanceList',
      configSuccessInstanceCount: 'ConfigSuccessInstanceCount',
      configSuccessInstanceList: 'ConfigSuccessInstanceList',
      totalInstanceCount: 'TotalInstanceCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configFailInstanceCount: 'number',
      configFailInstanceList: { 'type': 'array', 'itemType': DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList },
      configSuccessInstanceCount: 'number',
      configSuccessInstanceList: { 'type': 'array', 'itemType': DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList },
      totalInstanceCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestListByCodeResponseBodyDataResult extends $tea.Model {
  /**
   * @remarks
   * The instance ID
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * SQL ID.
   * 
   * @example
   * ad78a4e7d3ce81590c9dc2d5f4bc****
   */
  sqlId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'instanceId',
      sqlId: 'sqlId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      sqlId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestListByCodeResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete.
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  complete?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request failed. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fail?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @remarks
   * The instance ID.
   */
  result?: GetAsyncErrorRequestListByCodeResponseBodyDataResult[];
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * @example
   * async__c39d43ece52d35267cc4b92a0c26****
   */
  resultId?: string;
  /**
   * @remarks
   * The state of the asynchronous request. Valid values:
   * 
   * *   **RUNNING**
   * *   **SUCCESS**
   * *   **FAIL**
   * 
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @remarks
   * The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1644559407740
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      complete: 'complete',
      fail: 'fail',
      isFinish: 'isFinish',
      result: 'result',
      resultId: 'resultId',
      state: 'state',
      timestamp: 'timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      complete: 'boolean',
      fail: 'boolean',
      isFinish: 'boolean',
      result: { 'type': 'array', 'itemType': GetAsyncErrorRequestListByCodeResponseBodyDataResult },
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatByCodeResponseBodyDataResult extends $tea.Model {
  /**
   * @remarks
   * The number of SQL queries corresponding to the error code.
   * 
   * @example
   * 1
   */
  count?: number;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * 1062
   */
  errorCode?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'count',
      errorCode: 'errorCode',
      instanceId: 'instanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      errorCode: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatByCodeResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete.
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  complete?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request failed. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fail?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @remarks
   * The number of SQL queries corresponding to the error code.
   */
  result?: GetAsyncErrorRequestStatByCodeResponseBodyDataResult[];
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * @example
   * async__fcd7c35788e62324622c3b4a03de****
   */
  resultId?: string;
  /**
   * @remarks
   * The state of the asynchronous request. Valid values:
   * 
   * *   **RUNNING**
   * *   **SUCCESS**
   * *   **FAIL**
   * 
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @remarks
   * The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1644560866961
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      complete: 'complete',
      fail: 'fail',
      isFinish: 'isFinish',
      result: 'result',
      resultId: 'resultId',
      state: 'state',
      timestamp: 'timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      complete: 'boolean',
      fail: 'boolean',
      isFinish: 'boolean',
      result: { 'type': 'array', 'itemType': GetAsyncErrorRequestStatByCodeResponseBodyDataResult },
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncErrorRequestStatResultResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete.
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  complete?: boolean;
  /**
   * @remarks
   * Indicates whether the request failed. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fail?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @remarks
   * The returned data of the asynchronous request.
   */
  result?: { [key: string]: DataResultValue };
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * @example
   * async__61f45ee381b2fa4e8a6545e3bee9****
   */
  resultId?: string;
  /**
   * @remarks
   * The state of the asynchronous request. Valid values:
   * 
   * *   **RUNNING**: The asynchronous request is running.
   * *   **SUCCESS**: The asynchronous request is successful.
   * *   **FAIL**: The asynchronous request fails.
   * 
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @remarks
   * The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1644558576717
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      complete: 'complete',
      fail: 'fail',
      isFinish: 'isFinish',
      result: 'result',
      resultId: 'resultId',
      state: 'state',
      timestamp: 'timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      complete: 'boolean',
      fail: 'boolean',
      isFinish: 'boolean',
      result: { 'type': 'map', 'keyType': 'string', 'valueType': DataResultValue },
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList extends $tea.Model {
  /**
   * @remarks
   * The latest auto-increment ID.
   * 
   * @example
   * 2147483647
   */
  autoIncrementCurrentValue?: number;
  /**
   * @remarks
   * The usage ratio of auto-increment IDs.
   * 
   * @example
   * 1
   */
  autoIncrementRatio?: number;
  /**
   * @remarks
   * The column name.
   * 
   * @example
   * id
   */
  columnName?: string;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * db01
   */
  dbName?: string;
  /**
   * @remarks
   * The maximum auto-increment ID that is supported by the current data type.
   * 
   * @example
   * 2147483647
   */
  maximumValue?: number;
  /**
   * @remarks
   * The table name.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      autoIncrementCurrentValue: 'AutoIncrementCurrentValue',
      autoIncrementRatio: 'AutoIncrementRatio',
      columnName: 'ColumnName',
      dbName: 'DbName',
      maximumValue: 'MaximumValue',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoIncrementCurrentValue: 'number',
      autoIncrementRatio: 'number',
      columnName: 'string',
      dbName: 'string',
      maximumValue: 'number',
      tableName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoIncrementUsageStatisticResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The usage details of auto-increment IDs.
   */
  autoIncrementUsageList?: GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList[];
  /**
   * @remarks
   * The error message returned if the task fails.
   * 
   * @example
   * the given database name list invalid, none of the database names in the list exist on the instance
   */
  errorInfo?: string;
  /**
   * @remarks
   * Indicates whether the task is complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  finish?: boolean;
  /**
   * @remarks
   * The task status. Valid values:
   * 
   * *   **INIT**: The task is being initialized.
   * *   **RUNNING**: The task is being executed.
   * *   **SUCCESS**: The task succeeds.
   * *   **FAIL**: The task fails.
   * 
   * @example
   * INIT
   */
  taskStatus?: string;
  /**
   * @remarks
   * The time when the request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1697183353000
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      autoIncrementUsageList: 'AutoIncrementUsageList',
      errorInfo: 'ErrorInfo',
      finish: 'Finish',
      taskStatus: 'TaskStatus',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoIncrementUsageList: { 'type': 'array', 'itemType': GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList },
      errorInfo: 'string',
      finish: 'boolean',
      taskStatus: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the automatic fragment recycling feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  autoDefragment?: boolean;
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  dasProOn?: boolean;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
   * 
   * @example
   * 0.2
   */
  tableFragmentationRatio?: number;
  /**
   * @remarks
   * The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
   * 
   * @example
   * 10
   */
  tableSpaceSize?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * @example
   * 140692647406****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      autoDefragment: 'AutoDefragment',
      dasProOn: 'DasProOn',
      instanceId: 'InstanceId',
      tableFragmentationRatio: 'TableFragmentationRatio',
      tableSpaceSize: 'TableSpaceSize',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoDefragment: 'boolean',
      dasProOn: 'boolean',
      instanceId: 'string',
      tableFragmentationRatio: 'number',
      tableSpaceSize: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the automatic fragment recycling feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  autoDefragment?: boolean;
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  dasProOn?: boolean;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze9xrhze0709****
   */
  instanceId?: string;
  /**
   * @remarks
   * The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
   * 
   * @example
   * 0.2
   */
  tableFragmentationRatio?: number;
  /**
   * @remarks
   * The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
   * 
   * @example
   * 10
   */
  tableSpaceSize?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * @example
   * 140692647406****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      autoDefragment: 'AutoDefragment',
      dasProOn: 'DasProOn',
      instanceId: 'InstanceId',
      tableFragmentationRatio: 'TableFragmentationRatio',
      tableSpaceSize: 'TableSpaceSize',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoDefragment: 'boolean',
      dasProOn: 'boolean',
      instanceId: 'string',
      tableFragmentationRatio: 'number',
      tableSpaceSize: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the automatic fragment recycling feature is enabled. Valid values:
   * 
   * *   **true**:
   * *   **false**
   * 
   * @example
   * false
   */
  autoDefragment?: boolean;
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  dasProOn?: boolean;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2vc54m2a6pd6p****
   */
  instanceId?: string;
  /**
   * @remarks
   * The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
   * 
   * @example
   * 0.2
   */
  tableFragmentationRatio?: number;
  /**
   * @remarks
   * The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
   * 
   * @example
   * 10
   */
  tableSpaceSize?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * @example
   * 140692647406****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      autoDefragment: 'AutoDefragment',
      dasProOn: 'DasProOn',
      instanceId: 'InstanceId',
      tableFragmentationRatio: 'TableFragmentationRatio',
      tableSpaceSize: 'TableSpaceSize',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoDefragment: 'boolean',
      dasProOn: 'boolean',
      instanceId: 'string',
      tableFragmentationRatio: 'number',
      tableSpaceSize: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoResourceOptimizeRulesResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of database instances for which the automatic fragment recycling feature is currently enabled.
   * 
   * @example
   * 1
   */
  enableAutoResourceOptimizeCount?: number;
  /**
   * @remarks
   * The database instances for which the automatic fragment recycling feature is currently enabled.
   */
  enableAutoResourceOptimizeList?: GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList[];
  /**
   * @remarks
   * The number of database instances for which the automatic fragment recycling feature is enabled and DAS Enterprise Edition is disabled.
   * 
   * @example
   * 1
   */
  hasEnableRuleButNotDasProCount?: number;
  /**
   * @remarks
   * The database instances for which the automatic fragment recycling feature is enabled and DAS Enterprise Edition is disabled.
   * 
   * >  Automatic fragment recycling tasks are run on this type of database instances only if DAS Enterprise Edition is enabled for the database instances again.
   */
  hasEnableRuleButNotDasProList?: GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList[];
  /**
   * @remarks
   * The number of database instances that do not exist or for which the automatic fragment recycling feature has never been enabled.
   * 
   * >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
   * 
   * @example
   * 1
   */
  neverEnableAutoResourceOptimizeOrReleasedInstanceCount?: number;
  /**
   * @remarks
   * The database instances that do not exist or for which the automatic fragment recycling feature has never been enabled.
   */
  neverEnableAutoResourceOptimizeOrReleasedInstanceIdList?: string[];
  /**
   * @remarks
   * The number of database instances for which the automatic fragment recycling feature has been enabled.
   * 
   * @example
   * 3
   */
  totalAutoResourceOptimizeRulesCount?: number;
  /**
   * @remarks
   * The number of database instances for which the automatic fragment recycling feature was once enabled but is currently disabled.
   * 
   * @example
   * 1
   */
  turnOffAutoResourceOptimizeCount?: number;
  /**
   * @remarks
   * The database instances for which the automatic fragment recycling feature was once enabled but is currently disabled.
   */
  turnOffAutoResourceOptimizeList?: GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList[];
  static names(): { [key: string]: string } {
    return {
      enableAutoResourceOptimizeCount: 'EnableAutoResourceOptimizeCount',
      enableAutoResourceOptimizeList: 'EnableAutoResourceOptimizeList',
      hasEnableRuleButNotDasProCount: 'HasEnableRuleButNotDasProCount',
      hasEnableRuleButNotDasProList: 'HasEnableRuleButNotDasProList',
      neverEnableAutoResourceOptimizeOrReleasedInstanceCount: 'NeverEnableAutoResourceOptimizeOrReleasedInstanceCount',
      neverEnableAutoResourceOptimizeOrReleasedInstanceIdList: 'NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList',
      totalAutoResourceOptimizeRulesCount: 'TotalAutoResourceOptimizeRulesCount',
      turnOffAutoResourceOptimizeCount: 'TurnOffAutoResourceOptimizeCount',
      turnOffAutoResourceOptimizeList: 'TurnOffAutoResourceOptimizeList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enableAutoResourceOptimizeCount: 'number',
      enableAutoResourceOptimizeList: { 'type': 'array', 'itemType': GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList },
      hasEnableRuleButNotDasProCount: 'number',
      hasEnableRuleButNotDasProList: { 'type': 'array', 'itemType': GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList },
      neverEnableAutoResourceOptimizeOrReleasedInstanceCount: 'number',
      neverEnableAutoResourceOptimizeOrReleasedInstanceIdList: { 'type': 'array', 'itemType': 'string' },
      totalAutoResourceOptimizeRulesCount: 'number',
      turnOffAutoResourceOptimizeCount: 'number',
      turnOffAutoResourceOptimizeList: { 'type': 'array', 'itemType': GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList extends $tea.Model {
  /**
   * @remarks
   * The maximum period of time during which an exception occurs when automatic SQL throttling is triggered. Unit: minutes.
   * 
   * @example
   * 2
   */
  abnormalDuration?: number;
  /**
   * @remarks
   * The maximum number of active sessions.
   * 
   * @example
   * 32
   */
  activeSessions?: number;
  /**
   * @remarks
   * The end time of the throttling window. The value of this parameter is in UTC.
   * 
   * @example
   * 23:59Z
   */
  allowThrottleEndTime?: string;
  /**
   * @remarks
   * The start time of the throttling window. The value of this parameter is in UTC.
   * 
   * @example
   * 00:00Z
   */
  allowThrottleStartTime?: string;
  /**
   * @remarks
   * Indicates whether abnormal SQL statements in execution are terminated at a time. Valid values:
   * 
   * > Abnormal SQL statements use the same template as the SQL statements that need to be throttled.
   * 
   * * **true**
   * * **false**
   * 
   * @example
   * true
   */
  autoKillSession?: boolean;
  /**
   * @remarks
   * The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
   * 
   * * **AND**
   * * **OR**
   * 
   * @example
   * AND
   */
  cpuSessionRelation?: string;
  /**
   * @remarks
   * The CPU utilization threshold.
   * 
   * @example
   * 70
   */
  cpuUsage?: number;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The maximum throttling duration. Unit: minutes.
   * 
   * @example
   * 10
   */
  maxThrottleTime?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * @example
   * 140692647406****
   */
  userId?: string;
  /**
   * @remarks
   * Indicates whether the automatic SQL throttling feature is enabled. Valid values:
   * 
   * * **true**
   * * **false**
   * 
   * @example
   * true
   */
  visible?: boolean;
  static names(): { [key: string]: string } {
    return {
      abnormalDuration: 'AbnormalDuration',
      activeSessions: 'ActiveSessions',
      allowThrottleEndTime: 'AllowThrottleEndTime',
      allowThrottleStartTime: 'AllowThrottleStartTime',
      autoKillSession: 'AutoKillSession',
      cpuSessionRelation: 'CpuSessionRelation',
      cpuUsage: 'CpuUsage',
      instanceId: 'InstanceId',
      maxThrottleTime: 'MaxThrottleTime',
      userId: 'UserId',
      visible: 'Visible',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abnormalDuration: 'number',
      activeSessions: 'number',
      allowThrottleEndTime: 'string',
      allowThrottleStartTime: 'string',
      autoKillSession: 'boolean',
      cpuSessionRelation: 'string',
      cpuUsage: 'number',
      instanceId: 'string',
      maxThrottleTime: 'number',
      userId: 'string',
      visible: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList extends $tea.Model {
  /**
   * @remarks
   * The maximum period of time during which the automatic SQL throttling feature is triggered. Unit: minutes.
   * 
   * @example
   * 2
   */
  abnormalDuration?: number;
  /**
   * @remarks
   * The maximum number of active sessions.
   * 
   * @example
   * 64
   */
  activeSessions?: number;
  /**
   * @remarks
   * The end time of the throttling window. The value of this parameter is in UTC.
   * 
   * @example
   * 23:59Z
   */
  allowThrottleEndTime?: string;
  /**
   * @remarks
   * The start time of the throttling window. The value of this parameter is in UTC.
   * 
   * @example
   * 00:00Z
   */
  allowThrottleStartTime?: string;
  /**
   * @remarks
   * Indicates whether abnormal SQL statements in execution are terminated at a time. Valid values:
   * 
   * > Abnormal SQL statements use the same template as the SQL statements that need to be throttled.
   * 
   * * **true**
   * * **false**
   * 
   * @example
   * true
   */
  autoKillSession?: boolean;
  /**
   * @remarks
   * The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
   * 
   * * **AND**
   * * **OR**
   * 
   * @example
   * OR
   */
  cpuSessionRelation?: string;
  /**
   * @remarks
   * The CPU utilization threshold.
   * 
   * @example
   * 80
   */
  cpuUsage?: number;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze9xrhze0709****
   */
  instanceId?: string;
  /**
   * @remarks
   * The maximum throttling duration. Unit: minutes.
   * 
   * @example
   * 10
   */
  maxThrottleTime?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * @example
   * 140692647406****
   */
  userId?: string;
  /**
   * @remarks
   * Indicates whether the automatic SQL throttling feature is enabled. Valid values:
   * 
   * * **true**
   * * **false**
   * 
   * @example
   * false
   */
  visible?: boolean;
  static names(): { [key: string]: string } {
    return {
      abnormalDuration: 'AbnormalDuration',
      activeSessions: 'ActiveSessions',
      allowThrottleEndTime: 'AllowThrottleEndTime',
      allowThrottleStartTime: 'AllowThrottleStartTime',
      autoKillSession: 'AutoKillSession',
      cpuSessionRelation: 'CpuSessionRelation',
      cpuUsage: 'CpuUsage',
      instanceId: 'InstanceId',
      maxThrottleTime: 'MaxThrottleTime',
      userId: 'UserId',
      visible: 'Visible',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abnormalDuration: 'number',
      activeSessions: 'number',
      allowThrottleEndTime: 'string',
      allowThrottleStartTime: 'string',
      autoKillSession: 'boolean',
      cpuSessionRelation: 'string',
      cpuUsage: 'number',
      instanceId: 'string',
      maxThrottleTime: 'number',
      userId: 'string',
      visible: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutoThrottleRulesResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of database instances for which the automatic SQL throttling feature is currently enabled.
   * 
   * @example
   * 1
   */
  enableAutoThrottleCount?: number;
  /**
   * @remarks
   * The database instances for which the automatic SQL throttling feature is currently enabled.
   */
  enableAutoThrottleList?: GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList[];
  /**
   * @remarks
   * The number of database instances that do not exist or for which the automatic SQL throttling feature has never been enabled.
   * 
   * >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
   * 
   * @example
   * 1
   */
  neverEnableAutoThrottleOrReleasedInstanceCount?: number;
  /**
   * @remarks
   * The number of database instances that do not exist or for which the automatic SQL throttling feature has never been enabled.
   * 
   * >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
   */
  neverEnableAutoThrottleOrReleasedInstanceIdList?: string[];
  /**
   * @remarks
   * The number of databases for which the automatic SQL throttling feature has been enabled.
   * 
   * @example
   * 3
   */
  totalAutoThrottleRulesCount?: number;
  /**
   * @remarks
   * The number of database instances for which the automatic SQL throttling feature was once enabled but is currently disabled.
   * 
   * @example
   * 1
   */
  turnOffAutoThrottleCount?: number;
  /**
   * @remarks
   * The database instances for which the automatic SQL throttling feature was once enabled but is currently disabled.
   */
  turnOffAutoThrottleList?: GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList[];
  static names(): { [key: string]: string } {
    return {
      enableAutoThrottleCount: 'EnableAutoThrottleCount',
      enableAutoThrottleList: 'EnableAutoThrottleList',
      neverEnableAutoThrottleOrReleasedInstanceCount: 'NeverEnableAutoThrottleOrReleasedInstanceCount',
      neverEnableAutoThrottleOrReleasedInstanceIdList: 'NeverEnableAutoThrottleOrReleasedInstanceIdList',
      totalAutoThrottleRulesCount: 'TotalAutoThrottleRulesCount',
      turnOffAutoThrottleCount: 'TurnOffAutoThrottleCount',
      turnOffAutoThrottleList: 'TurnOffAutoThrottleList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enableAutoThrottleCount: 'number',
      enableAutoThrottleList: { 'type': 'array', 'itemType': GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList },
      neverEnableAutoThrottleOrReleasedInstanceCount: 'number',
      neverEnableAutoThrottleOrReleasedInstanceIdList: { 'type': 'array', 'itemType': 'string' },
      totalAutoThrottleRulesCount: 'number',
      turnOffAutoThrottleCount: 'number',
      turnOffAutoThrottleList: { 'type': 'array', 'itemType': GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventsInRangeResponseBodyDataList extends $tea.Model {
  t?: string[];
  static names(): { [key: string]: string } {
    return {
      t: 'T',
    };
  }

  static types(): { [key: string]: any } {
    return {
      t: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAutonomousNotifyEventsInRangeResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The detailed information, including the error codes and the number of entries that are returned.
   */
  list?: GetAutonomousNotifyEventsInRangeResponseBodyDataList;
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 4
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: GetAutonomousNotifyEventsInRangeResponseBodyDataList,
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBlockingDetailListResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The batch ID.
   * 
   * @example
   * 1683530096156
   */
  batchId?: number;
  /**
   * @remarks
   * The client name.
   * 
   * @example
   * .Net SqlClient Data Provider
   */
  clientAppName?: string;
  /**
   * @remarks
   * The time when the blocking data was collected. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1700065800000
   */
  currentCollectionTime?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * school
   */
  dataBase?: string;
  /**
   * @remarks
   * The client hostname.
   * 
   * @example
   * ALLBNMGTAPPRD01
   */
  hostName?: string;
  /**
   * @remarks
   * The username that is used for the logon.
   * 
   * @example
   * Cheney603
   */
  loginId?: string;
  /**
   * @remarks
   * The hash value of the SQL statement.
   * 
   * @example
   * 6977DD06CD9CAFF2
   */
  queryHash?: string;
  /**
   * @remarks
   * The session ID.
   * 
   * @example
   * 1717
   */
  spid?: string;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * select * from test1
   */
  sqlText?: string;
  /**
   * @remarks
   * The time when the execution started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  startTime?: string;
  /**
   * @remarks
   * The duration of the blocking. Unit: milliseconds.
   * 
   * @example
   * 30000
   */
  waitTimeMs?: number;
  /**
   * @remarks
   * The wait type. For more information about wait types, see [sys.dm_os_wait_stats (Transact-SQL)](https://learn.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-os-wait-stats-transact-sql?view=sql-server-ver15).
   * 
   * @example
   * MISCELLANEOUS
   */
  waitType?: string;
  static names(): { [key: string]: string } {
    return {
      batchId: 'BatchId',
      clientAppName: 'ClientAppName',
      currentCollectionTime: 'CurrentCollectionTime',
      dataBase: 'DataBase',
      hostName: 'HostName',
      loginId: 'LoginId',
      queryHash: 'QueryHash',
      spid: 'Spid',
      sqlText: 'SqlText',
      startTime: 'StartTime',
      waitTimeMs: 'WaitTimeMs',
      waitType: 'WaitType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchId: 'number',
      clientAppName: 'string',
      currentCollectionTime: 'number',
      dataBase: 'string',
      hostName: 'string',
      loginId: 'string',
      queryHash: 'string',
      spid: 'string',
      sqlText: 'string',
      startTime: 'string',
      waitTimeMs: 'number',
      waitType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBlockingDetailListResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The details of the data returned.
   */
  list?: GetBlockingDetailListResponseBodyDataList[];
  /**
   * @remarks
   * The page number of the page returned.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries returned on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 19
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetBlockingDetailListResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBInstanceConnectivityDiagnosisResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The exception detection items:
   * 
   * *   **SRC_IP_NOT_IN_USER_WHITELIST**: The source IP address is not added to the whitelist of the user.
   * *   **VIP_NOT_EXISTS**: The Application Load Balancer (ALB) instance corresponding to the virtual IP address (VIP) does not exist.
   * *   **RS_NOT_EXISTS**: The resource sharing (RS) is not properly mounted.
   * *   **VIP_TUNNEL_ID_NOT_CONSISTENT**: The tunnel ID used by the VIP of the virtual private cloud (VPC) type is different from the tunnel ID of the VPC.
   * *   **VIP_VPC_CLOUD_INSTANCE_NOT_EXISTS**: The VIP of the VPC type does not exist.
   * *   **VIP_IS_NOT_NGLB**: The NGLB mode is disabled for the VIP.
   * *   **CUSTINS_NOT_ASSOCIATE_ECS_SECURITY_GROUP**: No security group is associated with the instance.
   * *   **SRC_IP_NOT_IN_USER_WHITELIST**: The source IP address is not added to the whitelist of the user.
   * *   **SRC_IP_NOT_IN_ADMIN_WHITELIST**: The source IP address is not added to the whitelist of the instance.
   * *   **SRC_IP_NOT_IN_ECS_SECURITY_GROUP**: The source IP address is not added to the security group that is associated with the instance.
   * *   **VPC_INSTANCE_IP_NOT_WORKING_STATUS**: The IP address in the VPC is in an abnormal state.
   * 
   * @example
   * SRC_IP_NOT_IN_USER_WHITELIST
   */
  connCheckErrorCode?: string;
  /**
   * @remarks
   * The details of the exception detection.
   * 
   * @example
   * Src ip:47.110.180.62 not in user whitelist
   */
  connCheckErrorMessage?: string;
  /**
   * @remarks
   * The type of the exception:
   * 
   * *   **0**: an exception that can be handled by the user.
   * *   **1**: an exception that can be handled by a technical engineer.
   * 
   * @example
   * 0
   */
  failType?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * Indicates whether the connectivity test was passed:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      connCheckErrorCode: 'connCheckErrorCode',
      connCheckErrorMessage: 'connCheckErrorMessage',
      failType: 'failType',
      instanceId: 'instanceId',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connCheckErrorCode: 'string',
      connCheckErrorMessage: 'string',
      failType: 'string',
      instanceId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasProServiceUsageResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The ID of the DAS Enterprise Edition instance.
   * 
   * @example
   * daspro-cn-v0h1l6i****
   */
  commodityInstanceId?: string;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The point of time when DAS Enterprise Edition for the database instance expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1648742400000
   */
  expireTime?: number;
  /**
   * @remarks
   * The name of the database instance.
   * 
   * @example
   * TESTDB01
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The endpoint of the database instance.
   * 
   * @example
   * rm-2ze8g2am97624****.mysql.****.com
   */
  ip?: string;
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition for the database instance has expired. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  isSpare?: boolean;
  /**
   * @remarks
   * The estimated remaining time for migrating the data generated by the SQL Explorer and Audit feature from the previous version to the new version. Unit: milliseconds.
   * 
   * >  This parameter is returned only when the SQL Explorer and Audit feature is migrated from the previous version to the new version.
   * 
   * @example
   * 60000
   */
  migrationPredictRemainingTime?: number;
  /**
   * @remarks
   * The port number that is used to connect to the database instance.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The region in which the database instance resides.
   * 
   * @example
   * cn-shanghai
   */
  region?: string;
  /**
   * @remarks
   * The service unit ID.
   * 
   * @example
   * 4
   */
  serviceUnitId?: string;
  /**
   * @remarks
   * The storage duration of SQL Explorer data. Unit: days.
   * 
   * @example
   * 180
   */
  sqlRetention?: string;
  /**
   * @remarks
   * The time when DAS Enterprise Edition was enabled for the database instance. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1646100892000
   */
  startTime?: number;
  /**
   * @remarks
   * The SQL Explorer storage space that is offered free-of-charge. Unit: MB.
   * 
   * @example
   * 5120
   */
  storageFreeQuotaInMB?: number;
  /**
   * @remarks
   * The storage usage of SQL Explorer of the database instance. Unit: bytes.
   * 
   * @example
   * 35903498
   */
  storageUsed?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account that is used to create the database instance.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  /**
   * @remarks
   * The virtual private cloud (VPC) ID.
   * 
   * @example
   * vpc-2zentqj1sk4qmolci****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      commodityInstanceId: 'commodityInstanceId',
      engine: 'engine',
      expireTime: 'expireTime',
      instanceAlias: 'instanceAlias',
      instanceId: 'instanceId',
      ip: 'ip',
      isSpare: 'isSpare',
      migrationPredictRemainingTime: 'migrationPredictRemainingTime',
      port: 'port',
      region: 'region',
      serviceUnitId: 'serviceUnitId',
      sqlRetention: 'sqlRetention',
      startTime: 'startTime',
      storageFreeQuotaInMB: 'storageFreeQuotaInMB',
      storageUsed: 'storageUsed',
      userId: 'userId',
      vpcId: 'vpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commodityInstanceId: 'string',
      engine: 'string',
      expireTime: 'number',
      instanceAlias: 'string',
      instanceId: 'string',
      ip: 'string',
      isSpare: 'boolean',
      migrationPredictRemainingTime: 'number',
      port: 'number',
      region: 'string',
      serviceUnitId: 'string',
      sqlRetention: 'string',
      startTime: 'number',
      storageFreeQuotaInMB: 'number',
      storageUsed: 'number',
      userId: 'string',
      vpcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasSQLLogHotDataResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The account of the database.
   * 
   * @example
   * testuser
   */
  accountName?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testDB
   */
  DBName?: string;
  /**
   * @remarks
   * The execution time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
   * 
   * @example
   * 2023-05-23 T12:11:20Z
   */
  executeTime?: string;
  /**
   * @remarks
   * The extended information. This parameter is a reserved parameter.
   * 
   * @example
   * None
   */
  ext?: string;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 47.100.XX.XX
   */
  hostAddress?: string;
  /**
   * @remarks
   * The execution duration. Unit: microseconds.
   * 
   * @example
   * 10000
   */
  latancy?: number;
  /**
   * @remarks
   * The lock wait duration. Unit: microseconds.
   * 
   * @example
   * 1
   */
  lockTime?: number;
  /**
   * @remarks
   * The number of logical reads.
   * 
   * @example
   * 12
   */
  logicRead?: number;
  /**
   * @remarks
   * The execution time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
   * 
   * @example
   * 2023-05-23 T12:11:20.999Z
   */
  originTime?: string;
  /**
   * @remarks
   * The number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  physicAsyncRead?: number;
  /**
   * @remarks
   * The number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  physicSyncRead?: number;
  /**
   * @remarks
   * The number of rows returned.
   * 
   * @example
   * 1
   */
  returnRows?: number;
  /**
   * @remarks
   * The content of the SQL statement.
   * 
   * @example
   * select 1
   */
  SQLText?: string;
  /**
   * @remarks
   * The number of rows scanned by the SQL statement.
   * 
   * @example
   * 29
   */
  scanRows?: number;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * * **SELECT**
   * * **UPDATE**
   * * **DELETE**
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The execution result. If a **0** is returned, the SQL statement was successfully executed. If an error code is returned, the SQL statement failed to be executed.
   * 
   * @example
   * 0
   */
  state?: string;
  /**
   * @remarks
   * The thread ID.
   * 
   * @example
   * 657
   */
  threadID?: number;
  /**
   * @remarks
   * The transaction ID.
   * 
   * @example
   * 0
   */
  transactionId?: string;
  /**
   * @remarks
   * The number of updated rows.
   * 
   * @example
   * 30
   */
  updateRows?: number;
  static names(): { [key: string]: string } {
    return {
      accountName: 'AccountName',
      DBName: 'DBName',
      executeTime: 'ExecuteTime',
      ext: 'Ext',
      hostAddress: 'HostAddress',
      latancy: 'Latancy',
      lockTime: 'LockTime',
      logicRead: 'LogicRead',
      originTime: 'OriginTime',
      physicAsyncRead: 'PhysicAsyncRead',
      physicSyncRead: 'PhysicSyncRead',
      returnRows: 'ReturnRows',
      SQLText: 'SQLText',
      scanRows: 'ScanRows',
      sqlType: 'SqlType',
      state: 'State',
      threadID: 'ThreadID',
      transactionId: 'TransactionId',
      updateRows: 'UpdateRows',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountName: 'string',
      DBName: 'string',
      executeTime: 'string',
      ext: 'string',
      hostAddress: 'string',
      latancy: 'number',
      lockTime: 'number',
      logicRead: 'number',
      originTime: 'string',
      physicAsyncRead: 'number',
      physicSyncRead: 'number',
      returnRows: 'number',
      SQLText: 'string',
      scanRows: 'number',
      sqlType: 'string',
      state: 'string',
      threadID: 'number',
      transactionId: 'string',
      updateRows: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDasSQLLogHotDataResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: any;
  /**
   * @remarks
   * The details of the data returned.
   */
  list?: GetDasSQLLogHotDataResponseBodyDataList[];
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 2
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 20
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'any',
      list: { 'type': 'array', 'itemType': GetDasSQLLogHotDataResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailListResponseBodyDataListBlockProcessList extends $tea.Model {
  /**
   * @remarks
   * The name of the client that initiates the transaction in the session.
   * 
   * @example
   * Microsoft SQL Server Management Studio - Query
   */
  clientApp?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * school
   */
  databaseName?: string;
  /**
   * @remarks
   * The hostname.
   * 
   * @example
   * sd74020124
   */
  hostName?: string;
  /**
   * @remarks
   * The time when the transaction was started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1702301152000
   */
  lastTranStarted?: number;
  /**
   * @remarks
   * The mode of the lock. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
   * 
   * @example
   * U
   */
  lockMode?: string;
  /**
   * @remarks
   * The size of the logs generated in the session. Unit: bytes.
   * 
   * @example
   * 352
   */
  logUsed?: number;
  /**
   * @remarks
   * The logon name of the user.
   * 
   * @example
   * sd74020124\\\\Administrator
   */
  loginName?: string;
  /**
   * @remarks
   * The locked object.
   * 
   * @example
   * school.dbo.test2
   */
  objectOwned?: string;
  /**
   * @remarks
   * The object that the transaction requested to lock.
   * 
   * @example
   * school.dbo.test1
   */
  objectRequested?: string;
  /**
   * @remarks
   * The lock mode held by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
   * 
   * @example
   * X
   */
  ownMode?: string;
  /**
   * @remarks
   * The ID of the session in which the transaction is started.
   * 
   * @example
   * 61
   */
  spid?: number;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * update test1 set col1 =9
   */
  sqlText?: string;
  /**
   * @remarks
   * The status of the transaction.
   * 
   * @example
   * suspended
   */
  status?: string;
  /**
   * @remarks
   * Indicates whether the session is the victim of the deadlock. Valid values:
   * 
   * *   **0**: no.
   * *   **1**: yes.
   * 
   * @example
   * 0
   */
  victim?: number;
  /**
   * @remarks
   * The lock mode requested by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
   * 
   * @example
   * U
   */
  waitMode?: string;
  /**
   * @remarks
   * The resources requested by the transaction.
   * 
   * @example
   * RID: 5:1:312:0
   */
  waitResource?: string;
  /**
   * @remarks
   * The details of the resources requested by the transaction.
   * 
   * @example
   * RID:school:school.mdf:312:0
   */
  waitResourceDescription?: string;
  static names(): { [key: string]: string } {
    return {
      clientApp: 'ClientApp',
      databaseName: 'DatabaseName',
      hostName: 'HostName',
      lastTranStarted: 'LastTranStarted',
      lockMode: 'LockMode',
      logUsed: 'LogUsed',
      loginName: 'LoginName',
      objectOwned: 'ObjectOwned',
      objectRequested: 'ObjectRequested',
      ownMode: 'OwnMode',
      spid: 'Spid',
      sqlText: 'SqlText',
      status: 'Status',
      victim: 'Victim',
      waitMode: 'WaitMode',
      waitResource: 'WaitResource',
      waitResourceDescription: 'WaitResourceDescription',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientApp: 'string',
      databaseName: 'string',
      hostName: 'string',
      lastTranStarted: 'number',
      lockMode: 'string',
      logUsed: 'number',
      loginName: 'string',
      objectOwned: 'string',
      objectRequested: 'string',
      ownMode: 'string',
      spid: 'number',
      sqlText: 'string',
      status: 'string',
      victim: 'number',
      waitMode: 'string',
      waitResource: 'string',
      waitResourceDescription: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailListResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The time when the data was collected. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1702301170701
   */
  batchId?: number;
  /**
   * @remarks
   * The blocking details of the instance. The details are information about the session that caused the lock.
   */
  blockProcessList?: GetDeadLockDetailListResponseBodyDataListBlockProcessList[];
  /**
   * @remarks
   * The name of the client.
   * 
   * @example
   * Microsoft SQL Server Management Studio - Query
   */
  clientApp?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * school
   */
  databaseName?: string;
  /**
   * @remarks
   * The hostname.
   * 
   * @example
   * sd74020124
   */
  hostName?: string;
  /**
   * @remarks
   * The time when the transaction was started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1702301141000
   */
  lastTranStarted?: number;
  /**
   * @remarks
   * The mode of the lock. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
   * 
   * @example
   * U
   */
  lockMode?: string;
  /**
   * @remarks
   * The size of the logs generated in the session. Unit: bytes.
   * 
   * @example
   * 352
   */
  logUsed?: number;
  /**
   * @remarks
   * The logon name of the user.
   * 
   * @example
   * sd74020124\\\\Administrator
   */
  loginName?: string;
  /**
   * @remarks
   * The locked object.
   * 
   * @example
   * school.dbo.test1
   */
  objectOwned?: string;
  /**
   * @remarks
   * The object that the transaction requested to lock.
   * 
   * @example
   * school.dbo.test2
   */
  objectRequested?: string;
  /**
   * @remarks
   * The lock mode held by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
   * 
   * @example
   * X
   */
  ownMode?: string;
  /**
   * @remarks
   * The ID of the session in which the transaction is started.
   * 
   * @example
   * 56
   */
  spid?: number;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * update test2 set col1 =88
   */
  sqlText?: string;
  /**
   * @remarks
   * The status of the transaction.
   * 
   * @example
   * suspended
   */
  status?: string;
  /**
   * @remarks
   * Indicates whether the session is the victim of the deadlock. Valid values:
   * 
   * *   **0**: no.
   * *   **1**: yes.
   * 
   * @example
   * 1
   */
  victim?: number;
  /**
   * @remarks
   * The lock mode requested by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
   * 
   * @example
   * U
   */
  waitMode?: string;
  /**
   * @remarks
   * The resources requested by the transaction.
   * 
   * @example
   * RID: 5:1:376:0
   */
  waitResource?: string;
  /**
   * @remarks
   * The details of the resources requested by the transaction.
   * 
   * @example
   * RID:school:school.mdf:376:0
   */
  waitResourceDescription?: string;
  static names(): { [key: string]: string } {
    return {
      batchId: 'BatchId',
      blockProcessList: 'BlockProcessList',
      clientApp: 'ClientApp',
      databaseName: 'DatabaseName',
      hostName: 'HostName',
      lastTranStarted: 'LastTranStarted',
      lockMode: 'LockMode',
      logUsed: 'LogUsed',
      loginName: 'LoginName',
      objectOwned: 'ObjectOwned',
      objectRequested: 'ObjectRequested',
      ownMode: 'OwnMode',
      spid: 'Spid',
      sqlText: 'SqlText',
      status: 'Status',
      victim: 'Victim',
      waitMode: 'WaitMode',
      waitResource: 'WaitResource',
      waitResourceDescription: 'WaitResourceDescription',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchId: 'number',
      blockProcessList: { 'type': 'array', 'itemType': GetDeadLockDetailListResponseBodyDataListBlockProcessList },
      clientApp: 'string',
      databaseName: 'string',
      hostName: 'string',
      lastTranStarted: 'number',
      lockMode: 'string',
      logUsed: 'number',
      loginName: 'string',
      objectOwned: 'string',
      objectRequested: 'string',
      ownMode: 'string',
      spid: 'number',
      sqlText: 'string',
      status: 'string',
      victim: 'number',
      waitMode: 'string',
      waitResource: 'string',
      waitResourceDescription: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadLockDetailListResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The details of the data returned.
   */
  list?: GetDeadLockDetailListResponseBodyDataList[];
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 2
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetDeadLockDetailListResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDeadlockHistogramResponseBodyData extends $tea.Model {
  /**
   * @example
   * 1729998000000
   */
  endTime?: string;
  /**
   * @example
   * pc-bp1u5mas9exx7****
   */
  instanceId?: string;
  /**
   * @example
   * 2
   */
  lockNumber?: number;
  /**
   * @example
   * pi-bp16v3824rt73****
   */
  nodeId?: string;
  /**
   * @example
   * 1729994400000
   */
  startTime?: string;
  /**
   * @example
   * SUCCESS
   */
  status?: string;
  /**
   * @example
   * B6D17591-B48B-4D31-9CD6-1321B394****
   */
  taskId?: string;
  /**
   * @example
   * 108************
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      lockNumber: 'LockNumber',
      nodeId: 'NodeId',
      startTime: 'StartTime',
      status: 'Status',
      taskId: 'TaskId',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      instanceId: 'string',
      lockNumber: 'number',
      nodeId: 'string',
      startTime: 'string',
      status: 'string',
      taskId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEndpointSwitchTaskResponseBodyData extends $tea.Model {
  accountId?: string;
  dbLinkId?: number;
  errMsg?: string;
  oriUuid?: string;
  status?: string;
  taskId?: string;
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      accountId: 'AccountId',
      dbLinkId: 'DbLinkId',
      errMsg: 'ErrMsg',
      oriUuid: 'OriUuid',
      status: 'Status',
      taskId: 'TaskId',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountId: 'string',
      dbLinkId: 'number',
      errMsg: 'string',
      oriUuid: 'string',
      status: 'string',
      taskId: 'string',
      uuid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetErrorRequestSampleResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * dbgateway
   */
  database?: string;
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * 1062
   */
  errorCode?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The IP address of the client that executes the SQL statement.
   * 
   * @example
   * 172.16.1****
   */
  originHost?: string;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * insert into meter_****
   */
  sql?: string;
  /**
   * @remarks
   * The SQL query ID.
   * 
   * @example
   * 2cd4432556c3dab9d825ba363637****
   */
  sqlId?: string;
  /**
   * @remarks
   * The table information.
   */
  tables?: string[];
  /**
   * @remarks
   * The time when the SQL query was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1644476100435
   */
  timestamp?: number;
  /**
   * @remarks
   * The username of the account that is used to log on to the database.
   * 
   * @example
   * dbgat****
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      database: 'database',
      errorCode: 'errorCode',
      instanceId: 'instanceId',
      originHost: 'originHost',
      sql: 'sql',
      sqlId: 'sqlId',
      tables: 'tables',
      timestamp: 'timestamp',
      user: 'user',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: 'string',
      errorCode: 'string',
      instanceId: 'string',
      originHost: 'string',
      sql: 'string',
      sqlId: 'string',
      tables: { 'type': 'array', 'itemType': 'string' },
      timestamp: 'number',
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEventSubscriptionResponseBodyDataContactGroups extends $tea.Model {
  /**
   * @remarks
   * The members of the alert contact group.
   * 
   * @example
   * "[\\"Mr. Zhang\\",\\"Ms. Wang\\",\\"Mr. Li\\"]"
   */
  contacts?: string;
  /**
   * @remarks
   * The description of the alert contact group.
   * 
   * @example
   * Default contact
   */
  description?: string;
  /**
   * @remarks
   * The name of the alert contact group.
   * 
   * @example
   * Mr. Zhang
   */
  name?: string;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 1088760496****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      contacts: 'contacts',
      description: 'description',
      name: 'name',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contacts: 'string',
      description: 'string',
      name: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEventSubscriptionResponseBodyDataContacts extends $tea.Model {
  /**
   * @remarks
   * The webhook URL of the DingTalk chatbot.
   * 
   * @example
   * https://oapi.dingtalk.com/robot/send?access_token=68fa29a9eaf3ba9994f54fxxxc1aa9879700308f90e9c23ebfb3663642c9****
   */
  dingtalkHook?: string;
  /**
   * @remarks
   * The email address of the alert contact.
   * 
   * @example
   * a***@example.net
   */
  email?: string;
  /**
   * @remarks
   * The contact groups to which the alert contact belongs.
   */
  groups?: string[];
  /**
   * @remarks
   * Indicates whether the alert contact name is the same as the contact name on CloudMonitor.
   * 
   * * **true**
   * * **false**
   * 
   * @example
   * true
   */
  isCmsReduplicated?: boolean;
  /**
   * @remarks
   * The name of the alert contact.
   * 
   * @example
   * Mr. Zhang
   */
  name?: string;
  /**
   * @remarks
   * The mobile number of the alert contact.
   * 
   * @example
   * 1390000****
   */
  phone?: string;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 1088760496****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      dingtalkHook: 'dingtalkHook',
      email: 'email',
      groups: 'groups',
      isCmsReduplicated: 'isCmsReduplicated',
      name: 'name',
      phone: 'phone',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dingtalkHook: 'string',
      email: 'string',
      groups: { 'type': 'array', 'itemType': 'string' },
      isCmsReduplicated: 'boolean',
      name: 'string',
      phone: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEventSubscriptionResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the event subscription feature is enabled. Valid values:
   * 
   * *   **0**: The event subscription feature is disabled.
   * *   **1**: The event subscription feature is enabled.
   * 
   * @example
   * 1
   */
  active?: number;
  /**
   * @remarks
   * The notification method. Valid values:
   * 
   * *   **hdm_alarm_sms**: text message.
   * *   **dingtalk**: DingTalk chatbot.
   * *   **hdm_alarm_sms_and_email**: text message and email.
   * *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
   * 
   * @example
   * hdm_alarm_sms,dingtalk
   */
  channelType?: string;
  /**
   * @remarks
   * The name of the contact group that receives alert notifications. Multiple names are separated by commas (,).
   * 
   * @example
   * Default contact group
   */
  contactGroupName?: string;
  /**
   * @remarks
   * The alert contact groups.
   */
  contactGroups?: GetEventSubscriptionResponseBodyDataContactGroups[];
  /**
   * @remarks
   * The name of the subscriber who receives alert notifications. Multiple names are separated by commas (,).
   * 
   * @example
   * Default contact
   */
  contactName?: string;
  /**
   * @remarks
   * The user ID.
   */
  contacts?: GetEventSubscriptionResponseBodyDataContacts[];
  /**
   * @remarks
   * The supported event scenarios. Only **AllContext** may be returned, which indicates that all scenarios are supported.
   * 
   * @example
   * AllContext
   */
  eventContext?: string;
  /**
   * @remarks
   * The supported event scenarios in which event subscription can be sent.
   */
  eventSendGroup?: string[];
  /**
   * @remarks
   * The time when event subscription was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1633071840000
   */
  gmtCreate?: number;
  /**
   * @remarks
   * The time when the event subscription settings were most recently modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1633071850000
   */
  gmtModified?: number;
  /**
   * @remarks
   * The primary key ID of the database.
   * 
   * @example
   * 1
   */
  id?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The language of event notifications. Only **zh-CN** may be returned, which indicates that event notifications are sent in Chinese.
   * 
   * @example
   * zh_CN
   */
  lang?: string;
  /**
   * @remarks
   * The risk level of the events that trigger notifications. Valid values:
   * 
   * *   **Notice**
   * *   **Optimization**
   * *   **Warn**
   * *   **Critical**
   * 
   * @example
   * Optimization
   */
  level?: string;
  /**
   * @remarks
   * The minimum interval between event notifications. Unit: seconds.
   * 
   * @example
   * 60
   */
  minInterval?: string;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 1088760496****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      active: 'active',
      channelType: 'channelType',
      contactGroupName: 'contactGroupName',
      contactGroups: 'contactGroups',
      contactName: 'contactName',
      contacts: 'contacts',
      eventContext: 'eventContext',
      eventSendGroup: 'eventSendGroup',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      instanceId: 'instanceId',
      lang: 'lang',
      level: 'level',
      minInterval: 'minInterval',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      active: 'number',
      channelType: 'string',
      contactGroupName: 'string',
      contactGroups: { 'type': 'array', 'itemType': GetEventSubscriptionResponseBodyDataContactGroups },
      contactName: 'string',
      contacts: { 'type': 'array', 'itemType': GetEventSubscriptionResponseBodyDataContacts },
      eventContext: 'string',
      eventSendGroup: { 'type': 'array', 'itemType': 'string' },
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      instanceId: 'string',
      lang: 'string',
      level: 'string',
      minInterval: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestOriginStatByInstanceIdResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The average number of scanned rows.
   * 
   * > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
   * 
   * @example
   * 10000
   */
  avgExaminedRows?: number;
  /**
   * @remarks
   * The average number of rows that are fetched from data nodes by compute nodes on the PolarDB-X 2.0 instance.
   * 
   * @example
   * 0
   */
  avgFetchRows?: number;
  /**
   * @remarks
   * The average lock wait duration. Unit: seconds.
   * 
   * @example
   * 0.00009589874265269765
   */
  avgLockWaitTime?: number;
  /**
   * @remarks
   * The average number of logical reads.
   * 
   * @example
   * 654.4470327860251
   */
  avgLogicalRead?: number;
  /**
   * @remarks
   * The average number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  avgPhysicalAsyncRead?: number;
  /**
   * @remarks
   * The average number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  avgPhysicalSyncRead?: number;
  /**
   * @remarks
   * The average number of returned rows.
   * 
   * @example
   * 10000
   */
  avgReturnedRows?: number;
  /**
   * @remarks
   * The average number of rows.
   * 
   * @example
   * 0
   */
  avgRows?: number;
  /**
   * @remarks
   * The average execution duration.
   * 
   * @example
   * 2.499
   */
  avgRt?: number;
  /**
   * @remarks
   * The average number of SQL statements.
   * 
   * @example
   * 10000
   */
  avgSqlCount?: number;
  /**
   * @remarks
   * The average number of updated rows.
   * 
   * > This parameter is returned only for ApsaraDB RDS for MySQL and PolarDB-X 2.0 databases.
   * 
   * @example
   * 10000
   */
  avgUpdatedRows?: number;
  /**
   * @remarks
   * The total number of executions.
   * 
   * @example
   * 100000
   */
  count?: number;
  /**
   * @remarks
   * The percentage of the total number of executions.
   * 
   * @example
   * 0.0586
   */
  countRate?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * dbtest01
   */
  database?: string;
  /**
   * @remarks
   * The number of failed executions.
   * 
   * @example
   * 1
   */
  errorCount?: number;
  /**
   * @remarks
   * The total number of scanned rows.
   * 
   * > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
   * 
   * @example
   * 10000
   */
  examinedRows?: number;
  /**
   * @remarks
   * The number of rows that are fetched from data nodes by compute nodes on the PolarDB-X 2.0 instance.
   * 
   * @example
   * 200
   */
  fetchRows?: number;
  /**
   * @remarks
   * The network address of the database instance.
   * 
   * @example
   * rm-uf6dyi58dm6****.mysql.rds.aliy****.com
   */
  ip?: string;
  /**
   * @remarks
   * The IP address of the client that executes the SQL statement.
   * 
   * @example
   * 172.26.6****
   */
  key?: string;
  /**
   * @remarks
   * The lock wait duration. Unit: seconds.
   * 
   * @example
   * 1089.4177720290281
   */
  lockWaitTime?: number;
  /**
   * @remarks
   * The number of logical reads.
   * 
   * @example
   * 7.434573266E9
   */
  logicalRead?: number;
  /**
   * @remarks
   * The IP address of the client that executes the SQL statement.
   * 
   * @example
   * 172.26.6****
   */
  originHost?: string;
  /**
   * @remarks
   * The number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  physicalAsyncRead?: number;
  /**
   * @remarks
   * The number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  physicalSyncRead?: number;
  /**
   * @remarks
   * The port number that is used to connect to the database instance.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The total number of rows updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
   * 
   * @example
   * 0
   */
  rows?: number;
  /**
   * @remarks
   * The number of SQL statements that take longer than 1 second to execute.
   * 
   * @example
   * 2
   */
  rtGreaterThanOneSecondCount?: number;
  /**
   * @remarks
   * The execution duration percentage.
   * 
   * @example
   * 0.1384
   */
  rtRate?: number;
  /**
   * @remarks
   * The number of SQL statements.
   * 
   * @example
   * 200
   */
  sqlCount?: number;
  /**
   * @remarks
   * The total number of updated rows.
   * 
   * @example
   * 200
   */
  sumUpdatedRows?: number;
  /**
   * @remarks
   * The version number.
   * 
   * @example
   * 1
   */
  version?: number;
  /**
   * @remarks
   * The virtual private cloud (VPC) ID.
   * 
   * @example
   * vpc-2zentqj1sk4qmolci****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      avgExaminedRows: 'AvgExaminedRows',
      avgFetchRows: 'AvgFetchRows',
      avgLockWaitTime: 'AvgLockWaitTime',
      avgLogicalRead: 'AvgLogicalRead',
      avgPhysicalAsyncRead: 'AvgPhysicalAsyncRead',
      avgPhysicalSyncRead: 'AvgPhysicalSyncRead',
      avgReturnedRows: 'AvgReturnedRows',
      avgRows: 'AvgRows',
      avgRt: 'AvgRt',
      avgSqlCount: 'AvgSqlCount',
      avgUpdatedRows: 'AvgUpdatedRows',
      count: 'Count',
      countRate: 'CountRate',
      database: 'Database',
      errorCount: 'ErrorCount',
      examinedRows: 'ExaminedRows',
      fetchRows: 'FetchRows',
      ip: 'Ip',
      key: 'Key',
      lockWaitTime: 'LockWaitTime',
      logicalRead: 'LogicalRead',
      originHost: 'OriginHost',
      physicalAsyncRead: 'PhysicalAsyncRead',
      physicalSyncRead: 'PhysicalSyncRead',
      port: 'Port',
      rows: 'Rows',
      rtGreaterThanOneSecondCount: 'RtGreaterThanOneSecondCount',
      rtRate: 'RtRate',
      sqlCount: 'SqlCount',
      sumUpdatedRows: 'SumUpdatedRows',
      version: 'Version',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgExaminedRows: 'number',
      avgFetchRows: 'number',
      avgLockWaitTime: 'number',
      avgLogicalRead: 'number',
      avgPhysicalAsyncRead: 'number',
      avgPhysicalSyncRead: 'number',
      avgReturnedRows: 'number',
      avgRows: 'number',
      avgRt: 'number',
      avgSqlCount: 'number',
      avgUpdatedRows: 'number',
      count: 'number',
      countRate: 'number',
      database: 'string',
      errorCount: 'number',
      examinedRows: 'number',
      fetchRows: 'number',
      ip: 'string',
      key: 'string',
      lockWaitTime: 'number',
      logicalRead: 'number',
      originHost: 'string',
      physicalAsyncRead: 'number',
      physicalSyncRead: 'number',
      port: 'number',
      rows: 'number',
      rtGreaterThanOneSecondCount: 'number',
      rtRate: 'number',
      sqlCount: 'number',
      sumUpdatedRows: 'number',
      version: 'number',
      vpcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestOriginStatByInstanceIdResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The details of the full request data.
   */
  list?: GetFullRequestOriginStatByInstanceIdResponseBodyDataList[];
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetFullRequestOriginStatByInstanceIdResponseBodyDataList },
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestSampleByInstanceIdResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * dbtest
   */
  database?: string;
  /**
   * @remarks
   * The number of rows fetched by PolarDB-X 2.0 compute nodes.
   * 
   * @example
   * 0
   */
  frows?: number;
  /**
   * @remarks
   * The lock wait duration. Unit: seconds.
   * 
   * @example
   * 0.0137
   */
  lockWaitTime?: number;
  /**
   * @remarks
   * The number of logical reads.
   * 
   * @example
   * 165848
   */
  logicalRead?: number;
  /**
   * @remarks
   * The source IP address.
   * 
   * @example
   * 172.17.XX.XX
   */
  originHost?: string;
  /**
   * @remarks
   * The number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  physicalAsyncRead?: number;
  /**
   * @remarks
   * The number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  physicalSyncRead?: number;
  /**
   * @remarks
   * The number of rows updated or returned on PolarDB-X 2.0 compute nodes.
   * 
   * @example
   * 0
   */
  rows?: number;
  /**
   * @remarks
   * The total number of scanned rows.
   * 
   * > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
   * 
   * @example
   * 2048576
   */
  rowsExamined?: number;
  /**
   * @remarks
   * The number of rows returned by the SQL statement.
   * 
   * @example
   * 14
   */
  rowsReturned?: number;
  /**
   * @remarks
   * The amount of time consumed to execute the SQL statement. Unit: seconds.
   * 
   * @example
   * 0.409789
   */
  rt?: number;
  /**
   * @remarks
   * The number of scanned rows.
   * 
   * @example
   * 0
   */
  scanRows?: number;
  /**
   * @remarks
   * The number of requests sent from PolarDB-X 2.0 compute nodes to data nodes.
   * 
   * @example
   * 0
   */
  scnt?: number;
  /**
   * @remarks
   * The sample SQL statement.
   * 
   * @example
   * select * from testdb01 where ****
   */
  sql?: string;
  /**
   * @remarks
   * The SQL statement ID.
   * 
   * @example
   * 651b56fe9418d48edb8fdf0980ec****
   */
  sqlId?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **LOGIN**, **LOGOUT**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The time when the SQL statement was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1660100753556
   */
  timestamp?: number;
  /**
   * @remarks
   * The number of updated rows.
   * 
   * @example
   * 0
   */
  updateRows?: number;
  /**
   * @remarks
   * The name of the user who executes the SQL statement.
   * 
   * @example
   * testuser
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
      frows: 'Frows',
      lockWaitTime: 'LockWaitTime',
      logicalRead: 'LogicalRead',
      originHost: 'OriginHost',
      physicalAsyncRead: 'PhysicalAsyncRead',
      physicalSyncRead: 'PhysicalSyncRead',
      rows: 'Rows',
      rowsExamined: 'RowsExamined',
      rowsReturned: 'RowsReturned',
      rt: 'Rt',
      scanRows: 'ScanRows',
      scnt: 'Scnt',
      sql: 'Sql',
      sqlId: 'SqlId',
      sqlType: 'SqlType',
      timestamp: 'Timestamp',
      updateRows: 'UpdateRows',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: 'string',
      frows: 'number',
      lockWaitTime: 'number',
      logicalRead: 'number',
      originHost: 'string',
      physicalAsyncRead: 'number',
      physicalSyncRead: 'number',
      rows: 'number',
      rowsExamined: 'number',
      rowsReturned: 'number',
      rt: 'number',
      scanRows: 'number',
      scnt: 'number',
      sql: 'string',
      sqlId: 'string',
      sqlType: 'string',
      timestamp: 'number',
      updateRows: 'number',
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestStatResultByInstanceIdResponseBodyDataResultList extends $tea.Model {
  /**
   * @remarks
   * The average number of scanned rows.
   * 
   * > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
   * 
   * @example
   * 10000
   */
  avgExaminedRows?: number;
  /**
   * @remarks
   * The average number of rows that are fetched by compute nodes from data nodes on the PolarDB-X 2.0 instance.
   * 
   * @example
   * 0
   */
  avgFetchRows?: number;
  /**
   * @remarks
   * The average lock wait latency. Unit: seconds.
   * 
   * @example
   * 0.00009589874265269765
   */
  avgLockWaitTime?: number;
  /**
   * @remarks
   * The average number of logical reads.
   * 
   * @example
   * 654.4470327860251
   */
  avgLogicalRead?: number;
  /**
   * @remarks
   * The average number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  avgPhysicalAsyncRead?: number;
  /**
   * @remarks
   * The average number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  avgPhysicalSyncRead?: number;
  /**
   * @remarks
   * The average number of returned rows.
   * 
   * @example
   * 10000
   */
  avgReturnedRows?: number;
  /**
   * @remarks
   * The average execution duration.
   * 
   * @example
   * 2.499
   */
  avgRt?: number;
  /**
   * @remarks
   * The average number of SQL statements.
   * 
   * @example
   * 10000
   */
  avgSqlCount?: number;
  /**
   * @remarks
   * The average number of updated rows.
   * 
   *  > This parameter is returned only for ApsaraDB RDS for MySQL and PolarDB-X 2.0 databases.
   * 
   * @example
   * 10000
   */
  avgUpdatedRows?: number;
  /**
   * @remarks
   * The total number of executions.
   * 
   * @example
   * 100000
   */
  count?: number;
  /**
   * @remarks
   * The percentage of the total number of executions.
   * 
   * @example
   * 0.0586
   */
  countRate?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * dbtest01
   */
  database?: string;
  /**
   * @remarks
   * The number of failed executions.
   * 
   * @example
   * 1
   */
  errorCount?: number;
  /**
   * @remarks
   * The total number of scanned rows.
   * 
   * > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
   * 
   * @example
   * 10000
   */
  examinedRows?: number;
  /**
   * @remarks
   * The number of rows that are fetched by compute nodes from data nodes on the PolarDB-X 2.0 instance.
   * 
   * @example
   * 0
   */
  fetchRows?: number;
  /**
   * @remarks
   * The IP address of the database instance.
   * 
   * @example
   * rm-uf6dyi58dm6****.mysql.rds.aliy****.com
   */
  ip?: string;
  /**
   * @remarks
   * The lock wait latency. Unit: seconds.
   * 
   * @example
   * 1089.4177720290281
   */
  lockWaitTime?: number;
  /**
   * @remarks
   * The number of logical reads.
   * 
   * @example
   * 7.434573266E9
   */
  logicalRead?: number;
  /**
   * @remarks
   * The number of physical asynchronous reads.
   * 
   * @example
   * 0
   */
  physicalAsyncRead?: number;
  /**
   * @remarks
   * The number of physical synchronous reads.
   * 
   * @example
   * 0
   */
  physicalSyncRead?: number;
  /**
   * @remarks
   * The port number that is used to connect to the database instance.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The SQL template.
   * 
   * @example
   * select * from dbtest01 where ****
   */
  psql?: string;
  /**
   * @remarks
   * The total number of rows updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
   * 
   * @example
   * 0
   */
  rows?: number;
  /**
   * @remarks
   * The number of SQL statements that take longer than 1 second to execute.
   * 
   * @example
   * 20
   */
  rtGreaterThanOneSecondCount?: number;
  /**
   * @remarks
   * The execution duration percentage.
   * 
   * @example
   * 2.499
   */
  rtRate?: number;
  /**
   * @remarks
   * The number of SQL statements.
   * 
   * @example
   * 200
   */
  sqlCount?: number;
  /**
   * @remarks
   * The SQL ID.
   * 
   * @example
   * d71f82be1eef72bd105128204d2e****
   */
  sqlId?: string;
  /**
   * @remarks
   * The total number of updated rows.
   * 
   * @example
   * 100
   */
  sumUpdatedRows?: number;
  /**
   * @remarks
   * The names of tables in the database.
   */
  tables?: string[];
  /**
   * @remarks
   * The version number.
   * 
   * @example
   * 1
   */
  version?: number;
  /**
   * @remarks
   * The virtual private cloud (VPC) ID.
   * 
   * @example
   * vpc-2zentqj1sk4qmolci****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      avgExaminedRows: 'AvgExaminedRows',
      avgFetchRows: 'AvgFetchRows',
      avgLockWaitTime: 'AvgLockWaitTime',
      avgLogicalRead: 'AvgLogicalRead',
      avgPhysicalAsyncRead: 'AvgPhysicalAsyncRead',
      avgPhysicalSyncRead: 'AvgPhysicalSyncRead',
      avgReturnedRows: 'AvgReturnedRows',
      avgRt: 'AvgRt',
      avgSqlCount: 'AvgSqlCount',
      avgUpdatedRows: 'AvgUpdatedRows',
      count: 'Count',
      countRate: 'CountRate',
      database: 'Database',
      errorCount: 'ErrorCount',
      examinedRows: 'ExaminedRows',
      fetchRows: 'FetchRows',
      ip: 'Ip',
      lockWaitTime: 'LockWaitTime',
      logicalRead: 'LogicalRead',
      physicalAsyncRead: 'PhysicalAsyncRead',
      physicalSyncRead: 'PhysicalSyncRead',
      port: 'Port',
      psql: 'Psql',
      rows: 'Rows',
      rtGreaterThanOneSecondCount: 'RtGreaterThanOneSecondCount',
      rtRate: 'RtRate',
      sqlCount: 'SqlCount',
      sqlId: 'SqlId',
      sumUpdatedRows: 'SumUpdatedRows',
      tables: 'Tables',
      version: 'Version',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgExaminedRows: 'number',
      avgFetchRows: 'number',
      avgLockWaitTime: 'number',
      avgLogicalRead: 'number',
      avgPhysicalAsyncRead: 'number',
      avgPhysicalSyncRead: 'number',
      avgReturnedRows: 'number',
      avgRt: 'number',
      avgSqlCount: 'number',
      avgUpdatedRows: 'number',
      count: 'number',
      countRate: 'number',
      database: 'string',
      errorCount: 'number',
      examinedRows: 'number',
      fetchRows: 'number',
      ip: 'string',
      lockWaitTime: 'number',
      logicalRead: 'number',
      physicalAsyncRead: 'number',
      physicalSyncRead: 'number',
      port: 'number',
      psql: 'string',
      rows: 'number',
      rtGreaterThanOneSecondCount: 'number',
      rtRate: 'number',
      sqlCount: 'number',
      sqlId: 'string',
      sumUpdatedRows: 'number',
      tables: { 'type': 'array', 'itemType': 'string' },
      version: 'number',
      vpcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestStatResultByInstanceIdResponseBodyDataResult extends $tea.Model {
  /**
   * @remarks
   * The full request data.
   */
  list?: GetFullRequestStatResultByInstanceIdResponseBodyDataResultList[];
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetFullRequestStatResultByInstanceIdResponseBodyDataResultList },
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetFullRequestStatResultByInstanceIdResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the asynchronous request failed. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fail?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @remarks
   * The returned full request data.
   */
  result?: GetFullRequestStatResultByInstanceIdResponseBodyDataResult;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 9CB97BC4-6479-55D0-B9D0-EA925AFE****
   */
  resultId?: string;
  /**
   * @remarks
   * The state of the asynchronous request. Valid values:
   * 
   * *   **RUNNING**
   * *   **SUCCESS**
   * *   **FAIL**
   * 
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @remarks
   * The time when the asynchronous request was sent. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1645668213000
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      fail: 'Fail',
      isFinish: 'IsFinish',
      result: 'Result',
      resultId: 'ResultId',
      state: 'State',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fail: 'boolean',
      isFinish: 'boolean',
      result: GetFullRequestStatResultByInstanceIdResponseBodyDataResult,
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult extends $tea.Model {
  errMsg?: string;
  resourceType?: string;
  success?: boolean;
  syncCount?: number;
  static names(): { [key: string]: string } {
    return {
      errMsg: 'ErrMsg',
      resourceType: 'ResourceType',
      success: 'Success',
      syncCount: 'SyncCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errMsg: 'string',
      resourceType: 'string',
      success: 'boolean',
      syncCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMAliyunResourceSyncResultResponseBodyDataSubResults extends $tea.Model {
  resourceSyncSubResult?: GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult[];
  static names(): { [key: string]: string } {
    return {
      resourceSyncSubResult: 'ResourceSyncSubResult',
    };
  }

  static types(): { [key: string]: any } {
    return {
      resourceSyncSubResult: { 'type': 'array', 'itemType': GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMAliyunResourceSyncResultResponseBodyData extends $tea.Model {
  errorMsg?: string;
  results?: string;
  subResults?: GetHDMAliyunResourceSyncResultResponseBodyDataSubResults;
  syncStatus?: string;
  static names(): { [key: string]: string } {
    return {
      errorMsg: 'ErrorMsg',
      results: 'Results',
      subResults: 'SubResults',
      syncStatus: 'SyncStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorMsg: 'string',
      results: 'string',
      subResults: GetHDMAliyunResourceSyncResultResponseBodyDataSubResults,
      syncStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult extends $tea.Model {
  errMsg?: string;
  resourceType?: string;
  success?: boolean;
  syncCount?: number;
  static names(): { [key: string]: string } {
    return {
      errMsg: 'ErrMsg',
      resourceType: 'ResourceType',
      success: 'Success',
      syncCount: 'SyncCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errMsg: 'string',
      resourceType: 'string',
      success: 'boolean',
      syncCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults extends $tea.Model {
  resourceSyncSubResult?: GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult[];
  static names(): { [key: string]: string } {
    return {
      resourceSyncSubResult: 'ResourceSyncSubResult',
    };
  }

  static types(): { [key: string]: any } {
    return {
      resourceSyncSubResult: { 'type': 'array', 'itemType': GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetHDMLastAliyunResourceSyncResultResponseBodyData extends $tea.Model {
  errorMsg?: string;
  results?: string;
  subResults?: GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults;
  syncStatus?: string;
  static names(): { [key: string]: string } {
    return {
      errorMsg: 'ErrorMsg',
      results: 'Results',
      subResults: 'SubResults',
      syncStatus: 'SyncStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorMsg: 'string',
      results: 'string',
      subResults: GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults,
      syncStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceInspectionsResponseBodyDataListAutoFunction extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the feature of automatically creating and deleting indexes is enabled. Valid values:
   * 
   * *   **0**: disabled.
   * *   **1**: enabled.
   * *   **2**: not supported.
   * 
   * @example
   * 2
   */
  autoIndex?: number;
  /**
   * @remarks
   * Indicates whether the automatic throttling feature is enabled. Valid values:
   * 
   * *   **0**: disabled.
   * *   **1**: enabled.
   * *   **2**: not supported.
   * 
   * @example
   * 2
   */
  autoLimitedSql?: number;
  /**
   * @remarks
   * Indicates whether the automatic fragment recycling feature is enabled. Valid values:
   * 
   * *   **0**: disabled.
   * *   **1**: enabled.
   * *   **2**: not supported.
   * 
   * @example
   * 0
   */
  autoResourceOptimize?: number;
  /**
   * @remarks
   * Indicates whether the auto scaling feature is enabled. Valid values:
   * 
   * *   **0**: disabled.
   * *   **1**: enabled.
   * *   **2**: not supported.
   * 
   * @example
   * 0
   */
  autoScale?: number;
  /**
   * @remarks
   * Indicates whether the event subscription feature is enabled. Valid values:
   * 
   * *   **0**: disabled.
   * *   **1**: enabled.
   * *   **2**: not supported.
   * 
   * @example
   * 0
   */
  eventSubscription?: number;
  static names(): { [key: string]: string } {
    return {
      autoIndex: 'AutoIndex',
      autoLimitedSql: 'AutoLimitedSql',
      autoResourceOptimize: 'AutoResourceOptimize',
      autoScale: 'AutoScale',
      eventSubscription: 'EventSubscription',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoIndex: 'number',
      autoLimitedSql: 'number',
      autoResourceOptimize: 'number',
      autoScale: 'number',
      eventSubscription: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceInspectionsResponseBodyDataListInstance extends $tea.Model {
  /**
   * @remarks
   * The account ID. You can view the ID of the logon account by moving the pointer over the profile in the Alibaba Cloud management console.
   * 
   * @example
   * 108398049688****
   */
  accountId?: string;
  /**
   * @remarks
   * The connection mode of the instance. Valid values:
   * 
   * *   **standard**: standard mode.
   * *   **safe**: database proxy mode.
   * 
   * @example
   * standard
   */
  category?: string;
  /**
   * @remarks
   * The CPU specification of the instance. For example, if a value of 8 is returned, the instance has eight CPU cores.
   * 
   * @example
   * 8
   */
  cpu?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **Redis**
   * *   **PolarDBMySQL**
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The version number of the database engine.
   * 
   * @example
   * 8.0
   */
  engineVersion?: string;
  /**
   * @remarks
   * The instance name.
   * 
   * @example
   * test-01
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The type of the instance on which the database is deployed. Valid values:
   * 
   * *   **RDS**: an Alibaba Cloud database instance.
   * *   **ECS**: an Elastic Compute Service (ECS) instance on which a self-managed database is deployed.
   * *   **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
   * 
   * >  The value IDC indicates that the instance is deployed in a data center.
   * 
   * @example
   * RDS
   */
  instanceArea?: string;
  /**
   * @remarks
   * The instance type.
   * 
   * @example
   * rds.mysql.s2.xlarge
   */
  instanceClass?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-bp10usoc1erj7****
   */
  instanceId?: string;
  /**
   * @remarks
   * The memory capacity of the database that is deployed on the instance. Unit: MB.
   * 
   * @example
   * 32768
   */
  memory?: number;
  /**
   * @remarks
   * The network type of the instance.
   * 
   * @example
   * VPC
   */
  networkType?: string;
  /**
   * @remarks
   * The ID of the node on the instance.
   * 
   * @example
   * rm-bp10usoc1erj7****
   */
  nodeId?: string;
  /**
   * @remarks
   * The region ID of the instance.
   * 
   * @example
   * cn-hangzhou
   */
  region?: string;
  /**
   * @remarks
   * The storage space of the instance. Unit: GB.
   * 
   * @example
   * 150
   */
  storage?: number;
  /**
   * @remarks
   * The unique identifier of the instance.
   * 
   * @example
   * hdm_3063db6792965c080a4bcb6e6304****
   */
  uuid?: string;
  /**
   * @remarks
   * The ID of the virtual private cloud (VPC) in which the instance is deployed.
   * 
   * @example
   * vpc-bp1knt7m55z9exoo7****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      accountId: 'AccountId',
      category: 'Category',
      cpu: 'Cpu',
      engine: 'Engine',
      engineVersion: 'EngineVersion',
      instanceAlias: 'InstanceAlias',
      instanceArea: 'InstanceArea',
      instanceClass: 'InstanceClass',
      instanceId: 'InstanceId',
      memory: 'Memory',
      networkType: 'NetworkType',
      nodeId: 'NodeId',
      region: 'Region',
      storage: 'Storage',
      uuid: 'Uuid',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountId: 'string',
      category: 'string',
      cpu: 'string',
      engine: 'string',
      engineVersion: 'string',
      instanceAlias: 'string',
      instanceArea: 'string',
      instanceClass: 'string',
      instanceId: 'string',
      memory: 'number',
      networkType: 'string',
      nodeId: 'string',
      region: 'string',
      storage: 'number',
      uuid: 'string',
      vpcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceInspectionsResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the autonomy service is enabled.
   */
  autoFunction?: GetInstanceInspectionsResponseBodyDataListAutoFunction;
  /**
   * @remarks
   * The data returned.
   * 
   * @example
   * "data": { "hasDeadLock": false, "exceptionTableMap": {}, "bigTransactionCount": 0, "cpu": 4, "isRds": true, "rdsEnable": true, "enable": false, "activeSessions": [], "bigTransactionList": [], "bigSessionList": [ { "blockDuration": 0, "active": false, "Time": 0, "db": "" },
   */
  data?: { [key: string]: any };
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition is enabled. Valid values:
   * 
   * *   **0**: disabled.
   * *   **1**: enabled.
   * *   **2**: not supported.
   * 
   * @example
   * 0
   */
  enableDasPro?: number;
  /**
   * @remarks
   * The end time of the inspection and scoring task. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The end time must be later than the start time.
   * 
   * @example
   * 1608888296001
   */
  endTime?: number;
  /**
   * @remarks
   * The time when the task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1603247192000
   */
  gmtCreate?: number;
  /**
   * @remarks
   * The information about the instance.
   */
  instance?: GetInstanceInspectionsResponseBodyDataListInstance;
  /**
   * @remarks
   * The inspection score of the instance.
   * 
   * @example
   * 100
   */
  score?: number;
  /**
   * @remarks
   * The scores that are deducted for the instance.
   */
  scoreMap?: { [key: string]: any };
  /**
   * @remarks
   * The start time of the inspection and scoring task. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  startTime?: number;
  /**
   * @remarks
   * The state of the inspection and scoring task. Valid values:
   * 
   * *   **0**: The task is waiting for execution.
   * *   **1**: The task is in progress.
   * *   **2**: The task is complete.
   * 
   * @example
   * 2
   */
  state?: number;
  /**
   * @remarks
   * The mode in which the inspection and scoring task was initiated. Valid values:
   * 
   * *   **0**: automatic mode.
   * *   **1**: manual mode.
   * 
   * @example
   * 0
   */
  taskType?: number;
  static names(): { [key: string]: string } {
    return {
      autoFunction: 'AutoFunction',
      data: 'Data',
      enableDasPro: 'EnableDasPro',
      endTime: 'EndTime',
      gmtCreate: 'GmtCreate',
      instance: 'Instance',
      score: 'Score',
      scoreMap: 'ScoreMap',
      startTime: 'StartTime',
      state: 'State',
      taskType: 'TaskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoFunction: GetInstanceInspectionsResponseBodyDataListAutoFunction,
      data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      enableDasPro: 'number',
      endTime: 'number',
      gmtCreate: 'number',
      instance: GetInstanceInspectionsResponseBodyDataListInstance,
      score: 'number',
      scoreMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      startTime: 'number',
      state: 'number',
      taskType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceInspectionsResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The detailed information.
   */
  list?: GetInstanceInspectionsResponseBodyDataList[];
  /**
   * @remarks
   * The page number. The value returned is a positive integer. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 4
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetInstanceInspectionsResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceMissingIndexListResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The average cost savings.
   * 
   * @example
   * 4.67
   */
  avgTotalUserCost?: number;
  /**
   * @remarks
   * The performance improvement, in percentage.
   * 
   * @example
   * 98.3
   */
  avgUserImpact?: number;
  /**
   * @remarks
   * The statement used to create the missing indexes.
   * 
   * @example
   * CREATE INDEX [IX_CLOUDDBA_school_dbo_stu@col1_@col2] ON [school].[dbo].[stu]([col1],[col2],[col3]) INCLUDE ([col4],[col5]) WITH (FILLFACTOR = 90, ONLINE = OFF);
   */
  createIndex?: string;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * school
   */
  databaseName?: string;
  /**
   * @remarks
   * The index columns included in the equal operation.
   * 
   * @example
   * col1,col2,col3
   */
  equalityColumns?: string;
  /**
   * @remarks
   * The columns on which indexes are missing.
   * 
   * @example
   * col3,col4
   */
  includedColumns?: string;
  /**
   * @remarks
   * The number of indexes.
   * 
   * @example
   * 1
   */
  indexCount?: number;
  /**
   * @remarks
   * The index columns included in the not equal operation.
   * 
   * @example
   * 2392
   */
  inequalityColumns?: string;
  /**
   * @remarks
   * The last seek time of a user.
   * 
   * @example
   * 1702023327000
   */
  lastUserSeek?: number;
  /**
   * @remarks
   * The object name.
   * 
   * @example
   * stu
   */
  objectName?: string;
  /**
   * @remarks
   * The total number of returned pages.
   * 
   * @example
   * 5025
   */
  reservedPages?: number;
  /**
   * @remarks
   * The table size.
   * 
   * @example
   * 39.26
   */
  reservedSize?: number;
  /**
   * @remarks
   * The number of table rows.
   * 
   * @example
   * 226945
   */
  rowCount?: number;
  /**
   * @remarks
   * The schema name.
   * 
   * @example
   * dbo
   */
  schemaName?: string;
  /**
   * @remarks
   * The number of scans.
   * 
   * @example
   * 0
   */
  systemScans?: number;
  /**
   * @remarks
   * The number of seeks.
   * 
   * @example
   * 0
   */
  systemSeeks?: number;
  /**
   * @remarks
   * The number of compilations.
   * 
   * @example
   * 2392
   */
  uniqueCompiles?: number;
  /**
   * @remarks
   * The number of scans performed by users.
   * 
   * @example
   * 0
   */
  userScans?: number;
  /**
   * @remarks
   * The number of seeks performed by users.
   * 
   * @example
   * 1081
   */
  userSeeks?: number;
  static names(): { [key: string]: string } {
    return {
      avgTotalUserCost: 'AvgTotalUserCost',
      avgUserImpact: 'AvgUserImpact',
      createIndex: 'CreateIndex',
      databaseName: 'DatabaseName',
      equalityColumns: 'EqualityColumns',
      includedColumns: 'IncludedColumns',
      indexCount: 'IndexCount',
      inequalityColumns: 'InequalityColumns',
      lastUserSeek: 'LastUserSeek',
      objectName: 'ObjectName',
      reservedPages: 'ReservedPages',
      reservedSize: 'ReservedSize',
      rowCount: 'RowCount',
      schemaName: 'SchemaName',
      systemScans: 'SystemScans',
      systemSeeks: 'SystemSeeks',
      uniqueCompiles: 'UniqueCompiles',
      userScans: 'UserScans',
      userSeeks: 'UserSeeks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgTotalUserCost: 'number',
      avgUserImpact: 'number',
      createIndex: 'string',
      databaseName: 'string',
      equalityColumns: 'string',
      includedColumns: 'string',
      indexCount: 'number',
      inequalityColumns: 'string',
      lastUserSeek: 'number',
      objectName: 'string',
      reservedPages: 'number',
      reservedSize: 'number',
      rowCount: 'number',
      schemaName: 'string',
      systemScans: 'number',
      systemSeeks: 'number',
      uniqueCompiles: 'number',
      userScans: 'number',
      userSeeks: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceMissingIndexListResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The returned data.
   */
  list?: GetInstanceMissingIndexListResponseBodyDataList[];
  /**
   * @remarks
   * The page number of the page returned.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 16
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetInstanceMissingIndexListResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceSqlOptimizeStatisticResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The total number of automatic SQL optimization events.
   * 
   * @example
   * 16
   */
  count?: number;
  /**
   * @remarks
   * The multiple of the maximum improvement for returned automatic SQL optimization events.
   * 
   * @example
   * 1003
   */
  improvement?: number;
  static names(): { [key: string]: string } {
    return {
      count: 'count',
      improvement: 'improvement',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      improvement: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetKillInstanceSessionTaskResultResponseBodyDataResult extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the session is active.
   * 
   * > If the type of the command is Query or Execute and the session in the transaction is not terminated, the session is active.
   * 
   * @example
   * true
   */
  active?: boolean;
  /**
   * @remarks
   * The type of the command executed in the session.
   * 
   * @example
   * Sleep
   */
  command?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * dbTest
   */
  db?: string;
  /**
   * @remarks
   * The IP address and port number of the host that initiated the session.
   * 
   * @example
   * 100.104.XX.XX:23428
   */
  host?: string;
  /**
   * @remarks
   * The session ID.
   * 
   * @example
   * 8357518
   */
  id?: number;
  /**
   * @remarks
   * The SQL statement executed in the session.
   * 
   * @example
   * SELECT sleep(60)
   */
  info?: string;
  /**
   * @remarks
   * The description of the session when the session was terminated.
   * 
   * *   **SESSION_KILLED**: The session is terminated.
   * *   **SESSION_EXPIRED**: The session has expired.
   * *   **SESSION_NO_PERMISSION**: The account used to terminate the session has insufficient permissions.
   * *   **SESSION_ACCOUNT_ERROR**: The account or password used to terminate the session is invalid.
   * *   **SESSION_IGNORED_USER**: The session of the account does not need to be terminated.
   * *   **SESSION_INTERNAL_USER_OR_COMMAND**: The session is a session initiated by or a command run by an Alibaba Cloud O\\&M account.
   * *   **SESSION_KILL_TASK_TIMEOUT**: Timeout occurs when the session is terminated.
   * *   **SESSION_OTHER_ERROR**: Other errors occurred.
   * 
   * @example
   * SESSION_KILLED
   */
  reason?: string;
  /**
   * @remarks
   * The status of the session.
   * 
   * @example
   * Sending data
   */
  state?: string;
  /**
   * @remarks
   * The ID of the subtask that terminates the session.
   * 
   * @example
   * task_d9e94107-6116-4ac3-b874-81466aff****
   */
  taskId?: string;
  /**
   * @remarks
   * The execution duration. Unit: seconds.
   * 
   * @example
   * 1
   */
  time?: number;
  /**
   * @remarks
   * The account of the database.
   * 
   * @example
   * testUser
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      active: 'Active',
      command: 'Command',
      db: 'Db',
      host: 'Host',
      id: 'Id',
      info: 'Info',
      reason: 'Reason',
      state: 'State',
      taskId: 'TaskId',
      time: 'Time',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      active: 'boolean',
      command: 'string',
      db: 'string',
      host: 'string',
      id: 'number',
      info: 'string',
      reason: 'string',
      state: 'string',
      taskId: 'string',
      time: 'number',
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetKillInstanceSessionTaskResultResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of ignored sessions, including sessions of the accounts that are specified by IgnoredUsers, sessions of internal O\\&M accounts of Alibaba Cloud, and **Binlog Dump** sessions.
   * 
   * @example
   * 9
   */
  ignoredUserSessionCount?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The number of sessions that failed to be terminated.
   * 
   * @example
   * 0
   */
  killFailCount?: number;
  /**
   * @remarks
   * The number of sessions that were terminated.
   * 
   * @example
   * 100
   */
  killSuccessCount?: number;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is returned only if the instance is a PolarDB for MySQL cluster.
   * 
   * @example
   * pi-bp1h12rv501cv****
   */
  nodeId?: string;
  /**
   * @remarks
   * The details of the task that terminated sessions.
   */
  result?: GetKillInstanceSessionTaskResultResponseBodyDataResult[];
  /**
   * @remarks
   * The session IDs.
   * 
   * >  If all sessions are terminated, the IDs of all sessions on the instance or node are returned.
   */
  sessions?: number[];
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * f77d535b45405bd462b21caa3ee8****
   */
  taskId?: string;
  /**
   * @remarks
   * The state of the task that terminates sessions.
   * 
   * *   **RUNNING**: The task is in progress.
   * *   **SUCCESS**: The task is successful.
   * *   **FAILURE**: The task failed.
   * *   **ERROR**: Other errors occur.
   * 
   * @example
   * SUCCESS
   */
  taskState?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account.
   * 
   * @example
   * 164882191396****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      ignoredUserSessionCount: 'IgnoredUserSessionCount',
      instanceId: 'InstanceId',
      killFailCount: 'KillFailCount',
      killSuccessCount: 'KillSuccessCount',
      nodeId: 'NodeId',
      result: 'Result',
      sessions: 'Sessions',
      taskId: 'TaskId',
      taskState: 'TaskState',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ignoredUserSessionCount: 'number',
      instanceId: 'string',
      killFailCount: 'number',
      killSuccessCount: 'number',
      nodeId: 'string',
      result: { 'type': 'array', 'itemType': GetKillInstanceSessionTaskResultResponseBodyDataResult },
      sessions: { 'type': 'array', 'itemType': 'number' },
      taskId: 'string',
      taskState: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMongoDBCurrentOpResponseBodyDataSessionList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the operation is active. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  active?: boolean;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 219.143.177.4:52324
   */
  client?: string;
  /**
   * @remarks
   * The document that contains the complete command object associated with the operation.
   * 
   * @example
   * "command" : {
   *   "find" : "items",
   *   "filter" : {
   *     "sku" : 1403978
   *   },
   *   ...
   *   "$db" : "test"
   * }
   */
  command?: string;
  /**
   * @remarks
   * The connection ID.
   * 
   * @example
   * 66378736
   */
  connectionId?: number;
  /**
   * @remarks
   * The description of the connection.
   * 
   * @example
   * conn1013858
   */
  desc?: string;
  /**
   * @remarks
   * The driver for MongoDB.
   * 
   * @example
   * mongo-java-driver|legacy@3.11.2
   */
  driver?: string;
  /**
   * @remarks
   * The host.
   * 
   * @example
   * a79******.cloud.et15:3328
   */
  host?: string;
  /**
   * @remarks
   * Indicates whether the operation is marked as terminated.
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  killPending?: boolean;
  /**
   * @remarks
   * The namespace.
   * 
   * @example
   * admin.cmd
   */
  ns?: string;
  /**
   * @remarks
   * The type of the operation.
   * 
   * @example
   * update
   */
  op?: string;
  /**
   * @remarks
   * The operation ID.
   * 
   * @example
   * 14508
   */
  opId?: string;
  /**
   * @remarks
   * The architecture of the operating system.
   * 
   * @example
   * amd64
   */
  osArch?: string;
  /**
   * @remarks
   * The name of the operating system.
   * 
   * @example
   * Linux
   */
  osName?: string;
  /**
   * @remarks
   * The type of the operating system.
   * 
   * @example
   * Linux
   */
  osType?: string;
  /**
   * @remarks
   * The description of the execution plan.
   * 
   * @example
   * None
   */
  planSummary?: string;
  /**
   * @remarks
   * The platform.
   * 
   * @example
   * Java/Alibaba/1.8.0_152-b5
   */
  platform?: string;
  /**
   * @remarks
   * The duration of the operation. Unit: seconds.
   * 
   * @example
   * 5
   */
  secsRunning?: number;
  /**
   * @remarks
   * The ID of the data shard.
   * 
   * >  This parameter is returned for sharded cluster instances.
   * 
   * @example
   * d-bp1689995b78****
   */
  shard?: string;
  static names(): { [key: string]: string } {
    return {
      active: 'Active',
      client: 'Client',
      command: 'Command',
      connectionId: 'ConnectionId',
      desc: 'Desc',
      driver: 'Driver',
      host: 'Host',
      killPending: 'KillPending',
      ns: 'Ns',
      op: 'Op',
      opId: 'OpId',
      osArch: 'OsArch',
      osName: 'OsName',
      osType: 'OsType',
      planSummary: 'PlanSummary',
      platform: 'Platform',
      secsRunning: 'SecsRunning',
      shard: 'Shard',
    };
  }

  static types(): { [key: string]: any } {
    return {
      active: 'boolean',
      client: 'string',
      command: 'string',
      connectionId: 'number',
      desc: 'string',
      driver: 'string',
      host: 'string',
      killPending: 'boolean',
      ns: 'string',
      op: 'string',
      opId: 'string',
      osArch: 'string',
      osName: 'string',
      osType: 'string',
      planSummary: 'string',
      platform: 'string',
      secsRunning: 'number',
      shard: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMongoDBCurrentOpResponseBodyDataSessionStat extends $tea.Model {
  /**
   * @remarks
   * The number of active sessions.
   * 
   * @example
   * 0
   */
  activeCount?: number;
  /**
   * @remarks
   * The statistics on the IP addresses of the clients.
   */
  clientStats?: { [key: string]: DataSessionStatClientStatsValue };
  /**
   * @remarks
   * The statistics on the namespaces.
   */
  dbStats?: { [key: string]: DataSessionStatDbStatsValue };
  /**
   * @remarks
   * The longest duration of a session. Unit: seconds.
   * 
   * @example
   * 0
   */
  longestSecsRunning?: number;
  /**
   * @remarks
   * The total number of sessions.
   * 
   * @example
   * 55
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      activeCount: 'ActiveCount',
      clientStats: 'ClientStats',
      dbStats: 'DbStats',
      longestSecsRunning: 'LongestSecsRunning',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activeCount: 'number',
      clientStats: { 'type': 'map', 'keyType': 'string', 'valueType': DataSessionStatClientStatsValue },
      dbStats: { 'type': 'map', 'keyType': 'string', 'valueType': DataSessionStatDbStatsValue },
      longestSecsRunning: 'number',
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMongoDBCurrentOpResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The sessions.
   */
  sessionList?: GetMongoDBCurrentOpResponseBodyDataSessionList[];
  /**
   * @remarks
   * The statistics on the sessions.
   */
  sessionStat?: GetMongoDBCurrentOpResponseBodyDataSessionStat;
  /**
   * @remarks
   * The time when the database sessions were returned. The value is in the UNIX timestamp format. Unit: milliseconds.
   * 
   * @example
   * 1692029584428
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      sessionList: 'SessionList',
      sessionStat: 'SessionStat',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sessionList: { 'type': 'array', 'itemType': GetMongoDBCurrentOpResponseBodyDataSessionList },
      sessionStat: GetMongoDBCurrentOpResponseBodyDataSessionStat,
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats extends $tea.Model {
  /**
   * @remarks
   * The number of active sessions that belong to the client IP address.
   * 
   * >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
   * 
   * @example
   * 1
   */
  activeCount?: number;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 47.100.XX.XX
   */
  key?: string;
  /**
   * @remarks
   * The IDs of the sessions that belong to the client IP address.
   */
  threadIdList?: number[];
  /**
   * @remarks
   * The total number of sessions that belong to the client IP address.
   * 
   * @example
   * 2
   */
  totalCount?: number;
  /**
   * @remarks
   * The database accounts to which the sessions belong.
   */
  userList?: string[];
  static names(): { [key: string]: string } {
    return {
      activeCount: 'ActiveCount',
      key: 'Key',
      threadIdList: 'ThreadIdList',
      totalCount: 'TotalCount',
      userList: 'UserList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activeCount: 'number',
      key: 'string',
      threadIdList: { 'type': 'array', 'itemType': 'number' },
      totalCount: 'number',
      userList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats extends $tea.Model {
  /**
   * @remarks
   * The number of active sessions of the database.
   * 
   * >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
   * 
   * @example
   * 1
   */
  activeCount?: number;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * dbTest
   */
  key?: string;
  /**
   * @remarks
   * The IDs of the sessions of the database.
   */
  threadIdList?: number[];
  /**
   * @remarks
   * The total number of sessions of the database.
   * 
   * @example
   * 2
   */
  totalCount?: number;
  /**
   * @remarks
   * The database accounts to which the sessions belong.
   */
  userList?: string[];
  static names(): { [key: string]: string } {
    return {
      activeCount: 'ActiveCount',
      key: 'Key',
      threadIdList: 'ThreadIdList',
      totalCount: 'TotalCount',
      userList: 'UserList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activeCount: 'number',
      key: 'string',
      threadIdList: { 'type': 'array', 'itemType': 'number' },
      totalCount: 'number',
      userList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList extends $tea.Model {
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 47.100.XX.XX
   */
  client?: string;
  /**
   * @remarks
   * The type of the command executed in the session.
   * 
   * @example
   * Query
   */
  command?: string;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * dbTest
   */
  dbName?: string;
  /**
   * @remarks
   * The session ID.
   * 
   * @example
   * 14521783
   */
  sessionId?: number;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * >  This parameter is returned only when you use a PolarDB-X 2.0 instance.
   * 
   * @example
   * a7cac1a9
   */
  sqlTemplateId?: string;
  /**
   * @remarks
   * The SQL statement executed in the session.
   * 
   * @example
   * INSERT INTO ...
   */
  sqlText?: string;
  /**
   * @remarks
   * The status of the session.
   * 
   * @example
   * starting
   */
  state?: string;
  /**
   * @remarks
   * The execution duration of the session. Unit: seconds.
   * 
   * @example
   * 6
   */
  time?: number;
  /**
   * @remarks
   * The duration of the transaction. Unit: seconds.
   * 
   * @example
   * 6
   */
  trxDuration?: number;
  /**
   * @remarks
   * The ID of the transaction to which the session belongs.
   * 
   * @example
   * 754300775132
   */
  trxId?: string;
  /**
   * @remarks
   * The username of the database account.
   * 
   * @example
   * testUser
   */
  user?: string;
  /**
   * @remarks
   * The alias of the IP address of the client.
   * 
   * @example
   * master-shanghai
   */
  userClientAlias?: string;
  static names(): { [key: string]: string } {
    return {
      client: 'Client',
      command: 'Command',
      dbName: 'DbName',
      sessionId: 'SessionId',
      sqlTemplateId: 'SqlTemplateId',
      sqlText: 'SqlText',
      state: 'State',
      time: 'Time',
      trxDuration: 'TrxDuration',
      trxId: 'TrxId',
      user: 'User',
      userClientAlias: 'UserClientAlias',
    };
  }

  static types(): { [key: string]: any } {
    return {
      client: 'string',
      command: 'string',
      dbName: 'string',
      sessionId: 'number',
      sqlTemplateId: 'string',
      sqlText: 'string',
      state: 'string',
      time: 'number',
      trxDuration: 'number',
      trxId: 'string',
      user: 'string',
      userClientAlias: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats extends $tea.Model {
  /**
   * @remarks
   * The number of active sessions within the account.
   * 
   * >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
   * 
   * @example
   * 1
   */
  activeCount?: number;
  /**
   * @remarks
   * The database account.
   * 
   * @example
   * testUser
   */
  key?: string;
  /**
   * @remarks
   * The IDs of the sessions within the account.
   */
  threadIdList?: number[];
  /**
   * @remarks
   * The total number of sessions within the account.
   * 
   * @example
   * 2
   */
  totalCount?: number;
  /**
   * @remarks
   * The database accounts to which the sessions belong.
   */
  userList?: string[];
  static names(): { [key: string]: string } {
    return {
      activeCount: 'ActiveCount',
      key: 'Key',
      threadIdList: 'ThreadIdList',
      totalCount: 'TotalCount',
      userList: 'UserList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activeCount: 'number',
      key: 'string',
      threadIdList: { 'type': 'array', 'itemType': 'number' },
      totalCount: 'number',
      userList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponseBodyDataSessionData extends $tea.Model {
  /**
   * @remarks
   * The total number of active sessions.
   * 
   * @example
   * 10
   */
  activeSessionCount?: number;
  /**
   * @remarks
   * The sessions that are counted by client IP address.
   */
  clientStats?: GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats[];
  /**
   * @remarks
   * The sessions that are counted by database.
   */
  dbStats?: GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats[];
  /**
   * @remarks
   * The maximum execution duration of an active session. Unit: seconds.
   * 
   * @example
   * 6
   */
  maxActiveTime?: number;
  /**
   * @remarks
   * The sessions.
   */
  sessionList?: GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList[];
  /**
   * @remarks
   * The time when the session was queried. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1659581514000020
   */
  timeStamp?: number;
  /**
   * @remarks
   * The total number of sessions.
   * 
   * @example
   * 988
   */
  totalSessionCount?: number;
  /**
   * @remarks
   * The sessions that are counted by database account.
   */
  userStats?: GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats[];
  static names(): { [key: string]: string } {
    return {
      activeSessionCount: 'ActiveSessionCount',
      clientStats: 'ClientStats',
      dbStats: 'DbStats',
      maxActiveTime: 'MaxActiveTime',
      sessionList: 'SessionList',
      timeStamp: 'TimeStamp',
      totalSessionCount: 'TotalSessionCount',
      userStats: 'UserStats',
    };
  }

  static types(): { [key: string]: any } {
    return {
      activeSessionCount: 'number',
      clientStats: { 'type': 'array', 'itemType': GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats },
      dbStats: { 'type': 'array', 'itemType': GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats },
      maxActiveTime: 'number',
      sessionList: { 'type': 'array', 'itemType': GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList },
      timeStamp: 'number',
      totalSessionCount: 'number',
      userStats: { 'type': 'array', 'itemType': GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMySQLAllSessionAsyncResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  complete?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request failed. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fail?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * @example
   * async__507044db6c4eadfa2dab9b084e80****
   */
  resultId?: string;
  /**
   * @remarks
   * The session data.
   */
  sessionData?: GetMySQLAllSessionAsyncResponseBodyDataSessionData;
  /**
   * @remarks
   * The state of the asynchronous request. Valid values:
   * 
   * *   **RUNNING**
   * *   **SUCCESS**
   * *   **FAIL**
   * 
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @remarks
   * The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1660100753556
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      complete: 'Complete',
      fail: 'Fail',
      isFinish: 'IsFinish',
      resultId: 'ResultId',
      sessionData: 'SessionData',
      state: 'State',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      complete: 'boolean',
      fail: 'boolean',
      isFinish: 'boolean',
      resultId: 'string',
      sessionData: GetMySQLAllSessionAsyncResponseBodyDataSessionData,
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSampleResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of internal on-disk temporary tables that were created when the SQL statement was executed.
   * 
   * @example
   * 0
   */
  createTmpDiskTables?: number;
  /**
   * @remarks
   * The number of internal temporary tables that were created when the SQL statement was executed.
   * 
   * @example
   * 0
   */
  createTmpTables?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testDB
   */
  db?: string;
  /**
   * @remarks
   * The end ID of the event. By default, the value of this parameter is NULL when the event starts and is changed to the event ID when the event ends.
   * 
   * @example
   * 0
   */
  endEventId?: number;
  /**
   * @remarks
   * The number of errors returned for the SQL statement.
   * 
   * @example
   * 0
   */
  errors?: number;
  /**
   * @remarks
   * The event ID.
   * 
   * @example
   * 63735293
   */
  eventId?: number;
  /**
   * @remarks
   * The name of the event.
   * 
   * @example
   * statement/sql/select
   */
  eventName?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The execution duration. Unit: millisecond.
   * 
   * @example
   * 0.199
   */
  latency?: number;
  /**
   * @remarks
   * The lock wait duration. Unit: millisecond.
   * 
   * @example
   * 0.09
   */
  lockLatency?: number;
  /**
   * @remarks
   * The ID of the logical database.
   * 
   * @example
   * xxxxx
   */
  logicId?: string;
  /**
   * @remarks
   * Indicates whether the server failed to find an index that can be used for the SQL statement. Valid values:
   * 
   * *   **1**: yes.
   * *   **0**: no.
   * 
   * @example
   * 1
   */
  noGoodIndexUsed?: number;
  /**
   * @remarks
   * Indicates whether table scans were performed when indexes were not used. Valid values:
   * 
   * *   **1**: yes.
   * *   **0**: no.
   * 
   * @example
   * 1
   */
  noIndexUsed?: number;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is returned only for ApsaraDB RDS for MySQL Cluster Edition instances or PolarDB for MySQL clusters.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The number of rows affected by the SQL statement.
   * 
   * @example
   * 0
   */
  rowsAffected?: number;
  /**
   * @remarks
   * The number of rows scanned by the SQL statement.
   * 
   * @example
   * 2048576
   */
  rowsExamined?: number;
  /**
   * @remarks
   * The number of rows returned by the SQL statement.
   * 
   * @example
   * 0
   */
  rowsSent?: number;
  /**
   * @remarks
   * The number of joins that are used to perform table scans without using indexes.
   * 
   * > : This parameter is used for the scenario in which indexes are not used in a union query. If the returned value is not 0, check the indexes of tables.
   * 
   * @example
   * 0
   */
  selectFullJoin?: number;
  /**
   * @remarks
   * The number of joins that used ranges on referenced tables.
   * 
   * @example
   * 0
   */
  selectFullRangeJoin?: number;
  /**
   * @remarks
   * The number of joins that used ranges on the first table.
   * 
   * @example
   * 0
   */
  selectRange?: number;
  /**
   * @remarks
   * The number of joins that did not have key values. The keys and values were checked for each row of data.
   * 
   * > : This parameter is used for the scenario in which indexes are not used in a union query. If the returned value is not 0, check the indexes of tables.
   * 
   * @example
   * 0
   */
  selectRangeCheck?: number;
  /**
   * @remarks
   * The number of scans.
   * 
   * @example
   * 0
   */
  selectScan?: number;
  /**
   * @remarks
   * The number of merges that the sorting algorithm must perform.
   * 
   * @example
   * 0
   */
  sortMergePasses?: number;
  /**
   * @remarks
   * The number of times the data was sorted by using ranges.
   * 
   * @example
   * 0
   */
  sortRange?: number;
  /**
   * @remarks
   * The number of sorted rows.
   * 
   * @example
   * 0
   */
  sortRows?: number;
  /**
   * @remarks
   * The number of sorts that were performed during table scans.
   * 
   * @example
   * 1
   */
  sortScan?: number;
  /**
   * @remarks
   * The sample SQL statement.
   * 
   * @example
   * select * from xxxx where ****
   */
  sql?: string;
  /**
   * @remarks
   * The SQL statement ID.
   * 
   * @example
   * 651b56fe9418d48edb8fdf0980ec****
   */
  sqlId?: string;
  /**
   * @remarks
   * The thread ID.
   * 
   * @example
   * 81751940
   */
  threadId?: number;
  /**
   * @remarks
   * The time when the SQL statement was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1660100753556
   */
  timestamp?: number;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  /**
   * @remarks
   * The number of warnings returned for the SQL statement.
   * 
   * @example
   * 0
   */
  warnings?: number;
  static names(): { [key: string]: string } {
    return {
      createTmpDiskTables: 'CreateTmpDiskTables',
      createTmpTables: 'CreateTmpTables',
      db: 'Db',
      endEventId: 'EndEventId',
      errors: 'Errors',
      eventId: 'EventId',
      eventName: 'EventName',
      instanceId: 'InstanceId',
      latency: 'Latency',
      lockLatency: 'LockLatency',
      logicId: 'LogicId',
      noGoodIndexUsed: 'NoGoodIndexUsed',
      noIndexUsed: 'NoIndexUsed',
      nodeId: 'NodeId',
      rowsAffected: 'RowsAffected',
      rowsExamined: 'RowsExamined',
      rowsSent: 'RowsSent',
      selectFullJoin: 'SelectFullJoin',
      selectFullRangeJoin: 'SelectFullRangeJoin',
      selectRange: 'SelectRange',
      selectRangeCheck: 'SelectRangeCheck',
      selectScan: 'SelectScan',
      sortMergePasses: 'SortMergePasses',
      sortRange: 'SortRange',
      sortRows: 'SortRows',
      sortScan: 'SortScan',
      sql: 'Sql',
      sqlId: 'SqlId',
      threadId: 'ThreadId',
      timestamp: 'Timestamp',
      userId: 'UserId',
      warnings: 'Warnings',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTmpDiskTables: 'number',
      createTmpTables: 'number',
      db: 'string',
      endEventId: 'number',
      errors: 'number',
      eventId: 'number',
      eventName: 'string',
      instanceId: 'string',
      latency: 'number',
      lockLatency: 'number',
      logicId: 'string',
      noGoodIndexUsed: 'number',
      noIndexUsed: 'number',
      nodeId: 'string',
      rowsAffected: 'number',
      rowsExamined: 'number',
      rowsSent: 'number',
      selectFullJoin: 'number',
      selectFullRangeJoin: 'number',
      selectRange: 'number',
      selectRangeCheck: 'number',
      selectScan: 'number',
      sortMergePasses: 'number',
      sortRange: 'number',
      sortRows: 'number',
      sortScan: 'number',
      sql: 'string',
      sqlId: 'string',
      threadId: 'number',
      timestamp: 'number',
      userId: 'string',
      warnings: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSummariesResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The average execution latency. Unit: millisecond.
   * 
   * @example
   * 0.1717
   */
  avgLatency?: number;
  /**
   * @remarks
   * The total number of executions.
   * 
   * @example
   * 100000
   */
  count?: number;
  /**
   * @remarks
   * The percentage of the number of executions.
   * 
   * @example
   * 0.0586
   */
  countRate?: number;
  /**
   * @remarks
   * The ratio of the CPU execution duration to the total execution duration of the SQL statement.
   * 
   * @example
   * 0
   */
  cpuRate?: number;
  /**
   * @remarks
   * The CPU execution duration. Unit: millisecond.
   * 
   * @example
   * 0
   */
  cpuTime?: number;
  /**
   * @remarks
   * The data read duration. Unit: millisecond.
   * 
   * @example
   * 0
   */
  dataReadTime?: number;
  /**
   * @remarks
   * The number of nodes from which data can be read.
   * 
   * @example
   * 0
   */
  dataReads?: number;
  /**
   * @remarks
   * The data write duration. Unit: millisecond.
   * 
   * @example
   * 0
   */
  dataWriteTime?: number;
  /**
   * @remarks
   * The number of nodes to which data can be written.
   * 
   * @example
   * 0
   */
  dataWrites?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testDB
   */
  db?: string;
  /**
   * @remarks
   * The execution duration. Unit: millisecond.
   * 
   * @example
   * 0
   */
  elapsedTime?: number;
  /**
   * @remarks
   * The number of errors.
   * 
   * @example
   * 0
   */
  errCount?: number;
  /**
   * @remarks
   * The time when the SQL statement was executed for the first time. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1659308149000
   */
  firstTime?: number;
  /**
   * @remarks
   * Indicates whether full table scan was enabled. Valid values:
   * 
   * * **true**
   * * **false**
   * 
   * @example
   * true
   */
  fullScan?: boolean;
  /**
   * @remarks
   * The primary key ID.
   * 
   * @example
   * 26186357
   */
  id?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The time when the SQL statement was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1661306520000
   */
  lastTime?: number;
  /**
   * @remarks
   * The average lock wait latency. Unit: millisecond.
   * 
   * @example
   * 0
   */
  lockLatencyAvg?: number;
  /**
   * @remarks
   * The logical database ID.
   * 
   * @example
   * 58275984
   */
  logicId?: number;
  /**
   * @remarks
   * The number of logical nodes.
   * 
   * @example
   * 0
   */
  logicReads?: number;
  /**
   * @remarks
   * The maximum execution latency. Unit: millisecond.
   * 
   * @example
   * 36.233
   */
  maxLatency?: number;
  /**
   * @remarks
   * The number of mutex spins.
   * 
   * @example
   * 1
   */
  mutexSpins?: number;
  /**
   * @remarks
   * The number of mutex waits.
   * 
   * @example
   * 1
   */
  mutexWaits?: number;
  /**
   * @remarks
   * The node ID.
   * 
   * >  This parameter is returned only if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL cluster.
   * 
   * @example
   * r-x****-db-0
   */
  nodeId?: string;
  /**
   * @remarks
   * The number of physical asynchronous nodes.
   * 
   * @example
   * 0
   */
  physicalAsyncReads?: number;
  /**
   * @remarks
   * The number of physical nodes.
   * 
   * @example
   * 0
   */
  physicalReads?: number;
  /**
   * @remarks
   * The SQL template.
   * 
   * @example
   * select ?
   */
  psql?: string;
  /**
   * @remarks
   * The number of redo nodes.
   * 
   * @example
   * 0
   */
  redoWrites?: number;
  /**
   * @remarks
   * The number of rows that are affected by the SQL statement.
   * 
   * @example
   * 0
   */
  rowsAffected?: number;
  /**
   * @remarks
   * The average number of rows affected by the SQL statement.
   * 
   * @example
   * 0
   */
  rowsAffectedAvg?: number;
  /**
   * @remarks
   * The total number of scanned rows.
   * 
   * @example
   * 100
   */
  rowsExamined?: number;
  /**
   * @remarks
   * The average number of scanned rows.
   * 
   * @example
   * 0
   */
  rowsExaminedAvg?: number;
  /**
   * @remarks
   * The average number of returned rows.
   * 
   * @example
   * 0
   */
  rowsSendAvg?: number;
  /**
   * @remarks
   * The number of rows returned by the SQL statement.
   * 
   * @example
   * 0
   */
  rowsSent?: number;
  /**
   * @remarks
   * The average number of rows returned for the SQL statement.
   * 
   * @example
   * 0.52
   */
  rowsSentAvg?: number;
  /**
   * @remarks
   * The number of sorted rows.
   * 
   * @example
   * 0
   */
  rowsSorted?: number;
  /**
   * @remarks
   * The execution duration percentage.
   * 
   * @example
   * 0.1384
   */
  rtRate?: number;
  /**
   * @remarks
   * Indicates whether read/write splitting was enabled. Valid values:
   * 
   * * **0:** Read/write splitting was disabled.
   * * **1:** Read/write splitting was enabled.
   * 
   * @example
   * 0
   */
  rwlockOsWaits?: number;
  /**
   * @remarks
   * The read/write splitting parameters.
   * 
   * @example
   * 0
   */
  rwlockSpinRounds?: number;
  /**
   * @remarks
   * Indices whether multi-index scanning was enabled. Valid values:
   * 
   * * **0:** Multi-index scanning was disabled.
   * * **1:** Multi-index scanning was enabled.
   * 
   * @example
   * 0
   */
  rwlockSpinWaits?: number;
  /**
   * @remarks
   * The average number of joins that performed table scans without using indexes.
   * 
   * > If the value of this parameter is not 0, check the table indexes.
   * 
   * @example
   * 0
   */
  selectFullJoinAvg?: number;
  /**
   * @remarks
   * The average number of joins that selected a range.
   * 
   * @example
   * 0
   */
  selectFullRangeJoinAvg?: number;
  /**
   * @remarks
   * The average selected range.
   * 
   * @example
   * 0
   */
  selectRangeAvg?: number;
  /**
   * @remarks
   * The average number of scanned rows.
   * 
   * @example
   * 0
   */
  selectScanAvg?: number;
  /**
   * @remarks
   * The semi-synchronous replication latency. Unit: millisecond.
   * 
   * @example
   * 0.12
   */
  semisyncDelayTime?: number;
  /**
   * @remarks
   * The amount of time consumed for locking the server. Unit: millisecond.
   * 
   * @example
   * 0
   */
  serverLockTime?: number;
  /**
   * @remarks
   * The number of merges that the sorting algorithm must perform.
   * 
   * @example
   * 0
   */
  sortMergePasses?: number;
  /**
   * @remarks
   * The average number of sorts that were performed by using a range.
   * 
   * @example
   * 0
   */
  sortRangeAvg?: number;
  /**
   * @remarks
   * The average number of sorted rows.
   * 
   * @example
   * 0
   */
  sortRowsAvg?: number;
  /**
   * @remarks
   * The average number of sorts that were performed during table scans.
   * 
   * @example
   * 0
   */
  sortScanAvg?: number;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * @example
   * 2e8147b5ca2dfc640dfd5e43d96a****
   */
  sqlId?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * * **SELECT**
   * * **UPDATE**
   * * **DELETE**
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The names of tables in the database.
   */
  tables?: string[];
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  timerWaitAvg?: number;
  /**
   * @remarks
   * The data timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1643040000000
   */
  timestamp?: number;
  /**
   * @remarks
   * The number of on-disk temporary tables.
   * 
   * @example
   * 0
   */
  tmpDiskTables?: number;
  /**
   * @remarks
   * The average number of on-disk temporary tables.
   * 
   * @example
   * 0
   */
  tmpDiskTablesAvg?: number;
  /**
   * @remarks
   * The number of temporary tables.
   * 
   * @example
   * 0
   */
  tmpTables?: number;
  /**
   * @remarks
   * The average number of temporary tables.
   * 
   * @example
   * 0
   */
  tmpTablesAvg?: number;
  /**
   * @remarks
   * The execution latency. Unit: millisecond.
   * 
   * @example
   * 60913.256
   */
  totalLatency?: number;
  /**
   * @remarks
   * The amount of time consumed for locking the storage transaction. Unit: millisecond.
   * 
   * @example
   * 0
   */
  transactionLockTime?: number;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 196278346919****
   */
  userId?: string;
  /**
   * @remarks
   * The number of warnings.
   * 
   * @example
   * 0
   */
  warnCount?: number;
  static names(): { [key: string]: string } {
    return {
      avgLatency: 'AvgLatency',
      count: 'Count',
      countRate: 'CountRate',
      cpuRate: 'CpuRate',
      cpuTime: 'CpuTime',
      dataReadTime: 'DataReadTime',
      dataReads: 'DataReads',
      dataWriteTime: 'DataWriteTime',
      dataWrites: 'DataWrites',
      db: 'Db',
      elapsedTime: 'ElapsedTime',
      errCount: 'ErrCount',
      firstTime: 'FirstTime',
      fullScan: 'FullScan',
      id: 'Id',
      instanceId: 'InstanceId',
      lastTime: 'LastTime',
      lockLatencyAvg: 'LockLatencyAvg',
      logicId: 'LogicId',
      logicReads: 'LogicReads',
      maxLatency: 'MaxLatency',
      mutexSpins: 'MutexSpins',
      mutexWaits: 'MutexWaits',
      nodeId: 'NodeId',
      physicalAsyncReads: 'PhysicalAsyncReads',
      physicalReads: 'PhysicalReads',
      psql: 'Psql',
      redoWrites: 'RedoWrites',
      rowsAffected: 'RowsAffected',
      rowsAffectedAvg: 'RowsAffectedAvg',
      rowsExamined: 'RowsExamined',
      rowsExaminedAvg: 'RowsExaminedAvg',
      rowsSendAvg: 'RowsSendAvg',
      rowsSent: 'RowsSent',
      rowsSentAvg: 'RowsSentAvg',
      rowsSorted: 'RowsSorted',
      rtRate: 'RtRate',
      rwlockOsWaits: 'RwlockOsWaits',
      rwlockSpinRounds: 'RwlockSpinRounds',
      rwlockSpinWaits: 'RwlockSpinWaits',
      selectFullJoinAvg: 'SelectFullJoinAvg',
      selectFullRangeJoinAvg: 'SelectFullRangeJoinAvg',
      selectRangeAvg: 'SelectRangeAvg',
      selectScanAvg: 'SelectScanAvg',
      semisyncDelayTime: 'SemisyncDelayTime',
      serverLockTime: 'ServerLockTime',
      sortMergePasses: 'SortMergePasses',
      sortRangeAvg: 'SortRangeAvg',
      sortRowsAvg: 'SortRowsAvg',
      sortScanAvg: 'SortScanAvg',
      sqlId: 'SqlId',
      sqlType: 'SqlType',
      tables: 'Tables',
      timerWaitAvg: 'TimerWaitAvg',
      timestamp: 'Timestamp',
      tmpDiskTables: 'TmpDiskTables',
      tmpDiskTablesAvg: 'TmpDiskTablesAvg',
      tmpTables: 'TmpTables',
      tmpTablesAvg: 'TmpTablesAvg',
      totalLatency: 'TotalLatency',
      transactionLockTime: 'TransactionLockTime',
      userId: 'UserId',
      warnCount: 'WarnCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgLatency: 'number',
      count: 'number',
      countRate: 'number',
      cpuRate: 'number',
      cpuTime: 'number',
      dataReadTime: 'number',
      dataReads: 'number',
      dataWriteTime: 'number',
      dataWrites: 'number',
      db: 'string',
      elapsedTime: 'number',
      errCount: 'number',
      firstTime: 'number',
      fullScan: 'boolean',
      id: 'number',
      instanceId: 'string',
      lastTime: 'number',
      lockLatencyAvg: 'number',
      logicId: 'number',
      logicReads: 'number',
      maxLatency: 'number',
      mutexSpins: 'number',
      mutexWaits: 'number',
      nodeId: 'string',
      physicalAsyncReads: 'number',
      physicalReads: 'number',
      psql: 'string',
      redoWrites: 'number',
      rowsAffected: 'number',
      rowsAffectedAvg: 'number',
      rowsExamined: 'number',
      rowsExaminedAvg: 'number',
      rowsSendAvg: 'number',
      rowsSent: 'number',
      rowsSentAvg: 'number',
      rowsSorted: 'number',
      rtRate: 'number',
      rwlockOsWaits: 'number',
      rwlockSpinRounds: 'number',
      rwlockSpinWaits: 'number',
      selectFullJoinAvg: 'number',
      selectFullRangeJoinAvg: 'number',
      selectRangeAvg: 'number',
      selectScanAvg: 'number',
      semisyncDelayTime: 'number',
      serverLockTime: 'number',
      sortMergePasses: 'number',
      sortRangeAvg: 'number',
      sortRowsAvg: 'number',
      sortScanAvg: 'number',
      sqlId: 'string',
      sqlType: 'string',
      tables: { 'type': 'array', 'itemType': 'string' },
      timerWaitAvg: 'number',
      timestamp: 'number',
      tmpDiskTables: 'number',
      tmpDiskTablesAvg: 'number',
      tmpTables: 'number',
      tmpTablesAvg: 'number',
      totalLatency: 'number',
      transactionLockTime: 'number',
      userId: 'string',
      warnCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPfsSqlSummariesResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: any;
  /**
   * @remarks
   * The details of the data returned.
   */
  list?: GetPfsSqlSummariesResponseBodyDataList[];
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 264
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'any',
      list: { 'type': 'array', 'itemType': GetPfsSqlSummariesResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataStatsResponseBodyDataListRuleList extends $tea.Model {
  /**
   * @remarks
   * The rule name.
   * 
   * @example
   * DAS_NOT_IMPORTANT
   */
  name?: string;
  /**
   * @remarks
   * The type of the rule. Valid values:
   * 
   * * **Predefined**
   * * **UserDefined**
   * 
   * @example
   * Predefined
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataStatsResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The average lock wait time. Unit: seconds.
   * 
   * @example
   * 0.1
   */
  avgLockTime?: number;
  /**
   * @remarks
   * The average query execution time. Unit: seconds.
   * 
   * @example
   * 1.1
   */
  avgQueryTime?: number;
  /**
   * @remarks
   * The average number of rows affected by the SQL statement.
   * 
   * > A value of -1 indicates that this parameter is not collected.
   * 
   * @example
   * 100.1
   */
  avgRowsAffected?: number;
  /**
   * @remarks
   * The average number of scanned rows.
   * 
   * @example
   * 100.1
   */
  avgRowsExamined?: number;
  /**
   * @remarks
   * The average number of returned rows.
   * 
   * @example
   * 100.1
   */
  avgRowsSent?: number;
  /**
   * @remarks
   * The number of times that the SQL template is executed.
   * 
   * @example
   * 100
   */
  count?: number;
  /**
   * @remarks
   * The name of the database to which the SQL template belongs.
   * 
   * @example
   * testdb01
   */
  dbname?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The longest lock wait time. Unit: seconds.
   * 
   * @example
   * 0.1
   */
  maxLockTime?: number;
  /**
   * @remarks
   * The longest query execution time. Unit: seconds.
   * 
   * @example
   * 1.1
   */
  maxQueryTime?: number;
  /**
   * @remarks
   * The largest number of rows affected by the SQL template.
   * 
   * > A value of -1 indicates that this parameter is not collected.
   * 
   * @example
   * 10000
   */
  maxRowsAffected?: number;
  /**
   * @remarks
   * The largest number of scanned rows.
   * 
   * @example
   * 100000
   */
  maxRowsExamined?: number;
  /**
   * @remarks
   * The largest number of returned rows.
   * 
   * @example
   * 10000
   */
  maxRowsSent?: number;
  /**
   * @remarks
   * The SQL template.
   * 
   * @example
   * select 1
   */
  psql?: string;
  /**
   * @remarks
   * The information about the rules.
   */
  ruleList?: GetQueryOptimizeDataStatsResponseBodyDataListRuleList[];
  /**
   * @remarks
   * The SQL template ID.
   * 
   * @example
   * 2e8147b5ca2dfc640dfd5e43d96a****
   */
  sqlId?: string;
  /**
   * @remarks
   * The sample query that took the longest time to execute.
   * 
   * @example
   * select 2
   */
  sqlSample?: string;
  /**
   * @remarks
   * The type of the SQL statement.
   * 
   * @example
   * INSERT
   */
  sqlType?: string;
  /**
   * @remarks
   * The account of the database.
   * 
   * @example
   * testUser
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      avgLockTime: 'AvgLockTime',
      avgQueryTime: 'AvgQueryTime',
      avgRowsAffected: 'AvgRowsAffected',
      avgRowsExamined: 'AvgRowsExamined',
      avgRowsSent: 'AvgRowsSent',
      count: 'Count',
      dbname: 'Dbname',
      instanceId: 'InstanceId',
      maxLockTime: 'MaxLockTime',
      maxQueryTime: 'MaxQueryTime',
      maxRowsAffected: 'MaxRowsAffected',
      maxRowsExamined: 'MaxRowsExamined',
      maxRowsSent: 'MaxRowsSent',
      psql: 'Psql',
      ruleList: 'RuleList',
      sqlId: 'SqlId',
      sqlSample: 'SqlSample',
      sqlType: 'SqlType',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgLockTime: 'number',
      avgQueryTime: 'number',
      avgRowsAffected: 'number',
      avgRowsExamined: 'number',
      avgRowsSent: 'number',
      count: 'number',
      dbname: 'string',
      instanceId: 'string',
      maxLockTime: 'number',
      maxQueryTime: 'number',
      maxRowsAffected: 'number',
      maxRowsExamined: 'number',
      maxRowsSent: 'number',
      psql: 'string',
      ruleList: { 'type': 'array', 'itemType': GetQueryOptimizeDataStatsResponseBodyDataListRuleList },
      sqlId: 'string',
      sqlSample: 'string',
      sqlType: 'string',
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataStatsResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The information about the SQL templates.
   */
  list?: GetQueryOptimizeDataStatsResponseBodyDataList[];
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageNo?: number;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 10
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetQueryOptimizeDataStatsResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTopResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The metric name. Valid values:
   * 
   * * **sqlExecuteCount**: the number of slow SQL executions.
   * * **optimizedSqlExecuteCount**: the number of slow SQL executions that need to be optimized.
   * 
   * @example
   * sqlExecuteCount
   */
  type?: string;
  /**
   * @remarks
   * The metric value.
   * 
   * @example
   * 100
   */
  value?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      type: 'Type',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      type: 'string',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTopResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The information about the instances.
   */
  list?: GetQueryOptimizeDataTopResponseBodyDataList[];
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageNo?: number;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 10
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetQueryOptimizeDataTopResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTrendResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The name of the metric. Valid values:
   * 
   * * **sqlExecuteCount**: the number of executions of slow SQL queries.
   * * **sqlExecuteCountDiff**: the difference in the number of executions of slow SQL queries compared to the previous day.
   * * **sqlCount**: the number of slow SQL templates.
   * * **sqlCountDiff**: the difference in the number of slow SQL templates compared to the previous day.
   * * **optimizedSqlExecuteCount**: the number of optimizable executions of slow SQL queries.
   * * **optimizedSqlExecuteCountDiff**: the difference in the number of optimizable executions of slow SQL queries compared to the previous day.
   * * **optimizedSqlCount**: the number of optimizable slow SQL templates.
   * * **optimizedSqlCountDiff**: the difference in the number of optimizable slow SQL templates compared to the previous day.
   * 
   * @example
   * sqlExecuteCount
   */
  kpi?: string;
  /**
   * @remarks
   * The data timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1643040000000
   */
  timestamp?: number;
  /**
   * @remarks
   * The value of the metric.
   * 
   * @example
   * 1000
   */
  value?: number;
  static names(): { [key: string]: string } {
    return {
      kpi: 'Kpi',
      timestamp: 'Timestamp',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      kpi: 'string',
      timestamp: 'number',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeDataTrendResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The details of the trend data.
   */
  list?: GetQueryOptimizeDataTrendResponseBodyDataList[];
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageNo?: number;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 10
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetQueryOptimizeDataTrendResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorSampleResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testdb01
   */
  dbname?: string;
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * 1146
   */
  errorCode?: string;
  /**
   * @remarks
   * The IP address of the client that executes the SQL statement.
   * 
   * @example
   * 100.104.XX.XX
   */
  origHost?: string;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * @example
   * 2e8147b5ca2dfc640dfd5e43d96a****
   */
  sqlId?: string;
  /**
   * @remarks
   * The content of the SQL statement that failed to be executed.
   * 
   * @example
   * select * from test1
   */
  sqlText?: string;
  /**
   * @remarks
   * The point in time when the failed SQL statement was executed. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1643020306739
   */
  timestamp?: number;
  /**
   * @remarks
   * The username of the client that executes the SQL statement.
   * 
   * @example
   * test01
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      dbname: 'Dbname',
      errorCode: 'ErrorCode',
      origHost: 'OrigHost',
      sqlId: 'SqlId',
      sqlText: 'SqlText',
      timestamp: 'Timestamp',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbname: 'string',
      errorCode: 'string',
      origHost: 'string',
      sqlId: 'string',
      sqlText: 'string',
      timestamp: 'number',
      user: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorSampleResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The queried data.
   */
  list?: GetQueryOptimizeExecErrorSampleResponseBodyDataList[];
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  pageNo?: number;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 2
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetQueryOptimizeExecErrorSampleResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorStatsResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testdb01
   */
  dbname?: string;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * 1146
   */
  errorCode?: string;
  /**
   * @remarks
   * The number of errors.
   * 
   * @example
   * 10
   */
  errorCount?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The alias of the database instance.
   * 
   * @example
   * test01
   */
  instanceName?: string;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * @example
   * 2e8147b5ca2dfc640dfd5e43d96a****
   */
  sqlId?: string;
  /**
   * @remarks
   * The content of the SQL template.
   * 
   * @example
   * select * from test1
   */
  sqlText?: string;
  static names(): { [key: string]: string } {
    return {
      dbname: 'Dbname',
      errorCode: 'ErrorCode',
      errorCount: 'ErrorCount',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      sqlId: 'SqlId',
      sqlText: 'SqlText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbname: 'string',
      errorCode: 'string',
      errorCount: 'number',
      instanceId: 'string',
      instanceName: 'string',
      sqlId: 'string',
      sqlText: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeExecErrorStatsResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The information about the SQL templates that failed to execute.
   */
  list?: GetQueryOptimizeExecErrorStatsResponseBodyDataList[];
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 19
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetQueryOptimizeExecErrorStatsResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeRuleListResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The name of the tag.
   * 
   * @example
   * LARGE_ROWS_EXAMINED
   */
  name?: string;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  ruleId?: string;
  /**
   * @remarks
   * The type of the tag. **Predefined** is returned, which indicates that the tag is added by the system.
   * 
   * @example
   * Predefined
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
      ruleId: 'RuleId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      ruleId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeRuleListResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The information about tags.
   */
  list?: GetQueryOptimizeRuleListResponseBodyDataList[];
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  pageNo?: number;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetQueryOptimizeRuleListResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeSolutionResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The severity level. Valid values:
   * 
   * * **INFO**
   * * **WARN**
   * 
   * @example
   * INFO
   */
  level?: string;
  /**
   * @remarks
   * The tag ID.
   * 
   * @example
   * LARGE_ROWS_EXAMINED
   */
  ruleId?: string;
  /**
   * @remarks
   * The suggestion.
   * 
   * @example
   * LARGE_ROWS_EXAMINED_SOLUTION
   */
  solution?: string;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  solutionExt?: string;
  static names(): { [key: string]: string } {
    return {
      level: 'Level',
      ruleId: 'RuleId',
      solution: 'Solution',
      solutionExt: 'SolutionExt',
    };
  }

  static types(): { [key: string]: any } {
    return {
      level: 'string',
      ruleId: 'string',
      solution: 'string',
      solutionExt: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeSolutionResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  extra?: string;
  /**
   * @remarks
   * The optimization suggestions.
   */
  list?: GetQueryOptimizeSolutionResponseBodyDataList[];
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageNo?: number;
  /**
   * @remarks
   * The reserved parameter.
   * 
   * @example
   * None
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'Extra',
      list: 'List',
      pageNo: 'PageNo',
      pageSize: 'PageSize',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetQueryOptimizeSolutionResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetQueryOptimizeTagResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The remarks.
   * 
   * @example
   * Slow SQL queries of offline synchronization. No optimization is required.
   */
  comments?: string;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * @example
   * 651b56fe9418d48edb8fdf0980ec****
   */
  sqlId?: string;
  /**
   * @remarks
   * The SQL tags. Multiple tags are separated by commas (,).
   * 
   * @example
   * DAS_IN_PLAN,DAS_NOT_IMPORTANT
   */
  tags?: string;
  static names(): { [key: string]: string } {
    return {
      comments: 'Comments',
      sqlId: 'SqlId',
      tags: 'Tags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comments: 'string',
      sqlId: 'string',
      tags: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRedisAllSessionResponseBodyDataSessions extends $tea.Model {
  /**
   * @remarks
   * The IP address and port number of the client.
   * 
   * @example
   * 172.16.XX.XX:53458
   */
  addr?: string;
  /**
   * @remarks
   * The connection duration of the session. Unit: seconds.
   * 
   * @example
   * 12
   */
  age?: string;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 172.16.XX.XX
   */
  client?: string;
  /**
   * @remarks
   * The alias of the client.
   * 
   * @example
   * prod ip
   */
  clientDesc?: string;
  /**
   * @remarks
   * The command that was last run.
   * 
   * @example
   * PING
   */
  cmd?: string;
  /**
   * @remarks
   * The ID of the database that the client is using.
   * 
   * @example
   * 0
   */
  db?: number;
  /**
   * @remarks
   * The file descriptor event. Valid values:
   * 
   * *   **r**: Client sockets are readable in the event loop.
   * *   **w**: Client sockets are writable in the event loop.
   * 
   * @example
   * r
   */
  events?: string;
  /**
   * @remarks
   * The file descriptor that is used by sockets.
   * 
   * @example
   * 73
   */
  fd?: number;
  /**
   * @remarks
   * The client flag. Valid values:
   * 
   * *   **A**: The connection needs to be closed at the earliest opportunity.
   * *   **b**: The client is waiting for blocked events.
   * *   **c**: The connection is closed after all replies are written.
   * *   **d**: The monitored keys have been modified, and the `EXEC` command is about to fail.
   * *   **i**: The client is waiting for VM I/O operations. This value is no longer used.
   * *   **M**: The client is the primary node.
   * *   **N**: No special flags are configured.
   * *   **O**: The client is in monitor mode.
   * *   **r**: The client is a cluster node in read-only mode.
   * *   **S**: The client is a replica node in normal mode.
   * *   **u**: The client is not blocked.
   * *   **U**: The client is connected by using UNIX domain sockets.
   * *   **x**: The client is executing a transaction.
   * 
   * @example
   * N
   */
  flags?: string;
  /**
   * @remarks
   * The client ID.
   * 
   * @example
   * 9080586
   */
  id?: number;
  /**
   * @remarks
   * The duration during which the session is in the idle state. Unit: seconds.
   * 
   * @example
   * 8
   */
  idle?: number;
  /**
   * @remarks
   * The number of commands in `MULTI` or `EXEC`.
   * 
   * @example
   * -1
   */
  multi?: number;
  /**
   * @remarks
   * The name of the client.
   * 
   * @example
   * test
   */
  name?: string;
  /**
   * @remarks
   * The node ID.
   * 
   * @example
   * r-2zemyfd1sh1u2i****-proxy-14#1679****
   */
  nodeId?: string;
  /**
   * @remarks
   * The size of the fixed output buffer. Unit: bytes.
   * 
   * @example
   * 0
   */
  obl?: number;
  /**
   * @remarks
   * The number of objects contained in the output list.
   * 
   * @example
   * 0
   */
  oll?: number;
  /**
   * @remarks
   * The size of the output buffer. Unit: bytes.
   * 
   * @example
   * 0
   */
  omem?: number;
  /**
   * @remarks
   * The number of subscriptions that match the pattern.
   * 
   * @example
   * 0
   */
  psub?: number;
  /**
   * @remarks
   * The size of the input buffer. Unit: bytes.
   * 
   * @example
   * 0
   */
  qbuf?: number;
  /**
   * @remarks
   * The remaining size of the input buffer. Unit: bytes.
   * 
   * @example
   * 0
   */
  qbufFree?: number;
  /**
   * @remarks
   * The number of subscribed channels.
   * 
   * @example
   * 0
   */
  sub?: number;
  static names(): { [key: string]: string } {
    return {
      addr: 'Addr',
      age: 'Age',
      client: 'Client',
      clientDesc: 'ClientDesc',
      cmd: 'Cmd',
      db: 'Db',
      events: 'Events',
      fd: 'Fd',
      flags: 'Flags',
      id: 'Id',
      idle: 'Idle',
      multi: 'Multi',
      name: 'Name',
      nodeId: 'NodeId',
      obl: 'Obl',
      oll: 'Oll',
      omem: 'Omem',
      psub: 'Psub',
      qbuf: 'Qbuf',
      qbufFree: 'QbufFree',
      sub: 'Sub',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addr: 'string',
      age: 'string',
      client: 'string',
      clientDesc: 'string',
      cmd: 'string',
      db: 'number',
      events: 'string',
      fd: 'number',
      flags: 'string',
      id: 'number',
      idle: 'number',
      multi: 'number',
      name: 'string',
      nodeId: 'string',
      obl: 'number',
      oll: 'number',
      omem: 'number',
      psub: 'number',
      qbuf: 'number',
      qbufFree: 'number',
      sub: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRedisAllSessionResponseBodyDataSourceStats extends $tea.Model {
  /**
   * @remarks
   * The total number of sessions from the access source.
   * 
   * @example
   * 1
   */
  count?: string;
  /**
   * @remarks
   * The client IDs.
   */
  ids?: number[];
  /**
   * @remarks
   * The access source.
   * 
   * @example
   * 172.16.XX.XX
   */
  key?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      ids: 'Ids',
      key: 'Key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'string',
      ids: { 'type': 'array', 'itemType': 'number' },
      key: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRedisAllSessionResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The information about the sessions.
   */
  sessions?: GetRedisAllSessionResponseBodyDataSessions[];
  /**
   * @remarks
   * The statistics on the access source.
   */
  sourceStats?: GetRedisAllSessionResponseBodyDataSourceStats[];
  /**
   * @remarks
   * The time when the instance sessions were returned. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1660100753556
   */
  timestamp?: number;
  /**
   * @remarks
   * The total number of sessions.
   * 
   * @example
   * 2
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      sessions: 'Sessions',
      sourceStats: 'SourceStats',
      timestamp: 'Timestamp',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sessions: { 'type': 'array', 'itemType': GetRedisAllSessionResponseBodyDataSessions },
      sourceStats: { 'type': 'array', 'itemType': GetRedisAllSessionResponseBodyDataSourceStats },
      timestamp: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisPageResponseBodyDataList extends $tea.Model {
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 2093****
   */
  accountId?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * das
   */
  dbSchema?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * * **MySQL**
   * * **PostgreSQL**
   * * **SQLServer**
   * * **PolarDBMySQL**
   * * **PolarDBOracle**
   * * **MongoDB**
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The time when the SQL diagnostics task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1633071840000
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the SQL diagnostics task was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1633071850000
   */
  gmtModified?: string;
  /**
   * @remarks
   * The unique ID of the diagnostics task.
   * 
   * @example
   * 61820b594664275c4429****
   */
  messageId?: string;
  /**
   * @remarks
   * Additional information.
   * 
   * @example
   * {"":""}
   */
  param?: string;
  /**
   * @remarks
   * The result of the SQL diagnostics task. The result includes the following information:
   * 
   * * **endTime**: the end time of the SQL diagnostics task.
   * * **errorCode**: indicates whether the SQL diagnostics task is complete. Valid values:
   *   * **0001**: The SQL diagnostics task is complete.
   *   * **0003**: The SQL diagnostics task failed.
   * 
   * * **errorMessage**: the error message.
   * * **estimateCost**: the estimated cost.
   *   * **cpu**: the estimated CPU utilization of the index.
   *   * **io**: the estimated I/O usage of the index.
   *   * **rows**: the estimated values of the rows returned for the index.
   * * **improvement**: the performance improvement ratio.
   * * **indexAdvices**: the index recommendations, which include the following information:
   *   * **columns**: the index columns.
   *   * **ddlAddIndex**: the DDL statement for the index.
   *   * **indexName**: the name of the index.
   *   * **schemaName**: the name of the database.
   *   * **tableName**: the name of the table.
   *   * **unique**: indicates whether the index is unique.
   * 
   * * **ip**: the IP address of the instance.
   * * **messageId**: the ID of the diagnostics task.
   * * **port**: the port used to connect to the instance.
   * * **sqlTag**: the SQL tag.
   * * **startTime**: the start time of the SQL diagnostics task.
   * * **success**: indicates whether the request was successful.
   * * **support**: indicates whether the SQL statement can be diagnosed. Valid values:
   *   * **true**: The SQL statement can be diagnosed.
   *   * **false**: The SQL statement cannot be diagnosed.
   * 
   * * **tuningAdvices**: the SQL rewrite suggestions.
   * 
   * @example
   * { "endTime":1636354256000, "errorCode":"0001", "errorMessage":"TFX Successful", "estimateCost":{ "cpu":1.7878745150389268, "io":9.948402604746128, "rows":8.889372575194633 }, "improvement":12933.97, "indexAdvices":[ { "columns":[ "work_no" ], "ddlAddIndex":"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)", "indexName":"idx_workno", "schemaName":"test", "tableName":"work_order", "unique":false } ], "ip":"****.mysql.rds.aliyuncs.com", "messageId":"6188c8cb2f1365b16aee****", "port":3306, "sqlTag":"{\\"PRED_EQUAL\\":\\"Y\\",\\"CNT_QB\\":\\"1\\",\\"CNT_TB\\":\\"1\\"}", "startTime":1636354252000, "success":true, "support":true, "tuningAdvices":[ ] }
   */
  result?: string;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * @example
   * 0c95dae3afef77be06572612df9b****
   */
  sqlId?: string;
  /**
   * @remarks
   * The status of the diagnostics task. Valid values:
   * 
   * * **0**: The diagnostics task is in progress.
   * 
   * * **1**: A diagnostics error occurred.
   * 
   * * **2**: The diagnostics task is complete.
   * 
   * * **3**: An SQL error occurred.
   * 
   * * **4**: An engine error occurred.
   * 
   * @example
   * 2
   */
  state?: number;
  /**
   * @remarks
   * The unique ID of the diagnostics instance.
   * 
   * @example
   * hdm_51fe9bc19ec413f4d530431af87a****
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      accountId: 'accountId',
      dbSchema: 'dbSchema',
      engine: 'engine',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      messageId: 'messageId',
      param: 'param',
      result: 'result',
      sqlId: 'sqlId',
      state: 'state',
      uuid: 'uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountId: 'string',
      dbSchema: 'string',
      engine: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      messageId: 'string',
      param: 'string',
      result: 'string',
      sqlId: 'string',
      state: 'number',
      uuid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisPageResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Additional information.
   * 
   * @example
   * {"":""}
   */
  extra?: string;
  /**
   * @remarks
   * The SQL diagnostics records returned.
   */
  list?: GetRequestDiagnosisPageResponseBodyDataList[];
  /**
   * @remarks
   * The page number. The value must be a positive integer. Default value: 1.
   * 
   * @example
   * 1
   */
  pageNo?: number;
  /**
   * @remarks
   * The number of entries per page. The value must be a positive integer. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of returned entries.
   * 
   * @example
   * 100
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      extra: 'extra',
      list: 'list',
      pageNo: 'pageNo',
      pageSize: 'pageSize',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extra: 'string',
      list: { 'type': 'array', 'itemType': GetRequestDiagnosisPageResponseBodyDataList },
      pageNo: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRequestDiagnosisResultResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 2093****
   */
  accountId?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * das
   */
  dbSchema?: string;
  /**
   * @remarks
   * The database engine. Valid values:
   * 
   * *   **MySQL**
   * *   **PostgreSQL**
   * *   **SQLServer**
   * *   **PolarDBMySQL**
   * *   **PolarDBOracle**
   * *   **MongoDB**
   * 
   * @example
   * MySQL
   */
  engine?: string;
  /**
   * @remarks
   * The time when the SQL diagnostics task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1633071840000
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the SQL diagnostics task was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1633071850000
   */
  gmtModified?: string;
  /**
   * @remarks
   * The unique ID of the diagnostics task.
   * 
   * @example
   * 61820b594664275c4429****
   */
  messageId?: string;
  /**
   * @remarks
   * The additional information.
   * 
   * @example
   * {"":""}
   */
  param?: string;
  /**
   * @remarks
   * The result of the SQL diagnostics task. The result includes the following information:
   * 
   * *   **endTime**: the end time of the SQL diagnostics task.
   * 
   * *   **errorCode**: the error code.
   * 
   *     *   **0001**: The SQL diagnostics task is complete.
   *     *   **0003**: The SQL diagnostics task failed.
   * 
   * *   **errorMessage**: the error message.
   * 
   * *   **estimateCost**: the estimated cost.
   * 
   *     *   **cpu**: the estimated CPU utilization of the index.
   *     *   **io**: the estimated I/O usage of the index.
   *     *   **rows**: the estimated values of the rows returned for the index.
   * 
   * *   **improvement**: the performance improvement ratio.
   * 
   * *   **indexAdvices**: the index recommendations, which include the following information:
   * 
   *     *   **columns**: the index columns.
   *     *   **ddlAddIndex**: the DDL statement for the index.
   *     *   **indexName**: the name of the index.
   *     *   **schemaName**: the name of the database.
   *     *   **tableName**: the name of the table.
   *     *   **unique**: indicates whether the index is unique.
   * 
   * *   **ip**: the IP address of the instance.
   * 
   * *   **messageId**: the ID of the diagnostics task.
   * 
   * *   **port**: the port used to connect to the instance.
   * 
   * *   **sqlTag**: the SQL tag.
   * 
   * *   **startTime**: the start time of the SQL diagnostics task.
   * 
   * *   **success**: indicates whether the request was successful.
   * 
   * *   **support**: indicates whether the SQL statement can be diagnosed. Valid values:
   * 
   *     *   **true**
   *     *   **false**
   * 
   * *   **tuningAdvices** : the SQL rewrite suggestions.
   * 
   * @example
   * { "endTime":1636354256000, "errorCode":"0001", "errorMessage":"TFX succeeded", "estimateCost":{ "cpu":1.7878745150389268, "io":9.948402604746128, "rows":8.889372575194633 }, "improvement":12933.97, "indexAdvices":[ { "columns":[ "work_no" ], "ddlAddIndex":"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)", "indexName":"idx_workno", "schemaName":"test", "tableName":"work_order", "unique":false } ], "ip":"****.mysql.rds.aliyuncs.com", "messageId":"6188c8cb2f1365b16aee****", "port":3306, "sqlTag":"{\\"PRED_EQUAL\\":\\"Y\\",\\"CNT_QB\\":\\"1\\",\\"CNT_TB\\":\\"1\\"}", "startTime":1636354252000, "success":true, "support":true, "tuningAdvices":[ ] }
   */
  result?: string;
  /**
   * @remarks
   * The SQL template ID.
   * 
   * @example
   * 0c95dae3afef77be06572612df9b****
   */
  sqlId?: string;
  /**
   * @remarks
   * The state of the diagnostics task. Valid values:
   * 
   * *   **0**: The diagnostics task is in progress.
   * *   **1**: A diagnostics error occurred.
   * *   **2**: The diagnostics task is complete.
   * *   **3**: An SQL error occurred.
   * *   **4**: An engine error occurred.
   * 
   * @example
   * 2
   */
  state?: number;
  /**
   * @remarks
   * The unique ID of the diagnostics instance.
   * 
   * @example
   * hdm_51fe9bc19ec413f4d530431af87a****
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      accountId: 'accountId',
      dbSchema: 'dbSchema',
      engine: 'engine',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      messageId: 'messageId',
      param: 'param',
      result: 'result',
      sqlId: 'sqlId',
      state: 'state',
      uuid: 'uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountId: 'string',
      dbSchema: 'string',
      engine: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      messageId: 'string',
      param: 'string',
      result: 'string',
      sqlId: 'string',
      state: 'number',
      uuid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules extends $tea.Model {
  /**
   * @remarks
   * The duration within which the SQL throttling rule takes effect. Unit: seconds.
   * 
   * > The throttling rule takes effect only within this duration.
   * 
   * @example
   * 600
   */
  concurrencyControlTime?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the throttling rule that is applied to the instance.
   * 
   * @example
   * 16
   */
  itemId?: number;
  /**
   * @remarks
   * The hash value of the SQL keywords. The hash value is calculated based on the SQL keywords that are contained in the SQL statements to which the throttling rule is applied.
   * 
   * @example
   * b0b8aceeb43baea87b219c81767b****
   */
  keywordsHash?: string;
  /**
   * @remarks
   * The maximum number of concurrent SQL statements. The value is a positive integer.
   * 
   * > If the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
   * 
   * @example
   * 2
   */
  maxConcurrency?: string;
  /**
   * @remarks
   * The keywords contained in the SQL statements to which the throttling rule was applied.
   * 
   * > SQL keywords are separated by tildes (~). If the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
   * 
   * @example
   * call~open~api~test~4~from~POP
   */
  sqlKeywords?: string;
  /**
   * @remarks
   * The type of the SQL statements. Valid values:
   * 
   * * **SELECT**
   * * **UPDATE**
   * * **DELETE**
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The time when the throttling rule started to take effect. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  startTime?: number;
  /**
   * @remarks
   * The status of the throttling rule. The value of **Open** indicates that the throttling rule is in effect.
   * 
   * @example
   * Open
   */
  status?: string;
  /**
   * @remarks
   * The Alibaba Cloud account ID.
   * 
   * @example
   * testxxx
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      concurrencyControlTime: 'ConcurrencyControlTime',
      instanceId: 'InstanceId',
      itemId: 'ItemId',
      keywordsHash: 'KeywordsHash',
      maxConcurrency: 'MaxConcurrency',
      sqlKeywords: 'SqlKeywords',
      sqlType: 'SqlType',
      startTime: 'StartTime',
      status: 'Status',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrencyControlTime: 'number',
      instanceId: 'string',
      itemId: 'number',
      keywordsHash: 'string',
      maxConcurrency: 'string',
      sqlKeywords: 'string',
      sqlType: 'string',
      startTime: 'number',
      status: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRunningSqlConcurrencyControlRulesResponseBodyDataList extends $tea.Model {
  runningRules?: GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules[];
  static names(): { [key: string]: string } {
    return {
      runningRules: 'runningRules',
    };
  }

  static types(): { [key: string]: any } {
    return {
      runningRules: { 'type': 'array', 'itemType': GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRunningSqlConcurrencyControlRulesResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The returned data.
   */
  list?: GetRunningSqlConcurrencyControlRulesResponseBodyDataList;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 2
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: GetRunningSqlConcurrencyControlRulesResponseBodyDataList,
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules extends $tea.Model {
  /**
   * @remarks
   * The duration within which the SQL throttling rule takes effect. Unit: seconds.
   * 
   * >  The throttling rule takes effect only within this duration.
   * 
   * @example
   * 600
   */
  concurrencyControlTime?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze1jdv45i7l6****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the throttling rule that is applied to the instance.
   * 
   * @example
   * 16
   */
  itemId?: number;
  /**
   * @remarks
   * The hash value of the SQL keywords. The SQL keywords are contained in the SQL statements to which the throttling rule is applied.
   * 
   * @example
   * b0b8aceeb43baea87b219c81767b****
   */
  keywordsHash?: string;
  /**
   * @remarks
   * The maximum number of concurrent SQL statements. Set this parameter to a positive integer.
   * 
   * >  When the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
   * 
   * @example
   * 2
   */
  maxConcurrency?: number;
  /**
   * @remarks
   * The keywords that are used to identify the SQL statements that need to be throttled.
   * 
   * > SQL keywords are separated with tildes (~). When the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
   * 
   * @example
   * call~open~api~test~4~from~POP
   */
  sqlKeywords?: string;
  /**
   * @remarks
   * The type of the SQL statements. Valid values:
   * 
   * * **SELECT**
   * * **UPDATE**
   * * **DELETE**
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1608888296000
   */
  startTime?: number;
  /**
   * @remarks
   * The state of the throttling rule. Valid values:
   * 
   * * **Open**: The throttling rule is in effect.
   * * **Closed**: The throttling rule was in effect.
   * 
   * @example
   * Open
   */
  status?: string;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * testxxx
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      concurrencyControlTime: 'ConcurrencyControlTime',
      instanceId: 'InstanceId',
      itemId: 'ItemId',
      keywordsHash: 'KeywordsHash',
      maxConcurrency: 'MaxConcurrency',
      sqlKeywords: 'SqlKeywords',
      sqlType: 'SqlType',
      startTime: 'StartTime',
      status: 'Status',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrencyControlTime: 'number',
      instanceId: 'string',
      itemId: 'number',
      keywordsHash: 'string',
      maxConcurrency: 'number',
      sqlKeywords: 'string',
      sqlType: 'string',
      startTime: 'number',
      status: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlRulesHistoryResponseBodyDataList extends $tea.Model {
  rules?: GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules[];
  static names(): { [key: string]: string } {
    return {
      rules: 'rules',
    };
  }

  static types(): { [key: string]: any } {
    return {
      rules: { 'type': 'array', 'itemType': GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlConcurrencyControlRulesHistoryResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The list of the queried throttling rules.
   */
  list?: GetSqlConcurrencyControlRulesHistoryResponseBodyDataList;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 4
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: GetSqlConcurrencyControlRulesHistoryResponseBodyDataList,
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSqlOptimizeAdviceResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The time when the task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1632303861000
   */
  createTime?: string;
  /**
   * @remarks
   * The URL that is used to download the file.
   * 
   * @example
   * https://das-sql-optimize.oss-cn-shanghai.aliyuncs.com/adb/oss_sql_optimize_advice/1083*******
   */
  downloadUrl?: string;
  /**
   * @remarks
   * The time when the file expires. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * >  The file expires three days after the task is created.
   * 
   * @example
   * 1632563061000
   */
  expireTime?: string;
  /**
   * @remarks
   * The status of the task. Valid values:
   * 
   * *   **INIT**: The task is being initialized.
   * *   **RUNNING**: The task is running.
   * *   **FINISH**: The task is complete.
   * *   **FAILED**: The task failed.
   * 
   * @example
   * FINISH
   */
  status?: string;
  /**
   * @remarks
   * The status code of the task. Valid values:
   * 
   * *   **NO_DATA**: No data is returned.
   * *   **INTERNAL_ERROR**: An internal error occurred.
   * *   **SUCCESS**: The task is successful.
   * 
   * @example
   * SUCCESS
   */
  statusCode?: string;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * 2021091710461519216****
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      downloadUrl: 'DownloadUrl',
      expireTime: 'ExpireTime',
      status: 'Status',
      statusCode: 'StatusCode',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      downloadUrl: 'string',
      expireTime: 'string',
      status: 'string',
      statusCode: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList extends $tea.Model {
  /**
   * @remarks
   * The data associated with the items to be optimized, which is in the JSON format.
   * 
   * @example
   * {
   *     "autoIncrementCurrentValue": 2147483647,
   *     "autoIncrementRatio": 1,
   *     "dbName": "testdb01",
   *     "maximumValue": 2147483647,
   *     "columnName": "id",
   *     "tableName": "test_table"
   * }
   */
  associatedData?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testdb01
   */
  dbName?: string;
  /**
   * @remarks
   * The optimization suggestion. Valid values:
   * 
   * *   **NEED_ANALYZE_TABLE**: You can execute the `ANALYZE TABLE` statement on the table during off-peak hours. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   **NEED_OPTIMIZE_TABLE**: You can reclaim fragments during off-peak hours.
   * *   **CHANGE_TABLE_ENGINE_IF_NECESSARY**: Change the storage engine type of a table after risk assessment. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   **AUTO_INCREMENT_ID_BE_TO_RUN_OUT**: Pay attention to the usage of auto-increment IDs. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   **DUPLICATE_INDEX**: Optimize indexes of tables. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   **TABLE_SIZE**: Pay attention to the table size. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   **TABLE_ROWS_AND_AVG_ROW_LENGTH**: Pay attention to the number of rows in a table and the average row length. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   **STORAGE_USED_PERCENT**: Pay attention to the space usage to prevent the instance from being locked if the instance is full.
   * 
   * @example
   * NEED_OPTIMIZE_TABLE
   */
  optimizeAdvice?: string;
  /**
   * @remarks
   * The item to be optimized. Valid values:
   * 
   * *   **NEED_ANALYZE_TABLE**: tables whose storage statistics obtained from `information_schema.tables` are 50 GB larger or smaller than the physical file sizes. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * *   **NEED_OPTIMIZE_TABLE**: tables whose space fragments are larger than 6 GB and whose fragmentation rates are greater than 30%. The fragmentation rate of a table is generally calculated based on the following formulas:
   * 
   *     *   ApsaraDB RDS for MySQL and PolarDB for MySQL: `Fragmentation rate = DataFree/(DataSize + IndexSize + DataFree)`. In this topic, PhyTotalSize = DataSize + IndexSize + DataFree. Thus, the fragmentation rate can be calculated based on the following formula: `Fragmentation rate = DataFree/PhyTotalSize`.
   *     *   ApsaraDB for MongoDB: `Fragmentation rate = FragmentSize/PhyTotalSize`.
   * 
   * *   **TABLE_ENGINE**: tables whose storage engines are not InnoDB or XEngine. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * *   **AUTO_INCREMENT_ID_BE_TO_RUN_OUT**: tables whose usages of auto-increment IDs exceed 80%. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * *   **DUPLICATE_INDEX**: tables whose indexes are redundant or duplicate. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * *   **TABLE_SIZE**: single tables whose sizes are larger than 50 GB. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * *   **TABLE_ROWS_AND_AVG_ROW_LENGTH**: single tables that contain more than 5 million rows and whose average row lengths exceed 10 KB. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * *   **TOTAL_DATA_FREE**: instances whose reclaimable space is larger than 60 GB and whose total fragmentation rate is larger than 5%.
   * 
   * *   **STORAGE_USED_PERCENT**: instances whose space usage is larger than 90%.
   * 
   * @example
   * NEED_OPTIMIZE_TABLE
   */
  optimizeItemName?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      associatedData: 'AssociatedData',
      dbName: 'DbName',
      optimizeAdvice: 'OptimizeAdvice',
      optimizeItemName: 'OptimizeItemName',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      associatedData: 'string',
      dbName: 'string',
      optimizeAdvice: 'string',
      optimizeItemName: 'string',
      tableName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats extends $tea.Model {
  /**
   * @remarks
   * The average length of rows. Unit: bytes.
   * 
   * @example
   * 154
   */
  avgRowLength?: number;
  /**
   * @remarks
   * The size of space fragments. Unit: bytes.
   * 
   * >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters. The fragmentation rate of a table is generally calculated based on the following formula: `Fragmentation rate = DataFree/(DataSize + IndexSize + DataFree)`. In this topic, `Fragmentation rate = DataFree/PhyTotalSize`.
   * 
   * @example
   * 7340032
   */
  dataFree?: number;
  /**
   * @remarks
   * *   For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this parameter indicates the amount of space occupied by data. Unit: bytes.
   * *   For ApsaraDB for MongoDB instances, this parameter indicates the size of uncompressed data, that is, the amount of data. Unit: bytes.
   * 
   * @example
   * 1982857216
   */
  dataSize?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * testdb01
   */
  dbName?: string;
  /**
   * @remarks
   * The type of the storage engine used by the table.
   * 
   * >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * @example
   * InnoDB
   */
  engine?: string;
  /**
   * @remarks
   * The size of space that can be reclaimed. Unit: bytes.
   * 
   * >  This parameter is applicable only to ApsaraDB for MongoDB instances. `Fragmentation rate = FragmentSize/PhyTotalSize`.
   * 
   * @example
   * 362221568
   */
  fragmentSize?: number;
  /**
   * @remarks
   * The storage space occupied by indexes. Unit: bytes.
   * 
   * @example
   * 1022296064
   */
  indexSize?: number;
  /**
   * @remarks
   * The storage space of the table. Unit: bytes.
   * 
   * >  For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, the value of the parameter is the sum of **DataSize**, **IndexSize**, and **DataFree**. For ApsaraDB for MongoDB instances, the value of this parameter is the sum of **DataSize** and **IndexSize**.
   * 
   * @example
   * 3012493312
   */
  phyTotalSize?: number;
  /**
   * @remarks
   * The physical file size of the table. Unit: bytes.
   * 
   * >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters. Data of specific database instances cannot be obtained due to deployment mode.
   * 
   * @example
   * 3057655808
   */
  physicalFileSize?: number;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @remarks
   * The number of rows in the table.
   * 
   * @example
   * 12794732
   */
  tableRows?: number;
  /**
   * @remarks
   * The type of the table.
   * 
   * >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * 
   * @example
   * BASE TABLE
   */
  tableType?: string;
  /**
   * @remarks
   * *   For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this parameter indicates the amount of space occupied by table data and indexes. Unit: bytes. The value is the sum of **DataSize** and **IndexSize**.
   * *   For ApsaraDB for MongoDB instances, this parameter indicates the actual size of space allocated by Block Manager. Unit: Bytes. The compression ratio of an ApsaraDB for MongoDB instance is calculated based on the following formula: `Compression ratio = TotalSize/DataSize`.
   * 
   * @example
   * 3005153280
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      avgRowLength: 'AvgRowLength',
      dataFree: 'DataFree',
      dataSize: 'DataSize',
      dbName: 'DbName',
      engine: 'Engine',
      fragmentSize: 'FragmentSize',
      indexSize: 'IndexSize',
      phyTotalSize: 'PhyTotalSize',
      physicalFileSize: 'PhysicalFileSize',
      tableName: 'TableName',
      tableRows: 'TableRows',
      tableType: 'TableType',
      totalSize: 'TotalSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avgRowLength: 'number',
      dataFree: 'number',
      dataSize: 'number',
      dbName: 'string',
      engine: 'string',
      fragmentSize: 'number',
      indexSize: 'number',
      phyTotalSize: 'number',
      physicalFileSize: 'number',
      tableName: 'string',
      tableRows: 'number',
      tableType: 'string',
      totalSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult extends $tea.Model {
  /**
   * @remarks
   * The reason why the analysis on the database and table fails.
   * 
   * *   **DB_OR_TABLE_NOT_EXIST**: The specified database or table does not exist.
   * *   **DB_NOT_EXIST**: The specified database does not exist.
   * 
   * @example
   * DB_NOT_EXIST
   */
  analysisErrorType?: string;
  /**
   * @remarks
   * Indicates whether the analysis on the database and table is successful.
   * 
   * @example
   * true
   */
  analysisSuccess?: boolean;
  /**
   * @remarks
   * The estimated average daily growth of the used storage space in the previous seven days. Unit: bytes.
   * 
   * @example
   * 0
   */
  dailyIncrement?: number;
  /**
   * @remarks
   * The estimated number of days for which the remaining storage space is available.
   * 
   * @example
   * 99
   */
  estimateAvailableDays?: number;
  /**
   * @remarks
   * The items to be optimized, which are generated based on DAS default rules. You can ignore these items based on your business requirements, and create custom rules to generate items to be optimized based on other basic data that is returned.
   */
  needOptimizeItemList?: GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList[];
  /**
   * @remarks
   * The information about the table.
   */
  tableStats?: GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats[];
  /**
   * @remarks
   * The size of remaining storage.
   * 
   * >  Unit: bytes.
   * 
   * @example
   * 146403229696
   */
  totalFreeStorageSize?: number;
  /**
   * @remarks
   * The total size of instance storage.
   * 
   * >  Unit: bytes.
   * 
   * @example
   * 214748364800
   */
  totalStorageSize?: number;
  /**
   * @remarks
   * The size of used storage.
   * 
   * >  Unit: bytes.
   * 
   * @example
   * 68345135104
   */
  totalUsedStorageSize?: number;
  static names(): { [key: string]: string } {
    return {
      analysisErrorType: 'AnalysisErrorType',
      analysisSuccess: 'AnalysisSuccess',
      dailyIncrement: 'DailyIncrement',
      estimateAvailableDays: 'EstimateAvailableDays',
      needOptimizeItemList: 'NeedOptimizeItemList',
      tableStats: 'TableStats',
      totalFreeStorageSize: 'TotalFreeStorageSize',
      totalStorageSize: 'TotalStorageSize',
      totalUsedStorageSize: 'TotalUsedStorageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      analysisErrorType: 'string',
      analysisSuccess: 'boolean',
      dailyIncrement: 'number',
      estimateAvailableDays: 'number',
      needOptimizeItemList: { 'type': 'array', 'itemType': GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList },
      tableStats: { 'type': 'array', 'itemType': GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats },
      totalFreeStorageSize: 'number',
      totalStorageSize: 'number',
      totalUsedStorageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStorageAnalysisResultResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The number of databases that have been analyzed.
   * 
   * @example
   * 2
   */
  analyzedDbCount?: number;
  /**
   * @remarks
   * The details of storage analysis.
   */
  storageAnalysisResult?: GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult;
  /**
   * @remarks
   * Indicates whether the task is complete.
   * 
   * @example
   * true
   */
  taskFinish?: boolean;
  /**
   * @remarks
   * The task ID.
   * 
   * @example
   * 910f83f4b96df0524ddc5749f615****
   */
  taskId?: string;
  /**
   * @remarks
   * The task progress.
   * 
   * >  Valid values are integers that range from 0 to 100.
   * 
   * @example
   * 50
   */
  taskProgress?: number;
  /**
   * @remarks
   * The status of the storage analysis task. Valid values:
   * 
   * *   **INIT**: The task is being initialized.
   * *   **PENDING**: The task is being queued for execution.
   * *   **RECEIVED**: The task is received for execution.
   * *   **RUNNING**: The task is being executed.
   * *   **RETRY**: The task is being retried.
   * *   **SUCCESS**: The task succeeds.
   * *   **FAILURE**: The task fails.
   * 
   * @example
   * RUNNING
   */
  taskState?: string;
  /**
   * @remarks
   * Indicates whether the task is successful.
   * 
   * @example
   * true
   */
  taskSuccess?: boolean;
  /**
   * @remarks
   * The number of databases that need to be analyzed in the storage analysis task.
   * 
   * @example
   * 32
   */
  totalDbCount?: number;
  static names(): { [key: string]: string } {
    return {
      analyzedDbCount: 'AnalyzedDbCount',
      storageAnalysisResult: 'StorageAnalysisResult',
      taskFinish: 'TaskFinish',
      taskId: 'TaskId',
      taskProgress: 'TaskProgress',
      taskState: 'TaskState',
      taskSuccess: 'TaskSuccess',
      totalDbCount: 'TotalDbCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      analyzedDbCount: 'number',
      storageAnalysisResult: GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult,
      taskFinish: 'boolean',
      taskId: 'string',
      taskProgress: 'number',
      taskState: 'string',
      taskSuccess: 'boolean',
      totalDbCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigRequestBandwidth extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to apply the **Bandwidth** configuration of the bandwidth auto scaling feature. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  apply?: boolean;
  /**
   * @remarks
   * The average bandwidth usage threshold that triggers automatic bandwidth downgrade. Unit: %. Valid values:
   * 
   * *   **10**
   * *   **20**
   * *   **30**
   * 
   * @example
   * 30
   * 
   * **if can be null:**
   * true
   */
  bandwidthUsageLowerThreshold?: number;
  /**
   * @remarks
   * The average bandwidth usage threshold that triggers automatic bandwidth upgrade. Unit: %. Valid values:
   * 
   * *   **50**
   * *   **60**
   * *   **70**
   * *   **80**
   * *   **90**
   * *   **95**
   * 
   * @example
   * 70
   * 
   * **if can be null:**
   * true
   */
  bandwidthUsageUpperThreshold?: number;
  /**
   * @remarks
   * Specifies whether to enable automatic bandwidth downgrade. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  downgrade?: boolean;
  /**
   * @remarks
   * The observation window of the bandwidth auto scaling feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
   * 
   * *   **1m**
   * *   **5m**
   * *   **10m**
   * *   **15m**
   * *   **30m**
   * 
   * @example
   * 5m
   * 
   * **if can be null:**
   * true
   */
  observationWindowSize?: string;
  /**
   * @remarks
   * Specifies whether to enable automatic bandwidth upgrade. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  upgrade?: boolean;
  static names(): { [key: string]: string } {
    return {
      apply: 'Apply',
      bandwidthUsageLowerThreshold: 'BandwidthUsageLowerThreshold',
      bandwidthUsageUpperThreshold: 'BandwidthUsageUpperThreshold',
      downgrade: 'Downgrade',
      observationWindowSize: 'ObservationWindowSize',
      upgrade: 'Upgrade',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apply: 'boolean',
      bandwidthUsageLowerThreshold: 'number',
      bandwidthUsageUpperThreshold: 'number',
      downgrade: 'boolean',
      observationWindowSize: 'string',
      upgrade: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigRequestResource extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to apply the **Resource** configuration of the resource auto scaling feature. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   * 
   * **if can be null:**
   * false
   */
  apply?: boolean;
  /**
   * @remarks
   * The average CPU utilization threshold that triggers automatic resource scale-out. Unit: %. Valid values:
   * 
   * *   **70**
   * *   **80**
   * *   **90**
   * 
   * @example
   * 70
   * 
   * **if can be null:**
   * true
   */
  cpuUsageUpperThreshold?: number;
  /**
   * @remarks
   * The observation window of the automatic resource scale-in feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
   * 
   * *   **1m**
   * *   **3m**
   * *   **5m**
   * *   **10m**
   * *   **20m**
   * *   **30m**
   * 
   * @example
   * 5m
   * 
   * **if can be null:**
   * true
   */
  downgradeObservationWindowSize?: string;
  /**
   * @remarks
   * Specifies whether to enable resource auto scaling. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   * 
   * **if can be null:**
   * false
   */
  enable?: boolean;
  /**
   * @remarks
   * The observation window of the automatic resource scale-out feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
   * 
   * *   **1m**
   * *   **3m**
   * *   **5m**
   * *   **10m**
   * *   **20m**
   * *   **30m**
   * 
   * @example
   * 5m
   * 
   * **if can be null:**
   * true
   */
  upgradeObservationWindowSize?: string;
  static names(): { [key: string]: string } {
    return {
      apply: 'Apply',
      cpuUsageUpperThreshold: 'CpuUsageUpperThreshold',
      downgradeObservationWindowSize: 'DowngradeObservationWindowSize',
      enable: 'Enable',
      upgradeObservationWindowSize: 'UpgradeObservationWindowSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apply: 'boolean',
      cpuUsageUpperThreshold: 'number',
      downgradeObservationWindowSize: 'string',
      enable: 'boolean',
      upgradeObservationWindowSize: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigRequestShard extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to apply the **Shard** configuration of the shard auto scaling feature. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * >  The shard auto scaling feature is available only for Tair (Redis OSS-compatible) cloud-native cluster instances on the China site (aliyun.com).
   * 
   * @example
   * true
   */
  apply?: boolean;
  /**
   * @remarks
   * Specifies whether to enable automatic shard removal. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * >  The automatic shard removal feature is in a canary release.
   * 
   * @example
   * true
   */
  downgrade?: boolean;
  /**
   * @remarks
   * The observation window of the automatic shard removal feature. The value of this parameter consists of a numeric value and a time unit suffix. The **h** time unit suffix specifies the hour. The **d** time unit suffix specifies the day. Valid values:
   * 
   * *   **1h**
   * *   **2h**
   * *   **3h**
   * *   **1d**
   * *   **7d**
   * 
   * @example
   * 1h
   * 
   * **if can be null:**
   * true
   */
  downgradeObservationWindowSize?: string;
  /**
   * @remarks
   * The maximum number of shards in the instance. The value must be a positive integer. Valid values: 4 to 32.
   * 
   * @example
   * 16
   * 
   * **if can be null:**
   * true
   */
  maxShards?: number;
  /**
   * @remarks
   * The average memory usage threshold that triggers automatic shard removal. Unit: %. Valid values:
   * 
   * *   **10**
   * *   **20**
   * *   **30**
   * 
   * @example
   * 30
   * 
   * **if can be null:**
   * true
   */
  memUsageLowerThreshold?: number;
  /**
   * @remarks
   * The average memory usage threshold that triggers automatic shard addition. Unit: %. Valid values:
   * 
   * *   **50**
   * *   **60**
   * *   **70**
   * *   **80**
   * *   **90**
   * 
   * @example
   * 70
   * 
   * **if can be null:**
   * true
   */
  memUsageUpperThreshold?: number;
  /**
   * @remarks
   * The minimum number of shards in the instance. The value must be a positive integer. Valid values: 4 to 32.
   * 
   * @example
   * 4
   * 
   * **if can be null:**
   * true
   */
  minShards?: number;
  /**
   * @remarks
   * Specifies whether to enable automatic shard addition. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  upgrade?: boolean;
  /**
   * @remarks
   * The observation window of the automatic shard addition feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
   * 
   * *   **5m**
   * *   **10m**
   * *   **15m**
   * *   **30m**
   * 
   * @example
   * 5m
   * 
   * **if can be null:**
   * true
   */
  upgradeObservationWindowSize?: string;
  static names(): { [key: string]: string } {
    return {
      apply: 'Apply',
      downgrade: 'Downgrade',
      downgradeObservationWindowSize: 'DowngradeObservationWindowSize',
      maxShards: 'MaxShards',
      memUsageLowerThreshold: 'MemUsageLowerThreshold',
      memUsageUpperThreshold: 'MemUsageUpperThreshold',
      minShards: 'MinShards',
      upgrade: 'Upgrade',
      upgradeObservationWindowSize: 'UpgradeObservationWindowSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apply: 'boolean',
      downgrade: 'boolean',
      downgradeObservationWindowSize: 'string',
      maxShards: 'number',
      memUsageLowerThreshold: 'number',
      memUsageUpperThreshold: 'number',
      minShards: 'number',
      upgrade: 'boolean',
      upgradeObservationWindowSize: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigRequestSpec extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to apply the **Spec** configuration of the specification auto scaling feature. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  apply?: boolean;
  /**
   * @remarks
   * The quiescent period. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute, the **h** time unit suffix specifies the hour, and the **d** time unit suffix specifies the day.
   * 
   * *   Valid values for PolarDB for MySQL Cluster Edition instances: **5m**, **10m**, **30m**, **1h**, **2h**, **3h**, **1d**, and **7d**.
   * *   Valid values for ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or Enterprise SSDs (ESSDs): **5m**, **10m**, **30m**, **1h**, **2h**, **3h**, **1d**, and **7d**.
   * 
   * @example
   * 5m
   * 
   * **if can be null:**
   * true
   */
  coolDownTime?: string;
  /**
   * @remarks
   * The average CPU utilization threshold that triggers automatic specification scale-up. Unit: %. Valid values:
   * 
   * *   **50**
   * *   **60**
   * *   **70**
   * *   **80**
   * *   **90**
   * 
   * >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance or an ApsaraDB RDS for MySQL High-availability Edition instance that uses standard SSDs or ESSDs.
   * 
   * @example
   * 70
   * 
   * **if can be null:**
   * true
   */
  cpuUsageUpperThreshold?: number;
  /**
   * @remarks
   * Specifies whether to enable automatic specification scale-down. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance or an ApsaraDB RDS for MySQL High-availability Edition instance that uses standard SSDs or ESSDs.
   * 
   * @example
   * true
   * 
   * **if can be null:**
   * false
   */
  downgrade?: boolean;
  /**
   * @remarks
   * The maximum number of read-only nodes of the instance.
   * 
   * >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance.
   * 
   * @example
   * 10
   * 
   * **if can be null:**
   * true
   */
  maxReadOnlyNodes?: number;
  /**
   * @remarks
   * The maximum specifications to which the database instance can be scaled up. The database instance can be upgraded only to a database instance of the same edition with higher specifications. For information about the specifications of different database instances, see the following topics:
   * 
   * *   PolarDB for MySQL Cluster Edition instances: [Specifications of compute nodes](https://help.aliyun.com/document_detail/102542.html)
   * *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: [Specifications](https://help.aliyun.com/document_detail/276974.html)
   * 
   * @example
   * polar.mysql.x8.12xlarge
   * 
   * **if can be null:**
   * true
   */
  maxSpec?: string;
  /**
   * @remarks
   * The average memory usage threshold that triggers automatic specification scale-up. Unit: %. Valid values:
   * 
   * *   **50**
   * *   **60**
   * *   **70**
   * *   **80**
   * *   **90**
   * 
   * >  This parameter must be specified if the database instance is a Tair (Redis OSS-compatible) Community Edition cloud-native instance on the China site (aliyun.com).
   * 
   * @example
   * 70
   * 
   * **if can be null:**
   * true
   */
  memUsageUpperThreshold?: number;
  /**
   * @remarks
   * The observation window. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute and the **h** time unit suffix specifies the hour.
   * 
   * *   Valid values for PolarDB for MySQL Cluster Edition instances: **5m**, **10m**, **15m**, and **30m**.
   * *   Valid values for ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: **5m**, **20m**, **30m**, **40m**, and **1h**.
   * *   Valid values for Tair (Redis OSS-compatible) Community Edition cloud-native instances: **5m**, **10m**, **15m**, and **30m**.
   * 
   * @example
   * 5m
   * 
   * **if can be null:**
   * true
   */
  observationWindowSize?: string;
  /**
   * @remarks
   * Specifies whether to enable automatic specification scale-up. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   * 
   * **if can be null:**
   * false
   */
  upgrade?: boolean;
  static names(): { [key: string]: string } {
    return {
      apply: 'Apply',
      coolDownTime: 'CoolDownTime',
      cpuUsageUpperThreshold: 'CpuUsageUpperThreshold',
      downgrade: 'Downgrade',
      maxReadOnlyNodes: 'MaxReadOnlyNodes',
      maxSpec: 'MaxSpec',
      memUsageUpperThreshold: 'MemUsageUpperThreshold',
      observationWindowSize: 'ObservationWindowSize',
      upgrade: 'Upgrade',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apply: 'boolean',
      coolDownTime: 'string',
      cpuUsageUpperThreshold: 'number',
      downgrade: 'boolean',
      maxReadOnlyNodes: 'number',
      maxSpec: 'string',
      memUsageUpperThreshold: 'number',
      observationWindowSize: 'string',
      upgrade: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoScalingConfigRequestStorage extends $tea.Model {
  /**
   * @remarks
   * Specifies whether to apply the **Storage** configuration of the automatic storage expansion feature. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  apply?: boolean;
  /**
   * @remarks
   * The average storage usage threshold that triggers automatic storage expansion. Unit: %. Valid values:
   * 
   * *   **50**
   * *   **60**
   * *   **70**
   * *   **80**
   * *   **90**
   * 
   * @example
   * 70
   * 
   * **if can be null:**
   * true
   */
  diskUsageUpperThreshold?: number;
  /**
   * @remarks
   * The maximum storage size of the database instance. Unit: GB. The value must be greater than or equal to the total storage size of the instance.
   * 
   * *   If the instance uses ESSDs, the maximum value of this parameter can be 32000.
   * *   If the instance uses standard SSDs, the maximum value of this parameter can be 6000.
   * 
   * >  The standard SSD storage type is phased out. We recommend that you [upgrade the storage type of your instance from standard SSDs to ESSDs](https://help.aliyun.com/document_detail/314678.html).
   * 
   * @example
   * 32000
   * 
   * **if can be null:**
   * true
   */
  maxStorage?: number;
  /**
   * @remarks
   * Specifies whether to enable automatic storage expansion. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   * 
   * **if can be null:**
   * false
   */
  upgrade?: boolean;
  static names(): { [key: string]: string } {
    return {
      apply: 'Apply',
      diskUsageUpperThreshold: 'DiskUsageUpperThreshold',
      maxStorage: 'MaxStorage',
      upgrade: 'Upgrade',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apply: 'boolean',
      diskUsageUpperThreshold: 'number',
      maxStorage: 'number',
      upgrade: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifySqlLogConfigRequestFilters extends $tea.Model {
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  key?: string;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifySqlLogConfigResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the cold data storage is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  coldEnable?: boolean;
  /**
   * @remarks
   * The number of days for which the SQL Explorer and Audit data is stored in cold storage. The value is calculated by using the following formula: Value of ColdRetention = Value of Retention - Value of HotRetention.``
   * 
   * @example
   * 23
   */
  coldRetention?: number;
  /**
   * @remarks
   * The time when the cold data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  coldStartTime?: number;
  /**
   * @remarks
   * The collector version. Valid values:
   * 
   * *   **MYSQL_V0**
   * *   **MYSQL_V1**
   * *   **MYSQL_V2**
   * *   **MYSQL_V3**
   * *   **PG_V1**
   * *   **rdspg_v1**
   * *   **polarpg_v1**
   * 
   * @example
   * MYSQL_V3
   */
  collectorVersion?: string;
  /**
   * @remarks
   * Indicates whether the hot data storage is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  hotEnable?: boolean;
  /**
   * @remarks
   * The number of days for which the SQL Explorer and Audit data is stored in hot storage.
   * 
   * @example
   * 7
   */
  hotRetention?: number;
  /**
   * @remarks
   * The time when the hot data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  hotStartTime?: number;
  /**
   * @remarks
   * A reserved parameter.
   * 
   * @example
   * None
   */
  logFilter?: string;
  /**
   * @remarks
   * Indicates whether the SQL Explorer feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  requestEnable?: boolean;
  /**
   * @remarks
   * The time when the SQL Explorer feature was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  requestStartTime?: number;
  /**
   * @remarks
   * The time when DAS Enterprise Edition V1 expired. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1715335200000
   */
  requestStopTime?: number;
  /**
   * @remarks
   * The total storage duration of the SQL Explorer and Audit data. Unit: day.
   * 
   * @example
   * 30
   */
  retention?: number;
  /**
   * @remarks
   * Indicates whether DAS Enterprise Edition is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  sqlLogEnable?: boolean;
  /**
   * @remarks
   * The state of data migration. Valid values:
   * 
   * *   **FINISH**: The historical data is migrated.
   * *   **RUNNING**: The historical data is being migrated.
   * *   **FAILURE**: The historical data fails to be migrated.
   * 
   * @example
   * FINISH
   */
  sqlLogState?: string;
  /**
   * @remarks
   * The time when DAS Enterprise Edition was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1683712800000
   */
  sqlLogVisibleTime?: number;
  /**
   * @remarks
   * The latest version of DAS Enterprise Edition that supports the database instance. Valid values:
   * 
   * *   **SQL_LOG_V0**: DAS Enterprise Edition V0.
   * *   **SQL_LOG_V1**: DAS Enterprise Edition V1.
   * *   **SQL_LOG_V2**: DAS Enterprise Edition V2.
   * *   **SQL_LOG_V3**: DAS Enterprise Edition V3.
   * *   **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
   * *   **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
   * 
   * @example
   * SQL_LOG_V3
   */
  supportVersion?: string;
  /**
   * @remarks
   * The version of DAS Enterprise Edition that is enabled for the database instance. Valid values:
   * 
   * *   **SQL_LOG_V0**: DAS Enterprise Edition V0.
   * *   **SQL_LOG_V1**: DAS Enterprise Edition V1.
   * *   **SQL_LOG_V2**: DAS Enterprise Edition V2.
   * *   **SQL_LOG_V3**: DAS Enterprise Edition V3.
   * *   **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
   * *   **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
   * 
   * @example
   * SQL_LOG_V3
   */
  version?: string;
  static names(): { [key: string]: string } {
    return {
      coldEnable: 'ColdEnable',
      coldRetention: 'ColdRetention',
      coldStartTime: 'ColdStartTime',
      collectorVersion: 'CollectorVersion',
      hotEnable: 'HotEnable',
      hotRetention: 'HotRetention',
      hotStartTime: 'HotStartTime',
      logFilter: 'LogFilter',
      requestEnable: 'RequestEnable',
      requestStartTime: 'RequestStartTime',
      requestStopTime: 'RequestStopTime',
      retention: 'Retention',
      sqlLogEnable: 'SqlLogEnable',
      sqlLogState: 'SqlLogState',
      sqlLogVisibleTime: 'SqlLogVisibleTime',
      supportVersion: 'SupportVersion',
      version: 'Version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coldEnable: 'boolean',
      coldRetention: 'number',
      coldStartTime: 'number',
      collectorVersion: 'string',
      hotEnable: 'boolean',
      hotRetention: 'number',
      hotStartTime: 'number',
      logFilter: 'string',
      requestEnable: 'boolean',
      requestStartTime: 'number',
      requestStopTime: 'number',
      retention: 'number',
      sqlLogEnable: 'boolean',
      sqlLogState: 'string',
      sqlLogVisibleTime: 'number',
      supportVersion: 'string',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCloudBenchTaskResponseBodyDataPreCheckItem extends $tea.Model {
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The detailed information of the check item.
   * 
   * @example
   * "Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }
   */
  details?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
   * 
   * @example
   * Successful
   */
  message?: string;
  /**
   * @remarks
   * The name of the check item. Valid values:
   * 
   * * **SqlArchiveStatusChecker**: checks whether SQL Explorer is available.
   * * **BenchClientEnvChecker**: checks whether the runtime environment for programs on the stress testing client is available.
   * * **SpecChecker**: checks whether the destination instance type and the instance type of the stress testing client support this API operation.
   * * **SourceInstanceChecker**: checks whether the account of the source instance is available and whether the source instance is connected to the destination instance.
   * * **BenchTargetChecker**: checks whether the account of the destination instance is available and whether the source instance is connected to the destination instance.
   * 
   * @example
   * BenchTargetChecker
   */
  name?: string;
  /**
   * @remarks
   * The sequence number of the check item. Valid values: **0** to **10**.
   * 
   * @example
   * 0
   */
  order?: number;
  /**
   * @remarks
   * The status of the task. Valid values:
   * 
   * *   **SUCCESS**: The task is successful.
   * *   **IGNORED**: The task is ignored.
   * *   **RUNNING**: The task is running.
   * *   **EXCEPTION**: An error occurred.
   * 
   * @example
   * SUCCESS
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      details: 'Details',
      message: 'Message',
      name: 'Name',
      order: 'Order',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      details: 'string',
      message: 'string',
      name: 'string',
      order: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCloudBenchTaskResponseBodyData extends $tea.Model {
  preCheckItem?: RunCloudBenchTaskResponseBodyDataPreCheckItem[];
  static names(): { [key: string]: string } {
    return {
      preCheckItem: 'PreCheckItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      preCheckItem: { 'type': 'array', 'itemType': RunCloudBenchTaskResponseBodyDataPreCheckItem },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetEventSubscriptionResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the event subscription feature is enabled. Valid values:
   * 
   * *   **0**: The event subscription feature is disabled.
   * *   **1**: The event subscription feature is enabled.
   * 
   * @example
   * 1
   */
  active?: number;
  /**
   * @remarks
   * The notification method. Valid values:
   * 
   * *   **hdm_alarm_sms**: text message.
   * *   **dingtalk**: DingTalk chatbot.
   * *   **hdm_alarm_sms_and_email**: text message and email.
   * *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
   * 
   * @example
   * hdm_alarm_sms,dingtalk
   */
  channelType?: string;
  /**
   * @remarks
   * The name of the contact group that receives alert notifications. Multiple names are separated by commas (,).
   * 
   * @example
   * Default contact group
   */
  contactGroupName?: string;
  /**
   * @remarks
   * The name of the contact who receives alert notifications. Multiple names are separated by commas (,).
   * 
   * @example
   * Default contact
   */
  contactName?: string;
  /**
   * @remarks
   * The supported event scenarios. Only **AllContext** is returned for this parameter, which indicates that all scenarios are supported.
   * 
   * @example
   * AllContext
   */
  eventContext?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  /**
   * @remarks
   * The language of event notifications. Only **zh-CN** is returned for this parameter, which indicates that event notifications are sent in Chinese.
   * 
   * @example
   * zh_CN
   */
  lang?: string;
  /**
   * @remarks
   * The risk level of the events. Valid values:
   * 
   * *   **Notice**
   * *   **Optimization**
   * *   **Warn**
   * *   **Critical**
   * 
   * @example
   * Optimization
   */
  level?: string;
  /**
   * @remarks
   * The minimum interval between consecutive event notifications. Unit: seconds.
   * 
   * @example
   * 60
   */
  minInterval?: number;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 1088760496****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      active: 'active',
      channelType: 'channelType',
      contactGroupName: 'contactGroupName',
      contactName: 'contactName',
      eventContext: 'eventContext',
      instanceId: 'instanceId',
      lang: 'lang',
      level: 'level',
      minInterval: 'minInterval',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      active: 'number',
      channelType: 'string',
      contactGroupName: 'string',
      contactName: 'string',
      eventContext: 'string',
      instanceId: 'string',
      lang: 'string',
      level: 'string',
      minInterval: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the parameters are configured. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * false
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * Only Support DAS Pro High-availability Edition RDS MySQL 5.6, 5.7, 8.0 instance, and CPU cores >= 4, innodb_file_per_table=ON
   */
  errorMessage?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze9xrhze0709****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      errorMessage: 'ErrorMessage',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      errorMessage: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the parameters are configured. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * true
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse extends $tea.Model {
  /**
   * @remarks
   * The number of database instances for which the parameters failed to be configured.
   * 
   * @example
   * 1
   */
  configFailInstanceCount?: number;
  /**
   * @remarks
   * The database instances for which the parameters failed to be configured.
   */
  configFailInstanceList?: UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList[];
  /**
   * @remarks
   * The number of database instances for which the parameters are configured.
   * 
   * @example
   * 1
   */
  configSuccessInstanceCount?: number;
  /**
   * @remarks
   * The database instances for which the parameters are configured.
   */
  configSuccessInstanceList?: UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList[];
  /**
   * @remarks
   * The total number of database instances.
   * 
   * @example
   * 2
   */
  totalInstanceCount?: number;
  static names(): { [key: string]: string } {
    return {
      configFailInstanceCount: 'ConfigFailInstanceCount',
      configFailInstanceList: 'ConfigFailInstanceList',
      configSuccessInstanceCount: 'ConfigSuccessInstanceCount',
      configSuccessInstanceList: 'ConfigSuccessInstanceList',
      totalInstanceCount: 'TotalInstanceCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configFailInstanceCount: 'number',
      configFailInstanceList: { 'type': 'array', 'itemType': UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList },
      configSuccessInstanceCount: 'number',
      configSuccessInstanceList: { 'type': 'array', 'itemType': UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList },
      totalInstanceCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoResourceOptimizeRulesAsyncResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  complete?: boolean;
  /**
   * @remarks
   * The returned data of the configuration.
   * 
   * >  The data is returned only if the value of isFinish is **true**. This value indicates that the asynchronous request is complete.
   */
  configResponse?: UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse;
  /**
   * @remarks
   * Indicates whether the asynchronous request failed. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fail?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * @example
   * async__20ee808e72257f16a4fe024057ca****
   */
  resultId?: string;
  /**
   * @remarks
   * The state of the asynchronous request. Valid values:
   * 
   * *   **RUNNING**
   * *   **SUCCESS**
   * *   **FAIL**
   * 
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @remarks
   * The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1645668213000
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      complete: 'Complete',
      configResponse: 'ConfigResponse',
      fail: 'Fail',
      isFinish: 'IsFinish',
      resultId: 'ResultId',
      state: 'State',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      complete: 'boolean',
      configResponse: UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse,
      fail: 'boolean',
      isFinish: 'boolean',
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoSqlOptimizeStatusResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * The error code. Valid values:
   * 
   * *   **-1001**: indicates that the specified parameter is invalid.
   * *   **-91029**: indicates that a system error occurred.
   * 
   * @example
   * -1001
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * invalid param
   */
  errorMsg?: string;
  /**
   * @remarks
   * Indicates whether the request initiated to configure the automatic SQL optimization feature was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMsg: 'ErrorMsg',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMsg: 'string',
      success: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the parameters are configured. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * false
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * instance das autonomy service is off or can not find instance
   */
  errorMessage?: string;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze9xrhze0709****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      errorMessage: 'ErrorMessage',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      errorMessage: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the parameters are configured. Valid values:
   * 
   * * **true**
   * 
   * * **false**
   * 
   * @example
   * true
   */
  configSuccess?: boolean;
  /**
   * @remarks
   * The database instance ID.
   * 
   * @example
   * rm-2ze8g2am97624****
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      configSuccess: 'ConfigSuccess',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configSuccess: 'boolean',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse extends $tea.Model {
  /**
   * @remarks
   * The number of database instances for which the parameters failed to be configured.
   * 
   * @example
   * 1
   */
  configFailInstanceCount?: number;
  /**
   * @remarks
   * The database instances for which the parameters failed to be configured.
   */
  configFailInstanceList?: UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList[];
  /**
   * @remarks
   * The number of database instances for which the parameters are configured.
   * 
   * @example
   * 1
   */
  configSuccessInstanceCount?: number;
  /**
   * @remarks
   * The database instances for which the parameters are configured.
   */
  configSuccessInstanceList?: UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList[];
  /**
   * @remarks
   * The total number of database instances.
   * 
   * @example
   * 2
   */
  totalInstanceCount?: number;
  static names(): { [key: string]: string } {
    return {
      configFailInstanceCount: 'ConfigFailInstanceCount',
      configFailInstanceList: 'ConfigFailInstanceList',
      configSuccessInstanceCount: 'ConfigSuccessInstanceCount',
      configSuccessInstanceList: 'ConfigSuccessInstanceList',
      totalInstanceCount: 'TotalInstanceCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configFailInstanceCount: 'number',
      configFailInstanceList: { 'type': 'array', 'itemType': UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList },
      configSuccessInstanceCount: 'number',
      configSuccessInstanceList: { 'type': 'array', 'itemType': UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList },
      totalInstanceCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAutoThrottleRulesAsyncResponseBodyData extends $tea.Model {
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  complete?: boolean;
  /**
   * @remarks
   * The returned data of the configuration.
   * 
   * >  The data is returned only if the value of isFinish is **true**. This value indicates that the asynchronous request is complete.
   */
  configResponse?: UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse;
  /**
   * @remarks
   * Indicates whether the asynchronous request failed. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fail?: boolean;
  /**
   * @remarks
   * Indicates whether the asynchronous request was complete. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  isFinish?: boolean;
  /**
   * @remarks
   * The ID of the asynchronous request.
   * 
   * @example
   * async__665ee69612f1627c7fd9f3c85075****
   */
  resultId?: string;
  /**
   * @remarks
   * The state of the asynchronous request. Valid values:
   * 
   * *   **RUNNING**
   * *   **SUCCESS**
   * *   **FAIL**
   * 
   * @example
   * SUCCESS
   */
  state?: string;
  /**
   * @remarks
   * The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1645668213000
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      complete: 'Complete',
      configResponse: 'ConfigResponse',
      fail: 'Fail',
      isFinish: 'IsFinish',
      resultId: 'ResultId',
      state: 'State',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      complete: 'boolean',
      configResponse: UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse,
      fail: 'boolean',
      isFinish: 'boolean',
      resultId: 'string',
      state: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client extends OpenApi {

  constructor(config: $OpenApi.Config) {
    super(config);
    this._endpointRule = "central";
    this._endpointMap = {
      'cn-shanghai': "das.cn-shanghai.aliyuncs.com",
    };
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("das", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!Util.empty(endpoint)) {
      return endpoint;
    }

    if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * Adds a database instance to Database Autonomy Service (DAS).
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
   * 
   * @param request - AddHDMInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddHDMInstanceResponse
   */
  async addHDMInstanceWithOptions(request: AddHDMInstanceRequest, runtime: $Util.RuntimeOptions): Promise<AddHDMInstanceResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!Util.isUnset(request.flushAccount)) {
      query["FlushAccount"] = request.flushAccount;
    }

    if (!Util.isUnset(request.instanceAlias)) {
      query["InstanceAlias"] = request.instanceAlias;
    }

    if (!Util.isUnset(request.instanceArea)) {
      query["InstanceArea"] = request.instanceArea;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.ip)) {
      query["Ip"] = request.ip;
    }

    if (!Util.isUnset(request.networkType)) {
      query["NetworkType"] = request.networkType;
    }

    if (!Util.isUnset(request.password)) {
      query["Password"] = request.password;
    }

    if (!Util.isUnset(request.port)) {
      query["Port"] = request.port;
    }

    if (!Util.isUnset(request.region)) {
      query["Region"] = request.region;
    }

    if (!Util.isUnset(request.username)) {
      query["Username"] = request.username;
    }

    if (!Util.isUnset(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    if (!Util.isUnset(request.context)) {
      query["__context"] = request.context;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "AddHDMInstance",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<AddHDMInstanceResponse>(await this.callApi(params, req, runtime), new AddHDMInstanceResponse({}));
  }

  /**
   * Adds a database instance to Database Autonomy Service (DAS).
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
   * 
   * @param request - AddHDMInstanceRequest
   * @returns AddHDMInstanceResponse
   */
  async addHDMInstance(request: AddHDMInstanceRequest): Promise<AddHDMInstanceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.addHDMInstanceWithOptions(request, runtime);
  }

  /**
   * Creates a cache analysis task.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   You can call this operation to analyze the data structures of ApsaraDB for Redis and the following self-developed data structures of Tair: TairString, TairHash, TairGIS, TairBloom, TairDoc, TairCpc, and TairZset. Other self-developed Tair data structures are not supported.
   * *   If the specifications of the database instance that you want to analyze are changed, the backup file generated before the specification change cannot be analyzed.
   * *   Tair ESSD/SSD-based instances are not supported.
   * 
   * @param request - CreateCacheAnalysisJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCacheAnalysisJobResponse
   */
  async createCacheAnalysisJobWithOptions(request: CreateCacheAnalysisJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateCacheAnalysisJobResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.backupSetId)) {
      query["BackupSetId"] = request.backupSetId;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.separators)) {
      query["Separators"] = request.separators;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateCacheAnalysisJob",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateCacheAnalysisJobResponse>(await this.callApi(params, req, runtime), new CreateCacheAnalysisJobResponse({}));
  }

  /**
   * Creates a cache analysis task.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   You can call this operation to analyze the data structures of ApsaraDB for Redis and the following self-developed data structures of Tair: TairString, TairHash, TairGIS, TairBloom, TairDoc, TairCpc, and TairZset. Other self-developed Tair data structures are not supported.
   * *   If the specifications of the database instance that you want to analyze are changed, the backup file generated before the specification change cannot be analyzed.
   * *   Tair ESSD/SSD-based instances are not supported.
   * 
   * @param request - CreateCacheAnalysisJobRequest
   * @returns CreateCacheAnalysisJobResponse
   */
  async createCacheAnalysisJob(request: CreateCacheAnalysisJobRequest): Promise<CreateCacheAnalysisJobResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createCacheAnalysisJobWithOptions(request, runtime);
  }

  /**
   * Creates stress testing tasks.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html). Before you call this API operation, make sure that your database instances meet the following requirements:
   * *   The source database instance is an ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition instance, or a PolarDB for MySQL Cluster Edition cluster.
   * *   The destination database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * *   The source and destination database instances are connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](https://help.aliyun.com/document_detail/65405.html).
   * *   DAS Enterprise Edition is enabled for the source and destination database instances. For more information, see [Overview](https://help.aliyun.com/document_detail/190912.html).
   * 
   * @param request - CreateCloudBenchTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCloudBenchTasksResponse
   */
  async createCloudBenchTasksWithOptions(request: CreateCloudBenchTasksRequest, runtime: $Util.RuntimeOptions): Promise<CreateCloudBenchTasksResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.amount)) {
      query["Amount"] = request.amount;
    }

    if (!Util.isUnset(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!Util.isUnset(request.backupTime)) {
      query["BackupTime"] = request.backupTime;
    }

    if (!Util.isUnset(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!Util.isUnset(request.description)) {
      query["Description"] = request.description;
    }

    if (!Util.isUnset(request.dstConnectionString)) {
      query["DstConnectionString"] = request.dstConnectionString;
    }

    if (!Util.isUnset(request.dstInstanceId)) {
      query["DstInstanceId"] = request.dstInstanceId;
    }

    if (!Util.isUnset(request.dstPort)) {
      query["DstPort"] = request.dstPort;
    }

    if (!Util.isUnset(request.dstSuperAccount)) {
      query["DstSuperAccount"] = request.dstSuperAccount;
    }

    if (!Util.isUnset(request.dstSuperPassword)) {
      query["DstSuperPassword"] = request.dstSuperPassword;
    }

    if (!Util.isUnset(request.dstType)) {
      query["DstType"] = request.dstType;
    }

    if (!Util.isUnset(request.dtsJobClass)) {
      query["DtsJobClass"] = request.dtsJobClass;
    }

    if (!Util.isUnset(request.dtsJobId)) {
      query["DtsJobId"] = request.dtsJobId;
    }

    if (!Util.isUnset(request.endState)) {
      query["EndState"] = request.endState;
    }

    if (!Util.isUnset(request.gatewayVpcId)) {
      query["GatewayVpcId"] = request.gatewayVpcId;
    }

    if (!Util.isUnset(request.gatewayVpcIp)) {
      query["GatewayVpcIp"] = request.gatewayVpcIp;
    }

    if (!Util.isUnset(request.rate)) {
      query["Rate"] = request.rate;
    }

    if (!Util.isUnset(request.requestDuration)) {
      query["RequestDuration"] = request.requestDuration;
    }

    if (!Util.isUnset(request.requestEndTime)) {
      query["RequestEndTime"] = request.requestEndTime;
    }

    if (!Util.isUnset(request.requestStartTime)) {
      query["RequestStartTime"] = request.requestStartTime;
    }

    if (!Util.isUnset(request.smartPressureTime)) {
      query["SmartPressureTime"] = request.smartPressureTime;
    }

    if (!Util.isUnset(request.srcInstanceId)) {
      query["SrcInstanceId"] = request.srcInstanceId;
    }

    if (!Util.isUnset(request.srcPublicIp)) {
      query["SrcPublicIp"] = request.srcPublicIp;
    }

    if (!Util.isUnset(request.srcSuperAccount)) {
      query["SrcSuperAccount"] = request.srcSuperAccount;
    }

    if (!Util.isUnset(request.srcSuperPassword)) {
      query["SrcSuperPassword"] = request.srcSuperPassword;
    }

    if (!Util.isUnset(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    if (!Util.isUnset(request.workDir)) {
      query["WorkDir"] = request.workDir;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateCloudBenchTasks",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateCloudBenchTasksResponse>(await this.callApi(params, req, runtime), new CreateCloudBenchTasksResponse({}));
  }

  /**
   * Creates stress testing tasks.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html). Before you call this API operation, make sure that your database instances meet the following requirements:
   * *   The source database instance is an ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition instance, or a PolarDB for MySQL Cluster Edition cluster.
   * *   The destination database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
   * *   The source and destination database instances are connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](https://help.aliyun.com/document_detail/65405.html).
   * *   DAS Enterprise Edition is enabled for the source and destination database instances. For more information, see [Overview](https://help.aliyun.com/document_detail/190912.html).
   * 
   * @param request - CreateCloudBenchTasksRequest
   * @returns CreateCloudBenchTasksResponse
   */
  async createCloudBenchTasks(request: CreateCloudBenchTasksRequest): Promise<CreateCloudBenchTasksResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createCloudBenchTasksWithOptions(request, runtime);
  }

  /**
   * Creates a diagnostic report.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.3 or later.
   * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   RDS MySQL
   *     *   PolarDB for MySQL
   *     *   Redis
   * 
   * @param request - CreateDiagnosticReportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDiagnosticReportResponse
   */
  async createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: $Util.RuntimeOptions): Promise<CreateDiagnosticReportResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateDiagnosticReport",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateDiagnosticReportResponse>(await this.callApi(params, req, runtime), new CreateDiagnosticReportResponse({}));
  }

  /**
   * Creates a diagnostic report.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.3 or later.
   * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   RDS MySQL
   *     *   PolarDB for MySQL
   *     *   Redis
   * 
   * @param request - CreateDiagnosticReportRequest
   * @returns CreateDiagnosticReportResponse
   */
  async createDiagnosticReport(request: CreateDiagnosticReportRequest): Promise<CreateDiagnosticReportResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createDiagnosticReportWithOptions(request, runtime);
  }

  /**
   * Creates a task that terminates sessions.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - CreateKillInstanceSessionTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateKillInstanceSessionTaskResponse
   */
  async createKillInstanceSessionTaskWithOptions(request: CreateKillInstanceSessionTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateKillInstanceSessionTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbUser)) {
      query["DbUser"] = request.dbUser;
    }

    if (!Util.isUnset(request.dbUserPassword)) {
      query["DbUserPassword"] = request.dbUserPassword;
    }

    if (!Util.isUnset(request.ignoredUsers)) {
      query["IgnoredUsers"] = request.ignoredUsers;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.killAllSessions)) {
      query["KillAllSessions"] = request.killAllSessions;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.sessionIds)) {
      query["SessionIds"] = request.sessionIds;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateKillInstanceSessionTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateKillInstanceSessionTaskResponse>(await this.callApi(params, req, runtime), new CreateKillInstanceSessionTaskResponse({}));
  }

  /**
   * Creates a task that terminates sessions.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - CreateKillInstanceSessionTaskRequest
   * @returns CreateKillInstanceSessionTaskResponse
   */
  async createKillInstanceSessionTask(request: CreateKillInstanceSessionTaskRequest): Promise<CreateKillInstanceSessionTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createKillInstanceSessionTaskWithOptions(request, runtime);
  }

  /**
   * 创建结束会话的任务
   * 
   * @param request - CreateKillInstanceSessionTaskWithMaintainUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateKillInstanceSessionTaskWithMaintainUserResponse
   */
  async createKillInstanceSessionTaskWithMaintainUserWithOptions(request: CreateKillInstanceSessionTaskWithMaintainUserRequest, runtime: $Util.RuntimeOptions): Promise<CreateKillInstanceSessionTaskWithMaintainUserResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.ignoredUsers)) {
      query["IgnoredUsers"] = request.ignoredUsers;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.killAllSessions)) {
      query["KillAllSessions"] = request.killAllSessions;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.sessionIds)) {
      query["SessionIds"] = request.sessionIds;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateKillInstanceSessionTaskWithMaintainUser",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateKillInstanceSessionTaskWithMaintainUserResponse>(await this.callApi(params, req, runtime), new CreateKillInstanceSessionTaskWithMaintainUserResponse({}));
  }

  /**
   * 创建结束会话的任务
   * 
   * @param request - CreateKillInstanceSessionTaskWithMaintainUserRequest
   * @returns CreateKillInstanceSessionTaskWithMaintainUserResponse
   */
  async createKillInstanceSessionTaskWithMaintainUser(request: CreateKillInstanceSessionTaskWithMaintainUserRequest): Promise<CreateKillInstanceSessionTaskWithMaintainUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createKillInstanceSessionTaskWithMaintainUserWithOptions(request, runtime);
  }

  /**
   * 创建最近死锁分析任务
   * 
   * @param request - CreateLatestDeadLockAnalysisRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLatestDeadLockAnalysisResponse
   */
  async createLatestDeadLockAnalysisWithOptions(request: CreateLatestDeadLockAnalysisRequest, runtime: $Util.RuntimeOptions): Promise<CreateLatestDeadLockAnalysisResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CreateLatestDeadLockAnalysis",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateLatestDeadLockAnalysisResponse>(await this.callApi(params, req, runtime), new CreateLatestDeadLockAnalysisResponse({}));
  }

  /**
   * 创建最近死锁分析任务
   * 
   * @param request - CreateLatestDeadLockAnalysisRequest
   * @returns CreateLatestDeadLockAnalysisResponse
   */
  async createLatestDeadLockAnalysis(request: CreateLatestDeadLockAnalysisRequest): Promise<CreateLatestDeadLockAnalysisResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createLatestDeadLockAnalysisWithOptions(request, runtime);
  }

  /**
   * Adds a tag to a SQL template.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - CreateQueryOptimizeTagRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateQueryOptimizeTagResponse
   */
  async createQueryOptimizeTagWithOptions(request: CreateQueryOptimizeTagRequest, runtime: $Util.RuntimeOptions): Promise<CreateQueryOptimizeTagResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.comments)) {
      query["Comments"] = request.comments;
    }

    if (!Util.isUnset(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.sqlIds)) {
      query["SqlIds"] = request.sqlIds;
    }

    if (!Util.isUnset(request.status)) {
      query["Status"] = request.status;
    }

    if (!Util.isUnset(request.tags)) {
      query["Tags"] = request.tags;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateQueryOptimizeTag",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateQueryOptimizeTagResponse>(await this.callApi(params, req, runtime), new CreateQueryOptimizeTagResponse({}));
  }

  /**
   * Adds a tag to a SQL template.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - CreateQueryOptimizeTagRequest
   * @returns CreateQueryOptimizeTagResponse
   */
  async createQueryOptimizeTag(request: CreateQueryOptimizeTagRequest): Promise<CreateQueryOptimizeTagResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createQueryOptimizeTagWithOptions(request, runtime);
  }

  /**
   * Initiates an SQL statement diagnostics request.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call Database Autonomy Service (DAS), you must set the region to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   *     *   ApsaraDB RDS for SQL Server
   *     *   PolarDB for MySQL
   *     *   PolarDB for PostgreSQL (compatible with Oracle)
   *     *   ApsaraDB for MongoDB
   * >  The minor engine version of ApsaraDB RDS for PostgreSQL instances must be 20221230 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
   * 
   * @param request - CreateRequestDiagnosisRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRequestDiagnosisResponse
   */
  async createRequestDiagnosisWithOptions(request: CreateRequestDiagnosisRequest, runtime: $Util.RuntimeOptions): Promise<CreateRequestDiagnosisResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.database)) {
      query["Database"] = request.database;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.sql)) {
      query["Sql"] = request.sql;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateRequestDiagnosis",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateRequestDiagnosisResponse>(await this.callApi(params, req, runtime), new CreateRequestDiagnosisResponse({}));
  }

  /**
   * Initiates an SQL statement diagnostics request.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call Database Autonomy Service (DAS), you must set the region to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   *     *   ApsaraDB RDS for SQL Server
   *     *   PolarDB for MySQL
   *     *   PolarDB for PostgreSQL (compatible with Oracle)
   *     *   ApsaraDB for MongoDB
   * >  The minor engine version of ApsaraDB RDS for PostgreSQL instances must be 20221230 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
   * 
   * @param request - CreateRequestDiagnosisRequest
   * @returns CreateRequestDiagnosisResponse
   */
  async createRequestDiagnosis(request: CreateRequestDiagnosisRequest): Promise<CreateRequestDiagnosisResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createRequestDiagnosisWithOptions(request, runtime);
  }

  /**
   * Creates an offline task for Database Autonomy Service (DAS) Enterprise Edition.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   You can create an offline task only for database instances for which DAS Enterprise Edition V2 or V3 is enabled. For more information about the databases and regions that are supported by various versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - CreateSqlLogTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSqlLogTaskResponse
   */
  async createSqlLogTaskWithOptions(request: CreateSqlLogTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateSqlLogTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.filters)) {
      query["Filters"] = request.filters;
    }

    if (!Util.isUnset(request.role)) {
      query["Role"] = request.role;
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.name)) {
      body["Name"] = request.name;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    if (!Util.isUnset(request.type)) {
      body["Type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "CreateSqlLogTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateSqlLogTaskResponse>(await this.callApi(params, req, runtime), new CreateSqlLogTaskResponse({}));
  }

  /**
   * Creates an offline task for Database Autonomy Service (DAS) Enterprise Edition.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   You can create an offline task only for database instances for which DAS Enterprise Edition V2 or V3 is enabled. For more information about the databases and regions that are supported by various versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - CreateSqlLogTaskRequest
   * @returns CreateSqlLogTaskResponse
   */
  async createSqlLogTask(request: CreateSqlLogTaskRequest): Promise<CreateSqlLogTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createSqlLogTaskWithOptions(request, runtime);
  }

  /**
   * Creates a storage analysis task to query the usage details of one or more databases and tables.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
   * *   For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - CreateStorageAnalysisTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateStorageAnalysisTaskResponse
   */
  async createStorageAnalysisTaskWithOptions(request: CreateStorageAnalysisTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateStorageAnalysisTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateStorageAnalysisTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateStorageAnalysisTaskResponse>(await this.callApi(params, req, runtime), new CreateStorageAnalysisTaskResponse({}));
  }

  /**
   * Creates a storage analysis task to query the usage details of one or more databases and tables.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
   * *   For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - CreateStorageAnalysisTaskRequest
   * @returns CreateStorageAnalysisTaskResponse
   */
  async createStorageAnalysisTask(request: CreateStorageAnalysisTaskRequest): Promise<CreateStorageAnalysisTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createStorageAnalysisTaskWithOptions(request, runtime);
  }

  /**
   * Deletes a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DeleteCloudBenchTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCloudBenchTaskResponse
   */
  async deleteCloudBenchTaskWithOptions(request: DeleteCloudBenchTaskRequest, runtime: $Util.RuntimeOptions): Promise<DeleteCloudBenchTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteCloudBenchTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteCloudBenchTaskResponse>(await this.callApi(params, req, runtime), new DeleteCloudBenchTaskResponse({}));
  }

  /**
   * Deletes a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DeleteCloudBenchTaskRequest
   * @returns DeleteCloudBenchTaskResponse
   */
  async deleteCloudBenchTask(request: DeleteCloudBenchTaskRequest): Promise<DeleteCloudBenchTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteCloudBenchTaskWithOptions(request, runtime);
  }

  /**
   * Deletes the metadata of a stopped DBGateway.
   * 
   * @remarks
   *   This operation is used to delete the metadata of a DBGateway that is released in a stress testing task created by calling the [CreateCloudBenchTasks](https://help.aliyun.com/document_detail/230665.html) operation.
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * >  If the heartbeat is lost between a DBGateway and the access point for more than 20 seconds, the DBGateway is considered stopped.
   * 
   * @param request - DeleteStopGatewayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteStopGatewayResponse
   */
  async deleteStopGatewayWithOptions(request: DeleteStopGatewayRequest, runtime: $Util.RuntimeOptions): Promise<DeleteStopGatewayResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.gatewayId)) {
      query["GatewayId"] = request.gatewayId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteStopGateway",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteStopGatewayResponse>(await this.callApi(params, req, runtime), new DeleteStopGatewayResponse({}));
  }

  /**
   * Deletes the metadata of a stopped DBGateway.
   * 
   * @remarks
   *   This operation is used to delete the metadata of a DBGateway that is released in a stress testing task created by calling the [CreateCloudBenchTasks](https://help.aliyun.com/document_detail/230665.html) operation.
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * >  If the heartbeat is lost between a DBGateway and the access point for more than 20 seconds, the DBGateway is considered stopped.
   * 
   * @param request - DeleteStopGatewayRequest
   * @returns DeleteStopGatewayResponse
   */
  async deleteStopGateway(request: DeleteStopGatewayRequest): Promise<DeleteStopGatewayResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteStopGatewayWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the auto scaling feature for an instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeAutoScalingConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAutoScalingConfigResponse
   */
  async describeAutoScalingConfigWithOptions(request: DescribeAutoScalingConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAutoScalingConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAutoScalingConfig",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAutoScalingConfigResponse>(await this.callApi(params, req, runtime), new DescribeAutoScalingConfigResponse({}));
  }

  /**
   * Queries the configurations of the auto scaling feature for an instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeAutoScalingConfigRequest
   * @returns DescribeAutoScalingConfigResponse
   */
  async describeAutoScalingConfig(request: DescribeAutoScalingConfigRequest): Promise<DescribeAutoScalingConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAutoScalingConfigWithOptions(request, runtime);
  }

  /**
   * Queries the auto scaling history of an instance.
   * 
   * @remarks
   *   You can call this operation to query the history information about the automatic performance scaling only of ApsaraDB RDS for MySQL High-availability Edition instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeAutoScalingHistoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAutoScalingHistoryResponse
   */
  async describeAutoScalingHistoryWithOptions(request: DescribeAutoScalingHistoryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAutoScalingHistoryResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAutoScalingHistory",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAutoScalingHistoryResponse>(await this.callApi(params, req, runtime), new DescribeAutoScalingHistoryResponse({}));
  }

  /**
   * Queries the auto scaling history of an instance.
   * 
   * @remarks
   *   You can call this operation to query the history information about the automatic performance scaling only of ApsaraDB RDS for MySQL High-availability Edition instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeAutoScalingHistoryRequest
   * @returns DescribeAutoScalingHistoryResponse
   */
  async describeAutoScalingHistory(request: DescribeAutoScalingHistoryRequest): Promise<DescribeAutoScalingHistoryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAutoScalingHistoryWithOptions(request, runtime);
  }

  /**
   * Queries the details of a cache analysis task.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis.
   * >  You can call this operation to query the top 500 keys in a cache analysis task.
   * 
   * @param request - DescribeCacheAnalysisJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCacheAnalysisJobResponse
   */
  async describeCacheAnalysisJobWithOptions(request: DescribeCacheAnalysisJobRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCacheAnalysisJobResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCacheAnalysisJob",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCacheAnalysisJobResponse>(await this.callApi(params, req, runtime), new DescribeCacheAnalysisJobResponse({}));
  }

  /**
   * Queries the details of a cache analysis task.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis.
   * >  You can call this operation to query the top 500 keys in a cache analysis task.
   * 
   * @param request - DescribeCacheAnalysisJobRequest
   * @returns DescribeCacheAnalysisJobResponse
   */
  async describeCacheAnalysisJob(request: DescribeCacheAnalysisJobRequest): Promise<DescribeCacheAnalysisJobResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCacheAnalysisJobWithOptions(request, runtime);
  }

  /**
   * Queries a list of cache analysis tasks.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis.
   * 
   * @param request - DescribeCacheAnalysisJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCacheAnalysisJobsResponse
   */
  async describeCacheAnalysisJobsWithOptions(request: DescribeCacheAnalysisJobsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCacheAnalysisJobsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCacheAnalysisJobs",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCacheAnalysisJobsResponse>(await this.callApi(params, req, runtime), new DescribeCacheAnalysisJobsResponse({}));
  }

  /**
   * Queries a list of cache analysis tasks.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis.
   * 
   * @param request - DescribeCacheAnalysisJobsRequest
   * @returns DescribeCacheAnalysisJobsResponse
   */
  async describeCacheAnalysisJobs(request: DescribeCacheAnalysisJobsRequest): Promise<DescribeCacheAnalysisJobsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCacheAnalysisJobsWithOptions(request, runtime);
  }

  /**
   * Queries stress testing tasks.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DescribeCloudBenchTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudBenchTasksResponse
   */
  async describeCloudBenchTasksWithOptions(request: DescribeCloudBenchTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCloudBenchTasksResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!Util.isUnset(request.status)) {
      query["Status"] = request.status;
    }

    if (!Util.isUnset(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCloudBenchTasks",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCloudBenchTasksResponse>(await this.callApi(params, req, runtime), new DescribeCloudBenchTasksResponse({}));
  }

  /**
   * Queries stress testing tasks.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DescribeCloudBenchTasksRequest
   * @returns DescribeCloudBenchTasksResponse
   */
  async describeCloudBenchTasks(request: DescribeCloudBenchTasksRequest): Promise<DescribeCloudBenchTasksResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCloudBenchTasksWithOptions(request, runtime);
  }

  /**
   * Queries a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether you need to scale up your database instance to handle workloads during peak hours. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DescribeCloudbenchTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudbenchTaskResponse
   */
  async describeCloudbenchTaskWithOptions(request: DescribeCloudbenchTaskRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCloudbenchTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCloudbenchTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCloudbenchTaskResponse>(await this.callApi(params, req, runtime), new DescribeCloudbenchTaskResponse({}));
  }

  /**
   * Queries a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether you need to scale up your database instance to handle workloads during peak hours. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DescribeCloudbenchTaskRequest
   * @returns DescribeCloudbenchTaskResponse
   */
  async describeCloudbenchTask(request: DescribeCloudbenchTaskRequest): Promise<DescribeCloudbenchTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCloudbenchTaskWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DescribeCloudbenchTaskConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudbenchTaskConfigResponse
   */
  async describeCloudbenchTaskConfigWithOptions(request: DescribeCloudbenchTaskConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCloudbenchTaskConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCloudbenchTaskConfig",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCloudbenchTaskConfigResponse>(await this.callApi(params, req, runtime), new DescribeCloudbenchTaskConfigResponse({}));
  }

  /**
   * Queries the configurations of a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - DescribeCloudbenchTaskConfigRequest
   * @returns DescribeCloudbenchTaskConfigResponse
   */
  async describeCloudbenchTaskConfig(request: DescribeCloudbenchTaskConfigRequest): Promise<DescribeCloudbenchTaskConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCloudbenchTaskConfigWithOptions(request, runtime);
  }

  /**
   * Queries diagnostics reports.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable to the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB for Redis
   * 
   * @param request - DescribeDiagnosticReportListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDiagnosticReportListResponse
   */
  async describeDiagnosticReportListWithOptions(request: DescribeDiagnosticReportListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDiagnosticReportListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDiagnosticReportList",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDiagnosticReportListResponse>(await this.callApi(params, req, runtime), new DescribeDiagnosticReportListResponse({}));
  }

  /**
   * Queries diagnostics reports.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable to the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB for Redis
   * 
   * @param request - DescribeDiagnosticReportListRequest
   * @returns DescribeDiagnosticReportListResponse
   */
  async describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): Promise<DescribeDiagnosticReportListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDiagnosticReportListWithOptions(request, runtime);
  }

  /**
   * Queries the hot keys and the large keys in the memory in real time.
   * 
   * @remarks
   * This operation sorts list, hash, set, and zset keys based on the number of elements contained in these keys. The top three keys that contain the most elements are considered large keys. If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is available only for ApsaraDB for Redis instances that meet the following requirements:
   *     *   The instance is a Community Edition instance that uses a major version of 5.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html) and [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html).
   * 
   * @param request - DescribeHotBigKeysRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHotBigKeysResponse
   */
  async describeHotBigKeysWithOptions(request: DescribeHotBigKeysRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHotBigKeysResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeHotBigKeys",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeHotBigKeysResponse>(await this.callApi(params, req, runtime), new DescribeHotBigKeysResponse({}));
  }

  /**
   * Queries the hot keys and the large keys in the memory in real time.
   * 
   * @remarks
   * This operation sorts list, hash, set, and zset keys based on the number of elements contained in these keys. The top three keys that contain the most elements are considered large keys. If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is available only for ApsaraDB for Redis instances that meet the following requirements:
   *     *   The instance is a Community Edition instance that uses a major version of 5.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html) and [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html).
   * 
   * @param request - DescribeHotBigKeysRequest
   * @returns DescribeHotBigKeysResponse
   */
  async describeHotBigKeys(request: DescribeHotBigKeysRequest): Promise<DescribeHotBigKeysResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeHotBigKeysWithOptions(request, runtime);
  }

  /**
   * Queries the hot keys of an ApsaraDB for Redis instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis instances that meet the following requirements:
   *     *   The ApsaraDB for Redis instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For more information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html) and [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html).
   * 
   * @param request - DescribeHotKeysRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHotKeysResponse
   */
  async describeHotKeysWithOptions(request: DescribeHotKeysRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHotKeysResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeHotKeys",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeHotKeysResponse>(await this.callApi(params, req, runtime), new DescribeHotKeysResponse({}));
  }

  /**
   * Queries the hot keys of an ApsaraDB for Redis instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis instances that meet the following requirements:
   *     *   The ApsaraDB for Redis instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For more information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html) and [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html).
   * 
   * @param request - DescribeHotKeysRequest
   * @returns DescribeHotKeysResponse
   */
  async describeHotKeys(request: DescribeHotKeysRequest): Promise<DescribeHotKeysResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeHotKeysWithOptions(request, runtime);
  }

  /**
   * Queries whether Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled for a database instance.
   * 
   * @remarks
   *   For more information about the database instances that support DAS Enterprise Edition, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1 and V2.
   * >  We recommend that you call the [DescribeSqlLogConfig](https://help.aliyun.com/document_detail/2778837.html) operation to query the DAS Enterprise Edition configurations of a database instance.
   * 
   * @param request - DescribeInstanceDasProRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceDasProResponse
   */
  async describeInstanceDasProWithOptions(request: DescribeInstanceDasProRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceDasProResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeInstanceDasPro",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeInstanceDasProResponse>(await this.callApi(params, req, runtime), new DescribeInstanceDasProResponse({}));
  }

  /**
   * Queries whether Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled for a database instance.
   * 
   * @remarks
   *   For more information about the database instances that support DAS Enterprise Edition, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1 and V2.
   * >  We recommend that you call the [DescribeSqlLogConfig](https://help.aliyun.com/document_detail/2778837.html) operation to query the DAS Enterprise Edition configurations of a database instance.
   * 
   * @param request - DescribeInstanceDasProRequest
   * @returns DescribeInstanceDasProResponse
   */
  async describeInstanceDasPro(request: DescribeInstanceDasProRequest): Promise<DescribeInstanceDasProResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeInstanceDasProWithOptions(request, runtime);
  }

  /**
   * DescribeSlowLogHistogramAsync
   * 
   * @param request - DescribeSlowLogHistogramAsyncRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSlowLogHistogramAsyncResponse
   */
  async describeSlowLogHistogramAsyncWithOptions(request: DescribeSlowLogHistogramAsyncRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSlowLogHistogramAsyncResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.filters)) {
      body["Filters"] = request.filters;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSlowLogHistogramAsync",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSlowLogHistogramAsyncResponse>(await this.callApi(params, req, runtime), new DescribeSlowLogHistogramAsyncResponse({}));
  }

  /**
   * DescribeSlowLogHistogramAsync
   * 
   * @param request - DescribeSlowLogHistogramAsyncRequest
   * @returns DescribeSlowLogHistogramAsyncResponse
   */
  async describeSlowLogHistogramAsync(request: DescribeSlowLogHistogramAsyncRequest): Promise<DescribeSlowLogHistogramAsyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSlowLogHistogramAsyncWithOptions(request, runtime);
  }

  /**
   * 慢日志统计信息
   * 
   * @param request - DescribeSlowLogStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSlowLogStatisticResponse
   */
  async describeSlowLogStatisticWithOptions(request: DescribeSlowLogStatisticRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSlowLogStatisticResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.asc)) {
      body["Asc"] = request.asc;
    }

    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.filters)) {
      body["Filters"] = request.filters;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.orderBy)) {
      body["OrderBy"] = request.orderBy;
    }

    if (!Util.isUnset(request.pageNumber)) {
      body["PageNumber"] = request.pageNumber;
    }

    if (!Util.isUnset(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    if (!Util.isUnset(request.templateId)) {
      body["TemplateId"] = request.templateId;
    }

    if (!Util.isUnset(request.type)) {
      body["Type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSlowLogStatistic",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSlowLogStatisticResponse>(await this.callApi(params, req, runtime), new DescribeSlowLogStatisticResponse({}));
  }

  /**
   * 慢日志统计信息
   * 
   * @param request - DescribeSlowLogStatisticRequest
   * @returns DescribeSlowLogStatisticResponse
   */
  async describeSlowLogStatistic(request: DescribeSlowLogStatisticRequest): Promise<DescribeSlowLogStatisticResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSlowLogStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of Database Autonomy Service (DAS) Enterprise Edition that is enabled for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSqlLogConfigResponse
   */
  async describeSqlLogConfigWithOptions(request: DescribeSqlLogConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSqlLogConfigResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSqlLogConfig",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSqlLogConfigResponse>(await this.callApi(params, req, runtime), new DescribeSqlLogConfigResponse({}));
  }

  /**
   * Queries the configurations of Database Autonomy Service (DAS) Enterprise Edition that is enabled for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogConfigRequest
   * @returns DescribeSqlLogConfigResponse
   */
  async describeSqlLogConfig(request: DescribeSqlLogConfigRequest): Promise<DescribeSqlLogConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSqlLogConfigWithOptions(request, runtime);
  }

  /**
   * Queries the log details of a database instance for which Database Autonomy Service (DAS) Enterprise Edition is enabled.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSqlLogRecordsResponse
   */
  async describeSqlLogRecordsWithOptions(request: DescribeSqlLogRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSqlLogRecordsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.filters)) {
      query["Filters"] = request.filters;
    }

    if (!Util.isUnset(request.role)) {
      query["Role"] = request.role;
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.pageNo)) {
      body["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSqlLogRecords",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSqlLogRecordsResponse>(await this.callApi(params, req, runtime), new DescribeSqlLogRecordsResponse({}));
  }

  /**
   * Queries the log details of a database instance for which Database Autonomy Service (DAS) Enterprise Edition is enabled.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogRecordsRequest
   * @returns DescribeSqlLogRecordsResponse
   */
  async describeSqlLogRecords(request: DescribeSqlLogRecordsRequest): Promise<DescribeSqlLogRecordsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSqlLogRecordsWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of Database Autonomy Service (DAS) Enterprise Edition.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSqlLogStatisticResponse
   */
  async describeSqlLogStatisticWithOptions(request: DescribeSqlLogStatisticRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSqlLogStatisticResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSqlLogStatistic",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSqlLogStatisticResponse>(await this.callApi(params, req, runtime), new DescribeSqlLogStatisticResponse({}));
  }

  /**
   * Queries the statistics of Database Autonomy Service (DAS) Enterprise Edition.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogStatisticRequest
   * @returns DescribeSqlLogStatisticResponse
   */
  async describeSqlLogStatistic(request: DescribeSqlLogStatisticRequest): Promise<DescribeSqlLogStatisticResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSqlLogStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the details of an offline task in Database Autonomy Service (DAS) Enterprise Edition.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSqlLogTaskResponse
   */
  async describeSqlLogTaskWithOptions(request: DescribeSqlLogTaskRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSqlLogTaskResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.pageNo)) {
      body["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.taskId)) {
      body["TaskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSqlLogTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSqlLogTaskResponse>(await this.callApi(params, req, runtime), new DescribeSqlLogTaskResponse({}));
  }

  /**
   * Queries the details of an offline task in Database Autonomy Service (DAS) Enterprise Edition.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogTaskRequest
   * @returns DescribeSqlLogTaskResponse
   */
  async describeSqlLogTask(request: DescribeSqlLogTaskRequest): Promise<DescribeSqlLogTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSqlLogTaskWithOptions(request, runtime);
  }

  /**
   * Queries the audit log tasks of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSqlLogTasksResponse
   */
  async describeSqlLogTasksWithOptions(request: DescribeSqlLogTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSqlLogTasksResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.filters)) {
      body["Filters"] = request.filters;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.pageNo)) {
      body["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSqlLogTasks",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSqlLogTasksResponse>(await this.callApi(params, req, runtime), new DescribeSqlLogTasksResponse({}));
  }

  /**
   * Queries the audit log tasks of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - DescribeSqlLogTasksRequest
   * @returns DescribeSqlLogTasksResponse
   */
  async describeSqlLogTasks(request: DescribeSqlLogTasksRequest): Promise<DescribeSqlLogTasksResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSqlLogTasksWithOptions(request, runtime);
  }

  /**
   * Queries the top 100 large keys over a period of time.
   * 
   * @remarks
   * The list, hash, set, and zset keys are sorted based on the number of elements in these keys. The top three keys that have the most elements are considered large keys.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
   *     *   The instance is ApsaraDB for Redis Community Edition instances that use a major version of 5.0 or later or a performance-enhanced instance of the ApsaraDB for Redis Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html) and [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html).
   * 
   * @param request - DescribeTopBigKeysRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTopBigKeysResponse
   */
  async describeTopBigKeysWithOptions(request: DescribeTopBigKeysRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTopBigKeysResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTopBigKeys",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTopBigKeysResponse>(await this.callApi(params, req, runtime), new DescribeTopBigKeysResponse({}));
  }

  /**
   * Queries the top 100 large keys over a period of time.
   * 
   * @remarks
   * The list, hash, set, and zset keys are sorted based on the number of elements in these keys. The top three keys that have the most elements are considered large keys.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
   *     *   The instance is ApsaraDB for Redis Community Edition instances that use a major version of 5.0 or later or a performance-enhanced instance of the ApsaraDB for Redis Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html) and [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html).
   * 
   * @param request - DescribeTopBigKeysRequest
   * @returns DescribeTopBigKeysResponse
   */
  async describeTopBigKeys(request: DescribeTopBigKeysRequest): Promise<DescribeTopBigKeysResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTopBigKeysWithOptions(request, runtime);
  }

  /**
   * Queries the top 100 hotkeys over a period of time.
   * 
   * @remarks
   * If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
   *     *   The instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For information about how to query and update the minor version of an instance, see [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html) and [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html).
   * 
   * @param request - DescribeTopHotKeysRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTopHotKeysResponse
   */
  async describeTopHotKeysWithOptions(request: DescribeTopHotKeysRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTopHotKeysResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTopHotKeys",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTopHotKeysResponse>(await this.callApi(params, req, runtime), new DescribeTopHotKeysResponse({}));
  }

  /**
   * Queries the top 100 hotkeys over a period of time.
   * 
   * @remarks
   * If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
   * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
   *     *   The instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
   *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
   * >  For information about how to query and update the minor version of an instance, see [DescribeEngineVersion](https://help.aliyun.com/document_detail/95268.html) and [ModifyInstanceMinorVersion](https://help.aliyun.com/document_detail/129381.html).
   * 
   * @param request - DescribeTopHotKeysRequest
   * @returns DescribeTopHotKeysResponse
   */
  async describeTopHotKeys(request: DescribeTopHotKeysRequest): Promise<DescribeTopHotKeysResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTopHotKeysWithOptions(request, runtime);
  }

  /**
   * Disables all throttling rules that are in effect.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - DisableAllSqlConcurrencyControlRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableAllSqlConcurrencyControlRulesResponse
   */
  async disableAllSqlConcurrencyControlRulesWithOptions(request: DisableAllSqlConcurrencyControlRulesRequest, runtime: $Util.RuntimeOptions): Promise<DisableAllSqlConcurrencyControlRulesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DisableAllSqlConcurrencyControlRules",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DisableAllSqlConcurrencyControlRulesResponse>(await this.callApi(params, req, runtime), new DisableAllSqlConcurrencyControlRulesResponse({}));
  }

  /**
   * Disables all throttling rules that are in effect.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - DisableAllSqlConcurrencyControlRulesRequest
   * @returns DisableAllSqlConcurrencyControlRulesResponse
   */
  async disableAllSqlConcurrencyControlRules(request: DisableAllSqlConcurrencyControlRulesRequest): Promise<DisableAllSqlConcurrencyControlRulesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.disableAllSqlConcurrencyControlRulesWithOptions(request, runtime);
  }

  /**
   * Disables the automatic tablespace fragment recycling feature for database instances at a time.
   * 
   * @remarks
   * If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * 
   * @param request - DisableAutoResourceOptimizeRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableAutoResourceOptimizeRulesResponse
   */
  async disableAutoResourceOptimizeRulesWithOptions(request: DisableAutoResourceOptimizeRulesRequest, runtime: $Util.RuntimeOptions): Promise<DisableAutoResourceOptimizeRulesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DisableAutoResourceOptimizeRules",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DisableAutoResourceOptimizeRulesResponse>(await this.callApi(params, req, runtime), new DisableAutoResourceOptimizeRulesResponse({}));
  }

  /**
   * Disables the automatic tablespace fragment recycling feature for database instances at a time.
   * 
   * @remarks
   * If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * 
   * @param request - DisableAutoResourceOptimizeRulesRequest
   * @returns DisableAutoResourceOptimizeRulesResponse
   */
  async disableAutoResourceOptimizeRules(request: DisableAutoResourceOptimizeRulesRequest): Promise<DisableAutoResourceOptimizeRulesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.disableAutoResourceOptimizeRulesWithOptions(request, runtime);
  }

  /**
   * Disables the automatic SQL throttling feature for multiple database instances at a time.
   * 
   * @remarks
   * If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * 
   * @param request - DisableAutoThrottleRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableAutoThrottleRulesResponse
   */
  async disableAutoThrottleRulesWithOptions(request: DisableAutoThrottleRulesRequest, runtime: $Util.RuntimeOptions): Promise<DisableAutoThrottleRulesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DisableAutoThrottleRules",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DisableAutoThrottleRulesResponse>(await this.callApi(params, req, runtime), new DisableAutoThrottleRulesResponse({}));
  }

  /**
   * Disables the automatic SQL throttling feature for multiple database instances at a time.
   * 
   * @remarks
   * If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * 
   * @param request - DisableAutoThrottleRulesRequest
   * @returns DisableAutoThrottleRulesResponse
   */
  async disableAutoThrottleRules(request: DisableAutoThrottleRulesRequest): Promise<DisableAutoThrottleRulesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.disableAutoThrottleRulesWithOptions(request, runtime);
  }

  /**
   * Deactivates Database Autonomy Service (DAS) Professional Edition.
   * 
   * @remarks
   *   For more information about the database instances that support DAS Enterprise Edition, see [Overview](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1.
   * >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to enable or disable DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - DisableDasProRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableDasProResponse
   */
  async disableDasProWithOptions(request: DisableDasProRequest, runtime: $Util.RuntimeOptions): Promise<DisableDasProResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DisableDasPro",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DisableDasProResponse>(await this.callApi(params, req, runtime), new DisableDasProResponse({}));
  }

  /**
   * Deactivates Database Autonomy Service (DAS) Professional Edition.
   * 
   * @remarks
   *   For more information about the database instances that support DAS Enterprise Edition, see [Overview](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1.
   * >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to enable or disable DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - DisableDasProRequest
   * @returns DisableDasProResponse
   */
  async disableDasPro(request: DisableDasProRequest): Promise<DisableDasProResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.disableDasProWithOptions(request, runtime);
  }

  /**
   * Disables the auto scaling feature for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis instances.
   * 
   * @param request - DisableInstanceDasConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableInstanceDasConfigResponse
   */
  async disableInstanceDasConfigWithOptions(request: DisableInstanceDasConfigRequest, runtime: $Util.RuntimeOptions): Promise<DisableInstanceDasConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.scaleType)) {
      query["ScaleType"] = request.scaleType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DisableInstanceDasConfig",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DisableInstanceDasConfigResponse>(await this.callApi(params, req, runtime), new DisableInstanceDasConfigResponse({}));
  }

  /**
   * Disables the auto scaling feature for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to ApsaraDB for Redis instances.
   * 
   * @param request - DisableInstanceDasConfigRequest
   * @returns DisableInstanceDasConfigResponse
   */
  async disableInstanceDasConfig(request: DisableInstanceDasConfigRequest): Promise<DisableInstanceDasConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.disableInstanceDasConfigWithOptions(request, runtime);
  }

  /**
   * Disables a throttling rule.
   * 
   * @remarks
   * This operation is applicable to the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - DisableSqlConcurrencyControlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableSqlConcurrencyControlResponse
   */
  async disableSqlConcurrencyControlWithOptions(request: DisableSqlConcurrencyControlRequest, runtime: $Util.RuntimeOptions): Promise<DisableSqlConcurrencyControlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.itemId)) {
      query["ItemId"] = request.itemId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DisableSqlConcurrencyControl",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DisableSqlConcurrencyControlResponse>(await this.callApi(params, req, runtime), new DisableSqlConcurrencyControlResponse({}));
  }

  /**
   * Disables a throttling rule.
   * 
   * @remarks
   * This operation is applicable to the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - DisableSqlConcurrencyControlRequest
   * @returns DisableSqlConcurrencyControlResponse
   */
  async disableSqlConcurrencyControl(request: DisableSqlConcurrencyControlRequest): Promise<DisableSqlConcurrencyControlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.disableSqlConcurrencyControlWithOptions(request, runtime);
  }

  /**
   * Activates Database Autonomy Service (DAS) Professional Edition.
   * 
   * @remarks
   *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1.
   * >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to activate or deactivate DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [DAS editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - EnableDasProRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableDasProResponse
   */
  async enableDasProWithOptions(request: EnableDasProRequest, runtime: $Util.RuntimeOptions): Promise<EnableDasProResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.sqlRetention)) {
      query["SqlRetention"] = request.sqlRetention;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "EnableDasPro",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<EnableDasProResponse>(await this.callApi(params, req, runtime), new EnableDasProResponse({}));
  }

  /**
   * Activates Database Autonomy Service (DAS) Professional Edition.
   * 
   * @remarks
   *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1.
   * >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to activate or deactivate DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [DAS editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - EnableDasProRequest
   * @returns EnableDasProResponse
   */
  async enableDasPro(request: EnableDasProRequest): Promise<EnableDasProResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.enableDasProWithOptions(request, runtime);
  }

  /**
   * Enables SQL throttling to control the numbers of database access requests and concurrent SQL statements.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - EnableSqlConcurrencyControlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableSqlConcurrencyControlResponse
   */
  async enableSqlConcurrencyControlWithOptions(request: EnableSqlConcurrencyControlRequest, runtime: $Util.RuntimeOptions): Promise<EnableSqlConcurrencyControlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.concurrencyControlTime)) {
      query["ConcurrencyControlTime"] = request.concurrencyControlTime;
    }

    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.maxConcurrency)) {
      query["MaxConcurrency"] = request.maxConcurrency;
    }

    if (!Util.isUnset(request.sqlKeywords)) {
      query["SqlKeywords"] = request.sqlKeywords;
    }

    if (!Util.isUnset(request.sqlType)) {
      query["SqlType"] = request.sqlType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "EnableSqlConcurrencyControl",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<EnableSqlConcurrencyControlResponse>(await this.callApi(params, req, runtime), new EnableSqlConcurrencyControlResponse({}));
  }

  /**
   * Enables SQL throttling to control the numbers of database access requests and concurrent SQL statements.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - EnableSqlConcurrencyControlRequest
   * @returns EnableSqlConcurrencyControlResponse
   */
  async enableSqlConcurrencyControl(request: EnableSqlConcurrencyControlRequest): Promise<EnableSqlConcurrencyControlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.enableSqlConcurrencyControlWithOptions(request, runtime);
  }

  /**
   * Asynchronously queries the IDs of SQL statements that generate a MySQL error code in the SQL Explorer results of a database instance.
   * 
   * @remarks
   * >  GetAsyncErrorRequestListByCode is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the **isFinish** parameter is **false** in the response, wait for 1 second and then send a request again. If the value of the **isFinish** parameter is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Enable and manage DAS Economy Edition and DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
   * 
   * @param request - GetAsyncErrorRequestListByCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAsyncErrorRequestListByCodeResponse
   */
  async getAsyncErrorRequestListByCodeWithOptions(request: GetAsyncErrorRequestListByCodeRequest, runtime: $Util.RuntimeOptions): Promise<GetAsyncErrorRequestListByCodeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.end)) {
      query["End"] = request.end;
    }

    if (!Util.isUnset(request.errorCode)) {
      query["ErrorCode"] = request.errorCode;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.start)) {
      query["Start"] = request.start;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAsyncErrorRequestListByCode",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAsyncErrorRequestListByCodeResponse>(await this.callApi(params, req, runtime), new GetAsyncErrorRequestListByCodeResponse({}));
  }

  /**
   * Asynchronously queries the IDs of SQL statements that generate a MySQL error code in the SQL Explorer results of a database instance.
   * 
   * @remarks
   * >  GetAsyncErrorRequestListByCode is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the **isFinish** parameter is **false** in the response, wait for 1 second and then send a request again. If the value of the **isFinish** parameter is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Enable and manage DAS Economy Edition and DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
   * 
   * @param request - GetAsyncErrorRequestListByCodeRequest
   * @returns GetAsyncErrorRequestListByCodeResponse
   */
  async getAsyncErrorRequestListByCode(request: GetAsyncErrorRequestListByCodeRequest): Promise<GetAsyncErrorRequestListByCodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAsyncErrorRequestListByCodeWithOptions(request, runtime);
  }

  /**
   * Asynchronously queries the MySQL error codes in SQL Explorer data and the number of SQL queries corresponding to each error code.
   * 
   * @remarks
   * >  GetAsyncErrorRequestStatByCode is an asynchronous operation After a request is sent, the complete results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then send a request again. If the value of **isFinish** is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetAsyncErrorRequestStatByCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAsyncErrorRequestStatByCodeResponse
   */
  async getAsyncErrorRequestStatByCodeWithOptions(request: GetAsyncErrorRequestStatByCodeRequest, runtime: $Util.RuntimeOptions): Promise<GetAsyncErrorRequestStatByCodeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!Util.isUnset(request.end)) {
      query["End"] = request.end;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.start)) {
      query["Start"] = request.start;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAsyncErrorRequestStatByCode",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAsyncErrorRequestStatByCodeResponse>(await this.callApi(params, req, runtime), new GetAsyncErrorRequestStatByCodeResponse({}));
  }

  /**
   * Asynchronously queries the MySQL error codes in SQL Explorer data and the number of SQL queries corresponding to each error code.
   * 
   * @remarks
   * >  GetAsyncErrorRequestStatByCode is an asynchronous operation After a request is sent, the complete results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then send a request again. If the value of **isFinish** is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetAsyncErrorRequestStatByCodeRequest
   * @returns GetAsyncErrorRequestStatByCodeResponse
   */
  async getAsyncErrorRequestStatByCode(request: GetAsyncErrorRequestStatByCodeRequest): Promise<GetAsyncErrorRequestStatByCodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAsyncErrorRequestStatByCodeWithOptions(request, runtime);
  }

  /**
   * Asynchronously obtains the number of failed executions of SQL templates based on SQL Explorer data.
   * 
   * @remarks
   * >  GetAsyncErrorRequestStatResult is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then send a request again. If the value of **isFinish** is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetAsyncErrorRequestStatResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAsyncErrorRequestStatResultResponse
   */
  async getAsyncErrorRequestStatResultWithOptions(request: GetAsyncErrorRequestStatResultRequest, runtime: $Util.RuntimeOptions): Promise<GetAsyncErrorRequestStatResultResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!Util.isUnset(request.end)) {
      query["End"] = request.end;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.sqlIdList)) {
      query["SqlIdList"] = request.sqlIdList;
    }

    if (!Util.isUnset(request.start)) {
      query["Start"] = request.start;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAsyncErrorRequestStatResult",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAsyncErrorRequestStatResultResponse>(await this.callApi(params, req, runtime), new GetAsyncErrorRequestStatResultResponse({}));
  }

  /**
   * Asynchronously obtains the number of failed executions of SQL templates based on SQL Explorer data.
   * 
   * @remarks
   * >  GetAsyncErrorRequestStatResult is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then send a request again. If the value of **isFinish** is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetAsyncErrorRequestStatResultRequest
   * @returns GetAsyncErrorRequestStatResultResponse
   */
  async getAsyncErrorRequestStatResult(request: GetAsyncErrorRequestStatResultRequest): Promise<GetAsyncErrorRequestStatResultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAsyncErrorRequestStatResultWithOptions(request, runtime);
  }

  /**
   * Queries the usage of auto-increment table IDs.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
   * 
   * @param request - GetAutoIncrementUsageStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAutoIncrementUsageStatisticResponse
   */
  async getAutoIncrementUsageStatisticWithOptions(request: GetAutoIncrementUsageStatisticRequest, runtime: $Util.RuntimeOptions): Promise<GetAutoIncrementUsageStatisticResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbNames)) {
      query["DbNames"] = request.dbNames;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.ratioFilter)) {
      query["RatioFilter"] = request.ratioFilter;
    }

    if (!Util.isUnset(request.realTime)) {
      query["RealTime"] = request.realTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAutoIncrementUsageStatistic",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAutoIncrementUsageStatisticResponse>(await this.callApi(params, req, runtime), new GetAutoIncrementUsageStatisticResponse({}));
  }

  /**
   * Queries the usage of auto-increment table IDs.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
   * 
   * @param request - GetAutoIncrementUsageStatisticRequest
   * @returns GetAutoIncrementUsageStatisticResponse
   */
  async getAutoIncrementUsageStatistic(request: GetAutoIncrementUsageStatisticRequest): Promise<GetAutoIncrementUsageStatisticResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAutoIncrementUsageStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the automatic fragment recycling rules of database instances.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The database instance is an ApsaraDB RDS for MySQL instance of High-availability Edition.
   * *   The database instance has four or more cores, and **innodb_file_per_table** is set to **ON**.
   * 
   * @param request - GetAutoResourceOptimizeRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAutoResourceOptimizeRulesResponse
   */
  async getAutoResourceOptimizeRulesWithOptions(request: GetAutoResourceOptimizeRulesRequest, runtime: $Util.RuntimeOptions): Promise<GetAutoResourceOptimizeRulesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAutoResourceOptimizeRules",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAutoResourceOptimizeRulesResponse>(await this.callApi(params, req, runtime), new GetAutoResourceOptimizeRulesResponse({}));
  }

  /**
   * Queries the automatic fragment recycling rules of database instances.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The database instance is an ApsaraDB RDS for MySQL instance of High-availability Edition.
   * *   The database instance has four or more cores, and **innodb_file_per_table** is set to **ON**.
   * 
   * @param request - GetAutoResourceOptimizeRulesRequest
   * @returns GetAutoResourceOptimizeRulesResponse
   */
  async getAutoResourceOptimizeRules(request: GetAutoResourceOptimizeRulesRequest): Promise<GetAutoResourceOptimizeRulesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAutoResourceOptimizeRulesWithOptions(request, runtime);
  }

  /**
   * Queries the automatic SQL throttling rules of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The database instance that you want to manage must be of one of the following types:
   *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   * 
   * @param request - GetAutoThrottleRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAutoThrottleRulesResponse
   */
  async getAutoThrottleRulesWithOptions(request: GetAutoThrottleRulesRequest, runtime: $Util.RuntimeOptions): Promise<GetAutoThrottleRulesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAutoThrottleRules",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAutoThrottleRulesResponse>(await this.callApi(params, req, runtime), new GetAutoThrottleRulesResponse({}));
  }

  /**
   * Queries the automatic SQL throttling rules of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The database instance that you want to manage must be of one of the following types:
   *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   * 
   * @param request - GetAutoThrottleRulesRequest
   * @returns GetAutoThrottleRulesResponse
   */
  async getAutoThrottleRules(request: GetAutoThrottleRulesRequest): Promise<GetAutoThrottleRulesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAutoThrottleRulesWithOptions(request, runtime);
  }

  /**
   * Queries the details of notification events of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
   * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * 
   * @param request - GetAutonomousNotifyEventContentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAutonomousNotifyEventContentResponse
   */
  async getAutonomousNotifyEventContentWithOptions(request: GetAutonomousNotifyEventContentRequest, runtime: $Util.RuntimeOptions): Promise<GetAutonomousNotifyEventContentResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.spanId)) {
      query["SpanId"] = request.spanId;
    }

    if (!Util.isUnset(request.context)) {
      query["__context"] = request.context;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAutonomousNotifyEventContent",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAutonomousNotifyEventContentResponse>(await this.callApi(params, req, runtime), new GetAutonomousNotifyEventContentResponse({}));
  }

  /**
   * Queries the details of notification events of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
   * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * 
   * @param request - GetAutonomousNotifyEventContentRequest
   * @returns GetAutonomousNotifyEventContentResponse
   */
  async getAutonomousNotifyEventContent(request: GetAutonomousNotifyEventContentRequest): Promise<GetAutonomousNotifyEventContentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAutonomousNotifyEventContentWithOptions(request, runtime);
  }

  /**
   * Queries the notification events of one or more urgency levels within a period.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
   * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * 
   * @param request - GetAutonomousNotifyEventsInRangeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAutonomousNotifyEventsInRangeResponse
   */
  async getAutonomousNotifyEventsInRangeWithOptions(request: GetAutonomousNotifyEventsInRangeRequest, runtime: $Util.RuntimeOptions): Promise<GetAutonomousNotifyEventsInRangeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventContext)) {
      query["EventContext"] = request.eventContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.level)) {
      query["Level"] = request.level;
    }

    if (!Util.isUnset(request.minLevel)) {
      query["MinLevel"] = request.minLevel;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.pageOffset)) {
      query["PageOffset"] = request.pageOffset;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!Util.isUnset(request.context)) {
      query["__context"] = request.context;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetAutonomousNotifyEventsInRange",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetAutonomousNotifyEventsInRangeResponse>(await this.callApi(params, req, runtime), new GetAutonomousNotifyEventsInRangeResponse({}));
  }

  /**
   * Queries the notification events of one or more urgency levels within a period.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
   * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * 
   * @param request - GetAutonomousNotifyEventsInRangeRequest
   * @returns GetAutonomousNotifyEventsInRangeResponse
   */
  async getAutonomousNotifyEventsInRange(request: GetAutonomousNotifyEventsInRangeRequest): Promise<GetAutonomousNotifyEventsInRangeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getAutonomousNotifyEventsInRangeWithOptions(request, runtime);
  }

  /**
   * Queries the blocking data of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetBlockingDetailListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetBlockingDetailListResponse
   */
  async getBlockingDetailListWithOptions(request: GetBlockingDetailListRequest, runtime: $Util.RuntimeOptions): Promise<GetBlockingDetailListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbNameList)) {
      query["DbNameList"] = request.dbNameList;
    }

    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.queryHash)) {
      query["QueryHash"] = request.queryHash;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetBlockingDetailList",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetBlockingDetailListResponse>(await this.callApi(params, req, runtime), new GetBlockingDetailListResponse({}));
  }

  /**
   * Queries the blocking data of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetBlockingDetailListRequest
   * @returns GetBlockingDetailListResponse
   */
  async getBlockingDetailList(request: GetBlockingDetailListRequest): Promise<GetBlockingDetailListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getBlockingDetailListWithOptions(request, runtime);
  }

  /**
   * Queries the diagnosis of network connectivity when a user accesses a specific database instance by specifying an IP address.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   The database instance that you want to manage is connected to DAS.
   * 
   * @param request - GetDBInstanceConnectivityDiagnosisRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDBInstanceConnectivityDiagnosisResponse
   */
  async getDBInstanceConnectivityDiagnosisWithOptions(request: GetDBInstanceConnectivityDiagnosisRequest, runtime: $Util.RuntimeOptions): Promise<GetDBInstanceConnectivityDiagnosisResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.srcIp)) {
      query["SrcIp"] = request.srcIp;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetDBInstanceConnectivityDiagnosis",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetDBInstanceConnectivityDiagnosisResponse>(await this.callApi(params, req, runtime), new GetDBInstanceConnectivityDiagnosisResponse({}));
  }

  /**
   * Queries the diagnosis of network connectivity when a user accesses a specific database instance by specifying an IP address.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   The database instance that you want to manage is connected to DAS.
   * 
   * @param request - GetDBInstanceConnectivityDiagnosisRequest
   * @returns GetDBInstanceConnectivityDiagnosisResponse
   */
  async getDBInstanceConnectivityDiagnosis(request: GetDBInstanceConnectivityDiagnosisRequest): Promise<GetDBInstanceConnectivityDiagnosisResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getDBInstanceConnectivityDiagnosisWithOptions(request, runtime);
  }

  /**
   * Queries the storage usage of a database instance for which Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled.
   * 
   * @remarks
   *   For information about the database instances that support this operation, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1 and V2.
   * >  We recommend that you call the [DescribeSqlLogStatistic](https://help.aliyun.com/document_detail/2778836.html) operation to query the data statistics of a database instance for which DAS Enterprise Edition is enabled.
   * 
   * @param request - GetDasProServiceUsageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDasProServiceUsageResponse
   */
  async getDasProServiceUsageWithOptions(request: GetDasProServiceUsageRequest, runtime: $Util.RuntimeOptions): Promise<GetDasProServiceUsageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetDasProServiceUsage",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetDasProServiceUsageResponse>(await this.callApi(params, req, runtime), new GetDasProServiceUsageResponse({}));
  }

  /**
   * Queries the storage usage of a database instance for which Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled.
   * 
   * @remarks
   *   For information about the database instances that support this operation, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable only to DAS Enterprise Edition V1 and V2.
   * >  We recommend that you call the [DescribeSqlLogStatistic](https://help.aliyun.com/document_detail/2778836.html) operation to query the data statistics of a database instance for which DAS Enterprise Edition is enabled.
   * 
   * @param request - GetDasProServiceUsageRequest
   * @returns GetDasProServiceUsageResponse
   */
  async getDasProServiceUsage(request: GetDasProServiceUsageRequest): Promise<GetDasProServiceUsageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getDasProServiceUsageWithOptions(request, runtime);
  }

  /**
   * Queries the hot data of audit logs.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable to PolarDB for MySQL, ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and ApsaraDB RDS for SQL Server.
   * >  The beginning of the time range to query can be up to seven days earlier than the current time. The interval between the start time and the end time cannot exceed one day. This operation can return a maximum of 10,000 entries.
   * 
   * @param request - GetDasSQLLogHotDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDasSQLLogHotDataResponse
   */
  async getDasSQLLogHotDataWithOptions(request: GetDasSQLLogHotDataRequest, runtime: $Util.RuntimeOptions): Promise<GetDasSQLLogHotDataResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.accountName)) {
      body["AccountName"] = request.accountName;
    }

    if (!Util.isUnset(request.childDBInstanceIDs)) {
      body["ChildDBInstanceIDs"] = request.childDBInstanceIDs;
    }

    if (!Util.isUnset(request.DBName)) {
      body["DBName"] = request.DBName;
    }

    if (!Util.isUnset(request.end)) {
      body["End"] = request.end;
    }

    if (!Util.isUnset(request.fail)) {
      body["Fail"] = request.fail;
    }

    if (!Util.isUnset(request.hostAddress)) {
      body["HostAddress"] = request.hostAddress;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.logicalOperator)) {
      body["LogicalOperator"] = request.logicalOperator;
    }

    if (!Util.isUnset(request.maxLatancy)) {
      body["MaxLatancy"] = request.maxLatancy;
    }

    if (!Util.isUnset(request.maxRecordsPerPage)) {
      body["MaxRecordsPerPage"] = request.maxRecordsPerPage;
    }

    if (!Util.isUnset(request.maxRows)) {
      body["MaxRows"] = request.maxRows;
    }

    if (!Util.isUnset(request.maxScanRows)) {
      body["MaxScanRows"] = request.maxScanRows;
    }

    if (!Util.isUnset(request.maxSpillCnt)) {
      body["MaxSpillCnt"] = request.maxSpillCnt;
    }

    if (!Util.isUnset(request.minLatancy)) {
      body["MinLatancy"] = request.minLatancy;
    }

    if (!Util.isUnset(request.minRows)) {
      body["MinRows"] = request.minRows;
    }

    if (!Util.isUnset(request.minScanRows)) {
      body["MinScanRows"] = request.minScanRows;
    }

    if (!Util.isUnset(request.minSpillCnt)) {
      body["MinSpillCnt"] = request.minSpillCnt;
    }

    if (!Util.isUnset(request.pageNumbers)) {
      body["PageNumbers"] = request.pageNumbers;
    }

    if (!Util.isUnset(request.queryKeyword)) {
      body["QueryKeyword"] = request.queryKeyword;
    }

    if (!Util.isUnset(request.role)) {
      body["Role"] = request.role;
    }

    if (!Util.isUnset(request.sortKey)) {
      body["SortKey"] = request.sortKey;
    }

    if (!Util.isUnset(request.sortMethod)) {
      body["SortMethod"] = request.sortMethod;
    }

    if (!Util.isUnset(request.sqlType)) {
      body["SqlType"] = request.sqlType;
    }

    if (!Util.isUnset(request.start)) {
      body["Start"] = request.start;
    }

    if (!Util.isUnset(request.state)) {
      body["State"] = request.state;
    }

    if (!Util.isUnset(request.threadID)) {
      body["ThreadID"] = request.threadID;
    }

    if (!Util.isUnset(request.traceId)) {
      body["TraceId"] = request.traceId;
    }

    if (!Util.isUnset(request.transactionId)) {
      body["TransactionId"] = request.transactionId;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GetDasSQLLogHotData",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetDasSQLLogHotDataResponse>(await this.callApi(params, req, runtime), new GetDasSQLLogHotDataResponse({}));
  }

  /**
   * Queries the hot data of audit logs.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation is applicable to PolarDB for MySQL, ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and ApsaraDB RDS for SQL Server.
   * >  The beginning of the time range to query can be up to seven days earlier than the current time. The interval between the start time and the end time cannot exceed one day. This operation can return a maximum of 10,000 entries.
   * 
   * @param request - GetDasSQLLogHotDataRequest
   * @returns GetDasSQLLogHotDataResponse
   */
  async getDasSQLLogHotData(request: GetDasSQLLogHotDataRequest): Promise<GetDasSQLLogHotDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getDasSQLLogHotDataWithOptions(request, runtime);
  }

  /**
   * 查询单个死锁详情
   * 
   * @param request - GetDeadLockDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDeadLockDetailResponse
   */
  async getDeadLockDetailWithOptions(request: GetDeadLockDetailRequest, runtime: $Util.RuntimeOptions): Promise<GetDeadLockDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.source)) {
      query["Source"] = request.source;
    }

    if (!Util.isUnset(request.textId)) {
      query["TextId"] = request.textId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetDeadLockDetail",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetDeadLockDetailResponse>(await this.callApi(params, req, runtime), new GetDeadLockDetailResponse({}));
  }

  /**
   * 查询单个死锁详情
   * 
   * @param request - GetDeadLockDetailRequest
   * @returns GetDeadLockDetailResponse
   */
  async getDeadLockDetail(request: GetDeadLockDetailRequest): Promise<GetDeadLockDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getDeadLockDetailWithOptions(request, runtime);
  }

  /**
   * Queries the deadlock details of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetDeadLockDetailListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDeadLockDetailListResponse
   */
  async getDeadLockDetailListWithOptions(request: GetDeadLockDetailListRequest, runtime: $Util.RuntimeOptions): Promise<GetDeadLockDetailListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbNameList)) {
      query["DbNameList"] = request.dbNameList;
    }

    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetDeadLockDetailList",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetDeadLockDetailListResponse>(await this.callApi(params, req, runtime), new GetDeadLockDetailListResponse({}));
  }

  /**
   * Queries the deadlock details of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetDeadLockDetailListRequest
   * @returns GetDeadLockDetailListResponse
   */
  async getDeadLockDetailList(request: GetDeadLockDetailListRequest): Promise<GetDeadLockDetailListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getDeadLockDetailListWithOptions(request, runtime);
  }

  /**
   * 获取历史死锁记录
   * 
   * @param request - GetDeadLockHistoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDeadLockHistoryResponse
   */
  async getDeadLockHistoryWithOptions(request: GetDeadLockHistoryRequest, runtime: $Util.RuntimeOptions): Promise<GetDeadLockHistoryResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.source)) {
      query["Source"] = request.source;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetDeadLockHistory",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetDeadLockHistoryResponse>(await this.callApi(params, req, runtime), new GetDeadLockHistoryResponse({}));
  }

  /**
   * 获取历史死锁记录
   * 
   * @param request - GetDeadLockHistoryRequest
   * @returns GetDeadLockHistoryResponse
   */
  async getDeadLockHistory(request: GetDeadLockHistoryRequest): Promise<GetDeadLockHistoryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getDeadLockHistoryWithOptions(request, runtime);
  }

  /**
   * 查询时间范围内基于错误日志分析的死锁数量
   * 
   * @param request - GetDeadlockHistogramRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDeadlockHistogramResponse
   */
  async getDeadlockHistogramWithOptions(request: GetDeadlockHistogramRequest, runtime: $Util.RuntimeOptions): Promise<GetDeadlockHistogramResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    if (!Util.isUnset(request.status)) {
      body["Status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GetDeadlockHistogram",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetDeadlockHistogramResponse>(await this.callApi(params, req, runtime), new GetDeadlockHistogramResponse({}));
  }

  /**
   * 查询时间范围内基于错误日志分析的死锁数量
   * 
   * @param request - GetDeadlockHistogramRequest
   * @returns GetDeadlockHistogramResponse
   */
  async getDeadlockHistogram(request: GetDeadlockHistogramRequest): Promise<GetDeadlockHistogramResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getDeadlockHistogramWithOptions(request, runtime);
  }

  /**
   * @param request - GetEndpointSwitchTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetEndpointSwitchTaskResponse
   */
  async getEndpointSwitchTaskWithOptions(request: GetEndpointSwitchTaskRequest, runtime: $Util.RuntimeOptions): Promise<GetEndpointSwitchTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!Util.isUnset(request.uid)) {
      query["Uid"] = request.uid;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    if (!Util.isUnset(request.context)) {
      query["__context"] = request.context;
    }

    if (!Util.isUnset(request.accessKey)) {
      query["accessKey"] = request.accessKey;
    }

    if (!Util.isUnset(request.signature)) {
      query["signature"] = request.signature;
    }

    if (!Util.isUnset(request.skipAuth)) {
      query["skipAuth"] = request.skipAuth;
    }

    if (!Util.isUnset(request.timestamp)) {
      query["timestamp"] = request.timestamp;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetEndpointSwitchTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetEndpointSwitchTaskResponse>(await this.callApi(params, req, runtime), new GetEndpointSwitchTaskResponse({}));
  }

  /**
   * @param request - GetEndpointSwitchTaskRequest
   * @returns GetEndpointSwitchTaskResponse
   */
  async getEndpointSwitchTask(request: GetEndpointSwitchTaskRequest): Promise<GetEndpointSwitchTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getEndpointSwitchTaskWithOptions(request, runtime);
  }

  /**
   * Asynchronously queries information about failed SQL queries in SQL Explorer data. You can query up to 20 failed SQL queries within the specific time range.
   * 
   * @remarks
   * >  GetErrorRequestSample is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then send a request again. If the value of **isFinish** is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetErrorRequestSampleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetErrorRequestSampleResponse
   */
  async getErrorRequestSampleWithOptions(request: GetErrorRequestSampleRequest, runtime: $Util.RuntimeOptions): Promise<GetErrorRequestSampleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!Util.isUnset(request.end)) {
      query["End"] = request.end;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.sqlId)) {
      query["SqlId"] = request.sqlId;
    }

    if (!Util.isUnset(request.start)) {
      query["Start"] = request.start;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetErrorRequestSample",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetErrorRequestSampleResponse>(await this.callApi(params, req, runtime), new GetErrorRequestSampleResponse({}));
  }

  /**
   * Asynchronously queries information about failed SQL queries in SQL Explorer data. You can query up to 20 failed SQL queries within the specific time range.
   * 
   * @remarks
   * >  GetErrorRequestSample is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then send a request again. If the value of **isFinish** is **true**, the complete results are returned.
   * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetErrorRequestSampleRequest
   * @returns GetErrorRequestSampleResponse
   */
  async getErrorRequestSample(request: GetErrorRequestSampleRequest): Promise<GetErrorRequestSampleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getErrorRequestSampleWithOptions(request, runtime);
  }

  /**
   * Queries the event subscription settings of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   The database instance that you want to manage is connected to DAS.
   * 
   * @param request - GetEventSubscriptionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetEventSubscriptionResponse
   */
  async getEventSubscriptionWithOptions(request: GetEventSubscriptionRequest, runtime: $Util.RuntimeOptions): Promise<GetEventSubscriptionResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetEventSubscription",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetEventSubscriptionResponse>(await this.callApi(params, req, runtime), new GetEventSubscriptionResponse({}));
  }

  /**
   * Queries the event subscription settings of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   The database instance that you want to manage is connected to DAS.
   * 
   * @param request - GetEventSubscriptionRequest
   * @returns GetEventSubscriptionResponse
   */
  async getEventSubscription(request: GetEventSubscriptionRequest): Promise<GetEventSubscriptionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getEventSubscriptionWithOptions(request, runtime);
  }

  /**
   * Collects the full request statistics in the SQL Explorer results of a database instance by access source.
   * 
   * @remarks
   * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   For more information about database instances that support this feature, see [Overview](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * 
   * @param request - GetFullRequestOriginStatByInstanceIdRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFullRequestOriginStatByInstanceIdResponse
   */
  async getFullRequestOriginStatByInstanceIdWithOptions(request: GetFullRequestOriginStatByInstanceIdRequest, runtime: $Util.RuntimeOptions): Promise<GetFullRequestOriginStatByInstanceIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.asc)) {
      query["Asc"] = request.asc;
    }

    if (!Util.isUnset(request.end)) {
      query["End"] = request.end;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.orderBy)) {
      query["OrderBy"] = request.orderBy;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.role)) {
      query["Role"] = request.role;
    }

    if (!Util.isUnset(request.sqlType)) {
      query["SqlType"] = request.sqlType;
    }

    if (!Util.isUnset(request.start)) {
      query["Start"] = request.start;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetFullRequestOriginStatByInstanceId",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetFullRequestOriginStatByInstanceIdResponse>(await this.callApi(params, req, runtime), new GetFullRequestOriginStatByInstanceIdResponse({}));
  }

  /**
   * Collects the full request statistics in the SQL Explorer results of a database instance by access source.
   * 
   * @remarks
   * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   For more information about database instances that support this feature, see [Overview](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * 
   * @param request - GetFullRequestOriginStatByInstanceIdRequest
   * @returns GetFullRequestOriginStatByInstanceIdResponse
   */
  async getFullRequestOriginStatByInstanceId(request: GetFullRequestOriginStatByInstanceIdRequest): Promise<GetFullRequestOriginStatByInstanceIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getFullRequestOriginStatByInstanceIdWithOptions(request, runtime);
  }

  /**
   * Queries sample SQL statements in the SQL Explorer data of a database instance by SQL ID. You can query up to 20 sample SQL statements.
   * 
   * @remarks
   * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   For more information about the database engines that support SQL Explorer, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetFullRequestSampleByInstanceIdRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFullRequestSampleByInstanceIdResponse
   */
  async getFullRequestSampleByInstanceIdWithOptions(request: GetFullRequestSampleByInstanceIdRequest, runtime: $Util.RuntimeOptions): Promise<GetFullRequestSampleByInstanceIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.role)) {
      query["Role"] = request.role;
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.end)) {
      body["End"] = request.end;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.sqlId)) {
      body["SqlId"] = request.sqlId;
    }

    if (!Util.isUnset(request.start)) {
      body["Start"] = request.start;
    }

    if (!Util.isUnset(request.userId)) {
      body["UserId"] = request.userId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GetFullRequestSampleByInstanceId",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetFullRequestSampleByInstanceIdResponse>(await this.callApi(params, req, runtime), new GetFullRequestSampleByInstanceIdResponse({}));
  }

  /**
   * Queries sample SQL statements in the SQL Explorer data of a database instance by SQL ID. You can query up to 20 sample SQL statements.
   * 
   * @remarks
   * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   For more information about the database engines that support SQL Explorer, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetFullRequestSampleByInstanceIdRequest
   * @returns GetFullRequestSampleByInstanceIdResponse
   */
  async getFullRequestSampleByInstanceId(request: GetFullRequestSampleByInstanceIdRequest): Promise<GetFullRequestSampleByInstanceIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getFullRequestSampleByInstanceIdWithOptions(request, runtime);
  }

  /**
   * Asynchronously collects the full request statistics in the SQL Explorer results of a database instance by SQL ID.
   * 
   * @remarks
   * >  GetFullRequestStatResultByInstanceId is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the isFinish parameter is **false** in the response, wait for 1 second and then send a request again. If the value of the isFinish parameter is **true**, the complete results are returned.
   * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   For more information about database instances that support this feature, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
   * 
   * @param request - GetFullRequestStatResultByInstanceIdRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFullRequestStatResultByInstanceIdResponse
   */
  async getFullRequestStatResultByInstanceIdWithOptions(request: GetFullRequestStatResultByInstanceIdRequest, runtime: $Util.RuntimeOptions): Promise<GetFullRequestStatResultByInstanceIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.asc)) {
      query["Asc"] = request.asc;
    }

    if (!Util.isUnset(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!Util.isUnset(request.end)) {
      query["End"] = request.end;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.keyword)) {
      query["Keyword"] = request.keyword;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.orderBy)) {
      query["OrderBy"] = request.orderBy;
    }

    if (!Util.isUnset(request.originHost)) {
      query["OriginHost"] = request.originHost;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.role)) {
      query["Role"] = request.role;
    }

    if (!Util.isUnset(request.sqlId)) {
      query["SqlId"] = request.sqlId;
    }

    if (!Util.isUnset(request.sqlType)) {
      query["SqlType"] = request.sqlType;
    }

    if (!Util.isUnset(request.start)) {
      query["Start"] = request.start;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetFullRequestStatResultByInstanceId",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetFullRequestStatResultByInstanceIdResponse>(await this.callApi(params, req, runtime), new GetFullRequestStatResultByInstanceIdResponse({}));
  }

  /**
   * Asynchronously collects the full request statistics in the SQL Explorer results of a database instance by SQL ID.
   * 
   * @remarks
   * >  GetFullRequestStatResultByInstanceId is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the isFinish parameter is **false** in the response, wait for 1 second and then send a request again. If the value of the isFinish parameter is **true**, the complete results are returned.
   * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
   * *   For more information about database instances that support this feature, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
   * *   If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
   * 
   * @param request - GetFullRequestStatResultByInstanceIdRequest
   * @returns GetFullRequestStatResultByInstanceIdResponse
   */
  async getFullRequestStatResultByInstanceId(request: GetFullRequestStatResultByInstanceIdRequest): Promise<GetFullRequestStatResultByInstanceIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getFullRequestStatResultByInstanceIdWithOptions(request, runtime);
  }

  /**
   * @param request - GetHDMAliyunResourceSyncResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHDMAliyunResourceSyncResultResponse
   */
  async getHDMAliyunResourceSyncResultWithOptions(request: GetHDMAliyunResourceSyncResultRequest, runtime: $Util.RuntimeOptions): Promise<GetHDMAliyunResourceSyncResultResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!Util.isUnset(request.uid)) {
      query["Uid"] = request.uid;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    if (!Util.isUnset(request.context)) {
      query["__context"] = request.context;
    }

    if (!Util.isUnset(request.accessKey)) {
      query["accessKey"] = request.accessKey;
    }

    if (!Util.isUnset(request.signature)) {
      query["signature"] = request.signature;
    }

    if (!Util.isUnset(request.skipAuth)) {
      query["skipAuth"] = request.skipAuth;
    }

    if (!Util.isUnset(request.timestamp)) {
      query["timestamp"] = request.timestamp;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetHDMAliyunResourceSyncResult",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetHDMAliyunResourceSyncResultResponse>(await this.callApi(params, req, runtime), new GetHDMAliyunResourceSyncResultResponse({}));
  }

  /**
   * @param request - GetHDMAliyunResourceSyncResultRequest
   * @returns GetHDMAliyunResourceSyncResultResponse
   */
  async getHDMAliyunResourceSyncResult(request: GetHDMAliyunResourceSyncResultRequest): Promise<GetHDMAliyunResourceSyncResultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getHDMAliyunResourceSyncResultWithOptions(request, runtime);
  }

  /**
   * @param request - GetHDMLastAliyunResourceSyncResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHDMLastAliyunResourceSyncResultResponse
   */
  async getHDMLastAliyunResourceSyncResultWithOptions(request: GetHDMLastAliyunResourceSyncResultRequest, runtime: $Util.RuntimeOptions): Promise<GetHDMLastAliyunResourceSyncResultResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.uid)) {
      query["Uid"] = request.uid;
    }

    if (!Util.isUnset(request.userId)) {
      query["UserId"] = request.userId;
    }

    if (!Util.isUnset(request.context)) {
      query["__context"] = request.context;
    }

    if (!Util.isUnset(request.accessKey)) {
      query["accessKey"] = request.accessKey;
    }

    if (!Util.isUnset(request.signature)) {
      query["signature"] = request.signature;
    }

    if (!Util.isUnset(request.skipAuth)) {
      query["skipAuth"] = request.skipAuth;
    }

    if (!Util.isUnset(request.timestamp)) {
      query["timestamp"] = request.timestamp;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetHDMLastAliyunResourceSyncResult",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetHDMLastAliyunResourceSyncResultResponse>(await this.callApi(params, req, runtime), new GetHDMLastAliyunResourceSyncResultResponse({}));
  }

  /**
   * @param request - GetHDMLastAliyunResourceSyncResultRequest
   * @returns GetHDMLastAliyunResourceSyncResultResponse
   */
  async getHDMLastAliyunResourceSyncResult(request: GetHDMLastAliyunResourceSyncResultRequest): Promise<GetHDMLastAliyunResourceSyncResultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getHDMLastAliyunResourceSyncResultWithOptions(request, runtime);
  }

  /**
   * Queries the result of an inspection that is performed on a database instance by using the inspection and scoring feature.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the inspection and scoring feature. This feature allows you to inspect and score the health status of your instance on a regular basis. This helps you obtain information about the status of your databases. For more information, see [Inspection and scoring](https://help.aliyun.com/document_detail/205659.html).
   * Before you call this operation, take note of the following items:
   * *   This operation is applicable only to ApsaraDB RDS for MySQL databases, self-managed MySQL databases hosted on Elastic Compute Service (ECS) instances, self-managed MySQL databases in data centers, ApsaraDB for Redis databases, and PolarDB for MySQL databases.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
   * *   The version of DAS SDK must be V1.0.3 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetInstanceInspectionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInstanceInspectionsResponse
   */
  async getInstanceInspectionsWithOptions(request: GetInstanceInspectionsRequest, runtime: $Util.RuntimeOptions): Promise<GetInstanceInspectionsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!Util.isUnset(request.instanceArea)) {
      query["InstanceArea"] = request.instanceArea;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!Util.isUnset(request.searchMap)) {
      query["SearchMap"] = request.searchMap;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetInstanceInspections",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetInstanceInspectionsResponse>(await this.callApi(params, req, runtime), new GetInstanceInspectionsResponse({}));
  }

  /**
   * Queries the result of an inspection that is performed on a database instance by using the inspection and scoring feature.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the inspection and scoring feature. This feature allows you to inspect and score the health status of your instance on a regular basis. This helps you obtain information about the status of your databases. For more information, see [Inspection and scoring](https://help.aliyun.com/document_detail/205659.html).
   * Before you call this operation, take note of the following items:
   * *   This operation is applicable only to ApsaraDB RDS for MySQL databases, self-managed MySQL databases hosted on Elastic Compute Service (ECS) instances, self-managed MySQL databases in data centers, ApsaraDB for Redis databases, and PolarDB for MySQL databases.
   * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
   * *   The version of DAS SDK must be V1.0.3 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetInstanceInspectionsRequest
   * @returns GetInstanceInspectionsResponse
   */
  async getInstanceInspections(request: GetInstanceInspectionsRequest): Promise<GetInstanceInspectionsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getInstanceInspectionsWithOptions(request, runtime);
  }

  /**
   * Queries the details of all missing indexes of an instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetInstanceMissingIndexListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInstanceMissingIndexListResponse
   */
  async getInstanceMissingIndexListWithOptions(request: GetInstanceMissingIndexListRequest, runtime: $Util.RuntimeOptions): Promise<GetInstanceMissingIndexListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.avgTotalUserCost)) {
      query["AvgTotalUserCost"] = request.avgTotalUserCost;
    }

    if (!Util.isUnset(request.avgUserImpact)) {
      query["AvgUserImpact"] = request.avgUserImpact;
    }

    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.indexCount)) {
      query["IndexCount"] = request.indexCount;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.objectName)) {
      query["ObjectName"] = request.objectName;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.reservedPages)) {
      query["ReservedPages"] = request.reservedPages;
    }

    if (!Util.isUnset(request.reservedSize)) {
      query["ReservedSize"] = request.reservedSize;
    }

    if (!Util.isUnset(request.rowCount)) {
      query["RowCount"] = request.rowCount;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!Util.isUnset(request.uniqueCompiles)) {
      query["UniqueCompiles"] = request.uniqueCompiles;
    }

    if (!Util.isUnset(request.userScans)) {
      query["UserScans"] = request.userScans;
    }

    if (!Util.isUnset(request.userSeeks)) {
      query["UserSeeks"] = request.userSeeks;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetInstanceMissingIndexList",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetInstanceMissingIndexListResponse>(await this.callApi(params, req, runtime), new GetInstanceMissingIndexListResponse({}));
  }

  /**
   * Queries the details of all missing indexes of an instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetInstanceMissingIndexListRequest
   * @returns GetInstanceMissingIndexListResponse
   */
  async getInstanceMissingIndexList(request: GetInstanceMissingIndexListRequest): Promise<GetInstanceMissingIndexListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getInstanceMissingIndexListWithOptions(request, runtime);
  }

  /**
   * Queries statistics on automatic SQL optimization events within a period of time, such as the total number of optimization events and the maximum improvement.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   The database engine is ApsaraDB RDS for MySQL or PolarDB for MySQL.
   * 
   * @param request - GetInstanceSqlOptimizeStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInstanceSqlOptimizeStatisticResponse
   */
  async getInstanceSqlOptimizeStatisticWithOptions(request: GetInstanceSqlOptimizeStatisticRequest, runtime: $Util.RuntimeOptions): Promise<GetInstanceSqlOptimizeStatisticResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.filterEnable)) {
      query["FilterEnable"] = request.filterEnable;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!Util.isUnset(request.threshold)) {
      query["Threshold"] = request.threshold;
    }

    if (!Util.isUnset(request.useMerging)) {
      query["UseMerging"] = request.useMerging;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetInstanceSqlOptimizeStatistic",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetInstanceSqlOptimizeStatisticResponse>(await this.callApi(params, req, runtime), new GetInstanceSqlOptimizeStatisticResponse({}));
  }

  /**
   * Queries statistics on automatic SQL optimization events within a period of time, such as the total number of optimization events and the maximum improvement.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   The database engine is ApsaraDB RDS for MySQL or PolarDB for MySQL.
   * 
   * @param request - GetInstanceSqlOptimizeStatisticRequest
   * @returns GetInstanceSqlOptimizeStatisticResponse
   */
  async getInstanceSqlOptimizeStatistic(request: GetInstanceSqlOptimizeStatisticRequest): Promise<GetInstanceSqlOptimizeStatisticResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getInstanceSqlOptimizeStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the results of a task that terminates sessions.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetKillInstanceSessionTaskResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetKillInstanceSessionTaskResultResponse
   */
  async getKillInstanceSessionTaskResultWithOptions(request: GetKillInstanceSessionTaskResultRequest, runtime: $Util.RuntimeOptions): Promise<GetKillInstanceSessionTaskResultResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetKillInstanceSessionTaskResult",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetKillInstanceSessionTaskResultResponse>(await this.callApi(params, req, runtime), new GetKillInstanceSessionTaskResultResponse({}));
  }

  /**
   * Queries the results of a task that terminates sessions.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetKillInstanceSessionTaskResultRequest
   * @returns GetKillInstanceSessionTaskResultResponse
   */
  async getKillInstanceSessionTaskResult(request: GetKillInstanceSessionTaskResultRequest): Promise<GetKillInstanceSessionTaskResultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getKillInstanceSessionTaskResultWithOptions(request, runtime);
  }

  /**
   * Queries the current sessions of an ApsaraDB for MongoDB (MongoDB) instance.
   * 
   * @remarks
   *   This operation is applicable only to MongoDB instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
   * 
   * @param request - GetMongoDBCurrentOpRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMongoDBCurrentOpResponse
   */
  async getMongoDBCurrentOpWithOptions(request: GetMongoDBCurrentOpRequest, runtime: $Util.RuntimeOptions): Promise<GetMongoDBCurrentOpResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.filterDoc)) {
      query["FilterDoc"] = request.filterDoc;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.role)) {
      query["Role"] = request.role;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetMongoDBCurrentOp",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetMongoDBCurrentOpResponse>(await this.callApi(params, req, runtime), new GetMongoDBCurrentOpResponse({}));
  }

  /**
   * Queries the current sessions of an ApsaraDB for MongoDB (MongoDB) instance.
   * 
   * @remarks
   *   This operation is applicable only to MongoDB instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
   * 
   * @param request - GetMongoDBCurrentOpRequest
   * @returns GetMongoDBCurrentOpResponse
   */
  async getMongoDBCurrentOp(request: GetMongoDBCurrentOpRequest): Promise<GetMongoDBCurrentOpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getMongoDBCurrentOpWithOptions(request, runtime);
  }

  /**
   * Asynchronously queries the sessions of an instance and collects statistics on the sessions based on dimensions.
   * 
   * @remarks
   * >  GetMySQLAllSessionAsync is an asynchronous operation. After a request is sent, the system does not return complete results but returns a request ID. You need to use the request ID to initiate requests until the value of the **isFinish** field in the returned results is **true**, the complete results are returned. This indicates that to obtain complete data, you must call this operation at least twice.
   * *   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and PolarDB-X 2.0 instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetMySQLAllSessionAsyncRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMySQLAllSessionAsyncResponse
   */
  async getMySQLAllSessionAsyncWithOptions(request: GetMySQLAllSessionAsyncRequest, runtime: $Util.RuntimeOptions): Promise<GetMySQLAllSessionAsyncResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.resultId)) {
      query["ResultId"] = request.resultId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetMySQLAllSessionAsync",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetMySQLAllSessionAsyncResponse>(await this.callApi(params, req, runtime), new GetMySQLAllSessionAsyncResponse({}));
  }

  /**
   * Asynchronously queries the sessions of an instance and collects statistics on the sessions based on dimensions.
   * 
   * @remarks
   * >  GetMySQLAllSessionAsync is an asynchronous operation. After a request is sent, the system does not return complete results but returns a request ID. You need to use the request ID to initiate requests until the value of the **isFinish** field in the returned results is **true**, the complete results are returned. This indicates that to obtain complete data, you must call this operation at least twice.
   * *   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and PolarDB-X 2.0 instances.
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetMySQLAllSessionAsyncRequest
   * @returns GetMySQLAllSessionAsyncResponse
   */
  async getMySQLAllSessionAsync(request: GetMySQLAllSessionAsyncRequest): Promise<GetMySQLAllSessionAsyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getMySQLAllSessionAsyncWithOptions(request, runtime);
  }

  /**
   * Queries access frequency statistics and hot data on partitions of a PolarDB-X 2.0 instance.
   * 
   * @remarks
   * We recommend that you do not call this operation. The data is returned in a special format and is complex to parse. You can use the [heatmap](https://help.aliyun.com/document_detail/470302.html) feature of Database Autonomy Service (DAS) to query the data.
   * 
   * @param request - GetPartitionsHeatmapRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPartitionsHeatmapResponse
   */
  async getPartitionsHeatmapWithOptions(request: GetPartitionsHeatmapRequest, runtime: $Util.RuntimeOptions): Promise<GetPartitionsHeatmapResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.timeRange)) {
      query["TimeRange"] = request.timeRange;
    }

    if (!Util.isUnset(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetPartitionsHeatmap",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetPartitionsHeatmapResponse>(await this.callApi(params, req, runtime), new GetPartitionsHeatmapResponse({}));
  }

  /**
   * Queries access frequency statistics and hot data on partitions of a PolarDB-X 2.0 instance.
   * 
   * @remarks
   * We recommend that you do not call this operation. The data is returned in a special format and is complex to parse. You can use the [heatmap](https://help.aliyun.com/document_detail/470302.html) feature of Database Autonomy Service (DAS) to query the data.
   * 
   * @param request - GetPartitionsHeatmapRequest
   * @returns GetPartitionsHeatmapResponse
   */
  async getPartitionsHeatmap(request: GetPartitionsHeatmapRequest): Promise<GetPartitionsHeatmapResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getPartitionsHeatmapWithOptions(request, runtime);
  }

  /**
   * Queries the trend of a metric for the new version of the performance insight feature of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
   * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
   * 
   * @param request - GetPfsMetricTrendsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPfsMetricTrendsResponse
   */
  async getPfsMetricTrendsWithOptions(request: GetPfsMetricTrendsRequest, runtime: $Util.RuntimeOptions): Promise<GetPfsMetricTrendsResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.metric)) {
      body["Metric"] = request.metric;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GetPfsMetricTrends",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetPfsMetricTrendsResponse>(await this.callApi(params, req, runtime), new GetPfsMetricTrendsResponse({}));
  }

  /**
   * Queries the trend of a metric for the new version of the performance insight feature of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
   * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
   * 
   * @param request - GetPfsMetricTrendsRequest
   * @returns GetPfsMetricTrendsResponse
   */
  async getPfsMetricTrends(request: GetPfsMetricTrendsRequest): Promise<GetPfsMetricTrendsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getPfsMetricTrendsWithOptions(request, runtime);
  }

  /**
   * Queries the SQL sample data for the new version of the performance insight feature of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
   * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
   * 
   * @param request - GetPfsSqlSampleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPfsSqlSampleResponse
   */
  async getPfsSqlSampleWithOptions(request: GetPfsSqlSampleRequest, runtime: $Util.RuntimeOptions): Promise<GetPfsSqlSampleResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.sqlId)) {
      body["SqlId"] = request.sqlId;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GetPfsSqlSample",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetPfsSqlSampleResponse>(await this.callApi(params, req, runtime), new GetPfsSqlSampleResponse({}));
  }

  /**
   * Queries the SQL sample data for the new version of the performance insight feature of a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
   * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
   * 
   * @param request - GetPfsSqlSampleRequest
   * @returns GetPfsSqlSampleResponse
   */
  async getPfsSqlSample(request: GetPfsSqlSampleRequest): Promise<GetPfsSqlSampleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getPfsSqlSampleWithOptions(request, runtime);
  }

  /**
   * Queries the full request data generated by the new version of the performance insight feature of a database instance based on the SQL ID.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
   * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
   * 
   * @param request - GetPfsSqlSummariesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPfsSqlSummariesResponse
   */
  async getPfsSqlSummariesWithOptions(request: GetPfsSqlSummariesRequest, runtime: $Util.RuntimeOptions): Promise<GetPfsSqlSummariesResponse> {
    Util.validateModel(request);
    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.asc)) {
      body["Asc"] = request.asc;
    }

    if (!Util.isUnset(request.endTime)) {
      body["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.keywords)) {
      body["Keywords"] = request.keywords;
    }

    if (!Util.isUnset(request.nodeId)) {
      body["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.orderBy)) {
      body["OrderBy"] = request.orderBy;
    }

    if (!Util.isUnset(request.pageNo)) {
      body["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.sqlId)) {
      body["SqlId"] = request.sqlId;
    }

    if (!Util.isUnset(request.startTime)) {
      body["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "GetPfsSqlSummaries",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetPfsSqlSummariesResponse>(await this.callApi(params, req, runtime), new GetPfsSqlSummariesResponse({}));
  }

  /**
   * Queries the full request data generated by the new version of the performance insight feature of a database instance based on the SQL ID.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
   * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
   * 
   * @param request - GetPfsSqlSummariesRequest
   * @returns GetPfsSqlSummariesResponse
   */
  async getPfsSqlSummaries(request: GetPfsSqlSummariesRequest): Promise<GetPfsSqlSummariesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getPfsSqlSummariesWithOptions(request, runtime);
  }

  /**
   * Queries information about SQL templates based on query governance data.
   * 
   * @remarks
   *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeDataStatsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeDataStatsResponse
   */
  async getQueryOptimizeDataStatsWithOptions(request: GetQueryOptimizeDataStatsRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeDataStatsResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeDataStats",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeDataStatsResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeDataStatsResponse({}));
  }

  /**
   * Queries information about SQL templates based on query governance data.
   * 
   * @remarks
   *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeDataStatsRequest
   * @returns GetQueryOptimizeDataStatsResponse
   */
  async getQueryOptimizeDataStats(request: GetQueryOptimizeDataStatsRequest): Promise<GetQueryOptimizeDataStatsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeDataStatsWithOptions(request, runtime);
  }

  /**
   * Queries information about the best-performing and worst-performing instances based on query governance data.
   * 
   * @remarks
   *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeDataTopRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeDataTopResponse
   */
  async getQueryOptimizeDataTopWithOptions(request: GetQueryOptimizeDataTopRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeDataTopResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeDataTop",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeDataTopResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeDataTopResponse({}));
  }

  /**
   * Queries information about the best-performing and worst-performing instances based on query governance data.
   * 
   * @remarks
   *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeDataTopRequest
   * @returns GetQueryOptimizeDataTopResponse
   */
  async getQueryOptimizeDataTop(request: GetQueryOptimizeDataTopRequest): Promise<GetQueryOptimizeDataTopResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeDataTopWithOptions(request, runtime);
  }

  /**
   * Queries query governance trend data.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeDataTrendRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeDataTrendResponse
   */
  async getQueryOptimizeDataTrendWithOptions(request: GetQueryOptimizeDataTrendRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeDataTrendResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeDataTrend",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeDataTrendResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeDataTrendResponse({}));
  }

  /**
   * Queries query governance trend data.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeDataTrendRequest
   * @returns GetQueryOptimizeDataTrendResponse
   */
  async getQueryOptimizeDataTrend(request: GetQueryOptimizeDataTrendRequest): Promise<GetQueryOptimizeDataTrendResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeDataTrendWithOptions(request, runtime);
  }

  /**
   * Queries the failed SQL statements under a SQL template.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeExecErrorSampleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeExecErrorSampleResponse
   */
  async getQueryOptimizeExecErrorSampleWithOptions(request: GetQueryOptimizeExecErrorSampleRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeExecErrorSampleResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeExecErrorSample",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeExecErrorSampleResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeExecErrorSampleResponse({}));
  }

  /**
   * Queries the failed SQL statements under a SQL template.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeExecErrorSampleRequest
   * @returns GetQueryOptimizeExecErrorSampleResponse
   */
  async getQueryOptimizeExecErrorSample(request: GetQueryOptimizeExecErrorSampleRequest): Promise<GetQueryOptimizeExecErrorSampleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeExecErrorSampleWithOptions(request, runtime);
  }

  /**
   * Queries SQL templates that failed to be executed.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeExecErrorStatsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeExecErrorStatsResponse
   */
  async getQueryOptimizeExecErrorStatsWithOptions(request: GetQueryOptimizeExecErrorStatsRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeExecErrorStatsResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeExecErrorStats",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeExecErrorStatsResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeExecErrorStatsResponse({}));
  }

  /**
   * Queries SQL templates that failed to be executed.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeExecErrorStatsRequest
   * @returns GetQueryOptimizeExecErrorStatsResponse
   */
  async getQueryOptimizeExecErrorStats(request: GetQueryOptimizeExecErrorStatsRequest): Promise<GetQueryOptimizeExecErrorStatsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeExecErrorStatsWithOptions(request, runtime);
  }

  /**
   * Queries the tags added by the query governance feature to specified database instances.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeRuleListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeRuleListResponse
   */
  async getQueryOptimizeRuleListWithOptions(request: GetQueryOptimizeRuleListRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeRuleListResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeRuleList",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeRuleListResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeRuleListResponse({}));
  }

  /**
   * Queries the tags added by the query governance feature to specified database instances.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeRuleListRequest
   * @returns GetQueryOptimizeRuleListResponse
   */
  async getQueryOptimizeRuleList(request: GetQueryOptimizeRuleListRequest): Promise<GetQueryOptimizeRuleListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeRuleListWithOptions(request, runtime);
  }

  /**
   * Queries a share URL provided by the query governance feature.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeShareUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeShareUrlResponse
   */
  async getQueryOptimizeShareUrlWithOptions(request: GetQueryOptimizeShareUrlRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeShareUrlResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeShareUrl",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeShareUrlResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeShareUrlResponse({}));
  }

  /**
   * Queries a share URL provided by the query governance feature.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeShareUrlRequest
   * @returns GetQueryOptimizeShareUrlResponse
   */
  async getQueryOptimizeShareUrl(request: GetQueryOptimizeShareUrlRequest): Promise<GetQueryOptimizeShareUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeShareUrlWithOptions(request, runtime);
  }

  /**
   * Queries suggestions provided by query governance for optimizing an SQL template.
   * 
   * @remarks
   *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeSolutionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeSolutionResponse
   */
  async getQueryOptimizeSolutionWithOptions(request: GetQueryOptimizeSolutionRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeSolutionResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeSolution",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeSolutionResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeSolutionResponse({}));
  }

  /**
   * Queries suggestions provided by query governance for optimizing an SQL template.
   * 
   * @remarks
   *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeSolutionRequest
   * @returns GetQueryOptimizeSolutionResponse
   */
  async getQueryOptimizeSolution(request: GetQueryOptimizeSolutionRequest): Promise<GetQueryOptimizeSolutionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeSolutionWithOptions(request, runtime);
  }

  /**
   * Queries the tags of a SQL statement.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeTagRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetQueryOptimizeTagResponse
   */
  async getQueryOptimizeTagWithOptions(request: GetQueryOptimizeTagRequest, runtime: $Util.RuntimeOptions): Promise<GetQueryOptimizeTagResponse> {
    Util.validateModel(request);
    let query = OpenApiUtil.query(Util.toMap(request));
    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetQueryOptimizeTag",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetQueryOptimizeTagResponse>(await this.callApi(params, req, runtime), new GetQueryOptimizeTagResponse({}));
  }

  /**
   * Queries the tags of a SQL statement.
   * 
   * @remarks
   *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   PolarDB for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   * 
   * @param request - GetQueryOptimizeTagRequest
   * @returns GetQueryOptimizeTagResponse
   */
  async getQueryOptimizeTag(request: GetQueryOptimizeTagRequest): Promise<GetQueryOptimizeTagResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getQueryOptimizeTagWithOptions(request, runtime);
  }

  /**
   * Queries the current session on an ApsaraDB for Redis instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB for Redis instances.
   * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * >  This operation cannot be used to query sessions generated in direct connection mode on ApsaraDB for Redis cluster instances.
   * 
   * @param request - GetRedisAllSessionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRedisAllSessionResponse
   */
  async getRedisAllSessionWithOptions(request: GetRedisAllSessionRequest, runtime: $Util.RuntimeOptions): Promise<GetRedisAllSessionResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetRedisAllSession",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetRedisAllSessionResponse>(await this.callApi(params, req, runtime), new GetRedisAllSessionResponse({}));
  }

  /**
   * Queries the current session on an ApsaraDB for Redis instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB for Redis instances.
   * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * >  This operation cannot be used to query sessions generated in direct connection mode on ApsaraDB for Redis cluster instances.
   * 
   * @param request - GetRedisAllSessionRequest
   * @returns GetRedisAllSessionResponse
   */
  async getRedisAllSession(request: GetRedisAllSessionRequest): Promise<GetRedisAllSessionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getRedisAllSessionWithOptions(request, runtime);
  }

  /**
   * Queries SQL diagnostics records by pages.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   *     *   ApsaraDB RDS for SQL Server
   *     *   PolarDB for MySQL
   *     *   PolarDB for PostgreSQL (Compatible with Oracle)
   *     *   ApsaraDB for MongoDB
   * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
   * 
   * @param request - GetRequestDiagnosisPageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRequestDiagnosisPageResponse
   */
  async getRequestDiagnosisPageWithOptions(request: GetRequestDiagnosisPageRequest, runtime: $Util.RuntimeOptions): Promise<GetRequestDiagnosisPageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetRequestDiagnosisPage",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetRequestDiagnosisPageResponse>(await this.callApi(params, req, runtime), new GetRequestDiagnosisPageResponse({}));
  }

  /**
   * Queries SQL diagnostics records by pages.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL
   *     *   ApsaraDB RDS for PostgreSQL
   *     *   ApsaraDB RDS for SQL Server
   *     *   PolarDB for MySQL
   *     *   PolarDB for PostgreSQL (Compatible with Oracle)
   *     *   ApsaraDB for MongoDB
   * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
   * 
   * @param request - GetRequestDiagnosisPageRequest
   * @returns GetRequestDiagnosisPageResponse
   */
  async getRequestDiagnosisPage(request: GetRequestDiagnosisPageRequest): Promise<GetRequestDiagnosisPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getRequestDiagnosisPageWithOptions(request, runtime);
  }

  /**
   * Queries the results of an SQL diagnostics task.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   You cannot call this operation to query the diagnostic result of the automatic SQL optimization feature.
   * *   This operation is applicable to the following database engines:
   *     *   RDS MySQL
   *     *   RDS PostgreSQL
   *     *   RDS SQL Server
   *     *   PolarDB for MySQL
   *     *   PolarDB for PostgreSQL (Compatible with Oracle)
   *     *   ApsaraDB for MongoDB
   * >  If your instance is an ApsaraDB RDS for PostgreSQL instance, make sure that the minor engine version of your instance is 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
   * 
   * @param request - GetRequestDiagnosisResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRequestDiagnosisResultResponse
   */
  async getRequestDiagnosisResultWithOptions(request: GetRequestDiagnosisResultRequest, runtime: $Util.RuntimeOptions): Promise<GetRequestDiagnosisResultResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.messageId)) {
      query["MessageId"] = request.messageId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.source)) {
      query["Source"] = request.source;
    }

    if (!Util.isUnset(request.sqlId)) {
      query["SqlId"] = request.sqlId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetRequestDiagnosisResult",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetRequestDiagnosisResultResponse>(await this.callApi(params, req, runtime), new GetRequestDiagnosisResultResponse({}));
  }

  /**
   * Queries the results of an SQL diagnostics task.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   You cannot call this operation to query the diagnostic result of the automatic SQL optimization feature.
   * *   This operation is applicable to the following database engines:
   *     *   RDS MySQL
   *     *   RDS PostgreSQL
   *     *   RDS SQL Server
   *     *   PolarDB for MySQL
   *     *   PolarDB for PostgreSQL (Compatible with Oracle)
   *     *   ApsaraDB for MongoDB
   * >  If your instance is an ApsaraDB RDS for PostgreSQL instance, make sure that the minor engine version of your instance is 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
   * 
   * @param request - GetRequestDiagnosisResultRequest
   * @returns GetRequestDiagnosisResultResponse
   */
  async getRequestDiagnosisResult(request: GetRequestDiagnosisResultRequest): Promise<GetRequestDiagnosisResultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getRequestDiagnosisResultWithOptions(request, runtime);
  }

  /**
   * Queries the throttling rules that are in effect.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - GetRunningSqlConcurrencyControlRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRunningSqlConcurrencyControlRulesResponse
   */
  async getRunningSqlConcurrencyControlRulesWithOptions(request: GetRunningSqlConcurrencyControlRulesRequest, runtime: $Util.RuntimeOptions): Promise<GetRunningSqlConcurrencyControlRulesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetRunningSqlConcurrencyControlRules",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetRunningSqlConcurrencyControlRulesResponse>(await this.callApi(params, req, runtime), new GetRunningSqlConcurrencyControlRulesResponse({}));
  }

  /**
   * Queries the throttling rules that are in effect.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - GetRunningSqlConcurrencyControlRulesRequest
   * @returns GetRunningSqlConcurrencyControlRulesResponse
   */
  async getRunningSqlConcurrencyControlRules(request: GetRunningSqlConcurrencyControlRulesRequest): Promise<GetRunningSqlConcurrencyControlRulesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getRunningSqlConcurrencyControlRulesWithOptions(request, runtime);
  }

  /**
   * Generates a throttling keyword string based on an SQL statement.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - GetSqlConcurrencyControlKeywordsFromSqlTextRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSqlConcurrencyControlKeywordsFromSqlTextResponse
   */
  async getSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request: GetSqlConcurrencyControlKeywordsFromSqlTextRequest, runtime: $Util.RuntimeOptions): Promise<GetSqlConcurrencyControlKeywordsFromSqlTextResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.sqlText)) {
      query["SqlText"] = request.sqlText;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetSqlConcurrencyControlKeywordsFromSqlText",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetSqlConcurrencyControlKeywordsFromSqlTextResponse>(await this.callApi(params, req, runtime), new GetSqlConcurrencyControlKeywordsFromSqlTextResponse({}));
  }

  /**
   * Generates a throttling keyword string based on an SQL statement.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - GetSqlConcurrencyControlKeywordsFromSqlTextRequest
   * @returns GetSqlConcurrencyControlKeywordsFromSqlTextResponse
   */
  async getSqlConcurrencyControlKeywordsFromSqlText(request: GetSqlConcurrencyControlKeywordsFromSqlTextRequest): Promise<GetSqlConcurrencyControlKeywordsFromSqlTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request, runtime);
  }

  /**
   * Queries the throttling rules that are being executed or have been triggered.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - GetSqlConcurrencyControlRulesHistoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSqlConcurrencyControlRulesHistoryResponse
   */
  async getSqlConcurrencyControlRulesHistoryWithOptions(request: GetSqlConcurrencyControlRulesHistoryRequest, runtime: $Util.RuntimeOptions): Promise<GetSqlConcurrencyControlRulesHistoryResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetSqlConcurrencyControlRulesHistory",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetSqlConcurrencyControlRulesHistoryResponse>(await this.callApi(params, req, runtime), new GetSqlConcurrencyControlRulesHistoryResponse({}));
  }

  /**
   * Queries the throttling rules that are being executed or have been triggered.
   * 
   * @remarks
   * This operation supports the following database engines:
   * *   ApsaraDB RDS for MySQL
   * *   PolarDB for MySQL
   * 
   * @param request - GetSqlConcurrencyControlRulesHistoryRequest
   * @returns GetSqlConcurrencyControlRulesHistoryResponse
   */
  async getSqlConcurrencyControlRulesHistory(request: GetSqlConcurrencyControlRulesHistoryRequest): Promise<GetSqlConcurrencyControlRulesHistoryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getSqlConcurrencyControlRulesHistoryWithOptions(request, runtime);
  }

  /**
   * Queries optimization suggestions that are generated by the SQL diagnostics feature of Database Autonomy Service (DAS).
   * 
   * @remarks
   * The SQL diagnostics feature provides optimization suggestions for instances based on diagnostics results. You can use the optimization suggestions to optimize instance indexes. For more information, see [Automatic SQL optimization](https://help.aliyun.com/document_detail/167895.html).
   * >  You can call this operation to query only the optimization suggestions that are automatically generated by the SQL diagnostics feature.
   * Before you call this operation, take note of the following items:
   * *   This operation is applicable to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetSqlOptimizeAdviceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSqlOptimizeAdviceResponse
   */
  async getSqlOptimizeAdviceWithOptions(request: GetSqlOptimizeAdviceRequest, runtime: $Util.RuntimeOptions): Promise<GetSqlOptimizeAdviceResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.endDt)) {
      query["EndDt"] = request.endDt;
    }

    if (!Util.isUnset(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!Util.isUnset(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!Util.isUnset(request.region)) {
      query["Region"] = request.region;
    }

    if (!Util.isUnset(request.startDt)) {
      query["StartDt"] = request.startDt;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetSqlOptimizeAdvice",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetSqlOptimizeAdviceResponse>(await this.callApi(params, req, runtime), new GetSqlOptimizeAdviceResponse({}));
  }

  /**
   * Queries optimization suggestions that are generated by the SQL diagnostics feature of Database Autonomy Service (DAS).
   * 
   * @remarks
   * The SQL diagnostics feature provides optimization suggestions for instances based on diagnostics results. You can use the optimization suggestions to optimize instance indexes. For more information, see [Automatic SQL optimization](https://help.aliyun.com/document_detail/167895.html).
   * >  You can call this operation to query only the optimization suggestions that are automatically generated by the SQL diagnostics feature.
   * Before you call this operation, take note of the following items:
   * *   This operation is applicable to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetSqlOptimizeAdviceRequest
   * @returns GetSqlOptimizeAdviceResponse
   */
  async getSqlOptimizeAdvice(request: GetSqlOptimizeAdviceRequest): Promise<GetSqlOptimizeAdviceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getSqlOptimizeAdviceWithOptions(request, runtime);
  }

  /**
   * Queries the status and results of a storage analysis task.
   * 
   * @remarks
   * >  The physical file size indicates the actual size of an obtained file. Only specific deployment modes of database instances support the display of physical file sizes. The statistics on tables are obtained from `information_schema.tables`. Statistics in MySQL are not updated in real time. Therefore, the statistics may be different from the physical file sizes. If you want to obtain the latest data, you can execute the `ANALYZE TABLE` statement on the relevant tables during off-peak hours.
   * *   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
   * *   For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetStorageAnalysisResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetStorageAnalysisResultResponse
   */
  async getStorageAnalysisResultWithOptions(request: GetStorageAnalysisResultRequest, runtime: $Util.RuntimeOptions): Promise<GetStorageAnalysisResultResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "GetStorageAnalysisResult",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<GetStorageAnalysisResultResponse>(await this.callApi(params, req, runtime), new GetStorageAnalysisResultResponse({}));
  }

  /**
   * Queries the status and results of a storage analysis task.
   * 
   * @remarks
   * >  The physical file size indicates the actual size of an obtained file. Only specific deployment modes of database instances support the display of physical file sizes. The statistics on tables are obtained from `information_schema.tables`. Statistics in MySQL are not updated in real time. Therefore, the statistics may be different from the physical file sizes. If you want to obtain the latest data, you can execute the `ANALYZE TABLE` statement on the relevant tables during off-peak hours.
   * *   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
   * *   For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
   * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - GetStorageAnalysisResultRequest
   * @returns GetStorageAnalysisResultResponse
   */
  async getStorageAnalysisResult(request: GetStorageAnalysisResultRequest): Promise<GetStorageAnalysisResultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.getStorageAnalysisResultWithOptions(request, runtime);
  }

  /**
   * Terminates all sessions on an instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB for Redis.
   * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - KillInstanceAllSessionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns KillInstanceAllSessionResponse
   */
  async killInstanceAllSessionWithOptions(request: KillInstanceAllSessionRequest, runtime: $Util.RuntimeOptions): Promise<KillInstanceAllSessionResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "KillInstanceAllSession",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<KillInstanceAllSessionResponse>(await this.callApi(params, req, runtime), new KillInstanceAllSessionResponse({}));
  }

  /**
   * Terminates all sessions on an instance.
   * 
   * @remarks
   *   This operation is applicable only to ApsaraDB for Redis.
   * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
   * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - KillInstanceAllSessionRequest
   * @returns KillInstanceAllSessionResponse
   */
  async killInstanceAllSession(request: KillInstanceAllSessionRequest): Promise<KillInstanceAllSessionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.killInstanceAllSessionWithOptions(request, runtime);
  }

  /**
   * Modifies the auto scaling configurations of an instance.
   * 
   * @remarks
   * You can call this operation to modify the following auto scaling configurations of an instance: **auto scaling for specifications**, **automatic storage expansion**, **automatic bandwidth adjustment**, and **auto scaling for resources**.
   * *   You can modify the configurations of the **auto scaling feature for specifications** for the following types of database instances:
   *     *   PolarDB for MySQL Cluster Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
   *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or enhanced SSDs (ESSDs). For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
   * *   You can modify the configurations of the **automatic storage expansion** feature for the following types of database instances:
   *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs. For more information about the feature and the billing rules, see [Automatic space expansion](https://help.aliyun.com/document_detail/173345.html).
   * *   You can modify the configurations of the **automatic bandwidth adjustment** feature for the following types of database instances:
   *     *   ApsaraDB for Redis Classic (Local Disk-based) Edition instances. For more information about the feature and the billing rules, see [Automatic bandwidth adjustment](https://help.aliyun.com/document_detail/216312.html).
   * *   You can modify the configurations of the **auto scaling feature for resources** for the following types of database instances:
   *     *   General-purpose ApsaraDB RDS for MySQL Enterprise Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - ModifyAutoScalingConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAutoScalingConfigResponse
   */
  async modifyAutoScalingConfigWithOptions(request: ModifyAutoScalingConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyAutoScalingConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.bandwidth)) {
      query["Bandwidth"] = request.bandwidth;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.resource)) {
      query["Resource"] = request.resource;
    }

    if (!Util.isUnset(request.shard)) {
      query["Shard"] = request.shard;
    }

    if (!Util.isUnset(request.spec)) {
      query["Spec"] = request.spec;
    }

    if (!Util.isUnset(request.storage)) {
      query["Storage"] = request.storage;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyAutoScalingConfig",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyAutoScalingConfigResponse>(await this.callApi(params, req, runtime), new ModifyAutoScalingConfigResponse({}));
  }

  /**
   * Modifies the auto scaling configurations of an instance.
   * 
   * @remarks
   * You can call this operation to modify the following auto scaling configurations of an instance: **auto scaling for specifications**, **automatic storage expansion**, **automatic bandwidth adjustment**, and **auto scaling for resources**.
   * *   You can modify the configurations of the **auto scaling feature for specifications** for the following types of database instances:
   *     *   PolarDB for MySQL Cluster Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
   *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or enhanced SSDs (ESSDs). For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
   * *   You can modify the configurations of the **automatic storage expansion** feature for the following types of database instances:
   *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs. For more information about the feature and the billing rules, see [Automatic space expansion](https://help.aliyun.com/document_detail/173345.html).
   * *   You can modify the configurations of the **automatic bandwidth adjustment** feature for the following types of database instances:
   *     *   ApsaraDB for Redis Classic (Local Disk-based) Edition instances. For more information about the feature and the billing rules, see [Automatic bandwidth adjustment](https://help.aliyun.com/document_detail/216312.html).
   * *   You can modify the configurations of the **auto scaling feature for resources** for the following types of database instances:
   *     *   General-purpose ApsaraDB RDS for MySQL Enterprise Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
   * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * 
   * @param request - ModifyAutoScalingConfigRequest
   * @returns ModifyAutoScalingConfigResponse
   */
  async modifyAutoScalingConfig(request: ModifyAutoScalingConfigRequest): Promise<ModifyAutoScalingConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyAutoScalingConfigWithOptions(request, runtime);
  }

  /**
   * Enables or configures Database Autonomy Service (DAS) Enterprise Edition for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   By default, the latest version of DAS Enterprise Edition that supports the database instance is enabled. For information about the databases and regions that are supported by different versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - ModifySqlLogConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySqlLogConfigResponse
   */
  async modifySqlLogConfigWithOptions(request: ModifySqlLogConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifySqlLogConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.filters)) {
      query["Filters"] = request.filters;
    }

    let body : {[key: string ]: any} = { };
    if (!Util.isUnset(request.enable)) {
      body["Enable"] = request.enable;
    }

    if (!Util.isUnset(request.hotRetention)) {
      body["HotRetention"] = request.hotRetention;
    }

    if (!Util.isUnset(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.requestEnable)) {
      body["RequestEnable"] = request.requestEnable;
    }

    if (!Util.isUnset(request.retention)) {
      body["Retention"] = request.retention;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApi.Params({
      action: "ModifySqlLogConfig",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifySqlLogConfigResponse>(await this.callApi(params, req, runtime), new ModifySqlLogConfigResponse({}));
  }

  /**
   * Enables or configures Database Autonomy Service (DAS) Enterprise Edition for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
   * *   By default, the latest version of DAS Enterprise Edition that supports the database instance is enabled. For information about the databases and regions that are supported by different versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
   * 
   * @param request - ModifySqlLogConfigRequest
   * @returns ModifySqlLogConfigResponse
   */
  async modifySqlLogConfig(request: ModifySqlLogConfigRequest): Promise<ModifySqlLogConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifySqlLogConfigWithOptions(request, runtime);
  }

  /**
   * Runs a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - RunCloudBenchTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RunCloudBenchTaskResponse
   */
  async runCloudBenchTaskWithOptions(request: RunCloudBenchTaskRequest, runtime: $Util.RuntimeOptions): Promise<RunCloudBenchTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "RunCloudBenchTask",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<RunCloudBenchTaskResponse>(await this.callApi(params, req, runtime), new RunCloudBenchTaskResponse({}));
  }

  /**
   * Runs a stress testing task.
   * 
   * @remarks
   * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
   * 
   * @param request - RunCloudBenchTaskRequest
   * @returns RunCloudBenchTaskResponse
   */
  async runCloudBenchTask(request: RunCloudBenchTaskRequest): Promise<RunCloudBenchTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.runCloudBenchTaskWithOptions(request, runtime);
  }

  /**
   * Configures the event subscription settings for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   Make sure that the database instance that you want to manage is connected to DAS.
   * 
   * @param request - SetEventSubscriptionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetEventSubscriptionResponse
   */
  async setEventSubscriptionWithOptions(request: SetEventSubscriptionRequest, runtime: $Util.RuntimeOptions): Promise<SetEventSubscriptionResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.active)) {
      query["Active"] = request.active;
    }

    if (!Util.isUnset(request.channelType)) {
      query["ChannelType"] = request.channelType;
    }

    if (!Util.isUnset(request.contactGroupName)) {
      query["ContactGroupName"] = request.contactGroupName;
    }

    if (!Util.isUnset(request.contactName)) {
      query["ContactName"] = request.contactName;
    }

    if (!Util.isUnset(request.dispatchRule)) {
      query["DispatchRule"] = request.dispatchRule;
    }

    if (!Util.isUnset(request.eventContext)) {
      query["EventContext"] = request.eventContext;
    }

    if (!Util.isUnset(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.level)) {
      query["Level"] = request.level;
    }

    if (!Util.isUnset(request.minInterval)) {
      query["MinInterval"] = request.minInterval;
    }

    if (!Util.isUnset(request.severity)) {
      query["Severity"] = request.severity;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SetEventSubscription",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SetEventSubscriptionResponse>(await this.callApi(params, req, runtime), new SetEventSubscriptionResponse({}));
  }

  /**
   * Configures the event subscription settings for a database instance.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
   * *   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
   * *   Make sure that the database instance that you want to manage is connected to DAS.
   * 
   * @param request - SetEventSubscriptionRequest
   * @returns SetEventSubscriptionResponse
   */
  async setEventSubscription(request: SetEventSubscriptionRequest): Promise<SetEventSubscriptionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.setEventSubscriptionWithOptions(request, runtime);
  }

  /**
   * Asynchronously configures parameters related to the automatic fragment recycling feature for multiple database instances at a time.
   * 
   * @remarks
   * >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId** returned in the response to re-initiate the call until the value of **isFinish** is **true**.**** In this case, you must call this operation at least twice.
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The database instances must be an ApsaraDB RDS for MySQL High-availability Edition instance.
   * *   DAS Enterprise Edition must be enabled for the database instance. You can call the call [DescribeInstanceDasPro](https://help.aliyun.com/document_detail/413866.html) operation to query whether DAS Enterprise Edition is enabled.
   * *   The database instance has four or more CPU cores, and **innodb_file_per_table** is set to **ON**.
   * 
   * @param request - UpdateAutoResourceOptimizeRulesAsyncRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAutoResourceOptimizeRulesAsyncResponse
   */
  async updateAutoResourceOptimizeRulesAsyncWithOptions(request: UpdateAutoResourceOptimizeRulesAsyncRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAutoResourceOptimizeRulesAsyncResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!Util.isUnset(request.resultId)) {
      query["ResultId"] = request.resultId;
    }

    if (!Util.isUnset(request.tableFragmentationRatio)) {
      query["TableFragmentationRatio"] = request.tableFragmentationRatio;
    }

    if (!Util.isUnset(request.tableSpaceSize)) {
      query["TableSpaceSize"] = request.tableSpaceSize;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateAutoResourceOptimizeRulesAsync",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateAutoResourceOptimizeRulesAsyncResponse>(await this.callApi(params, req, runtime), new UpdateAutoResourceOptimizeRulesAsyncResponse({}));
  }

  /**
   * Asynchronously configures parameters related to the automatic fragment recycling feature for multiple database instances at a time.
   * 
   * @remarks
   * >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId** returned in the response to re-initiate the call until the value of **isFinish** is **true**.**** In this case, you must call this operation at least twice.
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The database instances must be an ApsaraDB RDS for MySQL High-availability Edition instance.
   * *   DAS Enterprise Edition must be enabled for the database instance. You can call the call [DescribeInstanceDasPro](https://help.aliyun.com/document_detail/413866.html) operation to query whether DAS Enterprise Edition is enabled.
   * *   The database instance has four or more CPU cores, and **innodb_file_per_table** is set to **ON**.
   * 
   * @param request - UpdateAutoResourceOptimizeRulesAsyncRequest
   * @returns UpdateAutoResourceOptimizeRulesAsyncResponse
   */
  async updateAutoResourceOptimizeRulesAsync(request: UpdateAutoResourceOptimizeRulesAsyncRequest): Promise<UpdateAutoResourceOptimizeRulesAsyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateAutoResourceOptimizeRulesAsyncWithOptions(request, runtime);
  }

  /**
   * Enables, modifies, or disables the automatic SQL optimization feature for multiple database instances at a time.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   DAS Enterprise Edition must be enabled for the database instance that you want to manage. To enable DAS Enterprise Edition for a database instance, you can call the [EnableDasPro](https://help.aliyun.com/document_detail/411645.html) operation.
   * *   The autonomy service must be enabled for the database instance. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition
   *     *   PolarDB for MySQL Cluster Edition
   * 
   * @param request - UpdateAutoSqlOptimizeStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAutoSqlOptimizeStatusResponse
   */
  async updateAutoSqlOptimizeStatusWithOptions(request: UpdateAutoSqlOptimizeStatusRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAutoSqlOptimizeStatusResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.instances)) {
      query["Instances"] = request.instances;
    }

    if (!Util.isUnset(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateAutoSqlOptimizeStatus",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateAutoSqlOptimizeStatusResponse>(await this.callApi(params, req, runtime), new UpdateAutoSqlOptimizeStatusResponse({}));
  }

  /**
   * Enables, modifies, or disables the automatic SQL optimization feature for multiple database instances at a time.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   DAS Enterprise Edition must be enabled for the database instance that you want to manage. To enable DAS Enterprise Edition for a database instance, you can call the [EnableDasPro](https://help.aliyun.com/document_detail/411645.html) operation.
   * *   The autonomy service must be enabled for the database instance. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * *   This operation supports the following database engines:
   *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition
   *     *   PolarDB for MySQL Cluster Edition
   * 
   * @param request - UpdateAutoSqlOptimizeStatusRequest
   * @returns UpdateAutoSqlOptimizeStatusResponse
   */
  async updateAutoSqlOptimizeStatus(request: UpdateAutoSqlOptimizeStatusRequest): Promise<UpdateAutoSqlOptimizeStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateAutoSqlOptimizeStatusWithOptions(request, runtime);
  }

  /**
   * Asynchronously configures parameters related to the automatic SQL throttling feature for multiple database instances at a time.
   * 
   * @remarks
   * >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId** returned in the response to re-initiate the call until the value of **isFinish** is **true**.**** In this case, you must call this operation at least twice.
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The autonomy service must be enabled for the database instance that you want to manage. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * *   The database instance that you want to manage must be of one of the following types:
   *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   * 
   * @param request - UpdateAutoThrottleRulesAsyncRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAutoThrottleRulesAsyncResponse
   */
  async updateAutoThrottleRulesAsyncWithOptions(request: UpdateAutoThrottleRulesAsyncRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAutoThrottleRulesAsyncResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.abnormalDuration)) {
      query["AbnormalDuration"] = request.abnormalDuration;
    }

    if (!Util.isUnset(request.activeSessions)) {
      query["ActiveSessions"] = request.activeSessions;
    }

    if (!Util.isUnset(request.allowThrottleEndTime)) {
      query["AllowThrottleEndTime"] = request.allowThrottleEndTime;
    }

    if (!Util.isUnset(request.allowThrottleStartTime)) {
      query["AllowThrottleStartTime"] = request.allowThrottleStartTime;
    }

    if (!Util.isUnset(request.autoKillSession)) {
      query["AutoKillSession"] = request.autoKillSession;
    }

    if (!Util.isUnset(request.consoleContext)) {
      query["ConsoleContext"] = request.consoleContext;
    }

    if (!Util.isUnset(request.cpuSessionRelation)) {
      query["CpuSessionRelation"] = request.cpuSessionRelation;
    }

    if (!Util.isUnset(request.cpuUsage)) {
      query["CpuUsage"] = request.cpuUsage;
    }

    if (!Util.isUnset(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!Util.isUnset(request.maxThrottleTime)) {
      query["MaxThrottleTime"] = request.maxThrottleTime;
    }

    if (!Util.isUnset(request.resultId)) {
      query["ResultId"] = request.resultId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateAutoThrottleRulesAsync",
      version: "2020-01-16",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateAutoThrottleRulesAsyncResponse>(await this.callApi(params, req, runtime), new UpdateAutoThrottleRulesAsyncResponse({}));
  }

  /**
   * Asynchronously configures parameters related to the automatic SQL throttling feature for multiple database instances at a time.
   * 
   * @remarks
   * >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId** returned in the response to re-initiate the call until the value of **isFinish** is **true**.**** In this case, you must call this operation at least twice.
   * Before you call this operation, take note of the following items:
   * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
   * *   The autonomy service must be enabled for the database instance that you want to manage. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
   * *   The database instance that you want to manage must be of one of the following types:
   *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
   * 
   * @param request - UpdateAutoThrottleRulesAsyncRequest
   * @returns UpdateAutoThrottleRulesAsyncResponse
   */
  async updateAutoThrottleRulesAsync(request: UpdateAutoThrottleRulesAsyncRequest): Promise<UpdateAutoThrottleRulesAsyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateAutoThrottleRulesAsyncWithOptions(request, runtime);
  }

}
