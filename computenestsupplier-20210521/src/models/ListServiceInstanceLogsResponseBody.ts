// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class ListServiceInstanceLogsResponseBodyServiceInstancesLogs extends $dara.Model {
  /**
   * @remarks
   * Compliance package risk types. This only applies when the source is CompliancePack. . For example, data security checks within a VPC, such as VpcDataRisk
   * 
   * @example
   * VpcDataRisk
   */
  compliancePackType?: string;
  /**
   * @remarks
   * Specific risk rule names for the compliance package. This only applies when the source is CompliancePack. . For example, ECS instance migration out of VPC - ecs-move-out-vpc.
   * 
   * @example
   * vpc-ecs-move-out-vpc
   */
  complianceRuleName?: string;
  /**
   * @remarks
   * The log content.
   * 
   * @example
   * Start creating service instance
   */
  content?: string;
  /**
   * @remarks
   * The log type. Valid values:
   * 
   * *   serviceInstance: log generated by the service instance.
   * *   resource: log generated by ROS resources.
   * 
   * @example
   * serviceInstance
   */
  logType?: string;
  /**
   * @remarks
   * The resource ID.
   * 
   * @example
   * si-5c6525c0589545c3****
   */
  resourceId?: string;
  /**
   * @remarks
   * The Resouce Type.
   * 
   * @example
   * ROS.Stack
   */
  resourceType?: string;
  /**
   * @remarks
   * The log source. 
   * Valid values:
   * 
   * *   computeNest : logs of the deployment and upgrade of the service instance.
   * *   application: logs generated by the application.
   * *   actionTrail: logs generated by ActionTrail.
   * *  compliancePack:  Logs originating from the compliance package.
   * *  ros: Logs originating from ROS.
   * *  meteringDataï¼šLogs originating from the pay-as-you-go model.
   * 
   * @example
   * computeNest
   */
  source?: string;
  /**
   * @remarks
   * The deployment state of the service instance. Valid values:
   * 
   * *   Created
   * *   Deploying
   * *   DeployedFailed
   * *   Deployed
   * *   Upgrading
   * *   Deleting
   * *   Deleted
   * *   DeletedFailed
   * 
   * @example
   * Deployed
   */
  status?: string;
  /**
   * @remarks
   * The timestamp of the service instance log.
   * 
   * @example
   * 2022-05-21T00:00:00Z
   */
  timestamp?: string;
  static names(): { [key: string]: string } {
    return {
      compliancePackType: 'CompliancePackType',
      complianceRuleName: 'ComplianceRuleName',
      content: 'Content',
      logType: 'LogType',
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      source: 'Source',
      status: 'Status',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      compliancePackType: 'string',
      complianceRuleName: 'string',
      content: 'string',
      logType: 'string',
      resourceId: 'string',
      resourceType: 'string',
      source: 'string',
      status: 'string',
      timestamp: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListServiceInstanceLogsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The number of items to return per page when paginating results. The maximum is 100, and the default is 20.
   * 
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @remarks
   * A pagination token.
   * 
   * @example
   * AAAAAfu+XtuBE55iRLHEYYuojI4=
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 51945B04-6AA6-410D-93BA-236E0248B104
   */
  requestId?: string;
  /**
   * @remarks
   * The logs of the service instance.
   */
  serviceInstancesLogs?: ListServiceInstanceLogsResponseBodyServiceInstancesLogs[];
  static names(): { [key: string]: string } {
    return {
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      serviceInstancesLogs: 'ServiceInstancesLogs',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxResults: 'number',
      nextToken: 'string',
      requestId: 'string',
      serviceInstancesLogs: { 'type': 'array', 'itemType': ListServiceInstanceLogsResponseBodyServiceInstancesLogs },
    };
  }

  validate() {
    if(Array.isArray(this.serviceInstancesLogs)) {
      $dara.Model.validateArray(this.serviceInstancesLogs);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

