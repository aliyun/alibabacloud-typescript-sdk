// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import OpenApi from '@alicloud/openapi-core';
import { OpenApiUtil, $OpenApiUtil }from '@alicloud/openapi-core';


import * as $_model from './models/model';
export * from './models/model';

export default class Client extends OpenApi {

  constructor(config: $OpenApiUtil.Config) {
    super(config);
    this._endpointRule = "regional";
    this._endpointMap = {
      'cn-qingdao': "live.aliyuncs.com",
      'cn-beijing': "live.aliyuncs.com",
      'cn-hangzhou': "live.aliyuncs.com",
      'cn-shanghai': "live.aliyuncs.com",
      'cn-shenzhen': "live.aliyuncs.com",
      'ap-southeast-1': "live.aliyuncs.com",
      'ap-southeast-5': "live.aliyuncs.com",
      'ap-northeast-1': "live.aliyuncs.com",
      'eu-central-1': "live.aliyuncs.com",
      'ap-south-1': "live.aliyuncs.com",
      'ap-northeast-2-pop': "live.aliyuncs.com",
      'ap-southeast-2': "live.aliyuncs.com",
      'ap-southeast-3': "live.aliyuncs.com",
      'cn-beijing-finance-1': "live.aliyuncs.com",
      'cn-beijing-finance-pop': "live.aliyuncs.com",
      'cn-beijing-gov-1': "live.aliyuncs.com",
      'cn-beijing-nu16-b01': "live.aliyuncs.com",
      'cn-chengdu': "live.aliyuncs.com",
      'cn-edge-1': "live.aliyuncs.com",
      'cn-fujian': "live.aliyuncs.com",
      'cn-haidian-cm12-c01': "live.aliyuncs.com",
      'cn-hangzhou-bj-b01': "live.aliyuncs.com",
      'cn-hangzhou-finance': "live.aliyuncs.com",
      'cn-hangzhou-internal-prod-1': "live.aliyuncs.com",
      'cn-hangzhou-internal-test-1': "live.aliyuncs.com",
      'cn-hangzhou-internal-test-2': "live.aliyuncs.com",
      'cn-hangzhou-internal-test-3': "live.aliyuncs.com",
      'cn-hangzhou-test-306': "live.aliyuncs.com",
      'cn-hongkong': "live.aliyuncs.com",
      'cn-hongkong-finance-pop': "live.aliyuncs.com",
      'cn-huhehaote': "live.aliyuncs.com",
      'cn-huhehaote-nebula-1': "live.aliyuncs.com",
      'cn-north-2-gov-1': "live.aliyuncs.com",
      'cn-qingdao-nebula': "live.aliyuncs.com",
      'cn-shanghai-et15-b01': "live.aliyuncs.com",
      'cn-shanghai-et2-b01': "live.aliyuncs.com",
      'cn-shanghai-finance-1': "live.aliyuncs.com",
      'cn-shanghai-inner': "live.aliyuncs.com",
      'cn-shanghai-internal-test-1': "live.aliyuncs.com",
      'cn-shenzhen-finance-1': "live.aliyuncs.com",
      'cn-shenzhen-inner': "live.aliyuncs.com",
      'cn-shenzhen-st4-d01': "live.aliyuncs.com",
      'cn-shenzhen-su18-b01': "live.aliyuncs.com",
      'cn-wuhan': "live.aliyuncs.com",
      'cn-wulanchabu': "live.aliyuncs.com",
      'cn-yushanfang': "live.aliyuncs.com",
      'cn-zhangbei': "live.aliyuncs.com",
      'cn-zhangbei-na61-b01': "live.aliyuncs.com",
      'cn-zhangjiakou': "live.aliyuncs.com",
      'cn-zhangjiakou-na62-a01': "live.aliyuncs.com",
      'cn-zhengzhou-nebula-1': "live.aliyuncs.com",
      'eu-west-1': "live.aliyuncs.com",
      'eu-west-1-oxs': "live.aliyuncs.com",
      'me-east-1': "live.aliyuncs.com",
      'rus-west-1-pop': "live.aliyuncs.com",
      'us-east-1': "live.aliyuncs.com",
      'us-west-1': "live.aliyuncs.com",
    };
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("live", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!$dara.isNull(endpoint)) {
      return endpoint;
    }

    if (!$dara.isNull(endpointMap) && !$dara.isNull(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * Adds a component to a production studio.
   * 
   * @remarks
   * Before you call this operation to add a component to a production studio, you must first create the production studio and learn about the production studio layouts. You can call this operation to add three types of components: image, text, and subtitle. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterComponentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCasterComponentResponse
   */
  async addCasterComponentWithOptions(request: $_model.AddCasterComponentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCasterComponentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.captionLayerContent)) {
      query["CaptionLayerContent"] = request.captionLayerContent;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentLayer)) {
      query["ComponentLayer"] = request.componentLayer;
    }

    if (!$dara.isNull(request.componentName)) {
      query["ComponentName"] = request.componentName;
    }

    if (!$dara.isNull(request.componentType)) {
      query["ComponentType"] = request.componentType;
    }

    if (!$dara.isNull(request.effect)) {
      query["Effect"] = request.effect;
    }

    if (!$dara.isNull(request.htmlLayerContent)) {
      query["HtmlLayerContent"] = request.htmlLayerContent;
    }

    if (!$dara.isNull(request.imageLayerContent)) {
      query["ImageLayerContent"] = request.imageLayerContent;
    }

    if (!$dara.isNull(request.layerOrder)) {
      query["LayerOrder"] = request.layerOrder;
    }

    if (!$dara.isNull(request.locationId)) {
      query["LocationId"] = request.locationId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.textLayerContent)) {
      query["TextLayerContent"] = request.textLayerContent;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCasterComponent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCasterComponentResponse>(await this.callApi(params, req, runtime), new $_model.AddCasterComponentResponse({}));
  }

  /**
   * Adds a component to a production studio.
   * 
   * @remarks
   * Before you call this operation to add a component to a production studio, you must first create the production studio and learn about the production studio layouts. You can call this operation to add three types of components: image, text, and subtitle. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterComponentRequest
   * @returns AddCasterComponentResponse
   */
  async addCasterComponent(request: $_model.AddCasterComponentRequest): Promise<$_model.AddCasterComponentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCasterComponentWithOptions(request, runtime);
  }

  /**
   * Adds an episode to a production studio.
   * 
   * @remarks
   * To call this operation, you must obtain the production studio ID in advance. The production studio ID is generated after the production studio is created.
   * *   If the production studio was created by calling the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation, check the value of the response parameter CasterId to obtain the ID.
   * *   If the production studio was created by using the ApsaraVideo Live console, obtain the ID on the **Production Studio Management** page. To go to the page, log on to the **ApsaraVideo Live console** and click **Production Studios** in the left-side navigation pane.
   * >  You can find the ID of the production studio in the Instance ID/Name column.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterEpisodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCasterEpisodeResponse
   */
  async addCasterEpisodeWithOptions(request: $_model.AddCasterEpisodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCasterEpisodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentId)) {
      query["ComponentId"] = request.componentId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.episodeName)) {
      query["EpisodeName"] = request.episodeName;
    }

    if (!$dara.isNull(request.episodeType)) {
      query["EpisodeType"] = request.episodeType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.switchType)) {
      query["SwitchType"] = request.switchType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCasterEpisode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCasterEpisodeResponse>(await this.callApi(params, req, runtime), new $_model.AddCasterEpisodeResponse({}));
  }

  /**
   * Adds an episode to a production studio.
   * 
   * @remarks
   * To call this operation, you must obtain the production studio ID in advance. The production studio ID is generated after the production studio is created.
   * *   If the production studio was created by calling the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation, check the value of the response parameter CasterId to obtain the ID.
   * *   If the production studio was created by using the ApsaraVideo Live console, obtain the ID on the **Production Studio Management** page. To go to the page, log on to the **ApsaraVideo Live console** and click **Production Studios** in the left-side navigation pane.
   * >  You can find the ID of the production studio in the Instance ID/Name column.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterEpisodeRequest
   * @returns AddCasterEpisodeResponse
   */
  async addCasterEpisode(request: $_model.AddCasterEpisodeRequest): Promise<$_model.AddCasterEpisodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCasterEpisodeWithOptions(request, runtime);
  }

  /**
   * Adds an episode list to a production studio.
   * 
   * @remarks
   * You need to create a production studio and obtain the production studio configurations before you call this operation to create an episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterEpisodeGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCasterEpisodeGroupResponse
   */
  async addCasterEpisodeGroupWithOptions(request: $_model.AddCasterEpisodeGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCasterEpisodeGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.item)) {
      query["Item"] = request.item;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repeatNum)) {
      query["RepeatNum"] = request.repeatNum;
    }

    if (!$dara.isNull(request.sideOutputUrl)) {
      query["SideOutputUrl"] = request.sideOutputUrl;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCasterEpisodeGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCasterEpisodeGroupResponse>(await this.callApi(params, req, runtime), new $_model.AddCasterEpisodeGroupResponse({}));
  }

  /**
   * Adds an episode list to a production studio.
   * 
   * @remarks
   * You need to create a production studio and obtain the production studio configurations before you call this operation to create an episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterEpisodeGroupRequest
   * @returns AddCasterEpisodeGroupResponse
   */
  async addCasterEpisodeGroup(request: $_model.AddCasterEpisodeGroupRequest): Promise<$_model.AddCasterEpisodeGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCasterEpisodeGroupWithOptions(request, runtime);
  }

  /**
   * Adds information about an episode list in a production studio.
   * 
   * @remarks
   * You need to create a production studio and add an episode list to the production studio before you call this operation to add information about the episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterEpisodeGroupContentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCasterEpisodeGroupContentResponse
   */
  async addCasterEpisodeGroupContentWithOptions(request: $_model.AddCasterEpisodeGroupContentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCasterEpisodeGroupContentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.content)) {
      query["Content"] = request.content;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCasterEpisodeGroupContent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCasterEpisodeGroupContentResponse>(await this.callApi(params, req, runtime), new $_model.AddCasterEpisodeGroupContentResponse({}));
  }

  /**
   * Adds information about an episode list in a production studio.
   * 
   * @remarks
   * You need to create a production studio and add an episode list to the production studio before you call this operation to add information about the episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterEpisodeGroupContentRequest
   * @returns AddCasterEpisodeGroupContentResponse
   */
  async addCasterEpisodeGroupContent(request: $_model.AddCasterEpisodeGroupContentRequest): Promise<$_model.AddCasterEpisodeGroupContentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCasterEpisodeGroupContentWithOptions(request, runtime);
  }

  /**
   * Adds a layout for a production studio.
   * 
   * @remarks
   * First, create a director desk and add video resources to the director desk, then call this interface to add the director desk layout. To create a director desk using the API, refer to [Create Director Desk](https://help.aliyun.com/document_detail/69338.html).
   * ## QPS Limitation 
   * The per-user QPS limit for this interface is 10 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, see [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddCasterLayoutRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCasterLayoutResponse
   */
  async addCasterLayoutWithOptions(request: $_model.AddCasterLayoutRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCasterLayoutResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.audioLayer)) {
      query["AudioLayer"] = request.audioLayer;
    }

    if (!$dara.isNull(request.blendList)) {
      query["BlendList"] = request.blendList;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.mixList)) {
      query["MixList"] = request.mixList;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.videoLayer)) {
      query["VideoLayer"] = request.videoLayer;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCasterLayout",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCasterLayoutResponse>(await this.callApi(params, req, runtime), new $_model.AddCasterLayoutResponse({}));
  }

  /**
   * Adds a layout for a production studio.
   * 
   * @remarks
   * First, create a director desk and add video resources to the director desk, then call this interface to add the director desk layout. To create a director desk using the API, refer to [Create Director Desk](https://help.aliyun.com/document_detail/69338.html).
   * ## QPS Limitation 
   * The per-user QPS limit for this interface is 10 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, see [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddCasterLayoutRequest
   * @returns AddCasterLayoutResponse
   */
  async addCasterLayout(request: $_model.AddCasterLayoutRequest): Promise<$_model.AddCasterLayoutResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCasterLayoutWithOptions(request, runtime);
  }

  /**
   * Adds the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * Create a production studio, add input sources to the production studio, and then call this operation to add the episode list for carousel playback in the production studio. This operation supports videos and components as episodes. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterProgramRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCasterProgramResponse
   */
  async addCasterProgramWithOptions(request: $_model.AddCasterProgramRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCasterProgramResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.episode)) {
      query["Episode"] = request.episode;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCasterProgram",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCasterProgramResponse>(await this.callApi(params, req, runtime), new $_model.AddCasterProgramResponse({}));
  }

  /**
   * Adds the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * Create a production studio, add input sources to the production studio, and then call this operation to add the episode list for carousel playback in the production studio. This operation supports videos and components as episodes. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddCasterProgramRequest
   * @returns AddCasterProgramResponse
   */
  async addCasterProgram(request: $_model.AddCasterProgramRequest): Promise<$_model.AddCasterProgramResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCasterProgramWithOptions(request, runtime);
  }

  /**
   * Adds an input source to a production studio. The number of input sources is limited by the number of input channels of the production studio.
   * 
   * @remarks
   * ##
   * Create a production studio, and then call this operation to add a video source to the production studio. The number of video sources is limited by the number of input channels of the production studio. For information about how to create a production studio by calling an API operation, see [CreateCaster](https://help.aliyun.com/document_detail/69338.html).
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddCasterVideoResourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCasterVideoResourceResponse
   */
  async addCasterVideoResourceWithOptions(request: $_model.AddCasterVideoResourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCasterVideoResourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.beginOffset)) {
      query["BeginOffset"] = request.beginOffset;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.endOffset)) {
      query["EndOffset"] = request.endOffset;
    }

    if (!$dara.isNull(request.fixedDelayDuration)) {
      query["FixedDelayDuration"] = request.fixedDelayDuration;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.imageUrl)) {
      query["ImageUrl"] = request.imageUrl;
    }

    if (!$dara.isNull(request.liveStreamUrl)) {
      query["LiveStreamUrl"] = request.liveStreamUrl;
    }

    if (!$dara.isNull(request.locationId)) {
      query["LocationId"] = request.locationId;
    }

    if (!$dara.isNull(request.materialId)) {
      query["MaterialId"] = request.materialId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.ptsCallbackInterval)) {
      query["PtsCallbackInterval"] = request.ptsCallbackInterval;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repeatNum)) {
      query["RepeatNum"] = request.repeatNum;
    }

    if (!$dara.isNull(request.resourceName)) {
      query["ResourceName"] = request.resourceName;
    }

    if (!$dara.isNull(request.vodUrl)) {
      query["VodUrl"] = request.vodUrl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCasterVideoResource",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCasterVideoResourceResponse>(await this.callApi(params, req, runtime), new $_model.AddCasterVideoResourceResponse({}));
  }

  /**
   * Adds an input source to a production studio. The number of input sources is limited by the number of input channels of the production studio.
   * 
   * @remarks
   * ##
   * Create a production studio, and then call this operation to add a video source to the production studio. The number of video sources is limited by the number of input channels of the production studio. For information about how to create a production studio by calling an API operation, see [CreateCaster](https://help.aliyun.com/document_detail/69338.html).
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddCasterVideoResourceRequest
   * @returns AddCasterVideoResourceResponse
   */
  async addCasterVideoResource(request: $_model.AddCasterVideoResourceRequest): Promise<$_model.AddCasterVideoResourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCasterVideoResourceWithOptions(request, runtime);
  }

  /**
   * Adds a custom transcoding configuration for a streaming domain.
   * 
   * @remarks
   * This operation supports the following types of custom transcoding templates:
   * *   h264: H.264
   * *   h264-nbhd: H.264 Narrowband HD™
   * *   h265: H.265
   * *   h265-nbhd: H.265 Narrowband HD™
   * *   audio: audio-only
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddCustomLiveStreamTranscodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCustomLiveStreamTranscodeResponse
   */
  async addCustomLiveStreamTranscodeWithOptions(request: $_model.AddCustomLiveStreamTranscodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCustomLiveStreamTranscodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.audioBitrate)) {
      query["AudioBitrate"] = request.audioBitrate;
    }

    if (!$dara.isNull(request.audioChannelNum)) {
      query["AudioChannelNum"] = request.audioChannelNum;
    }

    if (!$dara.isNull(request.audioCodec)) {
      query["AudioCodec"] = request.audioCodec;
    }

    if (!$dara.isNull(request.audioProfile)) {
      query["AudioProfile"] = request.audioProfile;
    }

    if (!$dara.isNull(request.audioRate)) {
      query["AudioRate"] = request.audioRate;
    }

    if (!$dara.isNull(request.bitrateWithSource)) {
      query["BitrateWithSource"] = request.bitrateWithSource;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.encryptParameters)) {
      query["EncryptParameters"] = request.encryptParameters;
    }

    if (!$dara.isNull(request.extWithSource)) {
      query["ExtWithSource"] = request.extWithSource;
    }

    if (!$dara.isNull(request.FPS)) {
      query["FPS"] = request.FPS;
    }

    if (!$dara.isNull(request.fpsWithSource)) {
      query["FpsWithSource"] = request.fpsWithSource;
    }

    if (!$dara.isNull(request.gop)) {
      query["Gop"] = request.gop;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.kmsKeyExpireInterval)) {
      query["KmsKeyExpireInterval"] = request.kmsKeyExpireInterval;
    }

    if (!$dara.isNull(request.kmsKeyID)) {
      query["KmsKeyID"] = request.kmsKeyID;
    }

    if (!$dara.isNull(request.kmsUID)) {
      query["KmsUID"] = request.kmsUID;
    }

    if (!$dara.isNull(request.lazy)) {
      query["Lazy"] = request.lazy;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.profile)) {
      query["Profile"] = request.profile;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resWithSource)) {
      query["ResWithSource"] = request.resWithSource;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.videoBitrate)) {
      query["VideoBitrate"] = request.videoBitrate;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCustomLiveStreamTranscode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCustomLiveStreamTranscodeResponse>(await this.callApi(params, req, runtime), new $_model.AddCustomLiveStreamTranscodeResponse({}));
  }

  /**
   * Adds a custom transcoding configuration for a streaming domain.
   * 
   * @remarks
   * This operation supports the following types of custom transcoding templates:
   * *   h264: H.264
   * *   h264-nbhd: H.264 Narrowband HD™
   * *   h265: H.265
   * *   h265-nbhd: H.265 Narrowband HD™
   * *   audio: audio-only
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddCustomLiveStreamTranscodeRequest
   * @returns AddCustomLiveStreamTranscodeResponse
   */
  async addCustomLiveStreamTranscode(request: $_model.AddCustomLiveStreamTranscodeRequest): Promise<$_model.AddCustomLiveStreamTranscodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCustomLiveStreamTranscodeWithOptions(request, runtime);
  }

  /**
   * Adds a subtitle rule.
   * 
   * @remarks
   *   After you call the [AddLiveAISubtitle](https://help.aliyun.com/document_detail/2848222.html) operation to add a subtitle template, you can call this operation to create a subtitle rule for the template.
   * *   You must add "_Subtitle template name" after the stream name in the streaming URL to play the subtitle stream.
   *     *   RTMP: rtmp://example.aliyundoc.com/app/stream_{Subtitle template name}?auth_key={Access token}
   *     *   FLV: http://example.aliyundoc.com/app/stream_{Subtitle template name}.flv?auth_key={Access token}
   *     *   M3U8: http://example.aliyundoc.com/app/stream_{Subtitle template name}.m3u8?auth_key={Access token}
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAIProduceRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveAIProduceRulesResponse
   */
  async addLiveAIProduceRulesWithOptions(request: $_model.AddLiveAIProduceRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveAIProduceRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.isLazy)) {
      query["IsLazy"] = request.isLazy;
    }

    if (!$dara.isNull(request.liveTemplate)) {
      query["LiveTemplate"] = request.liveTemplate;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.studioName)) {
      query["StudioName"] = request.studioName;
    }

    if (!$dara.isNull(request.subtitleName)) {
      query["SubtitleName"] = request.subtitleName;
    }

    if (!$dara.isNull(request.suffix)) {
      query["Suffix"] = request.suffix;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveAIProduceRules",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveAIProduceRulesResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveAIProduceRulesResponse({}));
  }

  /**
   * Adds a subtitle rule.
   * 
   * @remarks
   *   After you call the [AddLiveAISubtitle](https://help.aliyun.com/document_detail/2848222.html) operation to add a subtitle template, you can call this operation to create a subtitle rule for the template.
   * *   You must add "_Subtitle template name" after the stream name in the streaming URL to play the subtitle stream.
   *     *   RTMP: rtmp://example.aliyundoc.com/app/stream_{Subtitle template name}?auth_key={Access token}
   *     *   FLV: http://example.aliyundoc.com/app/stream_{Subtitle template name}.flv?auth_key={Access token}
   *     *   M3U8: http://example.aliyundoc.com/app/stream_{Subtitle template name}.m3u8?auth_key={Access token}
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAIProduceRulesRequest
   * @returns AddLiveAIProduceRulesResponse
   */
  async addLiveAIProduceRules(request: $_model.AddLiveAIProduceRulesRequest): Promise<$_model.AddLiveAIProduceRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveAIProduceRulesWithOptions(request, runtime);
  }

  /**
   * Adds a subtitle template.
   * 
   * @remarks
   * ## Instructions
   * - This interface supports adding live caption template configurations, with templates configurable to describe caption content, layout, and more. 
   * - After adding caption templates, you also need to call the [AddLiveAIProduceRules](https://help.aliyun.com/document_detail/2799676.html) interface to add caption rules. Restarting the stream will then enable captions in the broadcast. 
   * - Real-time captions are currently supported in Beijing, Shanghai, Singapore, Indonesia, and Saudi regions.
   * >Notice: The real-time caption feature is currently in beta testing. Each user can add up to 300 caption templates. 
   * ## QPS Limit 
   * The QPS limit for this interface per user is 60 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use judiciously. For more information, refer to [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - AddLiveAISubtitleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveAISubtitleResponse
   */
  async addLiveAISubtitleWithOptions(tmpReq: $_model.AddLiveAISubtitleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveAISubtitleResponse> {
    tmpReq.validate();
    let request = new $_model.AddLiveAISubtitleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.positionNormalized)) {
      request.positionNormalizedShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.positionNormalized, "PositionNormalized", "json");
    }

    let query = { };
    if (!$dara.isNull(request.bgColor)) {
      query["BgColor"] = request.bgColor;
    }

    if (!$dara.isNull(request.bgWidthNormalized)) {
      query["BgWidthNormalized"] = request.bgWidthNormalized;
    }

    if (!$dara.isNull(request.borderWidthNormalized)) {
      query["BorderWidthNormalized"] = request.borderWidthNormalized;
    }

    if (!$dara.isNull(request.copyFrom)) {
      query["CopyFrom"] = request.copyFrom;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.dstLanguage)) {
      query["DstLanguage"] = request.dstLanguage;
    }

    if (!$dara.isNull(request.fontColor)) {
      query["FontColor"] = request.fontColor;
    }

    if (!$dara.isNull(request.fontName)) {
      query["FontName"] = request.fontName;
    }

    if (!$dara.isNull(request.fontSizeNormalized)) {
      query["FontSizeNormalized"] = request.fontSizeNormalized;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.maxLines)) {
      query["MaxLines"] = request.maxLines;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.positionNormalizedShrink)) {
      query["PositionNormalized"] = request.positionNormalizedShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.showSourceLan)) {
      query["ShowSourceLan"] = request.showSourceLan;
    }

    if (!$dara.isNull(request.srcLanguage)) {
      query["SrcLanguage"] = request.srcLanguage;
    }

    if (!$dara.isNull(request.subtitleName)) {
      query["SubtitleName"] = request.subtitleName;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    if (!$dara.isNull(request.wordPerLine)) {
      query["WordPerLine"] = request.wordPerLine;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveAISubtitle",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveAISubtitleResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveAISubtitleResponse({}));
  }

  /**
   * Adds a subtitle template.
   * 
   * @remarks
   * ## Instructions
   * - This interface supports adding live caption template configurations, with templates configurable to describe caption content, layout, and more. 
   * - After adding caption templates, you also need to call the [AddLiveAIProduceRules](https://help.aliyun.com/document_detail/2799676.html) interface to add caption rules. Restarting the stream will then enable captions in the broadcast. 
   * - Real-time captions are currently supported in Beijing, Shanghai, Singapore, Indonesia, and Saudi regions.
   * >Notice: The real-time caption feature is currently in beta testing. Each user can add up to 300 caption templates. 
   * ## QPS Limit 
   * The QPS limit for this interface per user is 60 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use judiciously. For more information, refer to [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveAISubtitleRequest
   * @returns AddLiveAISubtitleResponse
   */
  async addLiveAISubtitle(request: $_model.AddLiveAISubtitleRequest): Promise<$_model.AddLiveAISubtitleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveAISubtitleWithOptions(request, runtime);
  }

  /**
   * Configure APP recording, with output saved to OSS.
   * 
   * @remarks
   * The live stream recording feature allows you to record a live stream and stores the recordings in a specified location. You can view the recordings whenever you want to. Recordings that are stored in OSS support multiple formats, such as Transport Stream (TS), MP4, Flash Video (FLV), and Common Media Application Format (CMAF). You can use different recording policies, including automatic recording, on-demand recording, and manual recording. By calling this operation, you can configure the recording template. For more information about live stream recording, see [Live stream recording](https://help.aliyun.com/document_detail/199357.html).
   * A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAppRecordConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveAppRecordConfigResponse
   */
  async addLiveAppRecordConfigWithOptions(request: $_model.AddLiveAppRecordConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveAppRecordConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.delayTime)) {
      query["DelayTime"] = request.delayTime;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.onDemand)) {
      query["OnDemand"] = request.onDemand;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.recordFormat)) {
      query["RecordFormat"] = request.recordFormat;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.transcodeRecordFormat)) {
      query["TranscodeRecordFormat"] = request.transcodeRecordFormat;
    }

    if (!$dara.isNull(request.transcodeTemplates)) {
      query["TranscodeTemplates"] = request.transcodeTemplates;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveAppRecordConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveAppRecordConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveAppRecordConfigResponse({}));
  }

  /**
   * Configure APP recording, with output saved to OSS.
   * 
   * @remarks
   * The live stream recording feature allows you to record a live stream and stores the recordings in a specified location. You can view the recordings whenever you want to. Recordings that are stored in OSS support multiple formats, such as Transport Stream (TS), MP4, Flash Video (FLV), and Common Media Application Format (CMAF). You can use different recording policies, including automatic recording, on-demand recording, and manual recording. By calling this operation, you can configure the recording template. For more information about live stream recording, see [Live stream recording](https://help.aliyun.com/document_detail/199357.html).
   * A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAppRecordConfigRequest
   * @returns AddLiveAppRecordConfigResponse
   */
  async addLiveAppRecordConfig(request: $_model.AddLiveAppRecordConfigRequest): Promise<$_model.AddLiveAppRecordConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveAppRecordConfigWithOptions(request, runtime);
  }

  /**
   * Configures the snapshot feature for a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The configuration takes effect after you restart stream ingest.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing method and pricing of live stream snapshots in ApsaraVideo Live. For more information, see [Billing of live stream snapshots](https://help.aliyun.com/document_detail/195286.html).
   * *   Make sure that Object Storage Service (OSS) is activated and a specific bucket is created. This way, ApsaraVideo Live can store live stream snapshots in the bucket. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html).
   * *   If you store snapshots in OSS, storage fees are generated. For more information, see [Storage fees](https://help.aliyun.com/document_detail/173534.html).
   * *   The OSS bucket must reside in the same region as the live center of the streaming domain. Cross-region snapshot capture is not supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAppSnapshotConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveAppSnapshotConfigResponse
   */
  async addLiveAppSnapshotConfigWithOptions(request: $_model.AddLiveAppSnapshotConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveAppSnapshotConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.callback)) {
      query["Callback"] = request.callback;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.overwriteOssObject)) {
      query["OverwriteOssObject"] = request.overwriteOssObject;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.sequenceOssObject)) {
      query["SequenceOssObject"] = request.sequenceOssObject;
    }

    if (!$dara.isNull(request.timeInterval)) {
      query["TimeInterval"] = request.timeInterval;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveAppSnapshotConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveAppSnapshotConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveAppSnapshotConfigResponse({}));
  }

  /**
   * Configures the snapshot feature for a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The configuration takes effect after you restart stream ingest.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing method and pricing of live stream snapshots in ApsaraVideo Live. For more information, see [Billing of live stream snapshots](https://help.aliyun.com/document_detail/195286.html).
   * *   Make sure that Object Storage Service (OSS) is activated and a specific bucket is created. This way, ApsaraVideo Live can store live stream snapshots in the bucket. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html).
   * *   If you store snapshots in OSS, storage fees are generated. For more information, see [Storage fees](https://help.aliyun.com/document_detail/173534.html).
   * *   The OSS bucket must reside in the same region as the live center of the streaming domain. Cross-region snapshot capture is not supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAppSnapshotConfigRequest
   * @returns AddLiveAppSnapshotConfigResponse
   */
  async addLiveAppSnapshotConfig(request: $_model.AddLiveAppSnapshotConfigRequest): Promise<$_model.AddLiveAppSnapshotConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveAppSnapshotConfigWithOptions(request, runtime);
  }

  /**
   * Adds an audio moderation configuration.
   * 
   * @remarks
   *   The content moderation feature detects undesirable sensitive content in the audio from live streams and returns callbacks to notify you of the violations. Then, you can manually review the content and take actions accordingly.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAudioAuditConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveAudioAuditConfigResponse
   */
  async addLiveAudioAuditConfigWithOptions(request: $_model.AddLiveAudioAuditConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveAudioAuditConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.bizType)) {
      query["BizType"] = request.bizType;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.ossObject)) {
      query["OssObject"] = request.ossObject;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveAudioAuditConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveAudioAuditConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveAudioAuditConfigResponse({}));
  }

  /**
   * Adds an audio moderation configuration.
   * 
   * @remarks
   *   The content moderation feature detects undesirable sensitive content in the audio from live streams and returns callbacks to notify you of the violations. Then, you can manually review the content and take actions accordingly.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAudioAuditConfigRequest
   * @returns AddLiveAudioAuditConfigResponse
   */
  async addLiveAudioAuditConfig(request: $_model.AddLiveAudioAuditConfigRequest): Promise<$_model.AddLiveAudioAuditConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveAudioAuditConfigWithOptions(request, runtime);
  }

  /**
   * Configures callbacks for audio moderation results.
   * 
   * @remarks
   *   The content moderation feature returns the audio moderation results based on the configured callback template.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAudioAuditNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveAudioAuditNotifyConfigResponse
   */
  async addLiveAudioAuditNotifyConfigWithOptions(request: $_model.AddLiveAudioAuditNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveAudioAuditNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callback)) {
      query["Callback"] = request.callback;
    }

    if (!$dara.isNull(request.callbackTemplate)) {
      query["CallbackTemplate"] = request.callbackTemplate;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveAudioAuditNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveAudioAuditNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveAudioAuditNotifyConfigResponse({}));
  }

  /**
   * Configures callbacks for audio moderation results.
   * 
   * @remarks
   *   The content moderation feature returns the audio moderation results based on the configured callback template.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveAudioAuditNotifyConfigRequest
   * @returns AddLiveAudioAuditNotifyConfigResponse
   */
  async addLiveAudioAuditNotifyConfig(request: $_model.AddLiveAudioAuditNotifyConfigRequest): Promise<$_model.AddLiveAudioAuditNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveAudioAuditNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Adds a configuration of live center stream relay.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveCenterTransferRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveCenterTransferResponse
   */
  async addLiveCenterTransferWithOptions(request: $_model.AddLiveCenterTransferRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveCenterTransferResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.dstUrl)) {
      query["DstUrl"] = request.dstUrl;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.transferArgs)) {
      query["TransferArgs"] = request.transferArgs;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveCenterTransfer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveCenterTransferResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveCenterTransferResponse({}));
  }

  /**
   * Adds a configuration of live center stream relay.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveCenterTransferRequest
   * @returns AddLiveCenterTransferResponse
   */
  async addLiveCenterTransfer(request: $_model.AddLiveCenterTransferRequest): Promise<$_model.AddLiveCenterTransferResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveCenterTransferWithOptions(request, runtime);
  }

  /**
   * Configures callbacks for video moderation results. As a result, a callback URL that is used to receive the callback notifications is added.
   * 
   * @remarks
   *   The automated review feature sends notifications about violations to the callback URL in real time. Then, you can manually review the content and take actions accordingly.
   * *   Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - AddLiveDetectNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveDetectNotifyConfigResponse
   */
  async addLiveDetectNotifyConfigWithOptions(request: $_model.AddLiveDetectNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveDetectNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveDetectNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveDetectNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveDetectNotifyConfigResponse({}));
  }

  /**
   * Configures callbacks for video moderation results. As a result, a callback URL that is used to receive the callback notifications is added.
   * 
   * @remarks
   *   The automated review feature sends notifications about violations to the callback URL in real time. Then, you can manually review the content and take actions accordingly.
   * *   Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - AddLiveDetectNotifyConfigRequest
   * @returns AddLiveDetectNotifyConfigResponse
   */
  async addLiveDetectNotifyConfig(request: $_model.AddLiveDetectNotifyConfigRequest): Promise<$_model.AddLiveDetectNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveDetectNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Adds a domain name to ApsaraVideo Live. This operation allows you to add only one domain name at a time.
   * 
   * @remarks
   *   You must activate ApsaraVideo Live before you add a domain name. For more information, see [Activate ApsaraVideo Live](https://help.aliyun.com/document_detail/195292.html).
   * *   ApsaraVideo Live verifies the ownership of a new domain name that you add. After the verification is passed, the domain name is added to ApsaraVideo Live. ApsaraVideo Live allows you to use a Domain Name System (DNS) record or a verification file to verify the ownership of a domain name. For more information, see [Verify the ownership of a domain name](https://help.aliyun.com/document_detail/184466.html).
   * *   To use ApsaraVideo Live to ingest and play streams, you must add an ingest domain and a streaming domain. You can add only one domain name at a time.
   * *   After you add a domain name, you must configure a CNAME record for the domain name. For more information, see [Add a CNAME record](https://help.aliyun.com/document_detail/84929.html).
   * *   After you add an ingest domain and a streaming domain, you must associate the streaming domain with the ingest domain. For more information, see [Associate a streaming domain with an ingest domain](https://help.aliyun.com/document_detail/199338.html).
   * >  From February 19, 2019, domain names that are added by calling the AddLiveDomain operation do not support live center ingest. Domain names that are added by using Alibaba Cloud CDN also do not support live center ingest. When you call the AddLiveDomain operation, you can set the LiveDomainType parameter to liveEdge to add an ingest domain that uses edge ingest or set the LiveDomainType parameter to liveVideo to add a streaming domain. You can associate a streaming domain with an ingest domain by calling the AddLiveDomainMapping operation. Domain names added before February 19, 2019, for which live center ingest was configured, are not affected.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveDomainRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveDomainResponse
   */
  async addLiveDomainWithOptions(request: $_model.AddLiveDomainRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveDomainResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkUrl)) {
      query["CheckUrl"] = request.checkUrl;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.liveDomainType)) {
      query["LiveDomainType"] = request.liveDomainType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.topLevelDomain)) {
      query["TopLevelDomain"] = request.topLevelDomain;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveDomain",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveDomainResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveDomainResponse({}));
  }

  /**
   * Adds a domain name to ApsaraVideo Live. This operation allows you to add only one domain name at a time.
   * 
   * @remarks
   *   You must activate ApsaraVideo Live before you add a domain name. For more information, see [Activate ApsaraVideo Live](https://help.aliyun.com/document_detail/195292.html).
   * *   ApsaraVideo Live verifies the ownership of a new domain name that you add. After the verification is passed, the domain name is added to ApsaraVideo Live. ApsaraVideo Live allows you to use a Domain Name System (DNS) record or a verification file to verify the ownership of a domain name. For more information, see [Verify the ownership of a domain name](https://help.aliyun.com/document_detail/184466.html).
   * *   To use ApsaraVideo Live to ingest and play streams, you must add an ingest domain and a streaming domain. You can add only one domain name at a time.
   * *   After you add a domain name, you must configure a CNAME record for the domain name. For more information, see [Add a CNAME record](https://help.aliyun.com/document_detail/84929.html).
   * *   After you add an ingest domain and a streaming domain, you must associate the streaming domain with the ingest domain. For more information, see [Associate a streaming domain with an ingest domain](https://help.aliyun.com/document_detail/199338.html).
   * >  From February 19, 2019, domain names that are added by calling the AddLiveDomain operation do not support live center ingest. Domain names that are added by using Alibaba Cloud CDN also do not support live center ingest. When you call the AddLiveDomain operation, you can set the LiveDomainType parameter to liveEdge to add an ingest domain that uses edge ingest or set the LiveDomainType parameter to liveVideo to add a streaming domain. You can associate a streaming domain with an ingest domain by calling the AddLiveDomainMapping operation. Domain names added before February 19, 2019, for which live center ingest was configured, are not affected.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveDomainRequest
   * @returns AddLiveDomainResponse
   */
  async addLiveDomain(request: $_model.AddLiveDomainRequest): Promise<$_model.AddLiveDomainResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveDomainWithOptions(request, runtime);
  }

  /**
   * Creates the mapping between a streaming domain and an ingest domain.
   * 
   * @remarks
   * Call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a streaming domain and an ingest domain, and then call this operation to create the mapping between the two domain names.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveDomainMappingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveDomainMappingResponse
   */
  async addLiveDomainMappingWithOptions(request: $_model.AddLiveDomainMappingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveDomainMappingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pullDomain)) {
      query["PullDomain"] = request.pullDomain;
    }

    if (!$dara.isNull(request.pushDomain)) {
      query["PushDomain"] = request.pushDomain;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveDomainMapping",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveDomainMappingResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveDomainMappingResponse({}));
  }

  /**
   * Creates the mapping between a streaming domain and an ingest domain.
   * 
   * @remarks
   * Call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a streaming domain and an ingest domain, and then call this operation to create the mapping between the two domain names.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveDomainMappingRequest
   * @returns AddLiveDomainMappingResponse
   */
  async addLiveDomainMapping(request: $_model.AddLiveDomainMappingRequest): Promise<$_model.AddLiveDomainMappingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveDomainMappingWithOptions(request, runtime);
  }

  /**
   * Maps a sub-streaming domain to a main streaming domain.
   * 
   * @remarks
   * You can call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a main streaming domain and a sub-streaming domain and then call this operation to map the sub-streaming domain to the main streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveDomainPlayMappingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveDomainPlayMappingResponse
   */
  async addLiveDomainPlayMappingWithOptions(request: $_model.AddLiveDomainPlayMappingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveDomainPlayMappingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.playDomain)) {
      query["PlayDomain"] = request.playDomain;
    }

    if (!$dara.isNull(request.pullDomain)) {
      query["PullDomain"] = request.pullDomain;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveDomainPlayMapping",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveDomainPlayMappingResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveDomainPlayMappingResponse({}));
  }

  /**
   * Maps a sub-streaming domain to a main streaming domain.
   * 
   * @remarks
   * You can call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a main streaming domain and a sub-streaming domain and then call this operation to map the sub-streaming domain to the main streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveDomainPlayMappingRequest
   * @returns AddLiveDomainPlayMappingResponse
   */
  async addLiveDomainPlayMapping(request: $_model.AddLiveDomainPlayMappingRequest): Promise<$_model.AddLiveDomainPlayMappingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveDomainPlayMappingWithOptions(request, runtime);
  }

  /**
   * Mutes one or more users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - AddLiveMessageGroupBandRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveMessageGroupBandResponse
   */
  async addLiveMessageGroupBandWithOptions(tmpReq: $_model.AddLiveMessageGroupBandRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveMessageGroupBandResponse> {
    tmpReq.validate();
    let request = new $_model.AddLiveMessageGroupBandShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.bannedUsers)) {
      request.bannedUsersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bannedUsers, "BannedUsers", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.bannedUsersShrink)) {
      query["BannedUsers"] = request.bannedUsersShrink;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveMessageGroupBand",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveMessageGroupBandResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveMessageGroupBandResponse({}));
  }

  /**
   * Mutes one or more users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveMessageGroupBandRequest
   * @returns AddLiveMessageGroupBandResponse
   */
  async addLiveMessageGroupBand(request: $_model.AddLiveMessageGroupBandRequest): Promise<$_model.AddLiveMessageGroupBandResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveMessageGroupBandWithOptions(request, runtime);
  }

  /**
   * Adds a live stream encapsulation configuration.
   * 
   * @remarks
   *   The first time you configure encapsulation for a domain name, domain acceleration is automatically configured and takes effect in 3 to 5 minutes.
   * *   If the streaming domain resides in a region outside China, including Singapore, Germany (Frankfurt), Japan (Tokyo), and Indonesia (Jakarta), you may encounter high latency issues. We recommend that you test and verify whether the settings meet expectations.
   * *   You can call this operation to add a live stream encapsulation configuration. The configuration takes effect only after you re-ingest the stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLivePackageConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLivePackageConfigResponse
   */
  async addLivePackageConfigWithOptions(request: $_model.AddLivePackageConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLivePackageConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ignoreTranscode)) {
      query["IgnoreTranscode"] = request.ignoreTranscode;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.partDuration)) {
      query["PartDuration"] = request.partDuration;
    }

    if (!$dara.isNull(request.protocol)) {
      query["Protocol"] = request.protocol;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.segmentDuration)) {
      query["SegmentDuration"] = request.segmentDuration;
    }

    if (!$dara.isNull(request.segmentNum)) {
      query["SegmentNum"] = request.segmentNum;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLivePackageConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLivePackageConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLivePackageConfigResponse({}));
  }

  /**
   * Adds a live stream encapsulation configuration.
   * 
   * @remarks
   *   The first time you configure encapsulation for a domain name, domain acceleration is automatically configured and takes effect in 3 to 5 minutes.
   * *   If the streaming domain resides in a region outside China, including Singapore, Germany (Frankfurt), Japan (Tokyo), and Indonesia (Jakarta), you may encounter high latency issues. We recommend that you test and verify whether the settings meet expectations.
   * *   You can call this operation to add a live stream encapsulation configuration. The configuration takes effect only after you re-ingest the stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLivePackageConfigRequest
   * @returns AddLivePackageConfigResponse
   */
  async addLivePackageConfig(request: $_model.AddLivePackageConfigRequest): Promise<$_model.AddLivePackageConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLivePackageConfigWithOptions(request, runtime);
  }

  /**
   * Creates a stream pulling configuration for a live stream, which includes parameters such as the origin URL, start time, and end time.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing method and pricing of stream pulling in ApsaraVideo Live. For more information, see [Billing of standard streaming](https://help.aliyun.com/document_detail/195284.html).
   * *   Stream pulling refers to the process of pulling live streams from third-party streaming URLs to a live center of ApsaraVideo Live for CDN acceleration.
   * *   You can call this operation only for regular stream pulling. That is, you can specify the start time and end time to pull live streams.
   * *   Regular stream pulling and triggered stream pulling are supported in the ApsaraVideo Live console. For more information, see [Configure stream pulling](https://help.aliyun.com/document_detail/199452.html).
   * *   You can specify custom values for the AppName and StreamName parameters. Streaming URLs that are generated vary based on different values of the AppName and StreamName parameters. You can use the [URL generator](https://help.aliyun.com/document_detail/197400.html) to generate a streaming URL.
   * *   A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLivePullStreamInfoConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLivePullStreamInfoConfigResponse
   */
  async addLivePullStreamInfoConfigWithOptions(request: $_model.AddLivePullStreamInfoConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLivePullStreamInfoConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sourceUrl)) {
      query["SourceUrl"] = request.sourceUrl;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLivePullStreamInfoConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLivePullStreamInfoConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLivePullStreamInfoConfigResponse({}));
  }

  /**
   * Creates a stream pulling configuration for a live stream, which includes parameters such as the origin URL, start time, and end time.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing method and pricing of stream pulling in ApsaraVideo Live. For more information, see [Billing of standard streaming](https://help.aliyun.com/document_detail/195284.html).
   * *   Stream pulling refers to the process of pulling live streams from third-party streaming URLs to a live center of ApsaraVideo Live for CDN acceleration.
   * *   You can call this operation only for regular stream pulling. That is, you can specify the start time and end time to pull live streams.
   * *   Regular stream pulling and triggered stream pulling are supported in the ApsaraVideo Live console. For more information, see [Configure stream pulling](https://help.aliyun.com/document_detail/199452.html).
   * *   You can specify custom values for the AppName and StreamName parameters. Streaming URLs that are generated vary based on different values of the AppName and StreamName parameters. You can use the [URL generator](https://help.aliyun.com/document_detail/197400.html) to generate a streaming URL.
   * *   A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLivePullStreamInfoConfigRequest
   * @returns AddLivePullStreamInfoConfigResponse
   */
  async addLivePullStreamInfoConfig(request: $_model.AddLivePullStreamInfoConfigRequest): Promise<$_model.AddLivePullStreamInfoConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLivePullStreamInfoConfigWithOptions(request, runtime);
  }

  /**
   * Configures recording callbacks for a domain name.
   * 
   * @remarks
   * Before you call this operation to configure recording callbacks for a domain name, you can query whether the domain name already has recording callbacks configured. For more information, see [DescribeLiveRecordNotifyConfig](https://help.aliyun.com/document_detail/2847893.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveRecordNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveRecordNotifyConfigResponse
   */
  async addLiveRecordNotifyConfigWithOptions(request: $_model.AddLiveRecordNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveRecordNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.needStatusNotify)) {
      query["NeedStatusNotify"] = request.needStatusNotify;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.onDemandUrl)) {
      query["OnDemandUrl"] = request.onDemandUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveRecordNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveRecordNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveRecordNotifyConfigResponse({}));
  }

  /**
   * Configures recording callbacks for a domain name.
   * 
   * @remarks
   * Before you call this operation to configure recording callbacks for a domain name, you can query whether the domain name already has recording callbacks configured. For more information, see [DescribeLiveRecordNotifyConfig](https://help.aliyun.com/document_detail/2847893.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveRecordNotifyConfigRequest
   * @returns AddLiveRecordNotifyConfigResponse
   */
  async addLiveRecordNotifyConfig(request: $_model.AddLiveRecordNotifyConfigRequest): Promise<$_model.AddLiveRecordNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveRecordNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Adds a Live-to-VOD configuration to store recordings in the media library of ApsaraVideo VOD.
   * 
   * @remarks
   * You can call this operation to configure the Live-to-VOD feature to store recordings in the media library of ApsaraVideo VOD.
   * >  You cannot configure the Live-to-VOD feature by using a Finance Cloud account.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveRecordVodConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveRecordVodConfigResponse
   */
  async addLiveRecordVodConfigWithOptions(request: $_model.AddLiveRecordVodConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveRecordVodConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.autoCompose)) {
      query["AutoCompose"] = request.autoCompose;
    }

    if (!$dara.isNull(request.composeVodTranscodeGroupId)) {
      query["ComposeVodTranscodeGroupId"] = request.composeVodTranscodeGroupId;
    }

    if (!$dara.isNull(request.cycleDuration)) {
      query["CycleDuration"] = request.cycleDuration;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.onDemand)) {
      query["OnDemand"] = request.onDemand;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.storageLocation)) {
      query["StorageLocation"] = request.storageLocation;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.vodTranscodeGroupId)) {
      query["VodTranscodeGroupId"] = request.vodTranscodeGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveRecordVodConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveRecordVodConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveRecordVodConfigResponse({}));
  }

  /**
   * Adds a Live-to-VOD configuration to store recordings in the media library of ApsaraVideo VOD.
   * 
   * @remarks
   * You can call this operation to configure the Live-to-VOD feature to store recordings in the media library of ApsaraVideo VOD.
   * >  You cannot configure the Live-to-VOD feature by using a Finance Cloud account.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveRecordVodConfigRequest
   * @returns AddLiveRecordVodConfigResponse
   */
  async addLiveRecordVodConfig(request: $_model.AddLiveRecordVodConfigRequest): Promise<$_model.AddLiveRecordVodConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveRecordVodConfigWithOptions(request, runtime);
  }

  /**
   * Adds a video moderation configuration for live streams in an application under a domain name.
   * 
   * @remarks
   * - The live streaming audit function identifies and reviews违规sensitive content at the domain and App level, and promptly notifies users of such violations via callbacks. Users can then review the content and take appropriate actions.
   * - Currently, only some live streaming centers support intelligent auditing. For a list of live streaming centers that support this feature, please refer to [Service Regions](https://help.aliyun.com/document_detail/193730.html).
   * ## QPS Limitation 
   * The QPS limit for this API per user is 30 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use the API judiciously. For more information, see [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveSnapshotDetectPornConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveSnapshotDetectPornConfigResponse
   */
  async addLiveSnapshotDetectPornConfigWithOptions(request: $_model.AddLiveSnapshotDetectPornConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveSnapshotDetectPornConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.ossObject)) {
      query["OssObject"] = request.ossObject;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.scene)) {
      query["Scene"] = request.scene;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveSnapshotDetectPornConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveSnapshotDetectPornConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveSnapshotDetectPornConfigResponse({}));
  }

  /**
   * Adds a video moderation configuration for live streams in an application under a domain name.
   * 
   * @remarks
   * - The live streaming audit function identifies and reviews违规sensitive content at the domain and App level, and promptly notifies users of such violations via callbacks. Users can then review the content and take appropriate actions.
   * - Currently, only some live streaming centers support intelligent auditing. For a list of live streaming centers that support this feature, please refer to [Service Regions](https://help.aliyun.com/document_detail/193730.html).
   * ## QPS Limitation 
   * The QPS limit for this API per user is 30 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use the API judiciously. For more information, see [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveSnapshotDetectPornConfigRequest
   * @returns AddLiveSnapshotDetectPornConfigResponse
   */
  async addLiveSnapshotDetectPornConfig(request: $_model.AddLiveSnapshotDetectPornConfigRequest): Promise<$_model.AddLiveSnapshotDetectPornConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveSnapshotDetectPornConfigWithOptions(request, runtime);
  }

  /**
   * Configures snapshot callbacks.
   * 
   * @remarks
   * ### QPS Limit 
   * The QPS limit for this API per user is 30 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveSnapshotNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveSnapshotNotifyConfigResponse
   */
  async addLiveSnapshotNotifyConfigWithOptions(request: $_model.AddLiveSnapshotNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveSnapshotNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.notifyAuthKey)) {
      query["NotifyAuthKey"] = request.notifyAuthKey;
    }

    if (!$dara.isNull(request.notifyReqAuth)) {
      query["NotifyReqAuth"] = request.notifyReqAuth;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveSnapshotNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveSnapshotNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveSnapshotNotifyConfigResponse({}));
  }

  /**
   * Configures snapshot callbacks.
   * 
   * @remarks
   * ### QPS Limit 
   * The QPS limit for this API per user is 30 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveSnapshotNotifyConfigRequest
   * @returns AddLiveSnapshotNotifyConfigResponse
   */
  async addLiveSnapshotNotifyConfig(request: $_model.AddLiveSnapshotNotifyConfigRequest): Promise<$_model.AddLiveSnapshotNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveSnapshotNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Invoke AddLiveStreamMerge to add primary and backup stream merging configuration.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveStreamMergeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveStreamMergeResponse
   */
  async addLiveStreamMergeWithOptions(request: $_model.AddLiveStreamMergeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveStreamMergeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.inAppName1)) {
      query["InAppName1"] = request.inAppName1;
    }

    if (!$dara.isNull(request.inAppName2)) {
      query["InAppName2"] = request.inAppName2;
    }

    if (!$dara.isNull(request.inStreamName1)) {
      query["InStreamName1"] = request.inStreamName1;
    }

    if (!$dara.isNull(request.inStreamName2)) {
      query["InStreamName2"] = request.inStreamName2;
    }

    if (!$dara.isNull(request.liveMerger)) {
      query["LiveMerger"] = request.liveMerger;
    }

    if (!$dara.isNull(request.mergeParameters)) {
      query["MergeParameters"] = request.mergeParameters;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.protocol)) {
      query["Protocol"] = request.protocol;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveStreamMerge",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveStreamMergeResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveStreamMergeResponse({}));
  }

  /**
   * Invoke AddLiveStreamMerge to add primary and backup stream merging configuration.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveStreamMergeRequest
   * @returns AddLiveStreamMergeResponse
   */
  async addLiveStreamMerge(request: $_model.AddLiveStreamMergeRequest): Promise<$_model.AddLiveStreamMergeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveStreamMergeWithOptions(request, runtime);
  }

  /**
   * Adds transcoding configurations for a streaming domain.
   * 
   * @remarks
   * You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to add transcoding configurations. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
   * ## QPS limits
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - AddLiveStreamTranscodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveStreamTranscodeResponse
   */
  async addLiveStreamTranscodeWithOptions(request: $_model.AddLiveStreamTranscodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveStreamTranscodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.encryptParameters)) {
      query["EncryptParameters"] = request.encryptParameters;
    }

    if (!$dara.isNull(request.lazy)) {
      query["Lazy"] = request.lazy;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveStreamTranscode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveStreamTranscodeResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveStreamTranscodeResponse({}));
  }

  /**
   * Adds transcoding configurations for a streaming domain.
   * 
   * @remarks
   * You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to add transcoding configurations. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
   * ## QPS limits
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - AddLiveStreamTranscodeRequest
   * @returns AddLiveStreamTranscodeResponse
   */
  async addLiveStreamTranscode(request: $_model.AddLiveStreamTranscodeRequest): Promise<$_model.AddLiveStreamTranscodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveStreamTranscodeWithOptions(request, runtime);
  }

  /**
   * Creates a watermark template.
   * 
   * @remarks
   *   You can call this operation to create a watermark template and configure information such as the watermark content and layout in the template.
   * *   After you create a watermark template, you must also call the [AddLiveStreamWatermarkRule](https://help.aliyun.com/document_detail/2848100.html) operation to add a watermark rule. A live stream in progress can contain the watermark only after the stream is re-ingested.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveStreamWatermarkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveStreamWatermarkResponse
   */
  async addLiveStreamWatermarkWithOptions(request: $_model.AddLiveStreamWatermarkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveStreamWatermarkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.offsetCorner)) {
      query["OffsetCorner"] = request.offsetCorner;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pictureUrl)) {
      query["PictureUrl"] = request.pictureUrl;
    }

    if (!$dara.isNull(request.refHeight)) {
      query["RefHeight"] = request.refHeight;
    }

    if (!$dara.isNull(request.refWidth)) {
      query["RefWidth"] = request.refWidth;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.transparency)) {
      query["Transparency"] = request.transparency;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.XOffset)) {
      query["XOffset"] = request.XOffset;
    }

    if (!$dara.isNull(request.YOffset)) {
      query["YOffset"] = request.YOffset;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveStreamWatermark",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveStreamWatermarkResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveStreamWatermarkResponse({}));
  }

  /**
   * Creates a watermark template.
   * 
   * @remarks
   *   You can call this operation to create a watermark template and configure information such as the watermark content and layout in the template.
   * *   After you create a watermark template, you must also call the [AddLiveStreamWatermarkRule](https://help.aliyun.com/document_detail/2848100.html) operation to add a watermark rule. A live stream in progress can contain the watermark only after the stream is re-ingested.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddLiveStreamWatermarkRequest
   * @returns AddLiveStreamWatermarkResponse
   */
  async addLiveStreamWatermark(request: $_model.AddLiveStreamWatermarkRequest): Promise<$_model.AddLiveStreamWatermarkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveStreamWatermarkWithOptions(request, runtime);
  }

  /**
   * Adds a watermark rule.
   * 
   * @remarks
   * After calling the [AddLiveStreamWatermark](https://help.aliyun.com/document_detail/469416.html) API to add a watermark template, you can use this interface to add watermark rules. 
   * ## QPS Limit
   *  The QPS limit for this interface per user is 60 times/second. Exceeding the limit will result in API calls being throttled, which may impact your business. Please use it reasonably. For more information, see [QPS Limit](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveStreamWatermarkRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLiveStreamWatermarkRuleResponse
   */
  async addLiveStreamWatermarkRuleWithOptions(request: $_model.AddLiveStreamWatermarkRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddLiveStreamWatermarkRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLiveStreamWatermarkRule",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddLiveStreamWatermarkRuleResponse>(await this.callApi(params, req, runtime), new $_model.AddLiveStreamWatermarkRuleResponse({}));
  }

  /**
   * Adds a watermark rule.
   * 
   * @remarks
   * After calling the [AddLiveStreamWatermark](https://help.aliyun.com/document_detail/469416.html) API to add a watermark template, you can use this interface to add watermark rules. 
   * ## QPS Limit
   *  The QPS limit for this interface per user is 60 times/second. Exceeding the limit will result in API calls being throttled, which may impact your business. Please use it reasonably. For more information, see [QPS Limit](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddLiveStreamWatermarkRuleRequest
   * @returns AddLiveStreamWatermarkRuleResponse
   */
  async addLiveStreamWatermarkRule(request: $_model.AddLiveStreamWatermarkRuleRequest): Promise<$_model.AddLiveStreamWatermarkRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLiveStreamWatermarkRuleWithOptions(request, runtime);
  }

  /**
   * Adds episodes to an episode list.
   * 
   * @remarks
   * Create a production studio, add a layout and components to the production studio, and then call this operation to add episodes. If no episode list exists in the production studio, this operation creates an episode list for the production studio. For more information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddPlaylistItemsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddPlaylistItemsResponse
   */
  async addPlaylistItemsWithOptions(request: $_model.AddPlaylistItemsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddPlaylistItemsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programConfig)) {
      query["ProgramConfig"] = request.programConfig;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.programItems)) {
      query["ProgramItems"] = request.programItems;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddPlaylistItems",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddPlaylistItemsResponse>(await this.callApi(params, req, runtime), new $_model.AddPlaylistItemsResponse({}));
  }

  /**
   * Adds episodes to an episode list.
   * 
   * @remarks
   * Create a production studio, add a layout and components to the production studio, and then call this operation to add episodes. If no episode list exists in the production studio, this operation creates an episode list for the production studio. For more information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddPlaylistItemsRequest
   * @returns AddPlaylistItemsResponse
   */
  async addPlaylistItems(request: $_model.AddPlaylistItemsRequest): Promise<$_model.AddPlaylistItemsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addPlaylistItemsWithOptions(request, runtime);
  }

  /**
   * Creates a Real-Time Streaming (RTS) transcoding configuration for a streaming domain.
   * 
   * @remarks
   * You can call this operation to add an RTS transcoding configuration. This operation supports four template types: h264, h264-nbhd, h264-origin, and audio.
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddRtsLiveStreamTranscodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddRtsLiveStreamTranscodeResponse
   */
  async addRtsLiveStreamTranscodeWithOptions(request: $_model.AddRtsLiveStreamTranscodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddRtsLiveStreamTranscodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.audioBitrate)) {
      query["AudioBitrate"] = request.audioBitrate;
    }

    if (!$dara.isNull(request.audioChannelNum)) {
      query["AudioChannelNum"] = request.audioChannelNum;
    }

    if (!$dara.isNull(request.audioCodec)) {
      query["AudioCodec"] = request.audioCodec;
    }

    if (!$dara.isNull(request.audioProfile)) {
      query["AudioProfile"] = request.audioProfile;
    }

    if (!$dara.isNull(request.audioRate)) {
      query["AudioRate"] = request.audioRate;
    }

    if (!$dara.isNull(request.deleteBframes)) {
      query["DeleteBframes"] = request.deleteBframes;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.FPS)) {
      query["FPS"] = request.FPS;
    }

    if (!$dara.isNull(request.gop)) {
      query["Gop"] = request.gop;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.lazy)) {
      query["Lazy"] = request.lazy;
    }

    if (!$dara.isNull(request.opus)) {
      query["Opus"] = request.opus;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.profile)) {
      query["Profile"] = request.profile;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.videoBitrate)) {
      query["VideoBitrate"] = request.videoBitrate;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddRtsLiveStreamTranscode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddRtsLiveStreamTranscodeResponse>(await this.callApi(params, req, runtime), new $_model.AddRtsLiveStreamTranscodeResponse({}));
  }

  /**
   * Creates a Real-Time Streaming (RTS) transcoding configuration for a streaming domain.
   * 
   * @remarks
   * You can call this operation to add an RTS transcoding configuration. This operation supports four template types: h264, h264-nbhd, h264-origin, and audio.
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - AddRtsLiveStreamTranscodeRequest
   * @returns AddRtsLiveStreamTranscodeResponse
   */
  async addRtsLiveStreamTranscode(request: $_model.AddRtsLiveStreamTranscodeRequest): Promise<$_model.AddRtsLiveStreamTranscodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addRtsLiveStreamTranscodeWithOptions(request, runtime);
  }

  /**
   * Adds an episode to an episode list.
   * 
   * @remarks
   * You must create a production studio in the new playlist mode and add media resources to the production studio before you can call this operation. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * You can add up to 1,000 episodes to an episode list.
   * > 
   * *   When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
   * *   When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddShowIntoShowListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddShowIntoShowListResponse
   */
  async addShowIntoShowListWithOptions(request: $_model.AddShowIntoShowListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddShowIntoShowListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.duration)) {
      query["Duration"] = request.duration;
    }

    if (!$dara.isNull(request.liveInputType)) {
      query["LiveInputType"] = request.liveInputType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repeatTimes)) {
      query["RepeatTimes"] = request.repeatTimes;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.resourceUrl)) {
      query["ResourceUrl"] = request.resourceUrl;
    }

    if (!$dara.isNull(request.showName)) {
      query["ShowName"] = request.showName;
    }

    if (!$dara.isNull(request.spot)) {
      query["Spot"] = request.spot;
    }

    if (!$dara.isNull(request.isBatchMode)) {
      query["isBatchMode"] = request.isBatchMode;
    }

    if (!$dara.isNull(request.showList)) {
      query["showList"] = request.showList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddShowIntoShowList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddShowIntoShowListResponse>(await this.callApi(params, req, runtime), new $_model.AddShowIntoShowListResponse({}));
  }

  /**
   * Adds an episode to an episode list.
   * 
   * @remarks
   * You must create a production studio in the new playlist mode and add media resources to the production studio before you can call this operation. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * You can add up to 1,000 episodes to an episode list.
   * > 
   * *   When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
   * *   When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddShowIntoShowListRequest
   * @returns AddShowIntoShowListResponse
   */
  async addShowIntoShowList(request: $_model.AddShowIntoShowListRequest): Promise<$_model.AddShowIntoShowListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addShowIntoShowListWithOptions(request, runtime);
  }

  /**
   * Configures a layout for a virtual studio.
   * 
   * @remarks
   * You can call this operation to configure a common layout or a studio layout for a virtual studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddStudioLayoutRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddStudioLayoutResponse
   */
  async addStudioLayoutWithOptions(request: $_model.AddStudioLayoutRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddStudioLayoutResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bgImageConfig)) {
      query["BgImageConfig"] = request.bgImageConfig;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.commonConfig)) {
      query["CommonConfig"] = request.commonConfig;
    }

    if (!$dara.isNull(request.layerOrderConfigList)) {
      query["LayerOrderConfigList"] = request.layerOrderConfigList;
    }

    if (!$dara.isNull(request.layoutName)) {
      query["LayoutName"] = request.layoutName;
    }

    if (!$dara.isNull(request.layoutType)) {
      query["LayoutType"] = request.layoutType;
    }

    if (!$dara.isNull(request.mediaInputConfigList)) {
      query["MediaInputConfigList"] = request.mediaInputConfigList;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.screenInputConfigList)) {
      query["ScreenInputConfigList"] = request.screenInputConfigList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddStudioLayout",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddStudioLayoutResponse>(await this.callApi(params, req, runtime), new $_model.AddStudioLayoutResponse({}));
  }

  /**
   * Configures a layout for a virtual studio.
   * 
   * @remarks
   * You can call this operation to configure a common layout or a studio layout for a virtual studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddStudioLayoutRequest
   * @returns AddStudioLayoutResponse
   */
  async addStudioLayout(request: $_model.AddStudioLayoutRequest): Promise<$_model.AddStudioLayoutResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addStudioLayoutWithOptions(request, runtime);
  }

  /**
   * Inserts supplemental enhancement information (SEI) to transcoded streams.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to insert SEI to the transcoded streams. Make sure that the stream name is the name of the source stream. This way, the SEI is inserted to all the transcoded streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddTrancodeSEIRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddTrancodeSEIResponse
   */
  async addTrancodeSEIWithOptions(request: $_model.AddTrancodeSEIRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddTrancodeSEIResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.delay)) {
      query["Delay"] = request.delay;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pattern)) {
      query["Pattern"] = request.pattern;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repeat)) {
      query["Repeat"] = request.repeat;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.text)) {
      query["Text"] = request.text;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddTrancodeSEI",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddTrancodeSEIResponse>(await this.callApi(params, req, runtime), new $_model.AddTrancodeSEIResponse({}));
  }

  /**
   * Inserts supplemental enhancement information (SEI) to transcoded streams.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to insert SEI to the transcoded streams. Make sure that the stream name is the name of the source stream. This way, the SEI is inserted to all the transcoded streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - AddTrancodeSEIRequest
   * @returns AddTrancodeSEIResponse
   */
  async addTrancodeSEI(request: $_model.AddTrancodeSEIRequest): Promise<$_model.AddTrancodeSEIResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addTrancodeSEIWithOptions(request, runtime);
  }

  /**
   * Mutes a group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - BanLiveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BanLiveMessageGroupResponse
   */
  async banLiveMessageGroupWithOptions(tmpReq: $_model.BanLiveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BanLiveMessageGroupResponse> {
    tmpReq.validate();
    let request = new $_model.BanLiveMessageGroupShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.exceptUsers)) {
      request.exceptUsersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.exceptUsers, "ExceptUsers", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.exceptUsersShrink)) {
      query["ExceptUsers"] = request.exceptUsersShrink;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BanLiveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BanLiveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.BanLiveMessageGroupResponse({}));
  }

  /**
   * Mutes a group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - BanLiveMessageGroupRequest
   * @returns BanLiveMessageGroupResponse
   */
  async banLiveMessageGroup(request: $_model.BanLiveMessageGroupRequest): Promise<$_model.BanLiveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.banLiveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Deletes the configurations of multiple domain names at a time.
   * 
   * @remarks
   * Obtain the domain names for which you want to delete the configurations, and then call this operation to delete the configurations of these domain domains at a time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - BatchDeleteLiveDomainConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchDeleteLiveDomainConfigsResponse
   */
  async batchDeleteLiveDomainConfigsWithOptions(request: $_model.BatchDeleteLiveDomainConfigsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BatchDeleteLiveDomainConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainNames)) {
      query["DomainNames"] = request.domainNames;
    }

    if (!$dara.isNull(request.functionNames)) {
      query["FunctionNames"] = request.functionNames;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchDeleteLiveDomainConfigs",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BatchDeleteLiveDomainConfigsResponse>(await this.callApi(params, req, runtime), new $_model.BatchDeleteLiveDomainConfigsResponse({}));
  }

  /**
   * Deletes the configurations of multiple domain names at a time.
   * 
   * @remarks
   * Obtain the domain names for which you want to delete the configurations, and then call this operation to delete the configurations of these domain domains at a time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - BatchDeleteLiveDomainConfigsRequest
   * @returns BatchDeleteLiveDomainConfigsResponse
   */
  async batchDeleteLiveDomainConfigs(request: $_model.BatchDeleteLiveDomainConfigsRequest): Promise<$_model.BatchDeleteLiveDomainConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchDeleteLiveDomainConfigsWithOptions(request, runtime);
  }

  /**
   * 根据一个或多个用户uid查询用户是否在线
   * 
   * @remarks
   * ## Usage notes
   * You can query whether up to 20 users are online at a time.
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - BatchGetOnlineUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchGetOnlineUsersResponse
   */
  async batchGetOnlineUsersWithOptions(request: $_model.BatchGetOnlineUsersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BatchGetOnlineUsersResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.userIds)) {
      body["UserIds"] = request.userIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchGetOnlineUsers",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BatchGetOnlineUsersResponse>(await this.callApi(params, req, runtime), new $_model.BatchGetOnlineUsersResponse({}));
  }

  /**
   * 根据一个或多个用户uid查询用户是否在线
   * 
   * @remarks
   * ## Usage notes
   * You can query whether up to 20 users are online at a time.
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - BatchGetOnlineUsersRequest
   * @returns BatchGetOnlineUsersResponse
   */
  async batchGetOnlineUsers(request: $_model.BatchGetOnlineUsersRequest): Promise<$_model.BatchGetOnlineUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchGetOnlineUsersWithOptions(request, runtime);
  }

  /**
   * Configures multiple domain names at a time.
   * 
   * @remarks
   * Obtain the domain names that you want to configure, and then call this operation to configure the domain names in batches.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - BatchSetLiveDomainConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchSetLiveDomainConfigsResponse
   */
  async batchSetLiveDomainConfigsWithOptions(request: $_model.BatchSetLiveDomainConfigsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BatchSetLiveDomainConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainNames)) {
      query["DomainNames"] = request.domainNames;
    }

    if (!$dara.isNull(request.functions)) {
      query["Functions"] = request.functions;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchSetLiveDomainConfigs",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BatchSetLiveDomainConfigsResponse>(await this.callApi(params, req, runtime), new $_model.BatchSetLiveDomainConfigsResponse({}));
  }

  /**
   * Configures multiple domain names at a time.
   * 
   * @remarks
   * Obtain the domain names that you want to configure, and then call this operation to configure the domain names in batches.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - BatchSetLiveDomainConfigsRequest
   * @returns BatchSetLiveDomainConfigsResponse
   */
  async batchSetLiveDomainConfigs(request: $_model.BatchSetLiveDomainConfigsRequest): Promise<$_model.BatchSetLiveDomainConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchSetLiveDomainConfigsWithOptions(request, runtime);
  }

  /**
   * Unmutes a message group.
   * 
   * @remarks
   * ## QPS限制
   * 本接口的单用户QPS限制为100次/秒。超过限制，API调用会被限流，这可能会影响您的业务，请合理调用。更多信息，请参见[QPS限制](https://help.aliyun.com/document_detail/343507.html)。
   * 
   * @param request - CancelMuteAllGroupUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelMuteAllGroupUserResponse
   */
  async cancelMuteAllGroupUserWithOptions(request: $_model.CancelMuteAllGroupUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CancelMuteAllGroupUserResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.broadCastType)) {
      body["BroadCastType"] = request.broadCastType;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelMuteAllGroupUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CancelMuteAllGroupUserResponse>(await this.callApi(params, req, runtime), new $_model.CancelMuteAllGroupUserResponse({}));
  }

  /**
   * Unmutes a message group.
   * 
   * @remarks
   * ## QPS限制
   * 本接口的单用户QPS限制为100次/秒。超过限制，API调用会被限流，这可能会影响您的业务，请合理调用。更多信息，请参见[QPS限制](https://help.aliyun.com/document_detail/343507.html)。
   * 
   * @param request - CancelMuteAllGroupUserRequest
   * @returns CancelMuteAllGroupUserResponse
   */
  async cancelMuteAllGroupUser(request: $_model.CancelMuteAllGroupUserRequest): Promise<$_model.CancelMuteAllGroupUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelMuteAllGroupUserWithOptions(request, runtime);
  }

  /**
   * Unmutes members in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - CancelMuteGroupUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelMuteGroupUserResponse
   */
  async cancelMuteGroupUserWithOptions(tmpReq: $_model.CancelMuteGroupUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CancelMuteGroupUserResponse> {
    tmpReq.validate();
    let request = new $_model.CancelMuteGroupUserShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.cancelMuteUserList)) {
      request.cancelMuteUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cancelMuteUserList, "CancelMuteUserList", "simple");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.broadCastType)) {
      body["BroadCastType"] = request.broadCastType;
    }

    if (!$dara.isNull(request.cancelMuteUserListShrink)) {
      body["CancelMuteUserList"] = request.cancelMuteUserListShrink;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelMuteGroupUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CancelMuteGroupUserResponse>(await this.callApi(params, req, runtime), new $_model.CancelMuteGroupUserResponse({}));
  }

  /**
   * Unmutes members in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - CancelMuteGroupUserRequest
   * @returns CancelMuteGroupUserResponse
   */
  async cancelMuteGroupUser(request: $_model.CancelMuteGroupUserRequest): Promise<$_model.CancelMuteGroupUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelMuteGroupUserWithOptions(request, runtime);
  }

  /**
   * Changes the resource group to which a domain name belongs. In this case, you move the domain name from the original resource group to another resource group.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ChangeLiveDomainResourceGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeLiveDomainResourceGroupResponse
   */
  async changeLiveDomainResourceGroupWithOptions(request: $_model.ChangeLiveDomainResourceGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ChangeLiveDomainResourceGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.newResourceGroupId)) {
      query["NewResourceGroupId"] = request.newResourceGroupId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeLiveDomainResourceGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ChangeLiveDomainResourceGroupResponse>(await this.callApi(params, req, runtime), new $_model.ChangeLiveDomainResourceGroupResponse({}));
  }

  /**
   * Changes the resource group to which a domain name belongs. In this case, you move the domain name from the original resource group to another resource group.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ChangeLiveDomainResourceGroupRequest
   * @returns ChangeLiveDomainResourceGroupResponse
   */
  async changeLiveDomainResourceGroup(request: $_model.ChangeLiveDomainResourceGroupRequest): Promise<$_model.ChangeLiveDomainResourceGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeLiveDomainResourceGroupWithOptions(request, runtime);
  }

  /**
   * Queries whether a user is in an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - CheckLiveMessageUsersInGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckLiveMessageUsersInGroupResponse
   */
  async checkLiveMessageUsersInGroupWithOptions(tmpReq: $_model.CheckLiveMessageUsersInGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckLiveMessageUsersInGroupResponse> {
    tmpReq.validate();
    let request = new $_model.CheckLiveMessageUsersInGroupShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.userIds)) {
      request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, "UserIds", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.userIdsShrink)) {
      query["UserIds"] = request.userIdsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckLiveMessageUsersInGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckLiveMessageUsersInGroupResponse>(await this.callApi(params, req, runtime), new $_model.CheckLiveMessageUsersInGroupResponse({}));
  }

  /**
   * Queries whether a user is in an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CheckLiveMessageUsersInGroupRequest
   * @returns CheckLiveMessageUsersInGroupResponse
   */
  async checkLiveMessageUsersInGroup(request: $_model.CheckLiveMessageUsersInGroupRequest): Promise<$_model.CheckLiveMessageUsersInGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkLiveMessageUsersInGroupWithOptions(request, runtime);
  }

  /**
   * Queries whether one or more specified users are online.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - CheckLiveMessageUsersOnlineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckLiveMessageUsersOnlineResponse
   */
  async checkLiveMessageUsersOnlineWithOptions(tmpReq: $_model.CheckLiveMessageUsersOnlineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckLiveMessageUsersOnlineResponse> {
    tmpReq.validate();
    let request = new $_model.CheckLiveMessageUsersOnlineShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.userIds)) {
      request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, "UserIds", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.userIdsShrink)) {
      query["UserIds"] = request.userIdsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckLiveMessageUsersOnline",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckLiveMessageUsersOnlineResponse>(await this.callApi(params, req, runtime), new $_model.CheckLiveMessageUsersOnlineResponse({}));
  }

  /**
   * Queries whether one or more specified users are online.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CheckLiveMessageUsersOnlineRequest
   * @returns CheckLiveMessageUsersOnlineResponse
   */
  async checkLiveMessageUsersOnline(request: $_model.CheckLiveMessageUsersOnlineRequest): Promise<$_model.CheckLiveMessageUsersOnlineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkLiveMessageUsersOnlineWithOptions(request, runtime);
  }

  /**
   * Disables time shifting for a domain name, or an application or a live stream under the domain name.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to disable time shifting for the streaming domain or an application or a live stream under the streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CloseLiveShiftRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CloseLiveShiftResponse
   */
  async closeLiveShiftWithOptions(request: $_model.CloseLiveShiftRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CloseLiveShiftResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CloseLiveShift",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CloseLiveShiftResponse>(await this.callApi(params, req, runtime), new $_model.CloseLiveShiftResponse({}));
  }

  /**
   * Disables time shifting for a domain name, or an application or a live stream under the domain name.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to disable time shifting for the streaming domain or an application or a live stream under the streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CloseLiveShiftRequest
   * @returns CloseLiveShiftResponse
   */
  async closeLiveShift(request: $_model.CloseLiveShiftRequest): Promise<$_model.CloseLiveShiftResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.closeLiveShiftWithOptions(request, runtime);
  }

  /**
   * Duplicates a production studio.
   * 
   * @remarks
   * You can call this operation to duplicate a production studio. This way, a new, identical production studio is created.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CopyCasterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CopyCasterResponse
   */
  async copyCasterWithOptions(request: $_model.CopyCasterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CopyCasterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterName)) {
      query["CasterName"] = request.casterName;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.srcCasterId)) {
      query["SrcCasterId"] = request.srcCasterId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CopyCaster",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CopyCasterResponse>(await this.callApi(params, req, runtime), new $_model.CopyCasterResponse({}));
  }

  /**
   * Duplicates a production studio.
   * 
   * @remarks
   * You can call this operation to duplicate a production studio. This way, a new, identical production studio is created.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CopyCasterRequest
   * @returns CopyCasterResponse
   */
  async copyCaster(request: $_model.CopyCasterRequest): Promise<$_model.CopyCasterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.copyCasterWithOptions(request, runtime);
  }

  /**
   * Applies the configuration of a PVW scene to a PGM scene.
   * 
   * @remarks
   *   Streaming fees and transcoding fees are calculated based on the corresponding output resolutions and durations. For more information, see [Billing of production studios](https://help.aliyun.com/document_detail/64531.html).
   * *   You can call this operation to apply the configuration of a source scene to a destination scene. This operation takes effect only if the source scene is a PVW scene and the destination scene is a PGM scene. A PVW scene is a preview scene, and a PGM scene is a program scene.
   * *   The PVW scene and PGM scene must be in the same production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CopyCasterSceneConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CopyCasterSceneConfigResponse
   */
  async copyCasterSceneConfigWithOptions(request: $_model.CopyCasterSceneConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CopyCasterSceneConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.fromSceneId)) {
      query["FromSceneId"] = request.fromSceneId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.toSceneId)) {
      query["ToSceneId"] = request.toSceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CopyCasterSceneConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CopyCasterSceneConfigResponse>(await this.callApi(params, req, runtime), new $_model.CopyCasterSceneConfigResponse({}));
  }

  /**
   * Applies the configuration of a PVW scene to a PGM scene.
   * 
   * @remarks
   *   Streaming fees and transcoding fees are calculated based on the corresponding output resolutions and durations. For more information, see [Billing of production studios](https://help.aliyun.com/document_detail/64531.html).
   * *   You can call this operation to apply the configuration of a source scene to a destination scene. This operation takes effect only if the source scene is a PVW scene and the destination scene is a PGM scene. A PVW scene is a preview scene, and a PGM scene is a program scene.
   * *   The PVW scene and PGM scene must be in the same production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CopyCasterSceneConfigRequest
   * @returns CopyCasterSceneConfigResponse
   */
  async copyCasterSceneConfig(request: $_model.CopyCasterSceneConfigRequest): Promise<$_model.CopyCasterSceneConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.copyCasterSceneConfigWithOptions(request, runtime);
  }

  /**
   * Creates a production studio.
   * 
   * @remarks
   * You must enable the production studio feature before you can call this operation to create a production studio. For more information, see [Enable the production studio feature](https://help.aliyun.com/document_detail/60361.html).
   * You can call this operation to create production studios in general mode or playlist mode. Production studios in playlist mode can be used for carousel playback.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateCasterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCasterResponse
   */
  async createCasterWithOptions(request: $_model.CreateCasterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateCasterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterName)) {
      query["CasterName"] = request.casterName;
    }

    if (!$dara.isNull(request.casterTemplate)) {
      query["CasterTemplate"] = request.casterTemplate;
    }

    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.expireTime)) {
      query["ExpireTime"] = request.expireTime;
    }

    if (!$dara.isNull(request.normType)) {
      query["NormType"] = request.normType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.purchaseTime)) {
      query["PurchaseTime"] = request.purchaseTime;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCaster",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateCasterResponse>(await this.callApi(params, req, runtime), new $_model.CreateCasterResponse({}));
  }

  /**
   * Creates a production studio.
   * 
   * @remarks
   * You must enable the production studio feature before you can call this operation to create a production studio. For more information, see [Enable the production studio feature](https://help.aliyun.com/document_detail/60361.html).
   * You can call this operation to create production studios in general mode or playlist mode. Production studios in playlist mode can be used for carousel playback.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateCasterRequest
   * @returns CreateCasterResponse
   */
  async createCaster(request: $_model.CreateCasterRequest): Promise<$_model.CreateCasterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCasterWithOptions(request, runtime);
  }

  /**
   * Creates a custom stream mixing template.
   * 
   * @remarks
   * After you call this operation to create a custom template, record the template name. When you call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task, you can set the MixStreamTemplate parameter to the name of the custom template. This way, you can use the custom template for stream mixing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateCustomTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCustomTemplateResponse
   */
  async createCustomTemplateWithOptions(request: $_model.CreateCustomTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateCustomTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.customTemplate)) {
      query["CustomTemplate"] = request.customTemplate;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCustomTemplate",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateCustomTemplateResponse>(await this.callApi(params, req, runtime), new $_model.CreateCustomTemplateResponse({}));
  }

  /**
   * Creates a custom stream mixing template.
   * 
   * @remarks
   * After you call this operation to create a custom template, record the template name. When you call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task, you can set the MixStreamTemplate parameter to the name of the custom template. This way, you can use the custom template for stream mixing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateCustomTemplateRequest
   * @returns CreateCustomTemplateResponse
   */
  async createCustomTemplate(request: $_model.CreateCustomTemplateRequest): Promise<$_model.CreateCustomTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCustomTemplateWithOptions(request, runtime);
  }

  /**
   * Creates an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to create an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateEdgeTranscodeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateEdgeTranscodeJobResponse
   */
  async createEdgeTranscodeJobWithOptions(request: $_model.CreateEdgeTranscodeJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateEdgeTranscodeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamInput)) {
      query["StreamInput"] = request.streamInput;
    }

    if (!$dara.isNull(request.streamOutput)) {
      query["StreamOutput"] = request.streamOutput;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateEdgeTranscodeJob",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateEdgeTranscodeJobResponse>(await this.callApi(params, req, runtime), new $_model.CreateEdgeTranscodeJobResponse({}));
  }

  /**
   * Creates an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to create an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateEdgeTranscodeJobRequest
   * @returns CreateEdgeTranscodeJobResponse
   */
  async createEdgeTranscodeJob(request: $_model.CreateEdgeTranscodeJobRequest): Promise<$_model.CreateEdgeTranscodeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createEdgeTranscodeJobWithOptions(request, runtime);
  }

  /**
   * Creates a callback to subscribe to channel or user events.
   * 
   * @remarks
   * You can call this operation to create a callback to subscribe to channel or user events. When you create a callback, you can configure parameters such as the callback URL and event type.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateEventSubResponse
   */
  async createEventSubWithOptions(request: $_model.CreateEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateEventSubResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.events)) {
      query["Events"] = request.events;
    }

    if (!$dara.isNull(request.users)) {
      query["Users"] = request.users;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateEventSubResponse>(await this.callApi(params, req, runtime), new $_model.CreateEventSubResponse({}));
  }

  /**
   * Creates a callback to subscribe to channel or user events.
   * 
   * @remarks
   * You can call this operation to create a callback to subscribe to channel or user events. When you create a callback, you can configure parameters such as the callback URL and event type.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateEventSubRequest
   * @returns CreateEventSubResponse
   */
  async createEventSub(request: $_model.CreateEventSubRequest): Promise<$_model.CreateEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createEventSubWithOptions(request, runtime);
  }

  /**
   * Creates a lightweight virtual studio template.
   * 
   * @remarks
   * >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
   * 
   * @param tmpReq - CreateLiveAIStudioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLiveAIStudioResponse
   */
  async createLiveAIStudioWithOptions(tmpReq: $_model.CreateLiveAIStudioRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLiveAIStudioResponse> {
    tmpReq.validate();
    let request = new $_model.CreateLiveAIStudioShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.mattingLayout)) {
      request.mattingLayoutShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mattingLayout, "MattingLayout", "json");
    }

    if (!$dara.isNull(tmpReq.mediaLayout)) {
      request.mediaLayoutShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mediaLayout, "MediaLayout", "json");
    }

    let query = { };
    if (!$dara.isNull(request.backgroundResourceId)) {
      query["BackgroundResourceId"] = request.backgroundResourceId;
    }

    if (!$dara.isNull(request.backgroundResourceUrl)) {
      query["BackgroundResourceUrl"] = request.backgroundResourceUrl;
    }

    if (!$dara.isNull(request.backgroundType)) {
      query["BackgroundType"] = request.backgroundType;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.mattingLayoutShrink)) {
      query["MattingLayout"] = request.mattingLayoutShrink;
    }

    if (!$dara.isNull(request.mattingType)) {
      query["MattingType"] = request.mattingType;
    }

    if (!$dara.isNull(request.mediaLayoutShrink)) {
      query["MediaLayout"] = request.mediaLayoutShrink;
    }

    if (!$dara.isNull(request.mediaResourceId)) {
      query["MediaResourceId"] = request.mediaResourceId;
    }

    if (!$dara.isNull(request.mediaResourceUrl)) {
      query["MediaResourceUrl"] = request.mediaResourceUrl;
    }

    if (!$dara.isNull(request.mediaType)) {
      query["MediaType"] = request.mediaType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.studioName)) {
      query["StudioName"] = request.studioName;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLiveAIStudio",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLiveAIStudioResponse>(await this.callApi(params, req, runtime), new $_model.CreateLiveAIStudioResponse({}));
  }

  /**
   * Creates a lightweight virtual studio template.
   * 
   * @remarks
   * >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
   * 
   * @param request - CreateLiveAIStudioRequest
   * @returns CreateLiveAIStudioResponse
   */
  async createLiveAIStudio(request: $_model.CreateLiveAIStudioRequest): Promise<$_model.CreateLiveAIStudioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLiveAIStudioWithOptions(request, runtime);
  }

  /**
   * Adds a stream delay configuration.
   * 
   * @remarks
   * Stream delay is different from latency caused by streaming protocols. Stream delay is a feature that allows you to delay the playback of a live stream that is processed in the cloud.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveDelayConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLiveDelayConfigResponse
   */
  async createLiveDelayConfigWithOptions(request: $_model.CreateLiveDelayConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLiveDelayConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.delayTime)) {
      query["DelayTime"] = request.delayTime;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    if (!$dara.isNull(request.taskTriggerMode)) {
      query["TaskTriggerMode"] = request.taskTriggerMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLiveDelayConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLiveDelayConfigResponse>(await this.callApi(params, req, runtime), new $_model.CreateLiveDelayConfigResponse({}));
  }

  /**
   * Adds a stream delay configuration.
   * 
   * @remarks
   * Stream delay is different from latency caused by streaming protocols. Stream delay is a feature that allows you to delay the playback of a live stream that is processed in the cloud.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveDelayConfigRequest
   * @returns CreateLiveDelayConfigResponse
   */
  async createLiveDelayConfig(request: $_model.CreateLiveDelayConfigRequest): Promise<$_model.CreateLiveDelayConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLiveDelayConfigWithOptions(request, runtime);
  }

  /**
   * Creates an interactive messaging application.
   * 
   * @remarks
   *   When you call other operations to manage the interactive messaging application, you must specify the same data center in which the application is created.
   * *   You can create up to 300 interactive messaging applications in an Alibaba Cloud account.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLiveMessageAppResponse
   */
  async createLiveMessageAppWithOptions(request: $_model.CreateLiveMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLiveMessageAppResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.auditType)) {
      query["AuditType"] = request.auditType;
    }

    if (!$dara.isNull(request.auditUrl)) {
      query["AuditUrl"] = request.auditUrl;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.eventCallbackUrl)) {
      query["EventCallbackUrl"] = request.eventCallbackUrl;
    }

    if (!$dara.isNull(request.msgLifeCycle)) {
      query["MsgLifeCycle"] = request.msgLifeCycle;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLiveMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLiveMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.CreateLiveMessageAppResponse({}));
  }

  /**
   * Creates an interactive messaging application.
   * 
   * @remarks
   *   When you call other operations to manage the interactive messaging application, you must specify the same data center in which the application is created.
   * *   You can create up to 300 interactive messaging applications in an Alibaba Cloud account.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveMessageAppRequest
   * @returns CreateLiveMessageAppResponse
   */
  async createLiveMessageApp(request: $_model.CreateLiveMessageAppRequest): Promise<$_model.CreateLiveMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLiveMessageAppWithOptions(request, runtime);
  }

  /**
   * Creates an interactive messaging group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageApp](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging application.
   * *   You can create up to 5,000 interactive messaging groups in an interactive messaging application.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - CreateLiveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLiveMessageGroupResponse
   */
  async createLiveMessageGroupWithOptions(tmpReq: $_model.CreateLiveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLiveMessageGroupResponse> {
    tmpReq.validate();
    let request = new $_model.CreateLiveMessageGroupShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.administrators)) {
      request.administratorsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.administrators, "Administrators", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.administratorsShrink)) {
      query["Administrators"] = request.administratorsShrink;
    }

    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.creatorId)) {
      query["CreatorId"] = request.creatorId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.groupInfo)) {
      query["GroupInfo"] = request.groupInfo;
    }

    if (!$dara.isNull(request.groupName)) {
      query["GroupName"] = request.groupName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLiveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLiveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.CreateLiveMessageGroupResponse({}));
  }

  /**
   * Creates an interactive messaging group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageApp](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging application.
   * *   You can create up to 5,000 interactive messaging groups in an interactive messaging application.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveMessageGroupRequest
   * @returns CreateLiveMessageGroupResponse
   */
  async createLiveMessageGroup(request: $_model.CreateLiveMessageGroupRequest): Promise<$_model.CreateLiveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLiveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Creates a Global Accelerator (GA) instance and binds it to an acceleration circuit.
   * 
   * @remarks
   *   You can call this operation to create a GA instance and bind it to an acceleration circuit. The granularity is at the stream level. You need to specify the access points where the acceleration circuit starts and ends.
   * *   The settings take effect only if the value of AppName and the value of StreamName are the same as the application name and stream name that are specified in the streaming URL.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLivePrivateLineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLivePrivateLineResponse
   */
  async createLivePrivateLineWithOptions(request: $_model.CreateLivePrivateLineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLivePrivateLineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accelerationArea)) {
      query["AccelerationArea"] = request.accelerationArea;
    }

    if (!$dara.isNull(request.accelerationType)) {
      query["AccelerationType"] = request.accelerationType;
    }

    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.maxBandwidth)) {
      query["MaxBandwidth"] = request.maxBandwidth;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.reuse)) {
      query["Reuse"] = request.reuse;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.videoCenter)) {
      query["VideoCenter"] = request.videoCenter;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLivePrivateLine",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLivePrivateLineResponse>(await this.callApi(params, req, runtime), new $_model.CreateLivePrivateLineResponse({}));
  }

  /**
   * Creates a Global Accelerator (GA) instance and binds it to an acceleration circuit.
   * 
   * @remarks
   *   You can call this operation to create a GA instance and bind it to an acceleration circuit. The granularity is at the stream level. You need to specify the access points where the acceleration circuit starts and ends.
   * *   The settings take effect only if the value of AppName and the value of StreamName are the same as the application name and stream name that are specified in the streaming URL.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLivePrivateLineRequest
   * @returns CreateLivePrivateLineResponse
   */
  async createLivePrivateLine(request: $_model.CreateLivePrivateLineRequest): Promise<$_model.CreateLivePrivateLineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLivePrivateLineWithOptions(request, runtime);
  }

  /**
   * Creates a pulled-stream relay task.
   * 
   * @remarks
   * >  The pulled-stream relay feature is in public preview. You can use it free of charge. After the public preview ends, fees will be charged. The specific end time will be announced.
   * *   You can call this operation to create a pulled-stream relay task.
   * *   The pulled source can be a live stream or video-on-demand (VOD) resources.
   * *   After a task is created, it starts at the specified start time and ends at the specified end time. A task that ends is automatically deleted.
   * *   Make sure that the destination URL specified in the task is not used by another task. Otherwise, conflicts occur and stream ingest fails.
   * *   The events for pulled-stream relay callbacks include state changes of a pulled-stream relay task and exit of a pulled-stream relay task. For more information, see [Pulled-stream relay callbacks](https://help.aliyun.com/document_detail/2846768.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - CreateLivePullToPushRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLivePullToPushResponse
   */
  async createLivePullToPushWithOptions(tmpReq: $_model.CreateLivePullToPushRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLivePullToPushResponse> {
    tmpReq.validate();
    let request = new $_model.CreateLivePullToPushShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.sourceUrls)) {
      request.sourceUrlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceUrls, "SourceUrls", "json");
    }

    let query = { };
    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.dstUrl)) {
      query["DstUrl"] = request.dstUrl;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.fileIndex)) {
      query["FileIndex"] = request.fileIndex;
    }

    if (!$dara.isNull(request.offset)) {
      query["Offset"] = request.offset;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repeatNumber)) {
      query["RepeatNumber"] = request.repeatNumber;
    }

    if (!$dara.isNull(request.retryCount)) {
      query["RetryCount"] = request.retryCount;
    }

    if (!$dara.isNull(request.retryInterval)) {
      query["RetryInterval"] = request.retryInterval;
    }

    if (!$dara.isNull(request.sourceProtocol)) {
      query["SourceProtocol"] = request.sourceProtocol;
    }

    if (!$dara.isNull(request.sourceType)) {
      query["SourceType"] = request.sourceType;
    }

    if (!$dara.isNull(request.sourceUrlsShrink)) {
      query["SourceUrls"] = request.sourceUrlsShrink;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLivePullToPush",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLivePullToPushResponse>(await this.callApi(params, req, runtime), new $_model.CreateLivePullToPushResponse({}));
  }

  /**
   * Creates a pulled-stream relay task.
   * 
   * @remarks
   * >  The pulled-stream relay feature is in public preview. You can use it free of charge. After the public preview ends, fees will be charged. The specific end time will be announced.
   * *   You can call this operation to create a pulled-stream relay task.
   * *   The pulled source can be a live stream or video-on-demand (VOD) resources.
   * *   After a task is created, it starts at the specified start time and ends at the specified end time. A task that ends is automatically deleted.
   * *   Make sure that the destination URL specified in the task is not used by another task. Otherwise, conflicts occur and stream ingest fails.
   * *   The events for pulled-stream relay callbacks include state changes of a pulled-stream relay task and exit of a pulled-stream relay task. For more information, see [Pulled-stream relay callbacks](https://help.aliyun.com/document_detail/2846768.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLivePullToPushRequest
   * @returns CreateLivePullToPushResponse
   */
  async createLivePullToPush(request: $_model.CreateLivePullToPushRequest): Promise<$_model.CreateLivePullToPushResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLivePullToPushWithOptions(request, runtime);
  }

  /**
   * Configures real-time log delivery for a domain name.
   * 
   * @remarks
   * ##
   * Obtain the streaming domain, and then call this operation to configure real-time log delivery for the streaming domain.
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * ## QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - CreateLiveRealTimeLogDeliveryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLiveRealTimeLogDeliveryResponse
   */
  async createLiveRealTimeLogDeliveryWithOptions(request: $_model.CreateLiveRealTimeLogDeliveryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLiveRealTimeLogDeliveryResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLiveRealTimeLogDelivery",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLiveRealTimeLogDeliveryResponse>(await this.callApi(params, req, runtime), new $_model.CreateLiveRealTimeLogDeliveryResponse({}));
  }

  /**
   * Configures real-time log delivery for a domain name.
   * 
   * @remarks
   * ##
   * Obtain the streaming domain, and then call this operation to configure real-time log delivery for the streaming domain.
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * ## QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - CreateLiveRealTimeLogDeliveryRequest
   * @returns CreateLiveRealTimeLogDeliveryResponse
   */
  async createLiveRealTimeLogDelivery(request: $_model.CreateLiveRealTimeLogDeliveryRequest): Promise<$_model.CreateLiveRealTimeLogDeliveryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLiveRealTimeLogDeliveryWithOptions(request, runtime);
  }

  /**
   * Creates a monitoring session.
   * 
   * @remarks
   * You can call this operation to create a monitoring session. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveStreamMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLiveStreamMonitorResponse
   */
  async createLiveStreamMonitorWithOptions(request: $_model.CreateLiveStreamMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLiveStreamMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.dingTalkWebHookUrl)) {
      query["DingTalkWebHookUrl"] = request.dingTalkWebHookUrl;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.inputList)) {
      query["InputList"] = request.inputList;
    }

    if (!$dara.isNull(request.monitorConfig)) {
      query["MonitorConfig"] = request.monitorConfig;
    }

    if (!$dara.isNull(request.monitorName)) {
      query["MonitorName"] = request.monitorName;
    }

    if (!$dara.isNull(request.outputTemplate)) {
      query["OutputTemplate"] = request.outputTemplate;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLiveStreamMonitor",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLiveStreamMonitorResponse>(await this.callApi(params, req, runtime), new $_model.CreateLiveStreamMonitorResponse({}));
  }

  /**
   * Creates a monitoring session.
   * 
   * @remarks
   * You can call this operation to create a monitoring session. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveStreamMonitorRequest
   * @returns CreateLiveStreamMonitorResponse
   */
  async createLiveStreamMonitor(request: $_model.CreateLiveStreamMonitorRequest): Promise<$_model.CreateLiveStreamMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLiveStreamMonitorWithOptions(request, runtime);
  }

  /**
   * Creates an M3U8 index file for a recording in a specified time period.
   * 
   * @remarks
   * You must have configured Object Storage Service (OSS) before you call this operation. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html). ApsaraVideo Live allows you to record a live stream in the M3U8 format and store the M3U8 file in OSS. You can edit the TS segments that are included in the stored M3U8 file in real time.
   * > 
   * *   You can create an index file only after a live stream is ingested. If no live stream is available within the specified time range or the name of the specified live stream is invalid, the index file fails to be created.
   * *   The time range that is specified by the StartTime and EndTime parameters must be the duration of at least one TS segment. The default duration of a TS segment is 30 seconds.
   * *   ApsaraVideo Live stores the information about TS segments for only three months. You can create M3U8 index files only for the recordings of the last three months.
   * *   OSS stores TS segments for a time period that is specified by the storage configuration in OSS. For more information, see [Configure lifecycle rules](https://help.aliyun.com/document_detail/31904.html).
   * *   ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
   * *   OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 45 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveStreamRecordIndexFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLiveStreamRecordIndexFilesResponse
   */
  async createLiveStreamRecordIndexFilesWithOptions(request: $_model.CreateLiveStreamRecordIndexFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateLiveStreamRecordIndexFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.endTimeIncluded)) {
      query["EndTimeIncluded"] = request.endTimeIncluded;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.ossObject)) {
      query["OssObject"] = request.ossObject;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLiveStreamRecordIndexFiles",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateLiveStreamRecordIndexFilesResponse>(await this.callApi(params, req, runtime), new $_model.CreateLiveStreamRecordIndexFilesResponse({}));
  }

  /**
   * Creates an M3U8 index file for a recording in a specified time period.
   * 
   * @remarks
   * You must have configured Object Storage Service (OSS) before you call this operation. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html). ApsaraVideo Live allows you to record a live stream in the M3U8 format and store the M3U8 file in OSS. You can edit the TS segments that are included in the stored M3U8 file in real time.
   * > 
   * *   You can create an index file only after a live stream is ingested. If no live stream is available within the specified time range or the name of the specified live stream is invalid, the index file fails to be created.
   * *   The time range that is specified by the StartTime and EndTime parameters must be the duration of at least one TS segment. The default duration of a TS segment is 30 seconds.
   * *   ApsaraVideo Live stores the information about TS segments for only three months. You can create M3U8 index files only for the recordings of the last three months.
   * *   OSS stores TS segments for a time period that is specified by the storage configuration in OSS. For more information, see [Configure lifecycle rules](https://help.aliyun.com/document_detail/31904.html).
   * *   ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
   * *   OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 45 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateLiveStreamRecordIndexFilesRequest
   * @returns CreateLiveStreamRecordIndexFilesResponse
   */
  async createLiveStreamRecordIndexFiles(request: $_model.CreateLiveStreamRecordIndexFilesRequest): Promise<$_model.CreateLiveStreamRecordIndexFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLiveStreamRecordIndexFilesWithOptions(request, runtime);
  }

  /**
   * Creates an interactive messaging application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - CreateMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMessageAppResponse
   */
  async createMessageAppWithOptions(tmpReq: $_model.CreateMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMessageAppResponse> {
    tmpReq.validate();
    let request = new $_model.CreateMessageAppShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.appConfig)) {
      request.appConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appConfig, "AppConfig", "json");
    }

    if (!$dara.isNull(tmpReq.extension)) {
      request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, "Extension", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appConfigShrink)) {
      body["AppConfig"] = request.appConfigShrink;
    }

    if (!$dara.isNull(request.appName)) {
      body["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.extensionShrink)) {
      body["Extension"] = request.extensionShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.CreateMessageAppResponse({}));
  }

  /**
   * Creates an interactive messaging application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - CreateMessageAppRequest
   * @returns CreateMessageAppResponse
   */
  async createMessageApp(request: $_model.CreateMessageAppRequest): Promise<$_model.CreateMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMessageAppWithOptions(request, runtime);
  }

  /**
   * Creates a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - CreateMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMessageGroupResponse
   */
  async createMessageGroupWithOptions(tmpReq: $_model.CreateMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMessageGroupResponse> {
    tmpReq.validate();
    let request = new $_model.CreateMessageGroupShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.extension)) {
      request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, "Extension", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.creatorId)) {
      body["CreatorId"] = request.creatorId;
    }

    if (!$dara.isNull(request.extensionShrink)) {
      body["Extension"] = request.extensionShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.CreateMessageGroupResponse({}));
  }

  /**
   * Creates a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - CreateMessageGroupRequest
   * @returns CreateMessageGroupResponse
   */
  async createMessageGroup(request: $_model.CreateMessageGroupRequest): Promise<$_model.CreateMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMessageGroupWithOptions(request, runtime);
  }

  /**
   * Creates a stream mixing task.
   * 
   * @remarks
   * You can call this operation to create a stream mixing task. This operation supports preset layouts and custom layouts.
   * If you have any questions or suggestions about the use of the stream mixing feature, you are welcome to search the group ID 34935990 in DingTalk to join the developer group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateMixStreamRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMixStreamResponse
   */
  async createMixStreamWithOptions(request: $_model.CreateMixStreamRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMixStreamResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callbackConfig)) {
      query["CallbackConfig"] = request.callbackConfig;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.inputStreamList)) {
      query["InputStreamList"] = request.inputStreamList;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.outputConfig)) {
      query["OutputConfig"] = request.outputConfig;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMixStream",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMixStreamResponse>(await this.callApi(params, req, runtime), new $_model.CreateMixStreamResponse({}));
  }

  /**
   * Creates a stream mixing task.
   * 
   * @remarks
   * You can call this operation to create a stream mixing task. This operation supports preset layouts and custom layouts.
   * If you have any questions or suggestions about the use of the stream mixing feature, you are welcome to search the group ID 34935990 in DingTalk to join the developer group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateMixStreamRequest
   * @returns CreateMixStreamResponse
   */
  async createMixStream(request: $_model.CreateMixStreamRequest): Promise<$_model.CreateMixStreamResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMixStreamWithOptions(request, runtime);
  }

  /**
   * 创建房间whip协议推流地址
   * 
   * @param request - CreateRTCWhipStreamAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRTCWhipStreamAddressResponse
   */
  async createRTCWhipStreamAddressWithOptions(request: $_model.CreateRTCWhipStreamAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRTCWhipStreamAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.displayName)) {
      query["DisplayName"] = request.displayName;
    }

    if (!$dara.isNull(request.expireTime)) {
      query["ExpireTime"] = request.expireTime;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRTCWhipStreamAddress",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRTCWhipStreamAddressResponse>(await this.callApi(params, req, runtime), new $_model.CreateRTCWhipStreamAddressResponse({}));
  }

  /**
   * 创建房间whip协议推流地址
   * 
   * @param request - CreateRTCWhipStreamAddressRequest
   * @returns CreateRTCWhipStreamAddressResponse
   */
  async createRTCWhipStreamAddress(request: $_model.CreateRTCWhipStreamAddressRequest): Promise<$_model.CreateRTCWhipStreamAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRTCWhipStreamAddressWithOptions(request, runtime);
  }

  /**
   * Creates a Real-Time Messaging Protocol (RTMP) ingest URL for a channel.
   * 
   * @remarks
   * ### [](#)Usage notes
   * To use the interactive streaming feature, you must use ApsaraVideo Real-time Communication (ARTC) SDK to join a channel and ingest streams over Real-Time Communication (RTC). In specific scenarios, you can ingest streams over Real-Time Messaging Protocol (RTMP) by using tools such as Open Broadcaster Software (OBS). Then, ApsaraVideo Live automatically converts the RTMP streams to RTC streams and distributes the RTC streams to viewers. You can call this operation to generate an ingest URL in the RTMP format. After you ingest RTMP streams, ApsaraVideo Live automatically converts the streams to RTC streams. Do not call this operation if you require only regular live streaming. To quickly ingest RTMP streams and start live streaming, see [Get started with ApsaraVideo Live](https://help.aliyun.com/document_detail/198676.html).
   * ## [](#)Procedure
   * 1.  Call this operation to generate an ingest URL in the RTMP format.
   * 2.  Ingest a stream by using the ingest URL. Other users in the channel can watch the stream.
   * 3.  Stop ingesting the stream. Other users in the channel see that the user who ingested the stream leaves the channel.
   * > 
   * *   You can repeat Steps 2 and 3 within the validity period of the ingest URL.
   * *   We recommend that you call the [DescribeChannelParticipants](https://help.aliyun.com/document_detail/610801.html) operation to query online users in the channel at regular intervals. This way, you can check whether the user who ingests the stream is still in the channel. If the user who ingests the stream is not in the channel, the stream may be interrupted. In this case, we recommend that you stop ingesting the stream and perform Step 2.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - CreateRoomRealTimeStreamAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRoomRealTimeStreamAddressResponse
   */
  async createRoomRealTimeStreamAddressWithOptions(request: $_model.CreateRoomRealTimeStreamAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRoomRealTimeStreamAddressResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRoomRealTimeStreamAddress",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRoomRealTimeStreamAddressResponse>(await this.callApi(params, req, runtime), new $_model.CreateRoomRealTimeStreamAddressResponse({}));
  }

  /**
   * Creates a Real-Time Messaging Protocol (RTMP) ingest URL for a channel.
   * 
   * @remarks
   * ### [](#)Usage notes
   * To use the interactive streaming feature, you must use ApsaraVideo Real-time Communication (ARTC) SDK to join a channel and ingest streams over Real-Time Communication (RTC). In specific scenarios, you can ingest streams over Real-Time Messaging Protocol (RTMP) by using tools such as Open Broadcaster Software (OBS). Then, ApsaraVideo Live automatically converts the RTMP streams to RTC streams and distributes the RTC streams to viewers. You can call this operation to generate an ingest URL in the RTMP format. After you ingest RTMP streams, ApsaraVideo Live automatically converts the streams to RTC streams. Do not call this operation if you require only regular live streaming. To quickly ingest RTMP streams and start live streaming, see [Get started with ApsaraVideo Live](https://help.aliyun.com/document_detail/198676.html).
   * ## [](#)Procedure
   * 1.  Call this operation to generate an ingest URL in the RTMP format.
   * 2.  Ingest a stream by using the ingest URL. Other users in the channel can watch the stream.
   * 3.  Stop ingesting the stream. Other users in the channel see that the user who ingested the stream leaves the channel.
   * > 
   * *   You can repeat Steps 2 and 3 within the validity period of the ingest URL.
   * *   We recommend that you call the [DescribeChannelParticipants](https://help.aliyun.com/document_detail/610801.html) operation to query online users in the channel at regular intervals. This way, you can check whether the user who ingests the stream is still in the channel. If the user who ingests the stream is not in the channel, the stream may be interrupted. In this case, we recommend that you stop ingesting the stream and perform Step 2.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - CreateRoomRealTimeStreamAddressRequest
   * @returns CreateRoomRealTimeStreamAddressResponse
   */
  async createRoomRealTimeStreamAddress(request: $_model.CreateRoomRealTimeStreamAddressRequest): Promise<$_model.CreateRoomRealTimeStreamAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRoomRealTimeStreamAddressWithOptions(request, runtime);
  }

  /**
   * Creates a live subtitle task to transcribe an audio stream to text in real time.
   * 
   * @remarks
   * You can call this operation to create a live subtitle task that transcribes audio in a live stream to text in real time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateRtcAsrTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRtcAsrTaskResponse
   */
  async createRtcAsrTaskWithOptions(request: $_model.CreateRtcAsrTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRtcAsrTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authKey)) {
      query["AuthKey"] = request.authKey;
    }

    if (!$dara.isNull(request.autoTerminateDelay)) {
      query["AutoTerminateDelay"] = request.autoTerminateDelay;
    }

    if (!$dara.isNull(request.autoTerminateEnabled)) {
      query["AutoTerminateEnabled"] = request.autoTerminateEnabled;
    }

    if (!$dara.isNull(request.callbackURL)) {
      query["CallbackURL"] = request.callbackURL;
    }

    if (!$dara.isNull(request.channelID)) {
      query["ChannelID"] = request.channelID;
    }

    if (!$dara.isNull(request.language)) {
      query["Language"] = request.language;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.reportInterval)) {
      query["ReportInterval"] = request.reportInterval;
    }

    if (!$dara.isNull(request.rtcUserId)) {
      query["RtcUserId"] = request.rtcUserId;
    }

    if (!$dara.isNull(request.SDKAppID)) {
      query["SDKAppID"] = request.SDKAppID;
    }

    if (!$dara.isNull(request.streamURL)) {
      query["StreamURL"] = request.streamURL;
    }

    if (!$dara.isNull(request.targetLanguages)) {
      query["TargetLanguages"] = request.targetLanguages;
    }

    if (!$dara.isNull(request.translateEnabled)) {
      query["TranslateEnabled"] = request.translateEnabled;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRtcAsrTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRtcAsrTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateRtcAsrTaskResponse({}));
  }

  /**
   * Creates a live subtitle task to transcribe an audio stream to text in real time.
   * 
   * @remarks
   * You can call this operation to create a live subtitle task that transcribes audio in a live stream to text in real time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateRtcAsrTaskRequest
   * @returns CreateRtcAsrTaskResponse
   */
  async createRtcAsrTask(request: $_model.CreateRtcAsrTaskRequest): Promise<$_model.CreateRtcAsrTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRtcAsrTaskWithOptions(request, runtime);
  }

  /**
   * Creates a subscription to mixed-stream relay events.
   * 
   * @remarks
   * You can call this operation to create a subscription to mixed-stream relay events. You can configure parameters such as the callback URL, application to which you want to subscribe, and channel information when you create a subscription.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateRtcMPUEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRtcMPUEventSubResponse
   */
  async createRtcMPUEventSubWithOptions(request: $_model.CreateRtcMPUEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRtcMPUEventSubResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.channelIds)) {
      query["ChannelIds"] = request.channelIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRtcMPUEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRtcMPUEventSubResponse>(await this.callApi(params, req, runtime), new $_model.CreateRtcMPUEventSubResponse({}));
  }

  /**
   * Creates a subscription to mixed-stream relay events.
   * 
   * @remarks
   * You can call this operation to create a subscription to mixed-stream relay events. You can configure parameters such as the callback URL, application to which you want to subscribe, and channel information when you create a subscription.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - CreateRtcMPUEventSubRequest
   * @returns CreateRtcMPUEventSubResponse
   */
  async createRtcMPUEventSub(request: $_model.CreateRtcMPUEventSubRequest): Promise<$_model.CreateRtcMPUEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRtcMPUEventSubWithOptions(request, runtime);
  }

  /**
   * Deletes a production studio.
   * 
   * @remarks
   *   You can delete only production studios that are closed.
   * *   When a production studio is deleted, the scenes, components, and layouts of the production studio are also deleted.
   * *   You cannot recover a deleted production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterResponse
   */
  async deleteCasterWithOptions(request: $_model.DeleteCasterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCaster",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterResponse({}));
  }

  /**
   * Deletes a production studio.
   * 
   * @remarks
   *   You can delete only production studios that are closed.
   * *   When a production studio is deleted, the scenes, components, and layouts of the production studio are also deleted.
   * *   You cannot recover a deleted production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterRequest
   * @returns DeleteCasterResponse
   */
  async deleteCaster(request: $_model.DeleteCasterRequest): Promise<$_model.DeleteCasterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterWithOptions(request, runtime);
  }

  /**
   * Deletes a component in a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete a component in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterComponentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterComponentResponse
   */
  async deleteCasterComponentWithOptions(request: $_model.DeleteCasterComponentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterComponentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentId)) {
      query["ComponentId"] = request.componentId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCasterComponent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterComponentResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterComponentResponse({}));
  }

  /**
   * Deletes a component in a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete a component in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterComponentRequest
   * @returns DeleteCasterComponentResponse
   */
  async deleteCasterComponent(request: $_model.DeleteCasterComponentRequest): Promise<$_model.DeleteCasterComponentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterComponentWithOptions(request, runtime);
  }

  /**
   * Deletes an episode in a production studio.
   * 
   * @remarks
   * Before you call this operation to delete an episode in a production studio, you must obtain the ID of the production studio and the ID of the episode.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterEpisodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterEpisodeResponse
   */
  async deleteCasterEpisodeWithOptions(request: $_model.DeleteCasterEpisodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterEpisodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.episodeId)) {
      query["EpisodeId"] = request.episodeId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCasterEpisode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterEpisodeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterEpisodeResponse({}));
  }

  /**
   * Deletes an episode in a production studio.
   * 
   * @remarks
   * Before you call this operation to delete an episode in a production studio, you must obtain the ID of the production studio and the ID of the episode.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterEpisodeRequest
   * @returns DeleteCasterEpisodeResponse
   */
  async deleteCasterEpisode(request: $_model.DeleteCasterEpisodeRequest): Promise<$_model.DeleteCasterEpisodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterEpisodeWithOptions(request, runtime);
  }

  /**
   * Deletes an episode list in a production studio.
   * 
   * @remarks
   * Before you call this operation to delete an episode list in a production studio, make sure that you have called the [AddCasterEpisodeGroup](https://help.aliyun.com/document_detail/2848071.html) operation to add the episode list in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterEpisodeGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterEpisodeGroupResponse
   */
  async deleteCasterEpisodeGroupWithOptions(request: $_model.DeleteCasterEpisodeGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterEpisodeGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCasterEpisodeGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterEpisodeGroupResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterEpisodeGroupResponse({}));
  }

  /**
   * Deletes an episode list in a production studio.
   * 
   * @remarks
   * Before you call this operation to delete an episode list in a production studio, make sure that you have called the [AddCasterEpisodeGroup](https://help.aliyun.com/document_detail/2848071.html) operation to add the episode list in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterEpisodeGroupRequest
   * @returns DeleteCasterEpisodeGroupResponse
   */
  async deleteCasterEpisodeGroup(request: $_model.DeleteCasterEpisodeGroupRequest): Promise<$_model.DeleteCasterEpisodeGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterEpisodeGroupWithOptions(request, runtime);
  }

  /**
   * Deletes a layout in a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to delete a layout in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteCasterLayoutRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterLayoutResponse
   */
  async deleteCasterLayoutWithOptions(request: $_model.DeleteCasterLayoutRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterLayoutResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCasterLayout",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterLayoutResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterLayoutResponse({}));
  }

  /**
   * Deletes a layout in a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to delete a layout in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteCasterLayoutRequest
   * @returns DeleteCasterLayoutResponse
   */
  async deleteCasterLayout(request: $_model.DeleteCasterLayoutRequest): Promise<$_model.DeleteCasterLayoutResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterLayoutWithOptions(request, runtime);
  }

  /**
   * Deletes the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete the episode list for carousel playback in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterProgramRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterProgramResponse
   */
  async deleteCasterProgramWithOptions(request: $_model.DeleteCasterProgramRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterProgramResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCasterProgram",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterProgramResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterProgramResponse({}));
  }

  /**
   * Deletes the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete the episode list for carousel playback in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCasterProgramRequest
   * @returns DeleteCasterProgramResponse
   */
  async deleteCasterProgram(request: $_model.DeleteCasterProgramRequest): Promise<$_model.DeleteCasterProgramResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterProgramWithOptions(request, runtime);
  }

  /**
   * Deletes the settings of a scene.
   * 
   * @remarks
   * You can call this operation to delete the settings of a scene, such as the component setting, layout setting, or both of them.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteCasterSceneConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterSceneConfigResponse
   */
  async deleteCasterSceneConfigWithOptions(request: $_model.DeleteCasterSceneConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterSceneConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCasterSceneConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterSceneConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterSceneConfigResponse({}));
  }

  /**
   * Deletes the settings of a scene.
   * 
   * @remarks
   * You can call this operation to delete the settings of a scene, such as the component setting, layout setting, or both of them.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteCasterSceneConfigRequest
   * @returns DeleteCasterSceneConfigResponse
   */
  async deleteCasterSceneConfig(request: $_model.DeleteCasterSceneConfigRequest): Promise<$_model.DeleteCasterSceneConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterSceneConfigWithOptions(request, runtime);
  }

  /**
   * Removes an input source from a production studio.
   * 
   * @remarks
   * Before you call this operation to remove an input source from a production studio, make sure that you have called the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteCasterVideoResourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCasterVideoResourceResponse
   */
  async deleteCasterVideoResourceWithOptions(request: $_model.DeleteCasterVideoResourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCasterVideoResourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCasterVideoResource",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCasterVideoResourceResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCasterVideoResourceResponse({}));
  }

  /**
   * Removes an input source from a production studio.
   * 
   * @remarks
   * Before you call this operation to remove an input source from a production studio, make sure that you have called the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteCasterVideoResourceRequest
   * @returns DeleteCasterVideoResourceResponse
   */
  async deleteCasterVideoResource(request: $_model.DeleteCasterVideoResourceRequest): Promise<$_model.DeleteCasterVideoResourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCasterVideoResourceWithOptions(request, runtime);
  }

  /**
   * Deletes a channel.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteChannelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteChannelResponse
   */
  async deleteChannelWithOptions(request: $_model.DeleteChannelRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteChannelResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteChannel",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteChannelResponse>(await this.callApi(params, req, runtime), new $_model.DeleteChannelResponse({}));
  }

  /**
   * Deletes a channel.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteChannelRequest
   * @returns DeleteChannelResponse
   */
  async deleteChannel(request: $_model.DeleteChannelRequest): Promise<$_model.DeleteChannelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteChannelWithOptions(request, runtime);
  }

  /**
   * Deletes a custom stream mixing template.
   * 
   * @remarks
   * Obtain the name of the custom stream mixing template that you want to delete, and then call this operation to delete the template.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCustomTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCustomTemplateResponse
   */
  async deleteCustomTemplateWithOptions(request: $_model.DeleteCustomTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCustomTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCustomTemplate",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCustomTemplateResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCustomTemplateResponse({}));
  }

  /**
   * Deletes a custom stream mixing template.
   * 
   * @remarks
   * Obtain the name of the custom stream mixing template that you want to delete, and then call this operation to delete the template.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteCustomTemplateRequest
   * @returns DeleteCustomTemplateResponse
   */
  async deleteCustomTemplate(request: $_model.DeleteCustomTemplateRequest): Promise<$_model.DeleteCustomTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCustomTemplateWithOptions(request, runtime);
  }

  /**
   * Deletes an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to delete an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteEdgeTranscodeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteEdgeTranscodeJobResponse
   */
  async deleteEdgeTranscodeJobWithOptions(request: $_model.DeleteEdgeTranscodeJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteEdgeTranscodeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteEdgeTranscodeJob",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteEdgeTranscodeJobResponse>(await this.callApi(params, req, runtime), new $_model.DeleteEdgeTranscodeJobResponse({}));
  }

  /**
   * Deletes an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to delete an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteEdgeTranscodeJobRequest
   * @returns DeleteEdgeTranscodeJobResponse
   */
  async deleteEdgeTranscodeJob(request: $_model.DeleteEdgeTranscodeJobRequest): Promise<$_model.DeleteEdgeTranscodeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteEdgeTranscodeJobWithOptions(request, runtime);
  }

  /**
   * Deletes a callback that is used to subscribe to channel or user events.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateEventSubscribe](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteEventSubResponse
   */
  async deleteEventSubWithOptions(request: $_model.DeleteEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteEventSubResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.subscribeId)) {
      query["SubscribeId"] = request.subscribeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteEventSubResponse>(await this.callApi(params, req, runtime), new $_model.DeleteEventSubResponse({}));
  }

  /**
   * Deletes a callback that is used to subscribe to channel or user events.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateEventSubscribe](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteEventSubRequest
   * @returns DeleteEventSubResponse
   */
  async deleteEventSub(request: $_model.DeleteEventSubRequest): Promise<$_model.DeleteEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteEventSubWithOptions(request, runtime);
  }

  /**
   * Deletes a subtitle rule.
   * 
   * @remarks
   * You can call this operation to delete a specified subtitle rule.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAIProduceRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveAIProduceRulesResponse
   */
  async deleteLiveAIProduceRulesWithOptions(request: $_model.DeleteLiveAIProduceRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveAIProduceRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.rulesId)) {
      query["RulesId"] = request.rulesId;
    }

    if (!$dara.isNull(request.suffixName)) {
      query["SuffixName"] = request.suffixName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveAIProduceRules",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveAIProduceRulesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveAIProduceRulesResponse({}));
  }

  /**
   * Deletes a subtitle rule.
   * 
   * @remarks
   * You can call this operation to delete a specified subtitle rule.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAIProduceRulesRequest
   * @returns DeleteLiveAIProduceRulesResponse
   */
  async deleteLiveAIProduceRules(request: $_model.DeleteLiveAIProduceRulesRequest): Promise<$_model.DeleteLiveAIProduceRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveAIProduceRulesWithOptions(request, runtime);
  }

  /**
   * Deletes a virtual studio template.
   * 
   * @remarks
   * To delete a virtual studio template, you must first unbind the rules. Otherwise, an error occurs.
   * >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
   * 
   * @param request - DeleteLiveAIStudioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveAIStudioResponse
   */
  async deleteLiveAIStudioWithOptions(request: $_model.DeleteLiveAIStudioRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveAIStudioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.studioId)) {
      query["StudioId"] = request.studioId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveAIStudio",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveAIStudioResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveAIStudioResponse({}));
  }

  /**
   * Deletes a virtual studio template.
   * 
   * @remarks
   * To delete a virtual studio template, you must first unbind the rules. Otherwise, an error occurs.
   * >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
   * 
   * @param request - DeleteLiveAIStudioRequest
   * @returns DeleteLiveAIStudioResponse
   */
  async deleteLiveAIStudio(request: $_model.DeleteLiveAIStudioRequest): Promise<$_model.DeleteLiveAIStudioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveAIStudioWithOptions(request, runtime);
  }

  /**
   * Deletes a specified subtitle template.
   * 
   * @remarks
   * You can call this operation to delete a specified subtitle template for live streaming.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveAISubtitleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveAISubtitleResponse
   */
  async deleteLiveAISubtitleWithOptions(request: $_model.DeleteLiveAISubtitleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveAISubtitleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.subtitleId)) {
      query["SubtitleId"] = request.subtitleId;
    }

    if (!$dara.isNull(request.subtitleName)) {
      query["SubtitleName"] = request.subtitleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveAISubtitle",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveAISubtitleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveAISubtitleResponse({}));
  }

  /**
   * Deletes a specified subtitle template.
   * 
   * @remarks
   * You can call this operation to delete a specified subtitle template for live streaming.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveAISubtitleRequest
   * @returns DeleteLiveAISubtitleResponse
   */
  async deleteLiveAISubtitle(request: $_model.DeleteLiveAISubtitleRequest): Promise<$_model.DeleteLiveAISubtitleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveAISubtitleWithOptions(request, runtime);
  }

  /**
   * Deletes a recording configuration at the application level.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to delete a recording configuration at the application level.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAppRecordConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveAppRecordConfigResponse
   */
  async deleteLiveAppRecordConfigWithOptions(request: $_model.DeleteLiveAppRecordConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveAppRecordConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveAppRecordConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveAppRecordConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveAppRecordConfigResponse({}));
  }

  /**
   * Deletes a recording configuration at the application level.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to delete a recording configuration at the application level.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAppRecordConfigRequest
   * @returns DeleteLiveAppRecordConfigResponse
   */
  async deleteLiveAppRecordConfig(request: $_model.DeleteLiveAppRecordConfigRequest): Promise<$_model.DeleteLiveAppRecordConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveAppRecordConfigWithOptions(request, runtime);
  }

  /**
   * Deletes the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
   * 
   * @remarks
   * You can call this operation to delete the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAppSnapshotConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveAppSnapshotConfigResponse
   */
  async deleteLiveAppSnapshotConfigWithOptions(request: $_model.DeleteLiveAppSnapshotConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveAppSnapshotConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveAppSnapshotConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveAppSnapshotConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveAppSnapshotConfigResponse({}));
  }

  /**
   * Deletes the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
   * 
   * @remarks
   * You can call this operation to delete the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAppSnapshotConfigRequest
   * @returns DeleteLiveAppSnapshotConfigResponse
   */
  async deleteLiveAppSnapshotConfig(request: $_model.DeleteLiveAppSnapshotConfigRequest): Promise<$_model.DeleteLiveAppSnapshotConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveAppSnapshotConfigWithOptions(request, runtime);
  }

  /**
   * Deletes an audio moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to delete an audio moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveAudioAuditConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveAudioAuditConfigResponse
   */
  async deleteLiveAudioAuditConfigWithOptions(request: $_model.DeleteLiveAudioAuditConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveAudioAuditConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveAudioAuditConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveAudioAuditConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveAudioAuditConfigResponse({}));
  }

  /**
   * Deletes an audio moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to delete an audio moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveAudioAuditConfigRequest
   * @returns DeleteLiveAudioAuditConfigResponse
   */
  async deleteLiveAudioAuditConfig(request: $_model.DeleteLiveAudioAuditConfigRequest): Promise<$_model.DeleteLiveAudioAuditConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveAudioAuditConfigWithOptions(request, runtime);
  }

  /**
   * Deletes the configuration of callbacks for audio moderation results.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for audio moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAudioAuditNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveAudioAuditNotifyConfigResponse
   */
  async deleteLiveAudioAuditNotifyConfigWithOptions(request: $_model.DeleteLiveAudioAuditNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveAudioAuditNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveAudioAuditNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveAudioAuditNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveAudioAuditNotifyConfigResponse({}));
  }

  /**
   * Deletes the configuration of callbacks for audio moderation results.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for audio moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveAudioAuditNotifyConfigRequest
   * @returns DeleteLiveAudioAuditNotifyConfigResponse
   */
  async deleteLiveAudioAuditNotifyConfig(request: $_model.DeleteLiveAudioAuditNotifyConfigRequest): Promise<$_model.DeleteLiveAudioAuditNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveAudioAuditNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a configuration of live center stream relay.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveCenterTransferRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveCenterTransferResponse
   */
  async deleteLiveCenterTransferWithOptions(request: $_model.DeleteLiveCenterTransferRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveCenterTransferResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.dstUrl)) {
      query["DstUrl"] = request.dstUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveCenterTransfer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveCenterTransferResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveCenterTransferResponse({}));
  }

  /**
   * Deletes a configuration of live center stream relay.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveCenterTransferRequest
   * @returns DeleteLiveCenterTransferResponse
   */
  async deleteLiveCenterTransfer(request: $_model.DeleteLiveCenterTransferRequest): Promise<$_model.DeleteLiveCenterTransferResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveCenterTransferWithOptions(request, runtime);
  }

  /**
   * Deletes a stream delay configuration.
   * 
   * @remarks
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveDelayConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveDelayConfigResponse
   */
  async deleteLiveDelayConfigWithOptions(request: $_model.DeleteLiveDelayConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveDelayConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveDelayConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveDelayConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveDelayConfigResponse({}));
  }

  /**
   * Deletes a stream delay configuration.
   * 
   * @remarks
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveDelayConfigRequest
   * @returns DeleteLiveDelayConfigResponse
   */
  async deleteLiveDelayConfig(request: $_model.DeleteLiveDelayConfigRequest): Promise<$_model.DeleteLiveDelayConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveDelayConfigWithOptions(request, runtime);
  }

  /**
   * Deletes the configuration of callbacks for video moderation results.
   * 
   * @remarks
   * ## [](#)Usage notes
   * *   Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for video moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveDetectNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveDetectNotifyConfigResponse
   */
  async deleteLiveDetectNotifyConfigWithOptions(request: $_model.DeleteLiveDetectNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveDetectNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveDetectNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveDetectNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveDetectNotifyConfigResponse({}));
  }

  /**
   * Deletes the configuration of callbacks for video moderation results.
   * 
   * @remarks
   * ## [](#)Usage notes
   * *   Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for video moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveDetectNotifyConfigRequest
   * @returns DeleteLiveDetectNotifyConfigResponse
   */
  async deleteLiveDetectNotifyConfig(request: $_model.DeleteLiveDetectNotifyConfigRequest): Promise<$_model.DeleteLiveDetectNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveDetectNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Removes a domain name from ApsaraVideo Live.
   * 
   * @remarks
   *   After you successfully call the DeleteLiveDomain operation, all records of the specified domain name are deleted. Exercise caution when you perform this operation.
   * *   We recommend that you restore to an A record for the domain name at the DNS provider before you remove the domain name. Otherwise, the domain name may become inaccessible. If your domain name is registered with Alibaba Cloud, log on to the [Alibaba Cloud DNS console](https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fdns.console.aliyun.com%2F%3Fspm%3Da2c4g.11186623.0.0.3cda841fcvk7Qs\\&lang=zh) and navigate to the **Domain Name Resolution** page. Find the domain name and then click **DNS Settings** in the Actions column. On the page that appears, change the CNAME record to an A record. If your domain name is registered with another DNS provider, configure similar settings on the platform of that DNS provider.
   * *   If you want to only suspend the use of the domain name, we recommend that you call the [StopLiveDomain](https://help.aliyun.com/document_detail/88329.html) operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveDomainRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveDomainResponse
   */
  async deleteLiveDomainWithOptions(request: $_model.DeleteLiveDomainRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveDomainResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveDomain",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveDomainResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveDomainResponse({}));
  }

  /**
   * Removes a domain name from ApsaraVideo Live.
   * 
   * @remarks
   *   After you successfully call the DeleteLiveDomain operation, all records of the specified domain name are deleted. Exercise caution when you perform this operation.
   * *   We recommend that you restore to an A record for the domain name at the DNS provider before you remove the domain name. Otherwise, the domain name may become inaccessible. If your domain name is registered with Alibaba Cloud, log on to the [Alibaba Cloud DNS console](https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fdns.console.aliyun.com%2F%3Fspm%3Da2c4g.11186623.0.0.3cda841fcvk7Qs\\&lang=zh) and navigate to the **Domain Name Resolution** page. Find the domain name and then click **DNS Settings** in the Actions column. On the page that appears, change the CNAME record to an A record. If your domain name is registered with another DNS provider, configure similar settings on the platform of that DNS provider.
   * *   If you want to only suspend the use of the domain name, we recommend that you call the [StopLiveDomain](https://help.aliyun.com/document_detail/88329.html) operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveDomainRequest
   * @returns DeleteLiveDomainResponse
   */
  async deleteLiveDomain(request: $_model.DeleteLiveDomainRequest): Promise<$_model.DeleteLiveDomainResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveDomainWithOptions(request, runtime);
  }

  /**
   * Deletes the mapping between a streaming domain and an ingest domain.
   * 
   * @remarks
   * Make sure that the streaming domain has been mapped to the ingest domain before you call this operation to delete the mapping. For more information about how to map a streaming domain to an ingest domain, see [AddLiveDomainMapping](https://help.aliyun.com/document_detail/88782.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveDomainMappingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveDomainMappingResponse
   */
  async deleteLiveDomainMappingWithOptions(request: $_model.DeleteLiveDomainMappingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveDomainMappingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pullDomain)) {
      query["PullDomain"] = request.pullDomain;
    }

    if (!$dara.isNull(request.pushDomain)) {
      query["PushDomain"] = request.pushDomain;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveDomainMapping",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveDomainMappingResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveDomainMappingResponse({}));
  }

  /**
   * Deletes the mapping between a streaming domain and an ingest domain.
   * 
   * @remarks
   * Make sure that the streaming domain has been mapped to the ingest domain before you call this operation to delete the mapping. For more information about how to map a streaming domain to an ingest domain, see [AddLiveDomainMapping](https://help.aliyun.com/document_detail/88782.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveDomainMappingRequest
   * @returns DeleteLiveDomainMappingResponse
   */
  async deleteLiveDomainMapping(request: $_model.DeleteLiveDomainMappingRequest): Promise<$_model.DeleteLiveDomainMappingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveDomainMappingWithOptions(request, runtime);
  }

  /**
   * Deletes the mapping between a main streaming domain and a sub-streaming domain.
   * 
   * @remarks
   * Before you call this operation, make sure that the mapping between the main streaming domain and the sub-streaming domain is created. For more information about how to call an operation to create the mapping between a main streaming domain and a sub-streaming domain, see [AddLiveDomainPlayMapping](https://help.aliyun.com/document_detail/173091.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveDomainPlayMappingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveDomainPlayMappingResponse
   */
  async deleteLiveDomainPlayMappingWithOptions(request: $_model.DeleteLiveDomainPlayMappingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveDomainPlayMappingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.playDomain)) {
      query["PlayDomain"] = request.playDomain;
    }

    if (!$dara.isNull(request.pullDomain)) {
      query["PullDomain"] = request.pullDomain;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveDomainPlayMapping",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveDomainPlayMappingResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveDomainPlayMappingResponse({}));
  }

  /**
   * Deletes the mapping between a main streaming domain and a sub-streaming domain.
   * 
   * @remarks
   * Before you call this operation, make sure that the mapping between the main streaming domain and the sub-streaming domain is created. For more information about how to call an operation to create the mapping between a main streaming domain and a sub-streaming domain, see [AddLiveDomainPlayMapping](https://help.aliyun.com/document_detail/173091.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveDomainPlayMappingRequest
   * @returns DeleteLiveDomainPlayMappingResponse
   */
  async deleteLiveDomainPlayMapping(request: $_model.DeleteLiveDomainPlayMappingRequest): Promise<$_model.DeleteLiveDomainPlayMappingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveDomainPlayMappingWithOptions(request, runtime);
  }

  /**
   * Deletes the configuration of edge stream relay.
   * 
   * @remarks
   * You can call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay for a specific domain name. Ingested streams that are already relayed based on the configuration are not affected. The following table describes the scenarios in which edge stream relay takes effect or not.
   * |Scenario|Analysis|Result|
   * |---|---|---|
   * |1\\. You ingest a stream after you call the SetLiveEdgeTransfer operation to configure edge stream relay. Then, you call the DeleteLiveEdgeTransfer operation to delete the configuration.|The configuration of edge stream relay is available when you ingest the stream.|The ingested stream is not affected, and stream relay is not interrupted.|
   * |2\\. You call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay after you ingest a stream. Then, you disconnect and resume the ingested stream.|The configuration of edge stream relay is not available after you resume the ingested stream.|Edge stream relay does not take effect.|
   * |3\\. You call the DeleteLiveEdgeTransfer operation before you ingest a stream.|The configuration of edge stream relay is not available.|Edge stream relay does not take effect.|
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveEdgeTransferRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveEdgeTransferResponse
   */
  async deleteLiveEdgeTransferWithOptions(request: $_model.DeleteLiveEdgeTransferRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveEdgeTransferResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveEdgeTransfer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveEdgeTransferResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveEdgeTransferResponse({}));
  }

  /**
   * Deletes the configuration of edge stream relay.
   * 
   * @remarks
   * You can call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay for a specific domain name. Ingested streams that are already relayed based on the configuration are not affected. The following table describes the scenarios in which edge stream relay takes effect or not.
   * |Scenario|Analysis|Result|
   * |---|---|---|
   * |1\\. You ingest a stream after you call the SetLiveEdgeTransfer operation to configure edge stream relay. Then, you call the DeleteLiveEdgeTransfer operation to delete the configuration.|The configuration of edge stream relay is available when you ingest the stream.|The ingested stream is not affected, and stream relay is not interrupted.|
   * |2\\. You call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay after you ingest a stream. Then, you disconnect and resume the ingested stream.|The configuration of edge stream relay is not available after you resume the ingested stream.|Edge stream relay does not take effect.|
   * |3\\. You call the DeleteLiveEdgeTransfer operation before you ingest a stream.|The configuration of edge stream relay is not available.|Edge stream relay does not take effect.|
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveEdgeTransferRequest
   * @returns DeleteLiveEdgeTransferResponse
   */
  async deleteLiveEdgeTransfer(request: $_model.DeleteLiveEdgeTransferRequest): Promise<$_model.DeleteLiveEdgeTransferResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveEdgeTransferWithOptions(request, runtime);
  }

  /**
   * Deletes a configuration of triggered stream pulling.
   * 
   * @remarks
   * This operation is application to triggered stream pulling. You can call this operation to delete a configuration of triggered stream pulling. If you set the AppName parameter to ali_all_app, configurations of triggered stream pulling for all applications under the domain name are deleted.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveLazyPullStreamInfoConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveLazyPullStreamInfoConfigResponse
   */
  async deleteLiveLazyPullStreamInfoConfigWithOptions(request: $_model.DeleteLiveLazyPullStreamInfoConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveLazyPullStreamInfoConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveLazyPullStreamInfoConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveLazyPullStreamInfoConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveLazyPullStreamInfoConfigResponse({}));
  }

  /**
   * Deletes a configuration of triggered stream pulling.
   * 
   * @remarks
   * This operation is application to triggered stream pulling. You can call this operation to delete a configuration of triggered stream pulling. If you set the AppName parameter to ali_all_app, configurations of triggered stream pulling for all applications under the domain name are deleted.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveLazyPullStreamInfoConfigRequest
   * @returns DeleteLiveLazyPullStreamInfoConfigResponse
   */
  async deleteLiveLazyPullStreamInfoConfig(request: $_model.DeleteLiveLazyPullStreamInfoConfigRequest): Promise<$_model.DeleteLiveLazyPullStreamInfoConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveLazyPullStreamInfoConfigWithOptions(request, runtime);
  }

  /**
   * Deletes an interactive messaging group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * *   After you delete an interactive messaging group, it is no longer available. Every user in the group is notified that the group is closed.
   * *   After you delete an interactive messaging group, messages in the group are retained for 30 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveMessageGroupResponse
   */
  async deleteLiveMessageGroupWithOptions(request: $_model.DeleteLiveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveMessageGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorId)) {
      query["OperatorId"] = request.operatorId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveMessageGroupResponse({}));
  }

  /**
   * Deletes an interactive messaging group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * *   After you delete an interactive messaging group, it is no longer available. Every user in the group is notified that the group is closed.
   * *   After you delete an interactive messaging group, messages in the group are retained for 30 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveMessageGroupRequest
   * @returns DeleteLiveMessageGroupResponse
   */
  async deleteLiveMessageGroup(request: $_model.DeleteLiveMessageGroupRequest): Promise<$_model.DeleteLiveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Deletes a message that was sent to an interactive messaging group.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveMessageGroupMessageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveMessageGroupMessageResponse
   */
  async deleteLiveMessageGroupMessageWithOptions(request: $_model.DeleteLiveMessageGroupMessageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveMessageGroupMessageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.deleterId)) {
      query["DeleterId"] = request.deleterId;
    }

    if (!$dara.isNull(request.deleterInfo)) {
      query["DeleterInfo"] = request.deleterInfo;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.messageId)) {
      query["MessageId"] = request.messageId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveMessageGroupMessage",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveMessageGroupMessageResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveMessageGroupMessageResponse({}));
  }

  /**
   * Deletes a message that was sent to an interactive messaging group.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveMessageGroupMessageRequest
   * @returns DeleteLiveMessageGroupMessageResponse
   */
  async deleteLiveMessageGroupMessage(request: $_model.DeleteLiveMessageGroupMessageRequest): Promise<$_model.DeleteLiveMessageGroupMessageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveMessageGroupMessageWithOptions(request, runtime);
  }

  /**
   * Deletes a message that is sent to a user.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveMessageUserMessageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveMessageUserMessageResponse
   */
  async deleteLiveMessageUserMessageWithOptions(request: $_model.DeleteLiveMessageUserMessageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveMessageUserMessageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.deleterId)) {
      query["DeleterId"] = request.deleterId;
    }

    if (!$dara.isNull(request.deleterInfo)) {
      query["DeleterInfo"] = request.deleterInfo;
    }

    if (!$dara.isNull(request.messageId)) {
      query["MessageId"] = request.messageId;
    }

    if (!$dara.isNull(request.receiverId)) {
      query["ReceiverId"] = request.receiverId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveMessageUserMessage",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveMessageUserMessageResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveMessageUserMessageResponse({}));
  }

  /**
   * Deletes a message that is sent to a user.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveMessageUserMessageRequest
   * @returns DeleteLiveMessageUserMessageResponse
   */
  async deleteLiveMessageUserMessage(request: $_model.DeleteLiveMessageUserMessageRequest): Promise<$_model.DeleteLiveMessageUserMessageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveMessageUserMessageWithOptions(request, runtime);
  }

  /**
   * @remarks
   * You can call this operation to delete a live stream encapsulation configuration. The deletion takes effect after you re-ingest the stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePackageConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLivePackageConfigResponse
   */
  async deleteLivePackageConfigWithOptions(request: $_model.DeleteLivePackageConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLivePackageConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLivePackageConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLivePackageConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLivePackageConfigResponse({}));
  }

  /**
   * @remarks
   * You can call this operation to delete a live stream encapsulation configuration. The deletion takes effect after you re-ingest the stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePackageConfigRequest
   * @returns DeleteLivePackageConfigResponse
   */
  async deleteLivePackageConfig(request: $_model.DeleteLivePackageConfigRequest): Promise<$_model.DeleteLivePackageConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLivePackageConfigWithOptions(request, runtime);
  }

  /**
   * Unbinds a Global Accelerator (GA) instance from an acceleration circuit.
   * 
   * @remarks
   * After you unbind a GA instance from an acceleration circuit, your stream ingest and streaming are no longer accelerated by the GA instance. The GA instance still exists. If you want to release the GA instance, delete it in the GA console.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePrivateLineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLivePrivateLineResponse
   */
  async deleteLivePrivateLineWithOptions(request: $_model.DeleteLivePrivateLineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLivePrivateLineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accelerationType)) {
      query["AccelerationType"] = request.accelerationType;
    }

    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLivePrivateLine",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLivePrivateLineResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLivePrivateLineResponse({}));
  }

  /**
   * Unbinds a Global Accelerator (GA) instance from an acceleration circuit.
   * 
   * @remarks
   * After you unbind a GA instance from an acceleration circuit, your stream ingest and streaming are no longer accelerated by the GA instance. The GA instance still exists. If you want to release the GA instance, delete it in the GA console.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePrivateLineRequest
   * @returns DeleteLivePrivateLineResponse
   */
  async deleteLivePrivateLine(request: $_model.DeleteLivePrivateLineRequest): Promise<$_model.DeleteLivePrivateLineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLivePrivateLineWithOptions(request, runtime);
  }

  /**
   * Deletes a stream pulling configuration.
   * 
   * @remarks
   * This operation is applicable to regular stream pulling. You can call this operation to delete a configuration of regular stream pulling.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePullStreamInfoConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLivePullStreamInfoConfigResponse
   */
  async deleteLivePullStreamInfoConfigWithOptions(request: $_model.DeleteLivePullStreamInfoConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLivePullStreamInfoConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLivePullStreamInfoConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLivePullStreamInfoConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLivePullStreamInfoConfigResponse({}));
  }

  /**
   * Deletes a stream pulling configuration.
   * 
   * @remarks
   * This operation is applicable to regular stream pulling. You can call this operation to delete a configuration of regular stream pulling.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePullStreamInfoConfigRequest
   * @returns DeleteLivePullStreamInfoConfigResponse
   */
  async deleteLivePullStreamInfoConfig(request: $_model.DeleteLivePullStreamInfoConfigRequest): Promise<$_model.DeleteLivePullStreamInfoConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLivePullStreamInfoConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to delete a pulled-stream relay task.
   * *   If you delete a running task, the task is immediately stopped and cannot be restarted.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePullToPushRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLivePullToPushResponse
   */
  async deleteLivePullToPushWithOptions(request: $_model.DeleteLivePullToPushRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLivePullToPushResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLivePullToPush",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLivePullToPushResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLivePullToPushResponse({}));
  }

  /**
   * Deletes a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to delete a pulled-stream relay task.
   * *   If you delete a running task, the task is immediately stopped and cannot be restarted.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLivePullToPushRequest
   * @returns DeleteLivePullToPushResponse
   */
  async deleteLivePullToPush(request: $_model.DeleteLivePullToPushRequest): Promise<$_model.DeleteLivePullToPushResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLivePullToPushWithOptions(request, runtime);
  }

  /**
   * Deletes the Logstore that is specified by a configuration of real-time log delivery.
   * 
   * @remarks
   *   You can call this operation to delete the Logstore that is specified by a configuration of real-time log delivery. Make sure that all parameters meet the requirements when you call this operation.
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRealTimeLogLogstoreRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveRealTimeLogLogstoreResponse
   */
  async deleteLiveRealTimeLogLogstoreWithOptions(request: $_model.DeleteLiveRealTimeLogLogstoreRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveRealTimeLogLogstoreResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveRealTimeLogLogstore",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveRealTimeLogLogstoreResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveRealTimeLogLogstoreResponse({}));
  }

  /**
   * Deletes the Logstore that is specified by a configuration of real-time log delivery.
   * 
   * @remarks
   *   You can call this operation to delete the Logstore that is specified by a configuration of real-time log delivery. Make sure that all parameters meet the requirements when you call this operation.
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRealTimeLogLogstoreRequest
   * @returns DeleteLiveRealTimeLogLogstoreResponse
   */
  async deleteLiveRealTimeLogLogstore(request: $_model.DeleteLiveRealTimeLogLogstoreRequest): Promise<$_model.DeleteLiveRealTimeLogLogstoreResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveRealTimeLogLogstoreWithOptions(request, runtime);
  }

  /**
   * Deletes the configurations of real-time log delivery for one or more domain names.
   * 
   * @remarks
   * 
   *  * *   This operation is applicable to only streaming domains. If you want to configure real-tome log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRealtimeLogDeliveryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveRealtimeLogDeliveryResponse
   */
  async deleteLiveRealtimeLogDeliveryWithOptions(request: $_model.DeleteLiveRealtimeLogDeliveryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveRealtimeLogDeliveryResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveRealtimeLogDelivery",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveRealtimeLogDeliveryResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveRealtimeLogDeliveryResponse({}));
  }

  /**
   * Deletes the configurations of real-time log delivery for one or more domain names.
   * 
   * @remarks
   * 
   *  * *   This operation is applicable to only streaming domains. If you want to configure real-tome log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRealtimeLogDeliveryRequest
   * @returns DeleteLiveRealtimeLogDeliveryResponse
   */
  async deleteLiveRealtimeLogDelivery(request: $_model.DeleteLiveRealtimeLogDeliveryRequest): Promise<$_model.DeleteLiveRealtimeLogDeliveryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveRealtimeLogDeliveryWithOptions(request, runtime);
  }

  /**
   * Deletes the configuration of callbacks for live stream recording under a domain name.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for live stream recording under the main streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRecordNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveRecordNotifyConfigResponse
   */
  async deleteLiveRecordNotifyConfigWithOptions(request: $_model.DeleteLiveRecordNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveRecordNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveRecordNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveRecordNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveRecordNotifyConfigResponse({}));
  }

  /**
   * Deletes the configuration of callbacks for live stream recording under a domain name.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for live stream recording under the main streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRecordNotifyConfigRequest
   * @returns DeleteLiveRecordNotifyConfigResponse
   */
  async deleteLiveRecordNotifyConfig(request: $_model.DeleteLiveRecordNotifyConfigRequest): Promise<$_model.DeleteLiveRecordNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveRecordNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a Live-to-VOD configuration.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to delete a Live-to-VOD configuration.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRecordVodConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveRecordVodConfigResponse
   */
  async deleteLiveRecordVodConfigWithOptions(request: $_model.DeleteLiveRecordVodConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveRecordVodConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveRecordVodConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveRecordVodConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveRecordVodConfigResponse({}));
  }

  /**
   * Deletes a Live-to-VOD configuration.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to delete a Live-to-VOD configuration.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveRecordVodConfigRequest
   * @returns DeleteLiveRecordVodConfigResponse
   */
  async deleteLiveRecordVodConfig(request: $_model.DeleteLiveRecordVodConfigRequest): Promise<$_model.DeleteLiveRecordVodConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveRecordVodConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a video moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to delete a video moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveSnapshotDetectPornConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveSnapshotDetectPornConfigResponse
   */
  async deleteLiveSnapshotDetectPornConfigWithOptions(request: $_model.DeleteLiveSnapshotDetectPornConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveSnapshotDetectPornConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveSnapshotDetectPornConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveSnapshotDetectPornConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveSnapshotDetectPornConfigResponse({}));
  }

  /**
   * Deletes a video moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to delete a video moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveSnapshotDetectPornConfigRequest
   * @returns DeleteLiveSnapshotDetectPornConfigResponse
   */
  async deleteLiveSnapshotDetectPornConfig(request: $_model.DeleteLiveSnapshotDetectPornConfigRequest): Promise<$_model.DeleteLiveSnapshotDetectPornConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveSnapshotDetectPornConfigWithOptions(request, runtime);
  }

  /**
   * Deletes the configuration of snapshot callbacks.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveSnapshotNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveSnapshotNotifyConfigResponse
   */
  async deleteLiveSnapshotNotifyConfigWithOptions(request: $_model.DeleteLiveSnapshotNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveSnapshotNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveSnapshotNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveSnapshotNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveSnapshotNotifyConfigResponse({}));
  }

  /**
   * Deletes the configuration of snapshot callbacks.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveSnapshotNotifyConfigRequest
   * @returns DeleteLiveSnapshotNotifyConfigResponse
   */
  async deleteLiveSnapshotNotifyConfig(request: $_model.DeleteLiveSnapshotNotifyConfigRequest): Promise<$_model.DeleteLiveSnapshotNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveSnapshotNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Deletes domain configurations in the canary release environment.
   * 
   * @remarks
   * ## [](#)Usage notes
   * Before you call this operation to delete a domain configuration in the canary release environment, you can call the [DescribeLiveDomainStagingConfig](https://help.aliyun.com/document_detail/297374.html) operation to obtain the configuration ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveSpecificStagingConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveSpecificStagingConfigResponse
   */
  async deleteLiveSpecificStagingConfigWithOptions(request: $_model.DeleteLiveSpecificStagingConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveSpecificStagingConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configId)) {
      query["ConfigId"] = request.configId;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveSpecificStagingConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveSpecificStagingConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveSpecificStagingConfigResponse({}));
  }

  /**
   * Deletes domain configurations in the canary release environment.
   * 
   * @remarks
   * ## [](#)Usage notes
   * Before you call this operation to delete a domain configuration in the canary release environment, you can call the [DescribeLiveDomainStagingConfig](https://help.aliyun.com/document_detail/297374.html) operation to obtain the configuration ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveSpecificStagingConfigRequest
   * @returns DeleteLiveSpecificStagingConfigResponse
   */
  async deleteLiveSpecificStagingConfig(request: $_model.DeleteLiveSpecificStagingConfigRequest): Promise<$_model.DeleteLiveSpecificStagingConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveSpecificStagingConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a configuration of stream-level region blocking.
   * 
   * @remarks
   * You can call this operation to delete a configuration of stream-level region blocking.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamBlockRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamBlockResponse
   */
  async deleteLiveStreamBlockWithOptions(request: $_model.DeleteLiveStreamBlockRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamBlockResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamBlock",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamBlockResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamBlockResponse({}));
  }

  /**
   * Deletes a configuration of stream-level region blocking.
   * 
   * @remarks
   * You can call this operation to delete a configuration of stream-level region blocking.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamBlockRequest
   * @returns DeleteLiveStreamBlockResponse
   */
  async deleteLiveStreamBlock(request: $_model.DeleteLiveStreamBlockRequest): Promise<$_model.DeleteLiveStreamBlockResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamBlockWithOptions(request, runtime);
  }

  /**
   * Deletes an active mixed stream.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamMergeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamMergeResponse
   */
  async deleteLiveStreamMergeWithOptions(request: $_model.DeleteLiveStreamMergeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamMergeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamMerge",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamMergeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamMergeResponse({}));
  }

  /**
   * Deletes an active mixed stream.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamMergeRequest
   * @returns DeleteLiveStreamMergeResponse
   */
  async deleteLiveStreamMerge(request: $_model.DeleteLiveStreamMergeRequest): Promise<$_model.DeleteLiveStreamMergeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamMergeWithOptions(request, runtime);
  }

  /**
   * Deletes a monitoring session.
   * 
   * @remarks
   * Before you call this operation, obtain the monitoring session ID from the response parameter **MonitorId** of the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation.
   * >  You cannot delete a monitoring session that is in the started state. If you try to delete it, a 400 error is reported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamMonitorResponse
   */
  async deleteLiveStreamMonitorWithOptions(request: $_model.DeleteLiveStreamMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.monitorId)) {
      query["MonitorId"] = request.monitorId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamMonitor",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamMonitorResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamMonitorResponse({}));
  }

  /**
   * Deletes a monitoring session.
   * 
   * @remarks
   * Before you call this operation, obtain the monitoring session ID from the response parameter **MonitorId** of the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation.
   * >  You cannot delete a monitoring session that is in the started state. If you try to delete it, a 400 error is reported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamMonitorRequest
   * @returns DeleteLiveStreamMonitorResponse
   */
  async deleteLiveStreamMonitor(request: $_model.DeleteLiveStreamMonitorRequest): Promise<$_model.DeleteLiveStreamMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamMonitorWithOptions(request, runtime);
  }

  /**
   * Deletes live stream recordings.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamRecordIndexFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamRecordIndexFilesResponse
   */
  async deleteLiveStreamRecordIndexFilesWithOptions(request: $_model.DeleteLiveStreamRecordIndexFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamRecordIndexFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.recordId)) {
      query["RecordId"] = request.recordId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.removeFile)) {
      query["RemoveFile"] = request.removeFile;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamRecordIndexFiles",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamRecordIndexFilesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamRecordIndexFilesResponse({}));
  }

  /**
   * Deletes live stream recordings.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamRecordIndexFilesRequest
   * @returns DeleteLiveStreamRecordIndexFilesResponse
   */
  async deleteLiveStreamRecordIndexFiles(request: $_model.DeleteLiveStreamRecordIndexFilesRequest): Promise<$_model.DeleteLiveStreamRecordIndexFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamRecordIndexFilesWithOptions(request, runtime);
  }

  /**
   * Deletes a transcoding configuration.
   * 
   * @remarks
   * Standard transcoding templates, Narrowband HD™ transcoding templates, and custom transcoding templates are supported for this operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamTranscodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamTranscodeResponse
   */
  async deleteLiveStreamTranscodeWithOptions(request: $_model.DeleteLiveStreamTranscodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamTranscodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamTranscode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamTranscodeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamTranscodeResponse({}));
  }

  /**
   * Deletes a transcoding configuration.
   * 
   * @remarks
   * Standard transcoding templates, Narrowband HD™ transcoding templates, and custom transcoding templates are supported for this operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamTranscodeRequest
   * @returns DeleteLiveStreamTranscodeResponse
   */
  async deleteLiveStreamTranscode(request: $_model.DeleteLiveStreamTranscodeRequest): Promise<$_model.DeleteLiveStreamTranscodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamTranscodeWithOptions(request, runtime);
  }

  /**
   * Deletes a specified watermark template.
   * 
   * @remarks
   * This interface supports deleting the watermark template with the specified TemplateId for live streaming. 
   * ## QPS Limitation
   *  The per-user QPS limit for this interface is 60 times/second. Exceeding this limit will result in API throttling, which may impact your business operations. Please use it reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveStreamWatermarkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamWatermarkResponse
   */
  async deleteLiveStreamWatermarkWithOptions(request: $_model.DeleteLiveStreamWatermarkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamWatermarkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamWatermark",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamWatermarkResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamWatermarkResponse({}));
  }

  /**
   * Deletes a specified watermark template.
   * 
   * @remarks
   * This interface supports deleting the watermark template with the specified TemplateId for live streaming. 
   * ## QPS Limitation
   *  The per-user QPS limit for this interface is 60 times/second. Exceeding this limit will result in API throttling, which may impact your business operations. Please use it reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteLiveStreamWatermarkRequest
   * @returns DeleteLiveStreamWatermarkResponse
   */
  async deleteLiveStreamWatermark(request: $_model.DeleteLiveStreamWatermarkRequest): Promise<$_model.DeleteLiveStreamWatermarkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamWatermarkWithOptions(request, runtime);
  }

  /**
   * Deletes a watermark rule.
   * 
   * @remarks
   * You can call this operation to delete a watermark rule with a specified ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamWatermarkRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamWatermarkRuleResponse
   */
  async deleteLiveStreamWatermarkRuleWithOptions(request: $_model.DeleteLiveStreamWatermarkRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamWatermarkRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamWatermarkRule",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamWatermarkRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamWatermarkRuleResponse({}));
  }

  /**
   * Deletes a watermark rule.
   * 
   * @remarks
   * You can call this operation to delete a watermark rule with a specified ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamWatermarkRuleRequest
   * @returns DeleteLiveStreamWatermarkRuleResponse
   */
  async deleteLiveStreamWatermarkRule(request: $_model.DeleteLiveStreamWatermarkRuleRequest): Promise<$_model.DeleteLiveStreamWatermarkRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamWatermarkRuleWithOptions(request, runtime);
  }

  /**
   * Deletes the callback configuration for stream ingest under an ingest domain.
   * 
   * @remarks
   * Obtain the ingest domain, and then call this operation to delete the callback configuration for stream ingest under the ingest domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamsNotifyUrlConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLiveStreamsNotifyUrlConfigResponse
   */
  async deleteLiveStreamsNotifyUrlConfigWithOptions(request: $_model.DeleteLiveStreamsNotifyUrlConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLiveStreamsNotifyUrlConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLiveStreamsNotifyUrlConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLiveStreamsNotifyUrlConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLiveStreamsNotifyUrlConfigResponse({}));
  }

  /**
   * Deletes the callback configuration for stream ingest under an ingest domain.
   * 
   * @remarks
   * Obtain the ingest domain, and then call this operation to delete the callback configuration for stream ingest under the ingest domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteLiveStreamsNotifyUrlConfigRequest
   * @returns DeleteLiveStreamsNotifyUrlConfigResponse
   */
  async deleteLiveStreamsNotifyUrlConfig(request: $_model.DeleteLiveStreamsNotifyUrlConfigRequest): Promise<$_model.DeleteLiveStreamsNotifyUrlConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
  }

  /**
   * Deletes an interactive messaging application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteMessageAppResponse
   */
  async deleteMessageAppWithOptions(request: $_model.DeleteMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteMessageAppResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.DeleteMessageAppResponse({}));
  }

  /**
   * Deletes an interactive messaging application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteMessageAppRequest
   * @returns DeleteMessageAppResponse
   */
  async deleteMessageApp(request: $_model.DeleteMessageAppRequest): Promise<$_model.DeleteMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteMessageAppWithOptions(request, runtime);
  }

  /**
   * Deletes a stream mixing task.
   * 
   * @remarks
   * You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task and then call this operation to delete the stream mixing task. If you no longer need a mixed stream, be sure to delete it. Mixed streams that are not deleted are continuously ingested.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteMixStreamRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteMixStreamResponse
   */
  async deleteMixStreamWithOptions(request: $_model.DeleteMixStreamRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteMixStreamResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.mixStreamId)) {
      query["MixStreamId"] = request.mixStreamId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteMixStream",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteMixStreamResponse>(await this.callApi(params, req, runtime), new $_model.DeleteMixStreamResponse({}));
  }

  /**
   * Deletes a stream mixing task.
   * 
   * @remarks
   * You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task and then call this operation to delete the stream mixing task. If you no longer need a mixed stream, be sure to delete it. Mixed streams that are not deleted are continuously ingested.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteMixStreamRequest
   * @returns DeleteMixStreamResponse
   */
  async deleteMixStream(request: $_model.DeleteMixStreamRequest): Promise<$_model.DeleteMixStreamResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteMixStreamWithOptions(request, runtime);
  }

  /**
   * Deletes an episode list.
   * 
   * @remarks
   * Before you call this operation to delete an episode list, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to create the episode list.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeletePlaylistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeletePlaylistResponse
   */
  async deletePlaylistWithOptions(request: $_model.DeletePlaylistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeletePlaylistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeletePlaylist",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeletePlaylistResponse>(await this.callApi(params, req, runtime), new $_model.DeletePlaylistResponse({}));
  }

  /**
   * Deletes an episode list.
   * 
   * @remarks
   * Before you call this operation to delete an episode list, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to create the episode list.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeletePlaylistRequest
   * @returns DeletePlaylistResponse
   */
  async deletePlaylist(request: $_model.DeletePlaylistRequest): Promise<$_model.DeletePlaylistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deletePlaylistWithOptions(request, runtime);
  }

  /**
   * Removes episodes from an episode list.
   * 
   * @remarks
   * Before you call this operation to remove an episode, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add the episode.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeletePlaylistItemsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeletePlaylistItemsResponse
   */
  async deletePlaylistItemsWithOptions(request: $_model.DeletePlaylistItemsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeletePlaylistItemsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.programItemIds)) {
      query["ProgramItemIds"] = request.programItemIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeletePlaylistItems",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeletePlaylistItemsResponse>(await this.callApi(params, req, runtime), new $_model.DeletePlaylistItemsResponse({}));
  }

  /**
   * Removes episodes from an episode list.
   * 
   * @remarks
   * Before you call this operation to remove an episode, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add the episode.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeletePlaylistItemsRequest
   * @returns DeletePlaylistItemsResponse
   */
  async deletePlaylistItems(request: $_model.DeletePlaylistItemsRequest): Promise<$_model.DeletePlaylistItemsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deletePlaylistItemsWithOptions(request, runtime);
  }

  /**
   * Deletes a live subtitle task.
   * 
   * @remarks
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteRtcAsrTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRtcAsrTaskResponse
   */
  async deleteRtcAsrTaskWithOptions(request: $_model.DeleteRtcAsrTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRtcAsrTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRtcAsrTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRtcAsrTaskResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRtcAsrTaskResponse({}));
  }

  /**
   * Deletes a live subtitle task.
   * 
   * @remarks
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteRtcAsrTaskRequest
   * @returns DeleteRtcAsrTaskResponse
   */
  async deleteRtcAsrTask(request: $_model.DeleteRtcAsrTaskRequest): Promise<$_model.DeleteRtcAsrTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRtcAsrTaskWithOptions(request, runtime);
  }

  /**
   * Deletes a subscription to mixed-stream relay events.
   * 
   * @remarks
   *   You can call this operation to delete a subscription to mixed-stream relay events.
   * *   Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteRtcMPUEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRtcMPUEventSubResponse
   */
  async deleteRtcMPUEventSubWithOptions(request: $_model.DeleteRtcMPUEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRtcMPUEventSubResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRtcMPUEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRtcMPUEventSubResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRtcMPUEventSubResponse({}));
  }

  /**
   * Deletes a subscription to mixed-stream relay events.
   * 
   * @remarks
   *   You can call this operation to delete a subscription to mixed-stream relay events.
   * *   Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DeleteRtcMPUEventSubRequest
   * @returns DeleteRtcMPUEventSubResponse
   */
  async deleteRtcMPUEventSub(request: $_model.DeleteRtcMPUEventSubRequest): Promise<$_model.DeleteRtcMPUEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRtcMPUEventSubWithOptions(request, runtime);
  }

  /**
   * Deletes the configuration of authentication for snapshot callbacks.
   * 
   * @remarks
   * You can call this operation to delete the configuration of authentication for snapshot callbacks for a main streaming domain. For an ongoing live stream, the deletion takes effect after you re-ingest the stream. Snapshot callbacks for the stream are no longer authenticated.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteSnapshotCallbackAuthRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSnapshotCallbackAuthResponse
   */
  async deleteSnapshotCallbackAuthWithOptions(request: $_model.DeleteSnapshotCallbackAuthRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSnapshotCallbackAuthResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSnapshotCallbackAuth",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSnapshotCallbackAuthResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSnapshotCallbackAuthResponse({}));
  }

  /**
   * Deletes the configuration of authentication for snapshot callbacks.
   * 
   * @remarks
   * You can call this operation to delete the configuration of authentication for snapshot callbacks for a main streaming domain. For an ongoing live stream, the deletion takes effect after you re-ingest the stream. Snapshot callbacks for the stream are no longer authenticated.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteSnapshotCallbackAuthRequest
   * @returns DeleteSnapshotCallbackAuthResponse
   */
  async deleteSnapshotCallbackAuth(request: $_model.DeleteSnapshotCallbackAuthRequest): Promise<$_model.DeleteSnapshotCallbackAuthResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSnapshotCallbackAuthWithOptions(request, runtime);
  }

  /**
   * Deletes snapshots.
   * 
   * @remarks
   * You can delete only snapshots that were captured in the last year.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteSnapshotFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSnapshotFilesResponse
   */
  async deleteSnapshotFilesWithOptions(request: $_model.DeleteSnapshotFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSnapshotFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.createTimestampList)) {
      query["CreateTimestampList"] = request.createTimestampList;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.removeFile)) {
      query["RemoveFile"] = request.removeFile;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSnapshotFiles",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSnapshotFilesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSnapshotFilesResponse({}));
  }

  /**
   * Deletes snapshots.
   * 
   * @remarks
   * You can delete only snapshots that were captured in the last year.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteSnapshotFilesRequest
   * @returns DeleteSnapshotFilesResponse
   */
  async deleteSnapshotFiles(request: $_model.DeleteSnapshotFilesRequest): Promise<$_model.DeleteSnapshotFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSnapshotFilesWithOptions(request, runtime);
  }

  /**
   * Deletes a layout in a virtual studio.
   * 
   * @remarks
   * You can call this operation to delete a layout in a virtual studio. You can delete only one layout in a call.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteStudioLayoutRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteStudioLayoutResponse
   */
  async deleteStudioLayoutWithOptions(request: $_model.DeleteStudioLayoutRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteStudioLayoutResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteStudioLayout",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteStudioLayoutResponse>(await this.callApi(params, req, runtime), new $_model.DeleteStudioLayoutResponse({}));
  }

  /**
   * Deletes a layout in a virtual studio.
   * 
   * @remarks
   * You can call this operation to delete a layout in a virtual studio. You can delete only one layout in a call.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DeleteStudioLayoutRequest
   * @returns DeleteStudioLayoutResponse
   */
  async deleteStudioLayout(request: $_model.DeleteStudioLayoutRequest): Promise<$_model.DeleteStudioLayoutResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteStudioLayoutWithOptions(request, runtime);
  }

  /**
   * Queries scheduled tasks that are used to start and stop playing an episode list at specified points in time.
   * 
   * @remarks
   * You can call this operation to query scheduled tasks that are used to start and stop playing an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeAutoShowListTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAutoShowListTasksResponse
   */
  async describeAutoShowListTasksWithOptions(request: $_model.DescribeAutoShowListTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAutoShowListTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAutoShowListTasks",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAutoShowListTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAutoShowListTasksResponse({}));
  }

  /**
   * Queries scheduled tasks that are used to start and stop playing an episode list at specified points in time.
   * 
   * @remarks
   * You can call this operation to query scheduled tasks that are used to start and stop playing an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeAutoShowListTasksRequest
   * @returns DescribeAutoShowListTasksResponse
   */
  async describeAutoShowListTasks(request: $_model.DescribeAutoShowListTasksRequest): Promise<$_model.DescribeAutoShowListTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAutoShowListTasksWithOptions(request, runtime);
  }

  /**
   * Queries the channels of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the channels of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterChannelsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterChannelsResponse
   */
  async describeCasterChannelsWithOptions(request: $_model.DescribeCasterChannelsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterChannelsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterChannels",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterChannelsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterChannelsResponse({}));
  }

  /**
   * Queries the channels of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the channels of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterChannelsRequest
   * @returns DescribeCasterChannelsResponse
   */
  async describeCasterChannels(request: $_model.DescribeCasterChannelsRequest): Promise<$_model.DescribeCasterChannelsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterChannelsWithOptions(request, runtime);
  }

  /**
   * Queries the components of a production studio.
   * 
   * @remarks
   * You can call the [AddCasterComponent](https://help.aliyun.com/document_detail/2848030.html) operation to add components to a production studio and then call this operation to query the components of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterComponentsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterComponentsResponse
   */
  async describeCasterComponentsWithOptions(request: $_model.DescribeCasterComponentsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterComponentsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentId)) {
      query["ComponentId"] = request.componentId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterComponents",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterComponentsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterComponentsResponse({}));
  }

  /**
   * Queries the components of a production studio.
   * 
   * @remarks
   * You can call the [AddCasterComponent](https://help.aliyun.com/document_detail/2848030.html) operation to add components to a production studio and then call this operation to query the components of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterComponentsRequest
   * @returns DescribeCasterComponentsResponse
   */
  async describeCasterComponents(request: $_model.DescribeCasterComponentsRequest): Promise<$_model.DescribeCasterComponentsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterComponentsWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the configurations of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterConfigResponse
   */
  async describeCasterConfigWithOptions(request: $_model.DescribeCasterConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterConfigResponse({}));
  }

  /**
   * Queries the configurations of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the configurations of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterConfigRequest
   * @returns DescribeCasterConfigResponse
   */
  async describeCasterConfig(request: $_model.DescribeCasterConfigRequest): Promise<$_model.DescribeCasterConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterConfigWithOptions(request, runtime);
  }

  /**
   * Queries a specified layout or all layouts of a production studio.
   * 
   * @remarks
   * You can call this operation to query layouts of a production studio. If no layout ID is specified, the operation returns all layouts of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterLayoutsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterLayoutsResponse
   */
  async describeCasterLayoutsWithOptions(request: $_model.DescribeCasterLayoutsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterLayoutsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterLayouts",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterLayoutsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterLayoutsResponse({}));
  }

  /**
   * Queries a specified layout or all layouts of a production studio.
   * 
   * @remarks
   * You can call this operation to query layouts of a production studio. If no layout ID is specified, the operation returns all layouts of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterLayoutsRequest
   * @returns DescribeCasterLayoutsResponse
   */
  async describeCasterLayouts(request: $_model.DescribeCasterLayoutsRequest): Promise<$_model.DescribeCasterLayoutsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterLayoutsWithOptions(request, runtime);
  }

  /**
   * Queries the information about the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * You can call this operation to query episodes in the episode list for carousel playback. The supported types of episodes include video resource and component.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterProgramRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterProgramResponse
   */
  async describeCasterProgramWithOptions(request: $_model.DescribeCasterProgramRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterProgramResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.episodeId)) {
      query["EpisodeId"] = request.episodeId;
    }

    if (!$dara.isNull(request.episodeType)) {
      query["EpisodeType"] = request.episodeType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterProgram",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterProgramResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterProgramResponse({}));
  }

  /**
   * Queries the information about the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * You can call this operation to query episodes in the episode list for carousel playback. The supported types of episodes include video resource and component.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterProgramRequest
   * @returns DescribeCasterProgramResponse
   */
  async describeCasterProgram(request: $_model.DescribeCasterProgramRequest): Promise<$_model.DescribeCasterProgramResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterProgramWithOptions(request, runtime);
  }

  /**
   * Queries the audio configurations of a scene.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the audio configurations of a scene in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeCasterSceneAudioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterSceneAudioResponse
   */
  async describeCasterSceneAudioWithOptions(request: $_model.DescribeCasterSceneAudioRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterSceneAudioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterSceneAudio",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterSceneAudioResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterSceneAudioResponse({}));
  }

  /**
   * Queries the audio configurations of a scene.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the audio configurations of a scene in the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeCasterSceneAudioRequest
   * @returns DescribeCasterSceneAudioResponse
   */
  async describeCasterSceneAudio(request: $_model.DescribeCasterSceneAudioRequest): Promise<$_model.DescribeCasterSceneAudioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterSceneAudioWithOptions(request, runtime);
  }

  /**
   * Queries the scenes of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the scenes of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeCasterScenesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterScenesResponse
   */
  async describeCasterScenesWithOptions(request: $_model.DescribeCasterScenesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterScenesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterScenes",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterScenesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterScenesResponse({}));
  }

  /**
   * Queries the scenes of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the scenes of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeCasterScenesRequest
   * @returns DescribeCasterScenesResponse
   */
  async describeCasterScenes(request: $_model.DescribeCasterScenesRequest): Promise<$_model.DescribeCasterScenesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterScenesWithOptions(request, runtime);
  }

  /**
   * Queries the streaming URLs of a production studio.
   * 
   * @remarks
   * You must create a production studio before calling this operation to query the information.
   * ## QPS limit
   * A single user can perform a maximum of 15 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - DescribeCasterStreamUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterStreamUrlResponse
   */
  async describeCasterStreamUrlWithOptions(request: $_model.DescribeCasterStreamUrlRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterStreamUrlResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterStreamUrl",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterStreamUrlResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterStreamUrlResponse({}));
  }

  /**
   * Queries the streaming URLs of a production studio.
   * 
   * @remarks
   * You must create a production studio before calling this operation to query the information.
   * ## QPS limit
   * A single user can perform a maximum of 15 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - DescribeCasterStreamUrlRequest
   * @returns DescribeCasterStreamUrlResponse
   */
  async describeCasterStreamUrl(request: $_model.DescribeCasterStreamUrlRequest): Promise<$_model.DescribeCasterStreamUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterStreamUrlWithOptions(request, runtime);
  }

  /**
   * Queries the input sources of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the input sources of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterVideoResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCasterVideoResourcesResponse
   */
  async describeCasterVideoResourcesWithOptions(request: $_model.DescribeCasterVideoResourcesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCasterVideoResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasterVideoResources",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCasterVideoResourcesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCasterVideoResourcesResponse({}));
  }

  /**
   * Queries the input sources of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the input sources of the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCasterVideoResourcesRequest
   * @returns DescribeCasterVideoResourcesResponse
   */
  async describeCasterVideoResources(request: $_model.DescribeCasterVideoResourcesRequest): Promise<$_model.DescribeCasterVideoResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCasterVideoResourcesWithOptions(request, runtime);
  }

  /**
   * Queries the list of production studios.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848012.html) operation to create a production studio and then call this operation to query the production studio list. The status of a production studio can be idle or streaming.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCastersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCastersResponse
   */
  async describeCastersWithOptions(request: $_model.DescribeCastersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCastersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.casterName)) {
      query["CasterName"] = request.casterName;
    }

    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.normType)) {
      query["NormType"] = request.normType;
    }

    if (!$dara.isNull(request.orderByModifyAsc)) {
      query["OrderByModifyAsc"] = request.orderByModifyAsc;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCasters",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCastersResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCastersResponse({}));
  }

  /**
   * Queries the list of production studios.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848012.html) operation to create a production studio and then call this operation to query the production studio list. The status of a production studio can be idle or streaming.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeCastersRequest
   * @returns DescribeCastersResponse
   */
  async describeCasters(request: $_model.DescribeCastersRequest): Promise<$_model.DescribeCastersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCastersWithOptions(request, runtime);
  }

  /**
   * Queries online users in a channel.
   * 
   * @remarks
   * You can call this operation to query online users in a channel. The returned result does not include details about the users.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeChannelParticipantsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeChannelParticipantsResponse
   */
  async describeChannelParticipantsWithOptions(request: $_model.DescribeChannelParticipantsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeChannelParticipantsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.order)) {
      query["Order"] = request.order;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeChannelParticipants",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeChannelParticipantsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeChannelParticipantsResponse({}));
  }

  /**
   * Queries online users in a channel.
   * 
   * @remarks
   * You can call this operation to query online users in a channel. The returned result does not include details about the users.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeChannelParticipantsRequest
   * @returns DescribeChannelParticipantsResponse
   */
  async describeChannelParticipants(request: $_model.DescribeChannelParticipantsRequest): Promise<$_model.DescribeChannelParticipantsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeChannelParticipantsWithOptions(request, runtime);
  }

  /**
   * Queries the details of online users in a channel.
   * 
   * @remarks
   * You can call this operation to query information about online users in a channel, such as the total number of users during live streaming.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeChannelUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeChannelUsersResponse
   */
  async describeChannelUsersWithOptions(request: $_model.DescribeChannelUsersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeChannelUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeChannelUsers",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeChannelUsersResponse>(await this.callApi(params, req, runtime), new $_model.DescribeChannelUsersResponse({}));
  }

  /**
   * Queries the details of online users in a channel.
   * 
   * @remarks
   * You can call this operation to query information about online users in a channel, such as the total number of users during live streaming.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeChannelUsersRequest
   * @returns DescribeChannelUsersResponse
   */
  async describeChannelUsers(request: $_model.DescribeChannelUsersRequest): Promise<$_model.DescribeChannelUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeChannelUsersWithOptions(request, runtime);
  }

  /**
   * Queries the resource usage data of specific domain names in a specified billable region.
   * 
   * @remarks
   * You can query the resource usage data of up to 100 domain names at a time. Separate multiple domain names with commas (,). If you do not specify the DomainName parameter, the resource usage data of all domain names within your Alibaba Cloud account is returned.
   * * The resource usage data includes network traffic that is measured in bytes, bandwidth that is measured in bit/s, and the number of requests.
   * * If you do not specify the Interval parameter, you can query the resource usage data in the last 12 months that spans a period of up to 31 days per call. If you specify a time range of 1 to 3 days in a call, the time interval between the entries that are returned is 1 hour. If you specify a time range of more than 3 days in a call, the time interval between the entries that are returned is 1 day.
   * * The following table describes the maximum time range per query, the time period within which historical data is available, and the data delay if you specify the Interval parameter.
   * |Time granularity|Maximum time range per query|Historical data available|Data delay|
   * |---|---|---|---|
   * |5 minutes|3 days|93 days|15 minutes|
   * |1 hour|31 days|186 days|4 hours|
   * |1 day|90 days|366 days|04:00 on the next day|
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeDomainUsageDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainUsageDataResponse
   */
  async describeDomainUsageDataWithOptions(request: $_model.DescribeDomainUsageDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainUsageDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.area)) {
      query["Area"] = request.area;
    }

    if (!$dara.isNull(request.dataProtocol)) {
      query["DataProtocol"] = request.dataProtocol;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.field)) {
      query["Field"] = request.field;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainUsageData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainUsageDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainUsageDataResponse({}));
  }

  /**
   * Queries the resource usage data of specific domain names in a specified billable region.
   * 
   * @remarks
   * You can query the resource usage data of up to 100 domain names at a time. Separate multiple domain names with commas (,). If you do not specify the DomainName parameter, the resource usage data of all domain names within your Alibaba Cloud account is returned.
   * * The resource usage data includes network traffic that is measured in bytes, bandwidth that is measured in bit/s, and the number of requests.
   * * If you do not specify the Interval parameter, you can query the resource usage data in the last 12 months that spans a period of up to 31 days per call. If you specify a time range of 1 to 3 days in a call, the time interval between the entries that are returned is 1 hour. If you specify a time range of more than 3 days in a call, the time interval between the entries that are returned is 1 day.
   * * The following table describes the maximum time range per query, the time period within which historical data is available, and the data delay if you specify the Interval parameter.
   * |Time granularity|Maximum time range per query|Historical data available|Data delay|
   * |---|---|---|---|
   * |5 minutes|3 days|93 days|15 minutes|
   * |1 hour|31 days|186 days|4 hours|
   * |1 day|90 days|366 days|04:00 on the next day|
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeDomainUsageDataRequest
   * @returns DescribeDomainUsageDataResponse
   */
  async describeDomainUsageData(request: $_model.DescribeDomainUsageDataRequest): Promise<$_model.DescribeDomainUsageDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainUsageDataWithOptions(request, runtime);
  }

  /**
   * Obtains domain integrity.
   * 
   * @remarks
   * You can call this operation to obtain domain integrity.
   * ## [](#qps-)QPS limits
   * You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeDomainWithIntegrityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainWithIntegrityResponse
   */
  async describeDomainWithIntegrityWithOptions(request: $_model.DescribeDomainWithIntegrityRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainWithIntegrityResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainWithIntegrity",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainWithIntegrityResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainWithIntegrityResponse({}));
  }

  /**
   * Obtains domain integrity.
   * 
   * @remarks
   * You can call this operation to obtain domain integrity.
   * ## [](#qps-)QPS limits
   * You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeDomainWithIntegrityRequest
   * @returns DescribeDomainWithIntegrityResponse
   */
  async describeDomainWithIntegrity(request: $_model.DescribeDomainWithIntegrityRequest): Promise<$_model.DescribeDomainWithIntegrityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainWithIntegrityWithOptions(request, runtime);
  }

  /**
   * Queries the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
   * 
   * @remarks
   * You can call this operation to query the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
   * *   The number of online users for an HLS stream is counted based on the universally unique identifiers (UUIDs) of users that are placed after the M3U8 URL.
   * *   You can query the data of up to 100 domain names in a single request. If the DomainName parameter is left empty, the data of all domain names under the account is queried.
   * 
   * @param request - DescribeHlsLiveStreamRealTimeBpsDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHlsLiveStreamRealTimeBpsDataResponse
   */
  async describeHlsLiveStreamRealTimeBpsDataWithOptions(request: $_model.DescribeHlsLiveStreamRealTimeBpsDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHlsLiveStreamRealTimeBpsDataResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHlsLiveStreamRealTimeBpsData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHlsLiveStreamRealTimeBpsDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHlsLiveStreamRealTimeBpsDataResponse({}));
  }

  /**
   * Queries the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
   * 
   * @remarks
   * You can call this operation to query the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
   * *   The number of online users for an HLS stream is counted based on the universally unique identifiers (UUIDs) of users that are placed after the M3U8 URL.
   * *   You can query the data of up to 100 domain names in a single request. If the DomainName parameter is left empty, the data of all domain names under the account is queried.
   * 
   * @param request - DescribeHlsLiveStreamRealTimeBpsDataRequest
   * @returns DescribeHlsLiveStreamRealTimeBpsDataResponse
   */
  async describeHlsLiveStreamRealTimeBpsData(request: $_model.DescribeHlsLiveStreamRealTimeBpsDataRequest): Promise<$_model.DescribeHlsLiveStreamRealTimeBpsDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHlsLiveStreamRealTimeBpsDataWithOptions(request, runtime);
  }

  /**
   * Queries subtitle rules.
   * 
   * @remarks
   * You can call this operation to query subtitle rules. Make sure that the parameter settings meet the requirements.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveAIProduceRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveAIProduceRulesResponse
   */
  async describeLiveAIProduceRulesWithOptions(request: $_model.DescribeLiveAIProduceRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveAIProduceRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.rulesId)) {
      query["RulesId"] = request.rulesId;
    }

    if (!$dara.isNull(request.suffixName)) {
      query["SuffixName"] = request.suffixName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveAIProduceRules",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveAIProduceRulesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveAIProduceRulesResponse({}));
  }

  /**
   * Queries subtitle rules.
   * 
   * @remarks
   * You can call this operation to query subtitle rules. Make sure that the parameter settings meet the requirements.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveAIProduceRulesRequest
   * @returns DescribeLiveAIProduceRulesResponse
   */
  async describeLiveAIProduceRules(request: $_model.DescribeLiveAIProduceRulesRequest): Promise<$_model.DescribeLiveAIProduceRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveAIProduceRulesWithOptions(request, runtime);
  }

  /**
   * Queries the virtual studio templates within your Alibaba Cloud account.
   * 
   * @param request - DescribeLiveAIStudioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveAIStudioResponse
   */
  async describeLiveAIStudioWithOptions(request: $_model.DescribeLiveAIStudioRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveAIStudioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.studioId)) {
      query["StudioId"] = request.studioId;
    }

    if (!$dara.isNull(request.studioName)) {
      query["StudioName"] = request.studioName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveAIStudio",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveAIStudioResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveAIStudioResponse({}));
  }

  /**
   * Queries the virtual studio templates within your Alibaba Cloud account.
   * 
   * @param request - DescribeLiveAIStudioRequest
   * @returns DescribeLiveAIStudioResponse
   */
  async describeLiveAIStudio(request: $_model.DescribeLiveAIStudioRequest): Promise<$_model.DescribeLiveAIStudioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveAIStudioWithOptions(request, runtime);
  }

  /**
   * Queries subtitle templates.
   * 
   * @remarks
   * This interface supports querying the list of subtitle template information with specified pagination parameters. Ensure that the parameter settings meet the requirements when calling.
   * >Notice: The real-time subtitle function is currently in the beta testing phase, and each user can add up to 300 subtitle templates. 
   * ## QPS Limit 
   * The QPS limit for this interface per user is 60 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use it reasonably. For more information, refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveAISubtitleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveAISubtitleResponse
   */
  async describeLiveAISubtitleWithOptions(request: $_model.DescribeLiveAISubtitleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveAISubtitleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.isDefault)) {
      query["IsDefault"] = request.isDefault;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.subtitleId)) {
      query["SubtitleId"] = request.subtitleId;
    }

    if (!$dara.isNull(request.subtitleName)) {
      query["SubtitleName"] = request.subtitleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveAISubtitle",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveAISubtitleResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveAISubtitleResponse({}));
  }

  /**
   * Queries subtitle templates.
   * 
   * @remarks
   * This interface supports querying the list of subtitle template information with specified pagination parameters. Ensure that the parameter settings meet the requirements when calling.
   * >Notice: The real-time subtitle function is currently in the beta testing phase, and each user can add up to 300 subtitle templates. 
   * ## QPS Limit 
   * The QPS limit for this interface per user is 60 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use it reasonably. For more information, refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveAISubtitleRequest
   * @returns DescribeLiveAISubtitleResponse
   */
  async describeLiveAISubtitle(request: $_model.DescribeLiveAISubtitleRequest): Promise<$_model.DescribeLiveAISubtitleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveAISubtitleWithOptions(request, runtime);
  }

  /**
   * Queries audio moderation configurations.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query audio moderation configurations.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveAudioAuditConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveAudioAuditConfigResponse
   */
  async describeLiveAudioAuditConfigWithOptions(request: $_model.DescribeLiveAudioAuditConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveAudioAuditConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveAudioAuditConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveAudioAuditConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveAudioAuditConfigResponse({}));
  }

  /**
   * Queries audio moderation configurations.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query audio moderation configurations.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveAudioAuditConfigRequest
   * @returns DescribeLiveAudioAuditConfigResponse
   */
  async describeLiveAudioAuditConfig(request: $_model.DescribeLiveAudioAuditConfigRequest): Promise<$_model.DescribeLiveAudioAuditConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveAudioAuditConfigWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of callbacks for audio moderation results.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for audio moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveAudioAuditNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveAudioAuditNotifyConfigResponse
   */
  async describeLiveAudioAuditNotifyConfigWithOptions(request: $_model.DescribeLiveAudioAuditNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveAudioAuditNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveAudioAuditNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveAudioAuditNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveAudioAuditNotifyConfigResponse({}));
  }

  /**
   * Queries the configuration of callbacks for audio moderation results.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for audio moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveAudioAuditNotifyConfigRequest
   * @returns DescribeLiveAudioAuditNotifyConfigResponse
   */
  async describeLiveAudioAuditNotifyConfig(request: $_model.DescribeLiveAudioAuditNotifyConfigRequest): Promise<$_model.DescribeLiveAudioAuditNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveAudioAuditNotifyConfigWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeLiveCdnDiagnoseInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveCdnDiagnoseInfoResponse
   */
  async describeLiveCdnDiagnoseInfoWithOptions(request: $_model.DescribeLiveCdnDiagnoseInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveCdnDiagnoseInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.app)) {
      query["app"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["domain"] = request.domain;
    }

    if (!$dara.isNull(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!$dara.isNull(request.intervalType)) {
      query["intervalType"] = request.intervalType;
    }

    if (!$dara.isNull(request.phase)) {
      query["phase"] = request.phase;
    }

    if (!$dara.isNull(request.requestType)) {
      query["requestType"] = request.requestType;
    }

    if (!$dara.isNull(request.startTime)) {
      query["startTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["streamName"] = request.streamName;
    }

    if (!$dara.isNull(request.streamSuffix)) {
      query["streamSuffix"] = request.streamSuffix;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveCdnDiagnoseInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveCdnDiagnoseInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveCdnDiagnoseInfoResponse({}));
  }

  /**
   * @param request - DescribeLiveCdnDiagnoseInfoRequest
   * @returns DescribeLiveCdnDiagnoseInfoResponse
   */
  async describeLiveCdnDiagnoseInfo(request: $_model.DescribeLiveCdnDiagnoseInfoRequest): Promise<$_model.DescribeLiveCdnDiagnoseInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveCdnDiagnoseInfoWithOptions(request, runtime);
  }

  /**
   * Queries the audio and video frame rates and bitrates of a stream in a live center.
   * 
   * @remarks
   * The time granularity for the returned data is 5 seconds. The maximum time range to query is 3 hours. You can query data in the last 30 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveCenterStreamRateDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveCenterStreamRateDataResponse
   */
  async describeLiveCenterStreamRateDataWithOptions(request: $_model.DescribeLiveCenterStreamRateDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveCenterStreamRateDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveCenterStreamRateData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveCenterStreamRateDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveCenterStreamRateDataResponse({}));
  }

  /**
   * Queries the audio and video frame rates and bitrates of a stream in a live center.
   * 
   * @remarks
   * The time granularity for the returned data is 5 seconds. The maximum time range to query is 3 hours. You can query data in the last 30 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveCenterStreamRateDataRequest
   * @returns DescribeLiveCenterStreamRateDataResponse
   */
  async describeLiveCenterStreamRateData(request: $_model.DescribeLiveCenterStreamRateDataRequest): Promise<$_model.DescribeLiveCenterStreamRateDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveCenterStreamRateDataWithOptions(request, runtime);
  }

  /**
   * Queries the information about a configuration of live center stream relay.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveCenterTransferRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveCenterTransferResponse
   */
  async describeLiveCenterTransferWithOptions(request: $_model.DescribeLiveCenterTransferRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveCenterTransferResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.dstUrl)) {
      query["DstUrl"] = request.dstUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveCenterTransfer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveCenterTransferResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveCenterTransferResponse({}));
  }

  /**
   * Queries the information about a configuration of live center stream relay.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveCenterTransferRequest
   * @returns DescribeLiveCenterTransferResponse
   */
  async describeLiveCenterTransfer(request: $_model.DescribeLiveCenterTransferRequest): Promise<$_model.DescribeLiveCenterTransferResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveCenterTransferWithOptions(request, runtime);
  }

  /**
   * Queries the details of a certificate.
   * 
   * @remarks
   * You can obtain the certificate name on the [Certificates](https://help.aliyun.com/document_detail/2584962.html) page of the ApsaraVideo Live console and then call this operation to query the certificate details.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveCertificateDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveCertificateDetailResponse
   */
  async describeLiveCertificateDetailWithOptions(request: $_model.DescribeLiveCertificateDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveCertificateDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.certName)) {
      query["CertName"] = request.certName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveCertificateDetail",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveCertificateDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveCertificateDetailResponse({}));
  }

  /**
   * Queries the details of a certificate.
   * 
   * @remarks
   * You can obtain the certificate name on the [Certificates](https://help.aliyun.com/document_detail/2584962.html) page of the ApsaraVideo Live console and then call this operation to query the certificate details.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveCertificateDetailRequest
   * @returns DescribeLiveCertificateDetailResponse
   */
  async describeLiveCertificateDetail(request: $_model.DescribeLiveCertificateDetailRequest): Promise<$_model.DescribeLiveCertificateDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveCertificateDetailWithOptions(request, runtime);
  }

  /**
   * Queries the certificates of one or more specified domain names or all certificates within your Alibaba Cloud account.
   * 
   * @remarks
   * If you specify one or more domain names in the request, the certificates of the domain names are returned. If you do not specify a domain name in the request, all certificates within your Alibaba Cloud account are returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveCertificateListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveCertificateListResponse
   */
  async describeLiveCertificateListWithOptions(request: $_model.DescribeLiveCertificateListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveCertificateListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveCertificateList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveCertificateListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveCertificateListResponse({}));
  }

  /**
   * Queries the certificates of one or more specified domain names or all certificates within your Alibaba Cloud account.
   * 
   * @remarks
   * If you specify one or more domain names in the request, the certificates of the domain names are returned. If you do not specify a domain name in the request, all certificates within your Alibaba Cloud account are returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveCertificateListRequest
   * @returns DescribeLiveCertificateListResponse
   */
  async describeLiveCertificateList(request: $_model.DescribeLiveCertificateListRequest): Promise<$_model.DescribeLiveCertificateListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveCertificateListWithOptions(request, runtime);
  }

  /**
   * Queries the information about a stream delay configuration.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDelayConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDelayConfigResponse
   */
  async describeLiveDelayConfigWithOptions(request: $_model.DescribeLiveDelayConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDelayConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDelayConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDelayConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDelayConfigResponse({}));
  }

  /**
   * Queries the information about a stream delay configuration.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDelayConfigRequest
   * @returns DescribeLiveDelayConfigResponse
   */
  async describeLiveDelayConfig(request: $_model.DescribeLiveDelayConfigRequest): Promise<$_model.DescribeLiveDelayConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDelayConfigWithOptions(request, runtime);
  }

  /**
   * Queries the stream delay usage data.
   * 
   * @remarks
   *   You can call this operation to query your stream delay usage data. The default time granularity is 1 hour.
   * *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 1 hour.
   * *   You can query the data in the last 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDelayedStreamingUsageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDelayedStreamingUsageResponse
   */
  async describeLiveDelayedStreamingUsageWithOptions(request: $_model.DescribeLiveDelayedStreamingUsageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDelayedStreamingUsageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.splitBy)) {
      query["SplitBy"] = request.splitBy;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDelayedStreamingUsage",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDelayedStreamingUsageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDelayedStreamingUsageResponse({}));
  }

  /**
   * Queries the stream delay usage data.
   * 
   * @remarks
   *   You can call this operation to query your stream delay usage data. The default time granularity is 1 hour.
   * *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 1 hour.
   * *   You can query the data in the last 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDelayedStreamingUsageRequest
   * @returns DescribeLiveDelayedStreamingUsageResponse
   */
  async describeLiveDelayedStreamingUsage(request: $_model.DescribeLiveDelayedStreamingUsageRequest): Promise<$_model.DescribeLiveDelayedStreamingUsageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDelayedStreamingUsageWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of callbacks for video moderation results.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for video moderation results.
   * *   Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - DescribeLiveDetectNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDetectNotifyConfigResponse
   */
  async describeLiveDetectNotifyConfigWithOptions(request: $_model.DescribeLiveDetectNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDetectNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDetectNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDetectNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDetectNotifyConfigResponse({}));
  }

  /**
   * Queries the configuration of callbacks for video moderation results.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for video moderation results.
   * *   Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - DescribeLiveDetectNotifyConfigRequest
   * @returns DescribeLiveDetectNotifyConfigResponse
   */
  async describeLiveDetectNotifyConfig(request: $_model.DescribeLiveDetectNotifyConfigRequest): Promise<$_model.DescribeLiveDetectNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDetectNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Queries the usage data of content moderation.
   * 
   * @remarks
   *   The minimum data granularity is 5 minutes. If you do not specify the `StartTime` parameter, data in the last 24 hours is queried.
   * *   You can query data in the last 90 days.
   * *   You can call this operation to query the bandwidth at each interval.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDetectPornDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDetectPornDataResponse
   */
  async describeLiveDetectPornDataWithOptions(request: $_model.DescribeLiveDetectPornDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDetectPornDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.fee)) {
      query["Fee"] = request.fee;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.scene)) {
      query["Scene"] = request.scene;
    }

    if (!$dara.isNull(request.splitBy)) {
      query["SplitBy"] = request.splitBy;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDetectPornData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDetectPornDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDetectPornDataResponse({}));
  }

  /**
   * Queries the usage data of content moderation.
   * 
   * @remarks
   *   The minimum data granularity is 5 minutes. If you do not specify the `StartTime` parameter, data in the last 24 hours is queried.
   * *   You can query data in the last 90 days.
   * *   You can call this operation to query the bandwidth at each interval.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDetectPornDataRequest
   * @returns DescribeLiveDetectPornDataResponse
   */
  async describeLiveDetectPornData(request: $_model.DescribeLiveDetectPornDataRequest): Promise<$_model.DescribeLiveDetectPornDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDetectPornDataWithOptions(request, runtime);
  }

  /**
   * Queries the bandwidth data for one or more streaming domains.
   * 
   * @remarks
   *   You can specify both the StartTime and EndTime parameters to query the data in the specified period of time. If you do not specify the StartTime and EndTime parameters, the data of the last hour is queried by default.
   * *   If you specify only the StartTime parameter but not the EndTime parameter, the data of the hour following the specified start time is queried.
   * *   If you specify only the EndTime parameter but not the StartTime parameter, the data of the hour preceding the specified end time is queried.
   * *   You can query the data in the last 90 days.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainBpsDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainBpsDataResponse
   */
  async describeLiveDomainBpsDataWithOptions(request: $_model.DescribeLiveDomainBpsDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainBpsDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ispNameEn)) {
      query["IspNameEn"] = request.ispNameEn;
    }

    if (!$dara.isNull(request.locationNameEn)) {
      query["LocationNameEn"] = request.locationNameEn;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainBpsData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainBpsDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainBpsDataResponse({}));
  }

  /**
   * Queries the bandwidth data for one or more streaming domains.
   * 
   * @remarks
   *   You can specify both the StartTime and EndTime parameters to query the data in the specified period of time. If you do not specify the StartTime and EndTime parameters, the data of the last hour is queried by default.
   * *   If you specify only the StartTime parameter but not the EndTime parameter, the data of the hour following the specified start time is queried.
   * *   If you specify only the EndTime parameter but not the StartTime parameter, the data of the hour preceding the specified end time is queried.
   * *   You can query the data in the last 90 days.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainBpsDataRequest
   * @returns DescribeLiveDomainBpsDataResponse
   */
  async describeLiveDomainBpsData(request: $_model.DescribeLiveDomainBpsDataRequest): Promise<$_model.DescribeLiveDomainBpsDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainBpsDataWithOptions(request, runtime);
  }

  /**
   * Queries the bandwidth and traffic data by protocol for one or more domain names.
   * 
   * @remarks
   * You can query data in the last 90 days. You can specify up to 500 domain names. Separate multiple domain names with commas (,). The data of multiple domain names is aggregated and returned. The following section describes the time granularities of the data entries returned depending on the time range specified by the **StartTime** and **EndTime** parameters:
   * *   If the time range is smaller than or equal to 3 days, the time granularity is 5 minutes.
   * *   If the time range is larger than 3 days but smaller than or equal to 31 days, the time granularity is 1 hour.
   * *   If the time range is larger than 31 days, the time granularity is 1 day.
   * >  If neither the **StartTime** nor the **EndTime** parameter is specified, the data of the last 24 hours is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainBpsDataByLayerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainBpsDataByLayerResponse
   */
  async describeLiveDomainBpsDataByLayerWithOptions(request: $_model.DescribeLiveDomainBpsDataByLayerRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainBpsDataByLayerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ispNameEn)) {
      query["IspNameEn"] = request.ispNameEn;
    }

    if (!$dara.isNull(request.layer)) {
      query["Layer"] = request.layer;
    }

    if (!$dara.isNull(request.locationNameEn)) {
      query["LocationNameEn"] = request.locationNameEn;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainBpsDataByLayer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainBpsDataByLayerResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainBpsDataByLayerResponse({}));
  }

  /**
   * Queries the bandwidth and traffic data by protocol for one or more domain names.
   * 
   * @remarks
   * You can query data in the last 90 days. You can specify up to 500 domain names. Separate multiple domain names with commas (,). The data of multiple domain names is aggregated and returned. The following section describes the time granularities of the data entries returned depending on the time range specified by the **StartTime** and **EndTime** parameters:
   * *   If the time range is smaller than or equal to 3 days, the time granularity is 5 minutes.
   * *   If the time range is larger than 3 days but smaller than or equal to 31 days, the time granularity is 1 hour.
   * *   If the time range is larger than 31 days, the time granularity is 1 day.
   * >  If neither the **StartTime** nor the **EndTime** parameter is specified, the data of the last 24 hours is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainBpsDataByLayerRequest
   * @returns DescribeLiveDomainBpsDataByLayerResponse
   */
  async describeLiveDomainBpsDataByLayer(request: $_model.DescribeLiveDomainBpsDataByLayerRequest): Promise<$_model.DescribeLiveDomainBpsDataByLayerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainBpsDataByLayerWithOptions(request, runtime);
  }

  /**
   * Queries the accelerated domain names that match a certificate.
   * 
   * @remarks
   * You can call this operation to query the accelerated domain names that match a certificate.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainByCertificateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainByCertificateResponse
   */
  async describeLiveDomainByCertificateWithOptions(request: $_model.DescribeLiveDomainByCertificateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainByCertificateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.SSLPub)) {
      query["SSLPub"] = request.SSLPub;
    }

    if (!$dara.isNull(request.SSLStatus)) {
      query["SSLStatus"] = request.SSLStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainByCertificate",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainByCertificateResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainByCertificateResponse({}));
  }

  /**
   * Queries the accelerated domain names that match a certificate.
   * 
   * @remarks
   * You can call this operation to query the accelerated domain names that match a certificate.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainByCertificateRequest
   * @returns DescribeLiveDomainByCertificateResponse
   */
  async describeLiveDomainByCertificate(request: $_model.DescribeLiveDomainByCertificateRequest): Promise<$_model.DescribeLiveDomainByCertificateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainByCertificateWithOptions(request, runtime);
  }

  /**
   * Queries certificate information about a domain name.
   * 
   * @remarks
   * Obtain a domain name, and then call this operation to query certificate information about the domain name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainCertificateInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainCertificateInfoResponse
   */
  async describeLiveDomainCertificateInfoWithOptions(request: $_model.DescribeLiveDomainCertificateInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainCertificateInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainCertificateInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainCertificateInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainCertificateInfoResponse({}));
  }

  /**
   * Queries certificate information about a domain name.
   * 
   * @remarks
   * Obtain a domain name, and then call this operation to query certificate information about the domain name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainCertificateInfoRequest
   * @returns DescribeLiveDomainCertificateInfoResponse
   */
  async describeLiveDomainCertificateInfo(request: $_model.DescribeLiveDomainCertificateInfoRequest): Promise<$_model.DescribeLiveDomainCertificateInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainCertificateInfoWithOptions(request, runtime);
  }

  /**
   * Queries one or more configurations of a domain name.
   * 
   * @remarks
   * You can call this operation to query multiple configurations at a time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainConfigsResponse
   */
  async describeLiveDomainConfigsWithOptions(request: $_model.DescribeLiveDomainConfigsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.functionNames)) {
      query["FunctionNames"] = request.functionNames;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainConfigs",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainConfigsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainConfigsResponse({}));
  }

  /**
   * Queries one or more configurations of a domain name.
   * 
   * @remarks
   * You can call this operation to query multiple configurations at a time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainConfigsRequest
   * @returns DescribeLiveDomainConfigsResponse
   */
  async describeLiveDomainConfigs(request: $_model.DescribeLiveDomainConfigsRequest): Promise<$_model.DescribeLiveDomainConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainConfigsWithOptions(request, runtime);
  }

  /**
   * Queries the basic information about a domain name.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to query the basic information about an ingest domain or a streaming domain. If you want to query a newly added domain name, wait a few minutes until the configuration of the domain name is completed in ApsaraVideo Live.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainDetailResponse
   */
  async describeLiveDomainDetailWithOptions(request: $_model.DescribeLiveDomainDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainDetail",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainDetailResponse({}));
  }

  /**
   * Queries the basic information about a domain name.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to query the basic information about an ingest domain or a streaming domain. If you want to query a newly added domain name, wait a few minutes until the configuration of the domain name is completed in ApsaraVideo Live.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainDetailRequest
   * @returns DescribeLiveDomainDetailResponse
   */
  async describeLiveDomainDetail(request: $_model.DescribeLiveDomainDetailRequest): Promise<$_model.DescribeLiveDomainDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainDetailWithOptions(request, runtime);
  }

  /**
   * 直播离线日志查询地址
   * 
   * @param request - DescribeLiveDomainEdgeLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainEdgeLogResponse
   */
  async describeLiveDomainEdgeLogWithOptions(request: $_model.DescribeLiveDomainEdgeLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainEdgeLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainEdgeLog",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainEdgeLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainEdgeLogResponse({}));
  }

  /**
   * 直播离线日志查询地址
   * 
   * @param request - DescribeLiveDomainEdgeLogRequest
   * @returns DescribeLiveDomainEdgeLogResponse
   */
  async describeLiveDomainEdgeLog(request: $_model.DescribeLiveDomainEdgeLogRequest): Promise<$_model.DescribeLiveDomainEdgeLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainEdgeLogWithOptions(request, runtime);
  }

  /**
   * Queries the frame rates and bitrates of all live streams under an ingest domain.
   * 
   * @remarks
   * You can call this operation to query the real-time bitrates and frame rates of live streams, which helps you evaluate the stream ingest quality. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
   * >  Use this operation to replace the deprecated DescribeLiveStreamsFrameRateAndBitRateData operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainFrameRateAndBitRateDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainFrameRateAndBitRateDataResponse
   */
  async describeLiveDomainFrameRateAndBitRateDataWithOptions(request: $_model.DescribeLiveDomainFrameRateAndBitRateDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainFrameRateAndBitRateDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.queryTime)) {
      query["QueryTime"] = request.queryTime;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainFrameRateAndBitRateData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainFrameRateAndBitRateDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainFrameRateAndBitRateDataResponse({}));
  }

  /**
   * Queries the frame rates and bitrates of all live streams under an ingest domain.
   * 
   * @remarks
   * You can call this operation to query the real-time bitrates and frame rates of live streams, which helps you evaluate the stream ingest quality. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
   * >  Use this operation to replace the deprecated DescribeLiveStreamsFrameRateAndBitRateData operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainFrameRateAndBitRateDataRequest
   * @returns DescribeLiveDomainFrameRateAndBitRateDataResponse
   */
  async describeLiveDomainFrameRateAndBitRateData(request: $_model.DescribeLiveDomainFrameRateAndBitRateDataRequest): Promise<$_model.DescribeLiveDomainFrameRateAndBitRateDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainFrameRateAndBitRateDataWithOptions(request, runtime);
  }

  /**
   * Queries the maximum numbers of ingested and transcoded streams for a streaming domain.
   * 
   * @remarks
   * This operation applies only to main streaming domains.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainLimitRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainLimitResponse
   */
  async describeLiveDomainLimitWithOptions(request: $_model.DescribeLiveDomainLimitRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainLimitResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainLimit",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainLimitResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainLimitResponse({}));
  }

  /**
   * Queries the maximum numbers of ingested and transcoded streams for a streaming domain.
   * 
   * @remarks
   * This operation applies only to main streaming domains.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainLimitRequest
   * @returns DescribeLiveDomainLimitResponse
   */
  async describeLiveDomainLimit(request: $_model.DescribeLiveDomainLimitRequest): Promise<$_model.DescribeLiveDomainLimitResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainLimitWithOptions(request, runtime);
  }

  /**
   * Queries the address from which you can download the raw access logs of a domain name.
   * 
   * @remarks
   *   You can call this operation to query the offline logs of a single domain name.
   * *   The StartTime and EndTime parameters are optional. You can specify both the parameters to query logs that are generated within the specified time period.
   * *   If you do not specify the StartTime and EndTime parameters, logs that are generated in the last 24 hours are queried by default.
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainLogResponse
   */
  async describeLiveDomainLogWithOptions(request: $_model.DescribeLiveDomainLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainLog",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainLogResponse({}));
  }

  /**
   * Queries the address from which you can download the raw access logs of a domain name.
   * 
   * @remarks
   *   You can call this operation to query the offline logs of a single domain name.
   * *   The StartTime and EndTime parameters are optional. You can specify both the parameters to query logs that are generated within the specified time period.
   * *   If you do not specify the StartTime and EndTime parameters, logs that are generated in the last 24 hours are queried by default.
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainLogRequest
   * @returns DescribeLiveDomainLogResponse
   */
  async describeLiveDomainLog(request: $_model.DescribeLiveDomainLogRequest): Promise<$_model.DescribeLiveDomainLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainLogWithOptions(request, runtime);
  }

  /**
   * 直播离线日志扩展接口(大客定制)
   * 
   * @param request - DescribeLiveDomainLogExTtlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainLogExTtlResponse
   */
  async describeLiveDomainLogExTtlWithOptions(request: $_model.DescribeLiveDomainLogExTtlRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainLogExTtlResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainLogExTtl",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainLogExTtlResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainLogExTtlResponse({}));
  }

  /**
   * 直播离线日志扩展接口(大客定制)
   * 
   * @param request - DescribeLiveDomainLogExTtlRequest
   * @returns DescribeLiveDomainLogExTtlResponse
   */
  async describeLiveDomainLogExTtl(request: $_model.DescribeLiveDomainLogExTtlRequest): Promise<$_model.DescribeLiveDomainLogExTtlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainLogExTtlWithOptions(request, runtime);
  }

  /**
   * Queries the mappings of an ingest domain, a main streaming domain, or a sub-streaming domain.
   * 
   * @remarks
   * Obtain the ingest domain, main streaming domain, or sub-streaming domain, and then call this operation to query the mappings of the domain name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainMappingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainMappingResponse
   */
  async describeLiveDomainMappingWithOptions(request: $_model.DescribeLiveDomainMappingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainMappingResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainMapping",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainMappingResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainMappingResponse({}));
  }

  /**
   * Queries the mappings of an ingest domain, a main streaming domain, or a sub-streaming domain.
   * 
   * @remarks
   * Obtain the ingest domain, main streaming domain, or sub-streaming domain, and then call this operation to query the mappings of the domain name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainMappingRequest
   * @returns DescribeLiveDomainMappingResponse
   */
  async describeLiveDomainMapping(request: $_model.DescribeLiveDomainMappingRequest): Promise<$_model.DescribeLiveDomainMappingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainMappingWithOptions(request, runtime);
  }

  /**
   * Queries the live monitoring usage data for one or more domain names.
   * 
   * @remarks
   *   You can specify one or more domain names. Separate multiple domain names with commas (,).
   * *   You can query data in the last 90 days.
   * *   The data is queried by hour or day.
   * *   The maximum time range for a query is 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainMonitoringUsageDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainMonitoringUsageDataResponse
   */
  async describeLiveDomainMonitoringUsageDataWithOptions(request: $_model.DescribeLiveDomainMonitoringUsageDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainMonitoringUsageDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.splitBy)) {
      query["SplitBy"] = request.splitBy;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainMonitoringUsageData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainMonitoringUsageDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainMonitoringUsageDataResponse({}));
  }

  /**
   * Queries the live monitoring usage data for one or more domain names.
   * 
   * @remarks
   *   You can specify one or more domain names. Separate multiple domain names with commas (,).
   * *   You can query data in the last 90 days.
   * *   The data is queried by hour or day.
   * *   The maximum time range for a query is 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainMonitoringUsageDataRequest
   * @returns DescribeLiveDomainMonitoringUsageDataResponse
   */
  async describeLiveDomainMonitoringUsageData(request: $_model.DescribeLiveDomainMonitoringUsageDataRequest): Promise<$_model.DescribeLiveDomainMonitoringUsageDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainMonitoringUsageDataWithOptions(request, runtime);
  }

  /**
   * Queries the configuration status of dual-stream disaster recovery.
   * 
   * @param request - DescribeLiveDomainMultiStreamConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainMultiStreamConfigResponse
   */
  async describeLiveDomainMultiStreamConfigWithOptions(request: $_model.DescribeLiveDomainMultiStreamConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainMultiStreamConfigResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainMultiStreamConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainMultiStreamConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainMultiStreamConfigResponse({}));
  }

  /**
   * Queries the configuration status of dual-stream disaster recovery.
   * 
   * @param request - DescribeLiveDomainMultiStreamConfigRequest
   * @returns DescribeLiveDomainMultiStreamConfigResponse
   */
  async describeLiveDomainMultiStreamConfig(request: $_model.DescribeLiveDomainMultiStreamConfigRequest): Promise<$_model.DescribeLiveDomainMultiStreamConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainMultiStreamConfigWithOptions(request, runtime);
  }

  /**
   * Queries the number of online users at a specified point in time for all live streams under a specified domain name.
   * 
   * @remarks
   * You can call this operation to collect statistics on the number of online users for only Flash Video (FLV), Real-Time Streaming (RTS), and Real-Time Messaging Protocol (RTMP) streams, but not HTTP Live Streaming (HLS) streams. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
   * >  Use this operation to replace the deprecated DescribeLiveStreamOnlineUserNum operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 200 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainOnlineUserNumRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainOnlineUserNumResponse
   */
  async describeLiveDomainOnlineUserNumWithOptions(request: $_model.DescribeLiveDomainOnlineUserNumRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainOnlineUserNumResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.queryTime)) {
      query["QueryTime"] = request.queryTime;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainOnlineUserNum",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainOnlineUserNumResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainOnlineUserNumResponse({}));
  }

  /**
   * Queries the number of online users at a specified point in time for all live streams under a specified domain name.
   * 
   * @remarks
   * You can call this operation to collect statistics on the number of online users for only Flash Video (FLV), Real-Time Streaming (RTS), and Real-Time Messaging Protocol (RTMP) streams, but not HTTP Live Streaming (HLS) streams. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
   * >  Use this operation to replace the deprecated DescribeLiveStreamOnlineUserNum operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 200 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainOnlineUserNumRequest
   * @returns DescribeLiveDomainOnlineUserNumResponse
   */
  async describeLiveDomainOnlineUserNum(request: $_model.DescribeLiveDomainOnlineUserNumRequest): Promise<$_model.DescribeLiveDomainOnlineUserNumResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainOnlineUserNumWithOptions(request, runtime);
  }

  /**
   * Queries the HTTP status codes that are returned within a specified period of time under an ingest domain.
   * 
   * @remarks
   *   This operation is used to monitor data. The returned data cannot be used as a reference to calculate resource usage for billing.
   * *   You can query data within the previous 90 days.
   * *   The data is delayed for 3 to 5 minutes.
   * ## [](#qps-)QPS limits
   * You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPublishErrorCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainPublishErrorCodeResponse
   */
  async describeLiveDomainPublishErrorCodeWithOptions(request: $_model.DescribeLiveDomainPublishErrorCodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainPublishErrorCodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainPublishErrorCode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainPublishErrorCodeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainPublishErrorCodeResponse({}));
  }

  /**
   * Queries the HTTP status codes that are returned within a specified period of time under an ingest domain.
   * 
   * @remarks
   *   This operation is used to monitor data. The returned data cannot be used as a reference to calculate resource usage for billing.
   * *   You can query data within the previous 90 days.
   * *   The data is delayed for 3 to 5 minutes.
   * ## [](#qps-)QPS limits
   * You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPublishErrorCodeRequest
   * @returns DescribeLiveDomainPublishErrorCodeResponse
   */
  async describeLiveDomainPublishErrorCode(request: $_model.DescribeLiveDomainPublishErrorCodeRequest): Promise<$_model.DescribeLiveDomainPublishErrorCodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainPublishErrorCodeWithOptions(request, runtime);
  }

  /**
   * Queries the bandwidth data for one or more ingest domains.
   * 
   * @remarks
   *   The bandwidth unit is bit/s.
   * *   You can specify multiple domain names by separating them with commas (,).
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPushBpsDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainPushBpsDataResponse
   */
  async describeLiveDomainPushBpsDataWithOptions(request: $_model.DescribeLiveDomainPushBpsDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainPushBpsDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ispNameEn)) {
      query["IspNameEn"] = request.ispNameEn;
    }

    if (!$dara.isNull(request.locationNameEn)) {
      query["LocationNameEn"] = request.locationNameEn;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainPushBpsData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainPushBpsDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainPushBpsDataResponse({}));
  }

  /**
   * Queries the bandwidth data for one or more ingest domains.
   * 
   * @remarks
   *   The bandwidth unit is bit/s.
   * *   You can specify multiple domain names by separating them with commas (,).
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPushBpsDataRequest
   * @returns DescribeLiveDomainPushBpsDataResponse
   */
  async describeLiveDomainPushBpsData(request: $_model.DescribeLiveDomainPushBpsDataRequest): Promise<$_model.DescribeLiveDomainPushBpsDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainPushBpsDataWithOptions(request, runtime);
  }

  /**
   * Queries the network traffic data for one or more ingest domains.
   * 
   * @remarks
   *   The traffic unit is bytes.
   * *   You can specify multiple domain names by separating them with commas (,).
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPushTrafficDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainPushTrafficDataResponse
   */
  async describeLiveDomainPushTrafficDataWithOptions(request: $_model.DescribeLiveDomainPushTrafficDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainPushTrafficDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ispNameEn)) {
      query["IspNameEn"] = request.ispNameEn;
    }

    if (!$dara.isNull(request.locationNameEn)) {
      query["LocationNameEn"] = request.locationNameEn;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainPushTrafficData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainPushTrafficDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainPushTrafficDataResponse({}));
  }

  /**
   * Queries the network traffic data for one or more ingest domains.
   * 
   * @remarks
   *   The traffic unit is bytes.
   * *   You can specify multiple domain names by separating them with commas (,).
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPushTrafficDataRequest
   * @returns DescribeLiveDomainPushTrafficDataResponse
   */
  async describeLiveDomainPushTrafficData(request: $_model.DescribeLiveDomainPushTrafficDataRequest): Promise<$_model.DescribeLiveDomainPushTrafficDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainPushTrafficDataWithOptions(request, runtime);
  }

  /**
   * Queries the data of page views (PVs) and unique visitors (UVs) of a streaming domain.
   * 
   * @remarks
   *   You can call this operation to query the geographical distribution of viewers, the visitor ranking of a streaming domain, and the number of independent requests from IP addresses under a streaming domain within a specified time period.
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   You can specify only one streaming domain in each request.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPvUvDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainPvUvDataResponse
   */
  async describeLiveDomainPvUvDataWithOptions(request: $_model.DescribeLiveDomainPvUvDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainPvUvDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainPvUvData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainPvUvDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainPvUvDataResponse({}));
  }

  /**
   * Queries the data of page views (PVs) and unique visitors (UVs) of a streaming domain.
   * 
   * @remarks
   *   You can call this operation to query the geographical distribution of viewers, the visitor ranking of a streaming domain, and the number of independent requests from IP addresses under a streaming domain within a specified time period.
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   You can specify only one streaming domain in each request.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainPvUvDataRequest
   * @returns DescribeLiveDomainPvUvDataResponse
   */
  async describeLiveDomainPvUvData(request: $_model.DescribeLiveDomainPvUvDataRequest): Promise<$_model.DescribeLiveDomainPvUvDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainPvUvDataWithOptions(request, runtime);
  }

  /**
   * Queries the bandwidth data that is collected every minute for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to query the bandwidth usage of one or more specified domain names.
   * *   You can query data in the last seven days. The time range that is specified by the StartTime and EndTime parameters cannot exceed 24 hours for a query.
   * *   If you specify neither the StartTime parameter nor the EndTime parameter, the data of the last hour is returned.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainRealTimeBpsDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainRealTimeBpsDataResponse
   */
  async describeLiveDomainRealTimeBpsDataWithOptions(request: $_model.DescribeLiveDomainRealTimeBpsDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainRealTimeBpsDataResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainRealTimeBpsData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainRealTimeBpsDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainRealTimeBpsDataResponse({}));
  }

  /**
   * Queries the bandwidth data that is collected every minute for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to query the bandwidth usage of one or more specified domain names.
   * *   You can query data in the last seven days. The time range that is specified by the StartTime and EndTime parameters cannot exceed 24 hours for a query.
   * *   If you specify neither the StartTime parameter nor the EndTime parameter, the data of the last hour is returned.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainRealTimeBpsDataRequest
   * @returns DescribeLiveDomainRealTimeBpsDataResponse
   */
  async describeLiveDomainRealTimeBpsData(request: $_model.DescribeLiveDomainRealTimeBpsDataRequest): Promise<$_model.DescribeLiveDomainRealTimeBpsDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainRealTimeBpsDataWithOptions(request, runtime);
  }

  /**
   * Queries the proportions of HTTP status codes returned for one or more domain names. Data is collected every minute.
   * 
   * @remarks
   * The following table describes the time granularities supported by this operation.
   * |Time granularity|Maximum time range per query|Historical data available|Data delay|
   * |---|---|---|---|
   * |1 minute|1 hour|7 days|5 minutes|
   * |5 minutes|3 days|93 days|15 minutes|
   * |1 hour|31 days|186 days|Usually 4 hours|
   * |1 day|Unlimited|366 days|After 04:00 on the next day|
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainRealTimeHttpCodeDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainRealTimeHttpCodeDataResponse
   */
  async describeLiveDomainRealTimeHttpCodeDataWithOptions(request: $_model.DescribeLiveDomainRealTimeHttpCodeDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainRealTimeHttpCodeDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ispNameEn)) {
      query["IspNameEn"] = request.ispNameEn;
    }

    if (!$dara.isNull(request.locationNameEn)) {
      query["LocationNameEn"] = request.locationNameEn;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainRealTimeHttpCodeData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainRealTimeHttpCodeDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainRealTimeHttpCodeDataResponse({}));
  }

  /**
   * Queries the proportions of HTTP status codes returned for one or more domain names. Data is collected every minute.
   * 
   * @remarks
   * The following table describes the time granularities supported by this operation.
   * |Time granularity|Maximum time range per query|Historical data available|Data delay|
   * |---|---|---|---|
   * |1 minute|1 hour|7 days|5 minutes|
   * |5 minutes|3 days|93 days|15 minutes|
   * |1 hour|31 days|186 days|Usually 4 hours|
   * |1 day|Unlimited|366 days|After 04:00 on the next day|
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainRealTimeHttpCodeDataRequest
   * @returns DescribeLiveDomainRealTimeHttpCodeDataResponse
   */
  async describeLiveDomainRealTimeHttpCodeData(request: $_model.DescribeLiveDomainRealTimeHttpCodeDataRequest): Promise<$_model.DescribeLiveDomainRealTimeHttpCodeDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainRealTimeHttpCodeDataWithOptions(request, runtime);
  }

  /**
   * Queries the network traffic data that is collected in real time for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to query the real-time traffic in a region for an Internet service provider (ISP) within a specified period of time under one or more streaming domains.
   * *   If you do not specify the StartTime parameter or the EndTime parameter, the data of the last hour is returned. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
   * 
   * @param request - DescribeLiveDomainRealTimeTrafficDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainRealTimeTrafficDataResponse
   */
  async describeLiveDomainRealTimeTrafficDataWithOptions(request: $_model.DescribeLiveDomainRealTimeTrafficDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainRealTimeTrafficDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ispNameEn)) {
      query["IspNameEn"] = request.ispNameEn;
    }

    if (!$dara.isNull(request.locationNameEn)) {
      query["LocationNameEn"] = request.locationNameEn;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainRealTimeTrafficData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainRealTimeTrafficDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainRealTimeTrafficDataResponse({}));
  }

  /**
   * Queries the network traffic data that is collected in real time for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to query the real-time traffic in a region for an Internet service provider (ISP) within a specified period of time under one or more streaming domains.
   * *   If you do not specify the StartTime parameter or the EndTime parameter, the data of the last hour is returned. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
   * 
   * @param request - DescribeLiveDomainRealTimeTrafficDataRequest
   * @returns DescribeLiveDomainRealTimeTrafficDataResponse
   */
  async describeLiveDomainRealTimeTrafficData(request: $_model.DescribeLiveDomainRealTimeTrafficDataRequest): Promise<$_model.DescribeLiveDomainRealTimeTrafficDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainRealTimeTrafficDataWithOptions(request, runtime);
  }

  /**
   * Queries the information about real-time log delivery for a domain name.
   * 
   * @remarks
   * You can call this operation to query the status of real-time log delivery for a domain name. Make sure that the parameter settings meet the requirements.
   * ## QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainRealtimeLogDeliveryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainRealtimeLogDeliveryResponse
   */
  async describeLiveDomainRealtimeLogDeliveryWithOptions(request: $_model.DescribeLiveDomainRealtimeLogDeliveryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainRealtimeLogDeliveryResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainRealtimeLogDelivery",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainRealtimeLogDeliveryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainRealtimeLogDeliveryResponse({}));
  }

  /**
   * Queries the information about real-time log delivery for a domain name.
   * 
   * @remarks
   * You can call this operation to query the status of real-time log delivery for a domain name. Make sure that the parameter settings meet the requirements.
   * ## QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainRealtimeLogDeliveryRequest
   * @returns DescribeLiveDomainRealtimeLogDeliveryResponse
   */
  async describeLiveDomainRealtimeLogDelivery(request: $_model.DescribeLiveDomainRealtimeLogDeliveryRequest): Promise<$_model.DescribeLiveDomainRealtimeLogDeliveryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainRealtimeLogDeliveryWithOptions(request, runtime);
  }

  /**
   * Queries the numbers of live recording channels and container format conversions.
   * 
   * @remarks
   *   You can call this operation to query the number of concurrent recording channels on each day and event tracking data at different time intervals. This way, you can measure the peak number of concurrent recording channels on each day or month.
   * *   The number of time shifting channels is not included in the number of recording channels.
   * *   You can query data by domain name or query data for multiple domain names at a time. If you specify multiple domain names, separate them with commas (,).
   * *   If you set the data granularity to 1 minute, the maximum time range to query is 24 hours. You can query data in the last 60 days.
   * *   If you set the data granularity to 1 hour, the maximum time range to query is 31 days. You can query data in the last 180 days.
   * *   If you set the data granularity to 1 day, the maximum time range to query is 90 days. You can query data in the last 366 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainRecordUsageDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainRecordUsageDataResponse
   */
  async describeLiveDomainRecordUsageDataWithOptions(request: $_model.DescribeLiveDomainRecordUsageDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainRecordUsageDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.splitBy)) {
      query["SplitBy"] = request.splitBy;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainRecordUsageData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainRecordUsageDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainRecordUsageDataResponse({}));
  }

  /**
   * Queries the numbers of live recording channels and container format conversions.
   * 
   * @remarks
   *   You can call this operation to query the number of concurrent recording channels on each day and event tracking data at different time intervals. This way, you can measure the peak number of concurrent recording channels on each day or month.
   * *   The number of time shifting channels is not included in the number of recording channels.
   * *   You can query data by domain name or query data for multiple domain names at a time. If you specify multiple domain names, separate them with commas (,).
   * *   If you set the data granularity to 1 minute, the maximum time range to query is 24 hours. You can query data in the last 60 days.
   * *   If you set the data granularity to 1 hour, the maximum time range to query is 31 days. You can query data in the last 180 days.
   * *   If you set the data granularity to 1 day, the maximum time range to query is 90 days. You can query data in the last 366 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainRecordUsageDataRequest
   * @returns DescribeLiveDomainRecordUsageDataResponse
   */
  async describeLiveDomainRecordUsageData(request: $_model.DescribeLiveDomainRecordUsageDataRequest): Promise<$_model.DescribeLiveDomainRecordUsageDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainRecordUsageDataWithOptions(request, runtime);
  }

  /**
   * Queries the number of snapshots for one or more streaming domains.
   * 
   * @remarks
   *   You can call this operation to collect statistics on the total number of snapshots on a day.
   * *   You can query data in the last 90 days.
   * ## [](#qps-)QPS limit
   * This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
   * 
   * @param request - DescribeLiveDomainSnapshotDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainSnapshotDataResponse
   */
  async describeLiveDomainSnapshotDataWithOptions(request: $_model.DescribeLiveDomainSnapshotDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainSnapshotDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainSnapshotData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainSnapshotDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainSnapshotDataResponse({}));
  }

  /**
   * Queries the number of snapshots for one or more streaming domains.
   * 
   * @remarks
   *   You can call this operation to collect statistics on the total number of snapshots on a day.
   * *   You can query data in the last 90 days.
   * ## [](#qps-)QPS limit
   * This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
   * 
   * @param request - DescribeLiveDomainSnapshotDataRequest
   * @returns DescribeLiveDomainSnapshotDataResponse
   */
  async describeLiveDomainSnapshotData(request: $_model.DescribeLiveDomainSnapshotDataRequest): Promise<$_model.DescribeLiveDomainSnapshotDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainSnapshotDataWithOptions(request, runtime);
  }

  /**
   * Queries the feature configurations of an accelerated domain name in the canary release environment.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to query the feature configurations of an accelerated domain name in the canary release environment.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainStagingConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainStagingConfigResponse
   */
  async describeLiveDomainStagingConfigWithOptions(request: $_model.DescribeLiveDomainStagingConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainStagingConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.functionNames)) {
      query["FunctionNames"] = request.functionNames;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainStagingConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainStagingConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainStagingConfigResponse({}));
  }

  /**
   * Queries the feature configurations of an accelerated domain name in the canary release environment.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to query the feature configurations of an accelerated domain name in the canary release environment.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDomainStagingConfigRequest
   * @returns DescribeLiveDomainStagingConfigResponse
   */
  async describeLiveDomainStagingConfig(request: $_model.DescribeLiveDomainStagingConfigRequest): Promise<$_model.DescribeLiveDomainStagingConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainStagingConfigWithOptions(request, runtime);
  }

  /**
   * Queries the transcoding length for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to collect the transcoding usage data at each time interval.
   * *   You can specify multiple domain names by separating them with commas (,).
   * *   You can query data in the last 90 days.
   * *   The time granularity of data is 1 hour or 1 day.
   * *   For information about the billing of different transcoding types and transcoding resolutions, see the description about billing of different transcoding specifications in transcoding bills in the [Billing of live stream transcoding](https://help.aliyun.com/document_detail/90424.html) section of the ApsaraVideo Live pricing page.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainStreamTranscodeDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainStreamTranscodeDataResponse
   */
  async describeLiveDomainStreamTranscodeDataWithOptions(request: $_model.DescribeLiveDomainStreamTranscodeDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainStreamTranscodeDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.precision)) {
      query["Precision"] = request.precision;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.split)) {
      query["Split"] = request.split;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainStreamTranscodeData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainStreamTranscodeDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainStreamTranscodeDataResponse({}));
  }

  /**
   * Queries the transcoding length for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to collect the transcoding usage data at each time interval.
   * *   You can specify multiple domain names by separating them with commas (,).
   * *   You can query data in the last 90 days.
   * *   The time granularity of data is 1 hour or 1 day.
   * *   For information about the billing of different transcoding types and transcoding resolutions, see the description about billing of different transcoding specifications in transcoding bills in the [Billing of live stream transcoding](https://help.aliyun.com/document_detail/90424.html) section of the ApsaraVideo Live pricing page.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainStreamTranscodeDataRequest
   * @returns DescribeLiveDomainStreamTranscodeDataResponse
   */
  async describeLiveDomainStreamTranscodeData(request: $_model.DescribeLiveDomainStreamTranscodeDataRequest): Promise<$_model.DescribeLiveDomainStreamTranscodeDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainStreamTranscodeDataWithOptions(request, runtime);
  }

  /**
   * Queries the resource usage data of time shifting for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to query the time shifting usage data at each time interval.
   * *   You can query data in the last 90 days.
   * *   The time interval is 1 hour.
   * *   The maximum time range for a query is 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainTimeShiftDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainTimeShiftDataResponse
   */
  async describeLiveDomainTimeShiftDataWithOptions(request: $_model.DescribeLiveDomainTimeShiftDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainTimeShiftDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainTimeShiftData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainTimeShiftDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainTimeShiftDataResponse({}));
  }

  /**
   * Queries the resource usage data of time shifting for one or more domain names.
   * 
   * @remarks
   *   You can call this operation to query the time shifting usage data at each time interval.
   * *   You can query data in the last 90 days.
   * *   The time interval is 1 hour.
   * *   The maximum time range for a query is 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainTimeShiftDataRequest
   * @returns DescribeLiveDomainTimeShiftDataResponse
   */
  async describeLiveDomainTimeShiftData(request: $_model.DescribeLiveDomainTimeShiftDataRequest): Promise<$_model.DescribeLiveDomainTimeShiftDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainTimeShiftDataWithOptions(request, runtime);
  }

  /**
   * Queries the network traffic data for one or more domain names.
   * 
   * @remarks
   *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is returned.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainTrafficDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainTrafficDataResponse
   */
  async describeLiveDomainTrafficDataWithOptions(request: $_model.DescribeLiveDomainTrafficDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainTrafficDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ispNameEn)) {
      query["IspNameEn"] = request.ispNameEn;
    }

    if (!$dara.isNull(request.locationNameEn)) {
      query["LocationNameEn"] = request.locationNameEn;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainTrafficData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainTrafficDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainTrafficDataResponse({}));
  }

  /**
   * Queries the network traffic data for one or more domain names.
   * 
   * @remarks
   *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is returned.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveDomainTrafficDataRequest
   * @returns DescribeLiveDomainTrafficDataResponse
   */
  async describeLiveDomainTrafficData(request: $_model.DescribeLiveDomainTrafficDataRequest): Promise<$_model.DescribeLiveDomainTrafficDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainTrafficDataWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeLiveDomainTranscodeParamsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDomainTranscodeParamsResponse
   */
  async describeLiveDomainTranscodeParamsWithOptions(request: $_model.DescribeLiveDomainTranscodeParamsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDomainTranscodeParamsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.app)) {
      query["app"] = request.app;
    }

    if (!$dara.isNull(request.pushdomain)) {
      query["pushdomain"] = request.pushdomain;
    }

    if (!$dara.isNull(request.templateName)) {
      query["template_name"] = request.templateName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDomainTranscodeParams",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDomainTranscodeParamsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDomainTranscodeParamsResponse({}));
  }

  /**
   * @param request - DescribeLiveDomainTranscodeParamsRequest
   * @returns DescribeLiveDomainTranscodeParamsResponse
   */
  async describeLiveDomainTranscodeParams(request: $_model.DescribeLiveDomainTranscodeParamsRequest): Promise<$_model.DescribeLiveDomainTranscodeParamsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDomainTranscodeParamsWithOptions(request, runtime);
  }

  /**
   * @remarks
   * ### [](#)Usage notes
   * *   You can query data in the previous 90 days.
   * *   The maximum time range to query is 31 days.
   * ### [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDrmUsageDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveDrmUsageDataResponse
   */
  async describeLiveDrmUsageDataWithOptions(request: $_model.DescribeLiveDrmUsageDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveDrmUsageDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.splitBy)) {
      query["SplitBy"] = request.splitBy;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveDrmUsageData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveDrmUsageDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveDrmUsageDataResponse({}));
  }

  /**
   * @remarks
   * ### [](#)Usage notes
   * *   You can query data in the previous 90 days.
   * *   The maximum time range to query is 31 days.
   * ### [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveDrmUsageDataRequest
   * @returns DescribeLiveDrmUsageDataResponse
   */
  async describeLiveDrmUsageData(request: $_model.DescribeLiveDrmUsageDataRequest): Promise<$_model.DescribeLiveDrmUsageDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveDrmUsageDataWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of edge stream relay.
   * 
   * @remarks
   * Obtain the ingest domain, and then call this operation to query the configuration of edge stream relay.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveEdgeTransferRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveEdgeTransferResponse
   */
  async describeLiveEdgeTransferWithOptions(request: $_model.DescribeLiveEdgeTransferRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveEdgeTransferResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveEdgeTransfer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveEdgeTransferResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveEdgeTransferResponse({}));
  }

  /**
   * Queries the configuration of edge stream relay.
   * 
   * @remarks
   * Obtain the ingest domain, and then call this operation to query the configuration of edge stream relay.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveEdgeTransferRequest
   * @returns DescribeLiveEdgeTransferResponse
   */
  async describeLiveEdgeTransfer(request: $_model.DescribeLiveEdgeTransferRequest): Promise<$_model.DescribeLiveEdgeTransferResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveEdgeTransferWithOptions(request, runtime);
  }

  /**
   * Queries the co-streaming usage data.
   * 
   * @remarks
   *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 5 minutes.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveGrtnDurationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveGrtnDurationResponse
   */
  async describeLiveGrtnDurationWithOptions(request: $_model.DescribeLiveGrtnDurationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveGrtnDurationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.area)) {
      query["Area"] = request.area;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveGrtnDuration",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveGrtnDurationResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveGrtnDurationResponse({}));
  }

  /**
   * Queries the co-streaming usage data.
   * 
   * @remarks
   *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 5 minutes.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveGrtnDurationRequest
   * @returns DescribeLiveGrtnDurationResponse
   */
  async describeLiveGrtnDuration(request: $_model.DescribeLiveGrtnDurationRequest): Promise<$_model.DescribeLiveGrtnDurationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveGrtnDurationWithOptions(request, runtime);
  }

  /**
   * Queries the information about all certificates that you have configured.
   * 
   * @remarks
   * You can call this operation to query the information about all certificates that you have configured.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveHttpsDomainListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveHttpsDomainListResponse
   */
  async describeLiveHttpsDomainListWithOptions(request: $_model.DescribeLiveHttpsDomainListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveHttpsDomainListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.keyword)) {
      query["Keyword"] = request.keyword;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveHttpsDomainList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveHttpsDomainListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveHttpsDomainListResponse({}));
  }

  /**
   * Queries the information about all certificates that you have configured.
   * 
   * @remarks
   * You can call this operation to query the information about all certificates that you have configured.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveHttpsDomainListRequest
   * @returns DescribeLiveHttpsDomainListResponse
   */
  async describeLiveHttpsDomainList(request: $_model.DescribeLiveHttpsDomainListRequest): Promise<$_model.DescribeLiveHttpsDomainListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveHttpsDomainListWithOptions(request, runtime);
  }

  /**
   * Queries the metric data of ApsaraVideo Real-time Communication (ARTC).
   * 
   * @remarks
   *   You can query data in the last 30 days. The time range for a query cannot exceed 24 hours.
   * *   The time granularity for a query is 5 minutes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveInteractionMetricDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveInteractionMetricDataResponse
   */
  async describeLiveInteractionMetricDataWithOptions(request: $_model.DescribeLiveInteractionMetricDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveInteractionMetricDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.beginTs)) {
      query["BeginTs"] = request.beginTs;
    }

    if (!$dara.isNull(request.endTs)) {
      query["EndTs"] = request.endTs;
    }

    if (!$dara.isNull(request.metricType)) {
      query["MetricType"] = request.metricType;
    }

    if (!$dara.isNull(request.os)) {
      query["Os"] = request.os;
    }

    if (!$dara.isNull(request.terminalType)) {
      query["TerminalType"] = request.terminalType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveInteractionMetricData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveInteractionMetricDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveInteractionMetricDataResponse({}));
  }

  /**
   * Queries the metric data of ApsaraVideo Real-time Communication (ARTC).
   * 
   * @remarks
   *   You can query data in the last 30 days. The time range for a query cannot exceed 24 hours.
   * *   The time granularity for a query is 5 minutes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveInteractionMetricDataRequest
   * @returns DescribeLiveInteractionMetricDataResponse
   */
  async describeLiveInteractionMetricData(request: $_model.DescribeLiveInteractionMetricDataRequest): Promise<$_model.DescribeLiveInteractionMetricDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveInteractionMetricDataWithOptions(request, runtime);
  }

  /**
   * Checks whether a specified IP address belongs to an Alibaba Cloud point of presence (POP).
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveIpInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveIpInfoResponse
   */
  async describeLiveIpInfoWithOptions(request: $_model.DescribeLiveIpInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveIpInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.IP)) {
      query["IP"] = request.IP;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveIpInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveIpInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveIpInfoResponse({}));
  }

  /**
   * Checks whether a specified IP address belongs to an Alibaba Cloud point of presence (POP).
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveIpInfoRequest
   * @returns DescribeLiveIpInfoResponse
   */
  async describeLiveIpInfo(request: $_model.DescribeLiveIpInfoRequest): Promise<$_model.DescribeLiveIpInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveIpInfoWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of triggered stream pulling for a streaming domain.
   * 
   * @remarks
   * ##
   * This operation is applicable to regular stream pulling. You can call this operation to query the configurations of regular stream pulling for a domain name.
   * ## QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveLazyPullStreamConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveLazyPullStreamConfigResponse
   */
  async describeLiveLazyPullStreamConfigWithOptions(request: $_model.DescribeLiveLazyPullStreamConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveLazyPullStreamConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveLazyPullStreamConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveLazyPullStreamConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveLazyPullStreamConfigResponse({}));
  }

  /**
   * Queries the configurations of triggered stream pulling for a streaming domain.
   * 
   * @remarks
   * ##
   * This operation is applicable to regular stream pulling. You can call this operation to query the configurations of regular stream pulling for a domain name.
   * ## QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveLazyPullStreamConfigRequest
   * @returns DescribeLiveLazyPullStreamConfigResponse
   */
  async describeLiveLazyPullStreamConfig(request: $_model.DescribeLiveLazyPullStreamConfigRequest): Promise<$_model.DescribeLiveLazyPullStreamConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveLazyPullStreamConfigWithOptions(request, runtime);
  }

  /**
   * Query Interactive Message App
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveMessageAppResponse
   */
  async describeLiveMessageAppWithOptions(request: $_model.DescribeLiveMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveMessageAppResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveMessageAppResponse({}));
  }

  /**
   * Query Interactive Message App
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveMessageAppRequest
   * @returns DescribeLiveMessageAppResponse
   */
  async describeLiveMessageApp(request: $_model.DescribeLiveMessageAppRequest): Promise<$_model.DescribeLiveMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveMessageAppWithOptions(request, runtime);
  }

  /**
   * Queries the information about an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveMessageGroupResponse
   */
  async describeLiveMessageGroupWithOptions(request: $_model.DescribeLiveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveMessageGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveMessageGroupResponse({}));
  }

  /**
   * Queries the information about an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveMessageGroupRequest
   * @returns DescribeLiveMessageGroupResponse
   */
  async describeLiveMessageGroup(request: $_model.DescribeLiveMessageGroupRequest): Promise<$_model.DescribeLiveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Queries the mute status of users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveMessageGroupBandRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveMessageGroupBandResponse
   */
  async describeLiveMessageGroupBandWithOptions(request: $_model.DescribeLiveMessageGroupBandRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveMessageGroupBandResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveMessageGroupBand",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveMessageGroupBandResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveMessageGroupBandResponse({}));
  }

  /**
   * Queries the mute status of users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveMessageGroupBandRequest
   * @returns DescribeLiveMessageGroupBandResponse
   */
  async describeLiveMessageGroupBand(request: $_model.DescribeLiveMessageGroupBandRequest): Promise<$_model.DescribeLiveMessageGroupBandResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveMessageGroupBandWithOptions(request, runtime);
  }

  /**
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query live stream encapsulation configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePackageConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePackageConfigResponse
   */
  async describeLivePackageConfigWithOptions(request: $_model.DescribeLivePackageConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePackageConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.order)) {
      query["Order"] = request.order;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePackageConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePackageConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePackageConfigResponse({}));
  }

  /**
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query live stream encapsulation configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePackageConfigRequest
   * @returns DescribeLivePackageConfigResponse
   */
  async describeLivePackageConfig(request: $_model.DescribeLivePackageConfigRequest): Promise<$_model.DescribeLivePackageConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePackageConfigWithOptions(request, runtime);
  }

  /**
   * Queries available access points where acceleration circuits start.
   * 
   * @remarks
   * Before you call the CreateLivePrivateLine operation, you can call this operation to query available acceleration regions, which are access points where acceleration circuits start.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePrivateLineAreasRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePrivateLineAreasResponse
   */
  async describeLivePrivateLineAreasWithOptions(request: $_model.DescribeLivePrivateLineAreasRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePrivateLineAreasResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePrivateLineAreas",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePrivateLineAreasResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePrivateLineAreasResponse({}));
  }

  /**
   * Queries available access points where acceleration circuits start.
   * 
   * @remarks
   * Before you call the CreateLivePrivateLine operation, you can call this operation to query available acceleration regions, which are access points where acceleration circuits start.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePrivateLineAreasRequest
   * @returns DescribeLivePrivateLineAreasResponse
   */
  async describeLivePrivateLineAreas(request: $_model.DescribeLivePrivateLineAreasRequest): Promise<$_model.DescribeLivePrivateLineAreasResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePrivateLineAreasWithOptions(request, runtime);
  }

  /**
   * Queries the binding information between Global Accelerator (GA) instances and acceleration circuits.
   * 
   * @remarks
   * If you set the IsGaInstance parameter to yes, the status of GA instances is queried. If you set the IsGaInstance parameter to no, the binding information between GA instances and acceleration circuits is queried.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePrivateLineAvailGARequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePrivateLineAvailGAResponse
   */
  async describeLivePrivateLineAvailGAWithOptions(request: $_model.DescribeLivePrivateLineAvailGARequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePrivateLineAvailGAResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accelerationArea)) {
      query["AccelerationArea"] = request.accelerationArea;
    }

    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.isGaInstance)) {
      query["IsGaInstance"] = request.isGaInstance;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.videoCenter)) {
      query["VideoCenter"] = request.videoCenter;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePrivateLineAvailGA",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePrivateLineAvailGAResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePrivateLineAvailGAResponse({}));
  }

  /**
   * Queries the binding information between Global Accelerator (GA) instances and acceleration circuits.
   * 
   * @remarks
   * If you set the IsGaInstance parameter to yes, the status of GA instances is queried. If you set the IsGaInstance parameter to no, the binding information between GA instances and acceleration circuits is queried.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePrivateLineAvailGARequest
   * @returns DescribeLivePrivateLineAvailGAResponse
   */
  async describeLivePrivateLineAvailGA(request: $_model.DescribeLivePrivateLineAvailGARequest): Promise<$_model.DescribeLivePrivateLineAvailGAResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePrivateLineAvailGAWithOptions(request, runtime);
  }

  /**
   * Queries the production studio usage data.
   * 
   * @remarks
   * The minimum time granularity for a query is 1 hour. The maximum time range for a query is 31 days. You can query the production studio usage data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveProducerUsageDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveProducerUsageDataResponse
   */
  async describeLiveProducerUsageDataWithOptions(request: $_model.DescribeLiveProducerUsageDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveProducerUsageDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.instance)) {
      query["Instance"] = request.instance;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.splitBy)) {
      query["SplitBy"] = request.splitBy;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.app)) {
      query["app"] = request.app;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveProducerUsageData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveProducerUsageDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveProducerUsageDataResponse({}));
  }

  /**
   * Queries the production studio usage data.
   * 
   * @remarks
   * The minimum time granularity for a query is 1 hour. The maximum time range for a query is 31 days. You can query the production studio usage data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveProducerUsageDataRequest
   * @returns DescribeLiveProducerUsageDataResponse
   */
  async describeLiveProducerUsageData(request: $_model.DescribeLiveProducerUsageDataRequest): Promise<$_model.DescribeLiveProducerUsageDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveProducerUsageDataWithOptions(request, runtime);
  }

  /**
   * Queries the stream pulling configurations for a domain name.
   * 
   * @remarks
   * ##
   * This operation is applicable to regular stream pulling. You can call this operation to query the regular stream pulling configurations for a domain name.
   * ## QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLivePullStreamConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePullStreamConfigResponse
   */
  async describeLivePullStreamConfigWithOptions(request: $_model.DescribeLivePullStreamConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePullStreamConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePullStreamConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePullStreamConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePullStreamConfigResponse({}));
  }

  /**
   * Queries the stream pulling configurations for a domain name.
   * 
   * @remarks
   * ##
   * This operation is applicable to regular stream pulling. You can call this operation to query the regular stream pulling configurations for a domain name.
   * ## QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLivePullStreamConfigRequest
   * @returns DescribeLivePullStreamConfigResponse
   */
  async describeLivePullStreamConfig(request: $_model.DescribeLivePullStreamConfigRequest): Promise<$_model.DescribeLivePullStreamConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePullStreamConfigWithOptions(request, runtime);
  }

  /**
   * Queries pulled-stream relay tasks.
   * 
   * @remarks
   *   You can call this operation to query the information about a pulled-stream relay task.
   * *   This operation allows you to query the configurations and status of a task with a specified ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePullToPushRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePullToPushResponse
   */
  async describeLivePullToPushWithOptions(request: $_model.DescribeLivePullToPushRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePullToPushResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePullToPush",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePullToPushResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePullToPushResponse({}));
  }

  /**
   * Queries pulled-stream relay tasks.
   * 
   * @remarks
   *   You can call this operation to query the information about a pulled-stream relay task.
   * *   This operation allows you to query the configurations and status of a task with a specified ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePullToPushRequest
   * @returns DescribeLivePullToPushResponse
   */
  async describeLivePullToPush(request: $_model.DescribeLivePullToPushRequest): Promise<$_model.DescribeLivePullToPushResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePullToPushWithOptions(request, runtime);
  }

  /**
   * Queries pulled-stream relay tasks. Fuzzy match is supported.
   * 
   * @remarks
   *   You can call this operation to query pulled-stream relay tasks.
   * *   You can query tasks by page. Fuzzy search is supported based on task IDs, task names, and destination URLs.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePullToPushListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePullToPushListResponse
   */
  async describeLivePullToPushListWithOptions(request: $_model.DescribeLivePullToPushListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePullToPushListResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePullToPushList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePullToPushListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePullToPushListResponse({}));
  }

  /**
   * Queries pulled-stream relay tasks. Fuzzy match is supported.
   * 
   * @remarks
   *   You can call this operation to query pulled-stream relay tasks.
   * *   You can query tasks by page. Fuzzy search is supported based on task IDs, task names, and destination URLs.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePullToPushListRequest
   * @returns DescribeLivePullToPushListResponse
   */
  async describeLivePullToPushList(request: $_model.DescribeLivePullToPushListRequest): Promise<$_model.DescribeLivePullToPushListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePullToPushListWithOptions(request, runtime);
  }

  /**
   * Queries the stream relay logs, which are available for download.
   * 
   * @remarks
   *   The time granularity of the data is 1 hour.
   * *   You can query data in the last 31 days.
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePushProxyLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePushProxyLogResponse
   */
  async describeLivePushProxyLogWithOptions(request: $_model.DescribeLivePushProxyLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePushProxyLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePushProxyLog",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePushProxyLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePushProxyLogResponse({}));
  }

  /**
   * Queries the stream relay logs, which are available for download.
   * 
   * @remarks
   *   The time granularity of the data is 1 hour.
   * *   You can query data in the last 31 days.
   * *   If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePushProxyLogRequest
   * @returns DescribeLivePushProxyLogResponse
   */
  async describeLivePushProxyLog(request: $_model.DescribeLivePushProxyLogRequest): Promise<$_model.DescribeLivePushProxyLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePushProxyLogWithOptions(request, runtime);
  }

  /**
   * Queries the usage data of live center stream relay.
   * 
   * @remarks
   *   You can call this operation to query the usage data of live center stream relay.
   * *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 1 day.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePushProxyUsageDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLivePushProxyUsageDataResponse
   */
  async describeLivePushProxyUsageDataWithOptions(request: $_model.DescribeLivePushProxyUsageDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLivePushProxyUsageDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.splitBy)) {
      query["SplitBy"] = request.splitBy;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLivePushProxyUsageData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLivePushProxyUsageDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLivePushProxyUsageDataResponse({}));
  }

  /**
   * Queries the usage data of live center stream relay.
   * 
   * @remarks
   *   You can call this operation to query the usage data of live center stream relay.
   * *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 1 day.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLivePushProxyUsageDataRequest
   * @returns DescribeLivePushProxyUsageDataResponse
   */
  async describeLivePushProxyUsageData(request: $_model.DescribeLivePushProxyUsageDataRequest): Promise<$_model.DescribeLivePushProxyUsageDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLivePushProxyUsageDataWithOptions(request, runtime);
  }

  /**
   * Queries the number of real-time log deliveries.
   * 
   * @remarks
   *   You can collect statistics on the number of real-time log deliveries. The number of failed real-time log deliveries and the number of successful real-time log deliveries are counted.
   * *   You can query the data by UID.
   * *   You are charged for both successful and failed real-time log deliveries.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRealtimeDeliveryAccRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveRealtimeDeliveryAccResponse
   */
  async describeLiveRealtimeDeliveryAccWithOptions(request: $_model.DescribeLiveRealtimeDeliveryAccRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveRealtimeDeliveryAccResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.logStore)) {
      query["LogStore"] = request.logStore;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.project)) {
      query["Project"] = request.project;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveRealtimeDeliveryAcc",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveRealtimeDeliveryAccResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveRealtimeDeliveryAccResponse({}));
  }

  /**
   * Queries the number of real-time log deliveries.
   * 
   * @remarks
   *   You can collect statistics on the number of real-time log deliveries. The number of failed real-time log deliveries and the number of successful real-time log deliveries are counted.
   * *   You can query the data by UID.
   * *   You are charged for both successful and failed real-time log deliveries.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRealtimeDeliveryAccRequest
   * @returns DescribeLiveRealtimeDeliveryAccResponse
   */
  async describeLiveRealtimeDeliveryAcc(request: $_model.DescribeLiveRealtimeDeliveryAccRequest): Promise<$_model.DescribeLiveRealtimeDeliveryAccResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveRealtimeDeliveryAccWithOptions(request, runtime);
  }

  /**
   * Queries the status of authorization for real-time log delivery.
   * 
   * @remarks
   * You can call this operation to query the status of authorization for real-time log delivery.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveRealtimeLogAuthorizedRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveRealtimeLogAuthorizedResponse
   */
  async describeLiveRealtimeLogAuthorizedWithOptions(request: $_model.DescribeLiveRealtimeLogAuthorizedRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveRealtimeLogAuthorizedResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveRealtimeLogAuthorized",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveRealtimeLogAuthorizedResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveRealtimeLogAuthorizedResponse({}));
  }

  /**
   * Queries the status of authorization for real-time log delivery.
   * 
   * @remarks
   * You can call this operation to query the status of authorization for real-time log delivery.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveRealtimeLogAuthorizedRequest
   * @returns DescribeLiveRealtimeLogAuthorizedResponse
   */
  async describeLiveRealtimeLogAuthorized(request: $_model.DescribeLiveRealtimeLogAuthorizedRequest): Promise<$_model.DescribeLiveRealtimeLogAuthorizedResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveRealtimeLogAuthorizedWithOptions(request, runtime);
  }

  /**
   * Queries all recording configurations of an application for a streaming domain.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the recording configurations of all applications under the main streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRecordConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveRecordConfigResponse
   */
  async describeLiveRecordConfigWithOptions(request: $_model.DescribeLiveRecordConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveRecordConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.order)) {
      query["Order"] = request.order;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveRecordConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveRecordConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveRecordConfigResponse({}));
  }

  /**
   * Queries all recording configurations of an application for a streaming domain.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the recording configurations of all applications under the main streaming domain.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRecordConfigRequest
   * @returns DescribeLiveRecordConfigResponse
   */
  async describeLiveRecordConfig(request: $_model.DescribeLiveRecordConfigRequest): Promise<$_model.DescribeLiveRecordConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveRecordConfigWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of callbacks for live stream recording under a domain name.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for live stream recording under the domain name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRecordNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveRecordNotifyConfigResponse
   */
  async describeLiveRecordNotifyConfigWithOptions(request: $_model.DescribeLiveRecordNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveRecordNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveRecordNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveRecordNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveRecordNotifyConfigResponse({}));
  }

  /**
   * Queries the configuration of callbacks for live stream recording under a domain name.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for live stream recording under the domain name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRecordNotifyConfigRequest
   * @returns DescribeLiveRecordNotifyConfigResponse
   */
  async describeLiveRecordNotifyConfig(request: $_model.DescribeLiveRecordNotifyConfigRequest): Promise<$_model.DescribeLiveRecordNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveRecordNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Queries the recording callback records that are stored in Object Storage Service (OSS).
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRecordNotifyRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveRecordNotifyRecordsResponse
   */
  async describeLiveRecordNotifyRecordsWithOptions(request: $_model.DescribeLiveRecordNotifyRecordsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveRecordNotifyRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveRecordNotifyRecords",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveRecordNotifyRecordsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveRecordNotifyRecordsResponse({}));
  }

  /**
   * Queries the recording callback records that are stored in Object Storage Service (OSS).
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveRecordNotifyRecordsRequest
   * @returns DescribeLiveRecordNotifyRecordsResponse
   */
  async describeLiveRecordNotifyRecords(request: $_model.DescribeLiveRecordNotifyRecordsRequest): Promise<$_model.DescribeLiveRecordNotifyRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveRecordNotifyRecordsWithOptions(request, runtime);
  }

  /**
   * Queries Live-to-VOD configurations.
   * 
   * @remarks
   * ## [](#)Usage notes
   * Obtain the streaming domain, and then call this operation to query the Live-to-VOD configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveRecordVodConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveRecordVodConfigsResponse
   */
  async describeLiveRecordVodConfigsWithOptions(request: $_model.DescribeLiveRecordVodConfigsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveRecordVodConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveRecordVodConfigs",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveRecordVodConfigsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveRecordVodConfigsResponse({}));
  }

  /**
   * Queries Live-to-VOD configurations.
   * 
   * @remarks
   * ## [](#)Usage notes
   * Obtain the streaming domain, and then call this operation to query the Live-to-VOD configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveRecordVodConfigsRequest
   * @returns DescribeLiveRecordVodConfigsResponse
   */
  async describeLiveRecordVodConfigs(request: $_model.DescribeLiveRecordVodConfigsRequest): Promise<$_model.DescribeLiveRecordVodConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveRecordVodConfigsWithOptions(request, runtime);
  }

  /**
   * Queries the time shifting configurations under a domain name.
   * 
   * @remarks
   * This operation is applicable to the streaming domains.
   * ## QPS limit
   * A single user can perform a maximum of 10 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - DescribeLiveShiftConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveShiftConfigsResponse
   */
  async describeLiveShiftConfigsWithOptions(request: $_model.DescribeLiveShiftConfigsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveShiftConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveShiftConfigs",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveShiftConfigsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveShiftConfigsResponse({}));
  }

  /**
   * Queries the time shifting configurations under a domain name.
   * 
   * @remarks
   * This operation is applicable to the streaming domains.
   * ## QPS limit
   * A single user can perform a maximum of 10 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - DescribeLiveShiftConfigsRequest
   * @returns DescribeLiveShiftConfigsResponse
   */
  async describeLiveShiftConfigs(request: $_model.DescribeLiveShiftConfigsRequest): Promise<$_model.DescribeLiveShiftConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveShiftConfigsWithOptions(request, runtime);
  }

  /**
   * Queries the snapshot configurations of a streaming domain.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the snapshot configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveSnapshotConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveSnapshotConfigResponse
   */
  async describeLiveSnapshotConfigWithOptions(request: $_model.DescribeLiveSnapshotConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveSnapshotConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.order)) {
      query["Order"] = request.order;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveSnapshotConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveSnapshotConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveSnapshotConfigResponse({}));
  }

  /**
   * Queries the snapshot configurations of a streaming domain.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the snapshot configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveSnapshotConfigRequest
   * @returns DescribeLiveSnapshotConfigResponse
   */
  async describeLiveSnapshotConfig(request: $_model.DescribeLiveSnapshotConfigRequest): Promise<$_model.DescribeLiveSnapshotConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveSnapshotConfigWithOptions(request, runtime);
  }

  /**
   * Queries video moderation configurations.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query video moderation configurations. The configurations can be sorted in ascending or descending order.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveSnapshotDetectPornConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveSnapshotDetectPornConfigResponse
   */
  async describeLiveSnapshotDetectPornConfigWithOptions(request: $_model.DescribeLiveSnapshotDetectPornConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveSnapshotDetectPornConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.order)) {
      query["Order"] = request.order;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveSnapshotDetectPornConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveSnapshotDetectPornConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveSnapshotDetectPornConfigResponse({}));
  }

  /**
   * Queries video moderation configurations.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to query video moderation configurations. The configurations can be sorted in ascending or descending order.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveSnapshotDetectPornConfigRequest
   * @returns DescribeLiveSnapshotDetectPornConfigResponse
   */
  async describeLiveSnapshotDetectPornConfig(request: $_model.DescribeLiveSnapshotDetectPornConfigRequest): Promise<$_model.DescribeLiveSnapshotDetectPornConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveSnapshotDetectPornConfigWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of snapshot callbacks.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveSnapshotNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveSnapshotNotifyConfigResponse
   */
  async describeLiveSnapshotNotifyConfigWithOptions(request: $_model.DescribeLiveSnapshotNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveSnapshotNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveSnapshotNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveSnapshotNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveSnapshotNotifyConfigResponse({}));
  }

  /**
   * Queries the configuration of snapshot callbacks.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveSnapshotNotifyConfigRequest
   * @returns DescribeLiveSnapshotNotifyConfigResponse
   */
  async describeLiveSnapshotNotifyConfig(request: $_model.DescribeLiveSnapshotNotifyConfigRequest): Promise<$_model.DescribeLiveSnapshotNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveSnapshotNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Queries the authentication status of an active stream.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamAuthCheckingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamAuthCheckingResponse
   */
  async describeLiveStreamAuthCheckingWithOptions(request: $_model.DescribeLiveStreamAuthCheckingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamAuthCheckingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.url)) {
      query["Url"] = request.url;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamAuthChecking",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamAuthCheckingResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamAuthCheckingResponse({}));
  }

  /**
   * Queries the authentication status of an active stream.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamAuthCheckingRequest
   * @returns DescribeLiveStreamAuthCheckingResponse
   */
  async describeLiveStreamAuthChecking(request: $_model.DescribeLiveStreamAuthCheckingRequest): Promise<$_model.DescribeLiveStreamAuthCheckingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamAuthCheckingWithOptions(request, runtime);
  }

  /**
   * Queries the frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream within a specified time period. You can call this operation to query historical data.
   * 
   * @remarks
   * This operation allows you to query the frame rates and bitrates of an RTMP stream within a specified time period. You can call this operation to query historical data.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamBitRateDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamBitRateDataResponse
   */
  async describeLiveStreamBitRateDataWithOptions(request: $_model.DescribeLiveStreamBitRateDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamBitRateDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamBitRateData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamBitRateDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamBitRateDataResponse({}));
  }

  /**
   * Queries the frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream within a specified time period. You can call this operation to query historical data.
   * 
   * @remarks
   * This operation allows you to query the frame rates and bitrates of an RTMP stream within a specified time period. You can call this operation to query historical data.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamBitRateDataRequest
   * @returns DescribeLiveStreamBitRateDataResponse
   */
  async describeLiveStreamBitRateData(request: $_model.DescribeLiveStreamBitRateDataRequest): Promise<$_model.DescribeLiveStreamBitRateDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamBitRateDataWithOptions(request, runtime);
  }

  /**
   * Queries the numbers of online source streams and transcoded streams.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the numbers of online source streams and transcoded streams. The streams that are returned by calling this operation are encoded in H.264 or H.265.
   * ## [](#qps-)QPS limit
   * You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamCountResponse
   */
  async describeLiveStreamCountWithOptions(request: $_model.DescribeLiveStreamCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamCountResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamCount",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamCountResponse({}));
  }

  /**
   * Queries the numbers of online source streams and transcoded streams.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the numbers of online source streams and transcoded streams. The streams that are returned by calling this operation are encoded in H.264 or H.265.
   * ## [](#qps-)QPS limit
   * You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamCountRequest
   * @returns DescribeLiveStreamCountResponse
   */
  async describeLiveStreamCount(request: $_model.DescribeLiveStreamCountRequest): Promise<$_model.DescribeLiveStreamCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamCountWithOptions(request, runtime);
  }

  /**
   * Queries the live streaming latency.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to query the live streaming latency.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamDelayConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamDelayConfigResponse
   */
  async describeLiveStreamDelayConfigWithOptions(request: $_model.DescribeLiveStreamDelayConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamDelayConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamDelayConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamDelayConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamDelayConfigResponse({}));
  }

  /**
   * Queries the live streaming latency.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to query the live streaming latency.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamDelayConfigRequest
   * @returns DescribeLiveStreamDelayConfigResponse
   */
  async describeLiveStreamDelayConfig(request: $_model.DescribeLiveStreamDelayConfigRequest): Promise<$_model.DescribeLiveStreamDelayConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamDelayConfigWithOptions(request, runtime);
  }

  /**
   * Queries the audio and video frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream.
   * 
   * @remarks
   *   You can call this operation to query a set of audio and video frame rates and bitrates of an RTMP stream within a specified time range.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * *   You can query data in the last 90 days.
   * *   The data is delayed for 3 to 5 minutes.
   * *   The maximum time range that you can specify is 1 hour.
   * 
   * @param request - DescribeLiveStreamDetailFrameRateAndBitRateDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamDetailFrameRateAndBitRateDataResponse
   */
  async describeLiveStreamDetailFrameRateAndBitRateDataWithOptions(request: $_model.DescribeLiveStreamDetailFrameRateAndBitRateDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamDetailFrameRateAndBitRateDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamDetailFrameRateAndBitRateData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamDetailFrameRateAndBitRateDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamDetailFrameRateAndBitRateDataResponse({}));
  }

  /**
   * Queries the audio and video frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream.
   * 
   * @remarks
   *   You can call this operation to query a set of audio and video frame rates and bitrates of an RTMP stream within a specified time range.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * *   You can query data in the last 90 days.
   * *   The data is delayed for 3 to 5 minutes.
   * *   The maximum time range that you can specify is 1 hour.
   * 
   * @param request - DescribeLiveStreamDetailFrameRateAndBitRateDataRequest
   * @returns DescribeLiveStreamDetailFrameRateAndBitRateDataResponse
   */
  async describeLiveStreamDetailFrameRateAndBitRateData(request: $_model.DescribeLiveStreamDetailFrameRateAndBitRateDataRequest): Promise<$_model.DescribeLiveStreamDetailFrameRateAndBitRateDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamDetailFrameRateAndBitRateDataWithOptions(request, runtime);
  }

  /**
   * Queries the number of historical online users for a live stream.
   * 
   * @remarks
   *   The data returned by this operation is delayed for an average of 2 to 5 minutes.
   * *   This operation queries the number of historical online users for only Flash Video (FLV) and Real-Time Messaging Protocol (RTMP) streams.
   * *   This operation does not query the number of viewers that are watching transcoded streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamHistoryUserNumRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamHistoryUserNumResponse
   */
  async describeLiveStreamHistoryUserNumWithOptions(request: $_model.DescribeLiveStreamHistoryUserNumRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamHistoryUserNumResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamHistoryUserNum",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamHistoryUserNumResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamHistoryUserNumResponse({}));
  }

  /**
   * Queries the number of historical online users for a live stream.
   * 
   * @remarks
   *   The data returned by this operation is delayed for an average of 2 to 5 minutes.
   * *   This operation queries the number of historical online users for only Flash Video (FLV) and Real-Time Messaging Protocol (RTMP) streams.
   * *   This operation does not query the number of viewers that are watching transcoded streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamHistoryUserNumRequest
   * @returns DescribeLiveStreamHistoryUserNumResponse
   */
  async describeLiveStreamHistoryUserNum(request: $_model.DescribeLiveStreamHistoryUserNumRequest): Promise<$_model.DescribeLiveStreamHistoryUserNumResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamHistoryUserNumWithOptions(request, runtime);
  }

  /**
   * Invoke DescribeLiveStreamMerge to query the primary-standby stream merging configuration.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamMergeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamMergeResponse
   */
  async describeLiveStreamMergeWithOptions(request: $_model.DescribeLiveStreamMergeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamMergeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.protocol)) {
      query["Protocol"] = request.protocol;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamMerge",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamMergeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamMergeResponse({}));
  }

  /**
   * Invoke DescribeLiveStreamMerge to query the primary-standby stream merging configuration.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamMergeRequest
   * @returns DescribeLiveStreamMergeResponse
   */
  async describeLiveStreamMerge(request: $_model.DescribeLiveStreamMergeRequest): Promise<$_model.DescribeLiveStreamMergeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamMergeWithOptions(request, runtime);
  }

  /**
   * Queries the monitoring data of streams for a specified domain name. Up to 5,000 rows of data can be returned per call.
   * 
   * @remarks
   * If you call this operation to query the monitoring data of streams under a domain name for the first time, you must [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex) for backend configuration. Provide the following information in the ticket:
   * *   The domain name that you want to query
   * *   The maximum number of concurrent streams under the domain name
   * *   The maximum number of concurrent online users in each stream
   * *   The protocols used for the client requests
   * >  The review is expected to be completed within one business day after you submit the ticket.
   * ## [](#)Usage limits
   * *   By default, statistics on the number of viewers who watch streams over the HTTP Live Streaming (HLS) protocol cannot be collected.
   * *   You can specify only one domain name in each call.
   * *   The maximum time range to query is 24 hours.
   * *   The minimum data granularity to query is 1 minute.
   * *   You can query data in the last 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamMetricDetailDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamMetricDetailDataResponse
   */
  async describeLiveStreamMetricDetailDataWithOptions(request: $_model.DescribeLiveStreamMetricDetailDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamMetricDetailDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.nextPageToken)) {
      query["NextPageToken"] = request.nextPageToken;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.protocol)) {
      query["Protocol"] = request.protocol;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamMetricDetailData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamMetricDetailDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamMetricDetailDataResponse({}));
  }

  /**
   * Queries the monitoring data of streams for a specified domain name. Up to 5,000 rows of data can be returned per call.
   * 
   * @remarks
   * If you call this operation to query the monitoring data of streams under a domain name for the first time, you must [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex) for backend configuration. Provide the following information in the ticket:
   * *   The domain name that you want to query
   * *   The maximum number of concurrent streams under the domain name
   * *   The maximum number of concurrent online users in each stream
   * *   The protocols used for the client requests
   * >  The review is expected to be completed within one business day after you submit the ticket.
   * ## [](#)Usage limits
   * *   By default, statistics on the number of viewers who watch streams over the HTTP Live Streaming (HLS) protocol cannot be collected.
   * *   You can specify only one domain name in each call.
   * *   The maximum time range to query is 24 hours.
   * *   The minimum data granularity to query is 1 minute.
   * *   You can query data in the last 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamMetricDetailDataRequest
   * @returns DescribeLiveStreamMetricDetailDataResponse
   */
  async describeLiveStreamMetricDetailData(request: $_model.DescribeLiveStreamMetricDetailDataRequest): Promise<$_model.DescribeLiveStreamMetricDetailDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamMetricDetailDataWithOptions(request, runtime);
  }

  /**
   * Queries the list of created monitoring sessions.
   * 
   * @remarks
   * [Create monitoring sessions](https://help.aliyun.com/document_detail/2848129.html) before you call this operation to query the monitoring session list. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamMonitorListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamMonitorListResponse
   */
  async describeLiveStreamMonitorListWithOptions(request: $_model.DescribeLiveStreamMonitorListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamMonitorListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.monitorId)) {
      query["MonitorId"] = request.monitorId;
    }

    if (!$dara.isNull(request.orderRule)) {
      query["OrderRule"] = request.orderRule;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamMonitorList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamMonitorListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamMonitorListResponse({}));
  }

  /**
   * Queries the list of created monitoring sessions.
   * 
   * @remarks
   * [Create monitoring sessions](https://help.aliyun.com/document_detail/2848129.html) before you call this operation to query the monitoring session list. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamMonitorListRequest
   * @returns DescribeLiveStreamMonitorListResponse
   */
  async describeLiveStreamMonitorList(request: $_model.DescribeLiveStreamMonitorListRequest): Promise<$_model.DescribeLiveStreamMonitorListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamMonitorListWithOptions(request, runtime);
  }

  /**
   * Queries prefetch tasks in the last three days.
   * 
   * @remarks
   * You can call this operation to query prefetch tasks in the last three days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamPreloadTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamPreloadTasksResponse
   */
  async describeLiveStreamPreloadTasksWithOptions(request: $_model.DescribeLiveStreamPreloadTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamPreloadTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.playUrl)) {
      query["PlayUrl"] = request.playUrl;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamPreloadTasks",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamPreloadTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamPreloadTasksResponse({}));
  }

  /**
   * Queries prefetch tasks in the last three days.
   * 
   * @remarks
   * You can call this operation to query prefetch tasks in the last three days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamPreloadTasksRequest
   * @returns DescribeLiveStreamPreloadTasksResponse
   */
  async describeLiveStreamPreloadTasks(request: $_model.DescribeLiveStreamPreloadTasksRequest): Promise<$_model.DescribeLiveStreamPreloadTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamPreloadTasksWithOptions(request, runtime);
  }

  /**
   * Queries the stream ingest data of a specified domain name at the application level and the stream level.
   * 
   * @remarks
   *   You can query data of a single domain name in each request. If you specify multiple domain names, an error is returned.
   * *   The maximum time range to query is 24 hours.
   * *   The minimum data granularity to query is 1 minute.
   * *   You can query data in the last 31 days.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamPushMetricDetailDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamPushMetricDetailDataResponse
   */
  async describeLiveStreamPushMetricDetailDataWithOptions(request: $_model.DescribeLiveStreamPushMetricDetailDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamPushMetricDetailDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.nextPageToken)) {
      query["NextPageToken"] = request.nextPageToken;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamPushMetricDetailData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamPushMetricDetailDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamPushMetricDetailDataResponse({}));
  }

  /**
   * Queries the stream ingest data of a specified domain name at the application level and the stream level.
   * 
   * @remarks
   *   You can query data of a single domain name in each request. If you specify multiple domain names, an error is returned.
   * *   The maximum time range to query is 24 hours.
   * *   The minimum data granularity to query is 1 minute.
   * *   You can query data in the last 31 days.
   * *   This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamPushMetricDetailDataRequest
   * @returns DescribeLiveStreamPushMetricDetailDataResponse
   */
  async describeLiveStreamPushMetricDetailData(request: $_model.DescribeLiveStreamPushMetricDetailDataRequest): Promise<$_model.DescribeLiveStreamPushMetricDetailDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamPushMetricDetailDataWithOptions(request, runtime);
  }

  /**
   * Queries the recordings of a live stream.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the recordings of the live stream.
   * ## QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - DescribeLiveStreamRecordContentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamRecordContentResponse
   */
  async describeLiveStreamRecordContentWithOptions(request: $_model.DescribeLiveStreamRecordContentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamRecordContentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamRecordContent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamRecordContentResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamRecordContentResponse({}));
  }

  /**
   * Queries the recordings of a live stream.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the recordings of the live stream.
   * ## QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - DescribeLiveStreamRecordContentRequest
   * @returns DescribeLiveStreamRecordContentResponse
   */
  async describeLiveStreamRecordContent(request: $_model.DescribeLiveStreamRecordContentRequest): Promise<$_model.DescribeLiveStreamRecordContentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamRecordContentWithOptions(request, runtime);
  }

  /**
   * Queries the information about an index file.
   * 
   * @remarks
   * ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months. OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamRecordIndexFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamRecordIndexFileResponse
   */
  async describeLiveStreamRecordIndexFileWithOptions(request: $_model.DescribeLiveStreamRecordIndexFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamRecordIndexFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.recordId)) {
      query["RecordId"] = request.recordId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamRecordIndexFile",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamRecordIndexFileResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamRecordIndexFileResponse({}));
  }

  /**
   * Queries the information about an index file.
   * 
   * @remarks
   * ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months. OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamRecordIndexFileRequest
   * @returns DescribeLiveStreamRecordIndexFileResponse
   */
  async describeLiveStreamRecordIndexFile(request: $_model.DescribeLiveStreamRecordIndexFileRequest): Promise<$_model.DescribeLiveStreamRecordIndexFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamRecordIndexFileWithOptions(request, runtime);
  }

  /**
   * Queries all index files within a specific time period.
   * 
   * @remarks
   *   ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
   * *   OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamRecordIndexFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamRecordIndexFilesResponse
   */
  async describeLiveStreamRecordIndexFilesWithOptions(request: $_model.DescribeLiveStreamRecordIndexFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamRecordIndexFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.order)) {
      query["Order"] = request.order;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamRecordIndexFiles",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamRecordIndexFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamRecordIndexFilesResponse({}));
  }

  /**
   * Queries all index files within a specific time period.
   * 
   * @remarks
   *   ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
   * *   OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamRecordIndexFilesRequest
   * @returns DescribeLiveStreamRecordIndexFilesResponse
   */
  async describeLiveStreamRecordIndexFiles(request: $_model.DescribeLiveStreamRecordIndexFilesRequest): Promise<$_model.DescribeLiveStreamRecordIndexFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamRecordIndexFilesWithOptions(request, runtime);
  }

  /**
   * Queries the snapshots that were captured within a specific time period.
   * 
   * @remarks
   * You can query only snapshots that were captured in the last year.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamSnapshotInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamSnapshotInfoResponse
   */
  async describeLiveStreamSnapshotInfoWithOptions(request: $_model.DescribeLiveStreamSnapshotInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamSnapshotInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.limit)) {
      query["Limit"] = request.limit;
    }

    if (!$dara.isNull(request.order)) {
      query["Order"] = request.order;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamSnapshotInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamSnapshotInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamSnapshotInfoResponse({}));
  }

  /**
   * Queries the snapshots that were captured within a specific time period.
   * 
   * @remarks
   * You can query only snapshots that were captured in the last year.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamSnapshotInfoRequest
   * @returns DescribeLiveStreamSnapshotInfoResponse
   */
  async describeLiveStreamSnapshotInfo(request: $_model.DescribeLiveStreamSnapshotInfoRequest): Promise<$_model.DescribeLiveStreamSnapshotInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamSnapshotInfoWithOptions(request, runtime);
  }

  /**
   * Queries the status of a stream in real time.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to query the status of a stream in real time. If the stream is in the offline status, you can check the stream ingest callback to learn about the reason that causes the offline status. This operation does not provide detailed information.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamStateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamStateResponse
   */
  async describeLiveStreamStateWithOptions(request: $_model.DescribeLiveStreamStateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamStateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamState",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamStateResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamStateResponse({}));
  }

  /**
   * Queries the status of a stream in real time.
   * 
   * @remarks
   * Obtain the streaming domain, and then call this operation to query the status of a stream in real time. If the stream is in the offline status, you can check the stream ingest callback to learn about the reason that causes the offline status. This operation does not provide detailed information.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamStateRequest
   * @returns DescribeLiveStreamStateResponse
   */
  async describeLiveStreamState(request: $_model.DescribeLiveStreamStateRequest): Promise<$_model.DescribeLiveStreamStateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamStateWithOptions(request, runtime);
  }

  /**
   * Queries the transcoding configurations of a streaming domain.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the transcoding configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamTranscodeInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamTranscodeInfoResponse
   */
  async describeLiveStreamTranscodeInfoWithOptions(request: $_model.DescribeLiveStreamTranscodeInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamTranscodeInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainTranscodeName)) {
      query["DomainTranscodeName"] = request.domainTranscodeName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamTranscodeInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamTranscodeInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamTranscodeInfoResponse({}));
  }

  /**
   * Queries the transcoding configurations of a streaming domain.
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to query the transcoding configurations.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamTranscodeInfoRequest
   * @returns DescribeLiveStreamTranscodeInfoResponse
   */
  async describeLiveStreamTranscodeInfo(request: $_model.DescribeLiveStreamTranscodeInfoRequest): Promise<$_model.DescribeLiveStreamTranscodeInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamTranscodeInfoWithOptions(request, runtime);
  }

  /**
   * Queries the transcoding data of a specified domain name at the application level and the stream level.
   * 
   * @remarks
   *   The maximum time range for a query is 24 hours.
   * *   The minimum time granularity for a query is 5 minutes.
   * *   You can query data in the last 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamTranscodeMetricDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamTranscodeMetricDataResponse
   */
  async describeLiveStreamTranscodeMetricDataWithOptions(request: $_model.DescribeLiveStreamTranscodeMetricDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamTranscodeMetricDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.nextPageToken)) {
      query["NextPageToken"] = request.nextPageToken;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamTranscodeMetricData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamTranscodeMetricDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamTranscodeMetricDataResponse({}));
  }

  /**
   * Queries the transcoding data of a specified domain name at the application level and the stream level.
   * 
   * @remarks
   *   The maximum time range for a query is 24 hours.
   * *   The minimum time granularity for a query is 5 minutes.
   * *   You can query data in the last 31 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamTranscodeMetricDataRequest
   * @returns DescribeLiveStreamTranscodeMetricDataResponse
   */
  async describeLiveStreamTranscodeMetricData(request: $_model.DescribeLiveStreamTranscodeMetricDataRequest): Promise<$_model.DescribeLiveStreamTranscodeMetricDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamTranscodeMetricDataWithOptions(request, runtime);
  }

  /**
   * Queries the number of transcoded streams in real time.
   * 
   * @remarks
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamTranscodeStreamNumRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamTranscodeStreamNumResponse
   */
  async describeLiveStreamTranscodeStreamNumWithOptions(request: $_model.DescribeLiveStreamTranscodeStreamNumRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamTranscodeStreamNumResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.splitType)) {
      query["SplitType"] = request.splitType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamTranscodeStreamNum",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamTranscodeStreamNumResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamTranscodeStreamNumResponse({}));
  }

  /**
   * Queries the number of transcoded streams in real time.
   * 
   * @remarks
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamTranscodeStreamNumRequest
   * @returns DescribeLiveStreamTranscodeStreamNumResponse
   */
  async describeLiveStreamTranscodeStreamNum(request: $_model.DescribeLiveStreamTranscodeStreamNumRequest): Promise<$_model.DescribeLiveStreamTranscodeStreamNumResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamTranscodeStreamNumWithOptions(request, runtime);
  }

  /**
   * Queries watermark rules.
   * 
   * @remarks
   * When you call this operation, you can specify the PageNumber and PageSize parameters to view watermark rules on separate pages. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamWatermarkRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamWatermarkRulesResponse
   */
  async describeLiveStreamWatermarkRulesWithOptions(request: $_model.DescribeLiveStreamWatermarkRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamWatermarkRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamWatermarkRules",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamWatermarkRulesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamWatermarkRulesResponse({}));
  }

  /**
   * Queries watermark rules.
   * 
   * @remarks
   * When you call this operation, you can specify the PageNumber and PageSize parameters to view watermark rules on separate pages. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamWatermarkRulesRequest
   * @returns DescribeLiveStreamWatermarkRulesResponse
   */
  async describeLiveStreamWatermarkRules(request: $_model.DescribeLiveStreamWatermarkRulesRequest): Promise<$_model.DescribeLiveStreamWatermarkRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamWatermarkRulesWithOptions(request, runtime);
  }

  /**
   * Queries watermark templates.
   * 
   * @remarks
   * You can call this operation to query watermark templates. You can use the PageNumber parameter to view results on separate pages. Make sure that you configure parameters properly when you call this operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamWatermarksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamWatermarksResponse
   */
  async describeLiveStreamWatermarksWithOptions(request: $_model.DescribeLiveStreamWatermarksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamWatermarksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.keyWord)) {
      query["KeyWord"] = request.keyWord;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamWatermarks",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamWatermarksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamWatermarksResponse({}));
  }

  /**
   * Queries watermark templates.
   * 
   * @remarks
   * You can call this operation to query watermark templates. You can use the PageNumber parameter to view results on separate pages. Make sure that you configure parameters properly when you call this operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamWatermarksRequest
   * @returns DescribeLiveStreamWatermarksResponse
   */
  async describeLiveStreamWatermarks(request: $_model.DescribeLiveStreamWatermarksRequest): Promise<$_model.DescribeLiveStreamWatermarksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamWatermarksWithOptions(request, runtime);
  }

  /**
   * Queries the blacklist of live stream URLs under a main streaming domain.
   * 
   * @remarks
   * The stream URLs refer to the URLs for playing in particular.
   * ## QPS limit
   * A single user can perform a maximum of 50 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - DescribeLiveStreamsBlockListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamsBlockListResponse
   */
  async describeLiveStreamsBlockListWithOptions(request: $_model.DescribeLiveStreamsBlockListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamsBlockListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamsBlockList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamsBlockListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamsBlockListResponse({}));
  }

  /**
   * Queries the blacklist of live stream URLs under a main streaming domain.
   * 
   * @remarks
   * The stream URLs refer to the URLs for playing in particular.
   * ## QPS limit
   * A single user can perform a maximum of 50 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - DescribeLiveStreamsBlockListRequest
   * @returns DescribeLiveStreamsBlockListResponse
   */
  async describeLiveStreamsBlockList(request: $_model.DescribeLiveStreamsBlockListRequest): Promise<$_model.DescribeLiveStreamsBlockListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamsBlockListWithOptions(request, runtime);
  }

  /**
   * Queries the operation history of live streams under a domain name or in an application.
   * 
   * @remarks
   * You can call this operation to query the operation history of live streams under a domain name or in an application. The operations include all API operations that were called on live streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsControlHistoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamsControlHistoryResponse
   */
  async describeLiveStreamsControlHistoryWithOptions(request: $_model.DescribeLiveStreamsControlHistoryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamsControlHistoryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamsControlHistory",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamsControlHistoryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamsControlHistoryResponse({}));
  }

  /**
   * Queries the operation history of live streams under a domain name or in an application.
   * 
   * @remarks
   * You can call this operation to query the operation history of live streams under a domain name or in an application. The operations include all API operations that were called on live streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsControlHistoryRequest
   * @returns DescribeLiveStreamsControlHistoryResponse
   */
  async describeLiveStreamsControlHistory(request: $_model.DescribeLiveStreamsControlHistoryRequest): Promise<$_model.DescribeLiveStreamsControlHistoryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamsControlHistoryWithOptions(request, runtime);
  }

  /**
   * Queries stream ingest callback records.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsNotifyRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamsNotifyRecordsResponse
   */
  async describeLiveStreamsNotifyRecordsWithOptions(request: $_model.DescribeLiveStreamsNotifyRecordsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamsNotifyRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamsNotifyRecords",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamsNotifyRecordsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamsNotifyRecordsResponse({}));
  }

  /**
   * Queries stream ingest callback records.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsNotifyRecordsRequest
   * @returns DescribeLiveStreamsNotifyRecordsResponse
   */
  async describeLiveStreamsNotifyRecords(request: $_model.DescribeLiveStreamsNotifyRecordsRequest): Promise<$_model.DescribeLiveStreamsNotifyRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamsNotifyRecordsWithOptions(request, runtime);
  }

  /**
   * Queries the callback configuration for stream ingest under an ingest domain.
   * 
   * @param request - DescribeLiveStreamsNotifyUrlConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamsNotifyUrlConfigResponse
   */
  async describeLiveStreamsNotifyUrlConfigWithOptions(request: $_model.DescribeLiveStreamsNotifyUrlConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamsNotifyUrlConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamsNotifyUrlConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamsNotifyUrlConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamsNotifyUrlConfigResponse({}));
  }

  /**
   * Queries the callback configuration for stream ingest under an ingest domain.
   * 
   * @param request - DescribeLiveStreamsNotifyUrlConfigRequest
   * @returns DescribeLiveStreamsNotifyUrlConfigResponse
   */
  async describeLiveStreamsNotifyUrlConfig(request: $_model.DescribeLiveStreamsNotifyUrlConfigRequest): Promise<$_model.DescribeLiveStreamsNotifyUrlConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
  }

  /**
   * Queries the information about all active streams under a specified domain name or the active streams of an application under a specified domain name.
   * 
   * @remarks
   * You can call this operation to query the following types of streams.
   * *   all: all streams.
   * *   raw: source streams.
   * *   trans: transcoded streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsOnlineListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamsOnlineListResponse
   */
  async describeLiveStreamsOnlineListWithOptions(request: $_model.DescribeLiveStreamsOnlineListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamsOnlineListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.onlyStream)) {
      query["OnlyStream"] = request.onlyStream;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.queryType)) {
      query["QueryType"] = request.queryType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.streamType)) {
      query["StreamType"] = request.streamType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamsOnlineList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamsOnlineListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamsOnlineListResponse({}));
  }

  /**
   * Queries the information about all active streams under a specified domain name or the active streams of an application under a specified domain name.
   * 
   * @remarks
   * You can call this operation to query the following types of streams.
   * *   all: all streams.
   * *   raw: source streams.
   * *   trans: transcoded streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsOnlineListRequest
   * @returns DescribeLiveStreamsOnlineListResponse
   */
  async describeLiveStreamsOnlineList(request: $_model.DescribeLiveStreamsOnlineListRequest): Promise<$_model.DescribeLiveStreamsOnlineListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamsOnlineListWithOptions(request, runtime);
  }

  /**
   * Queries the stream ingest records of a domain name or an application or stream under a domain name.
   * 
   * @remarks
   * ## [](#)Usage notes
   * This operation allows you to query streams in the last 30 days. The information of active streams during the queried period is returned. This operation supports the following sorting methods.
   * *   stream_name_desc: sorts the entries in descending order by stream name.
   * *   stream_name_asc: sorts the entries in ascending order by stream name.
   * *   publish_time_desc: sorts the entries in descending order by stream ingest time.
   * *   publish_time_asc: sorts the entries in ascending order by stream ingest time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 3 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveStreamsPublishListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamsPublishListResponse
   */
  async describeLiveStreamsPublishListWithOptions(request: $_model.DescribeLiveStreamsPublishListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamsPublishListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.orderBy)) {
      query["OrderBy"] = request.orderBy;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.queryType)) {
      query["QueryType"] = request.queryType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.streamType)) {
      query["StreamType"] = request.streamType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamsPublishList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamsPublishListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamsPublishListResponse({}));
  }

  /**
   * Queries the stream ingest records of a domain name or an application or stream under a domain name.
   * 
   * @remarks
   * ## [](#)Usage notes
   * This operation allows you to query streams in the last 30 days. The information of active streams during the queried period is returned. This operation supports the following sorting methods.
   * *   stream_name_desc: sorts the entries in descending order by stream name.
   * *   stream_name_asc: sorts the entries in ascending order by stream name.
   * *   publish_time_desc: sorts the entries in descending order by stream ingest time.
   * *   publish_time_asc: sorts the entries in ascending order by stream ingest time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 3 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveStreamsPublishListRequest
   * @returns DescribeLiveStreamsPublishListResponse
   */
  async describeLiveStreamsPublishList(request: $_model.DescribeLiveStreamsPublishListRequest): Promise<$_model.DescribeLiveStreamsPublishListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamsPublishListWithOptions(request, runtime);
  }

  /**
   * Queries the total number of live streams within a specified time range. Data is collected on a daily basis.
   * 
   * @remarks
   *   The maximum time range for a query is 15 days.
   * *   You can query data in the last 18 months.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsTotalCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveStreamsTotalCountResponse
   */
  async describeLiveStreamsTotalCountWithOptions(request: $_model.DescribeLiveStreamsTotalCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveStreamsTotalCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.typ)) {
      query["Typ"] = request.typ;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveStreamsTotalCount",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveStreamsTotalCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveStreamsTotalCountResponse({}));
  }

  /**
   * Queries the total number of live streams within a specified time range. Data is collected on a daily basis.
   * 
   * @remarks
   *   The maximum time range for a query is 15 days.
   * *   You can query data in the last 18 months.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveStreamsTotalCountRequest
   * @returns DescribeLiveStreamsTotalCountResponse
   */
  async describeLiveStreamsTotalCount(request: $_model.DescribeLiveStreamsTotalCountRequest): Promise<$_model.DescribeLiveStreamsTotalCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveStreamsTotalCountWithOptions(request, runtime);
  }

  /**
   * Queries the top domain names ranked by traffic.
   * 
   * @remarks
   *   If you do not specify the StartTime or EndTime parameter, data of the current month is queried by default. To query data within a specific time range, you must specify both the StartTime and EndTime parameters.
   * *   You can query data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveTopDomainsByFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveTopDomainsByFlowResponse
   */
  async describeLiveTopDomainsByFlowWithOptions(request: $_model.DescribeLiveTopDomainsByFlowRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveTopDomainsByFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.limit)) {
      query["Limit"] = request.limit;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveTopDomainsByFlow",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveTopDomainsByFlowResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveTopDomainsByFlowResponse({}));
  }

  /**
   * Queries the top domain names ranked by traffic.
   * 
   * @remarks
   *   If you do not specify the StartTime or EndTime parameter, data of the current month is queried by default. To query data within a specific time range, you must specify both the StartTime and EndTime parameters.
   * *   You can query data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeLiveTopDomainsByFlowRequest
   * @returns DescribeLiveTopDomainsByFlowResponse
   */
  async describeLiveTopDomainsByFlow(request: $_model.DescribeLiveTopDomainsByFlowRequest): Promise<$_model.DescribeLiveTopDomainsByFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveTopDomainsByFlowWithOptions(request, runtime);
  }

  /**
   * 获取直播指定域名的原始访问日志的下载地址
   * 
   * @param request - DescribeLiveTrafficDomainLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveTrafficDomainLogResponse
   */
  async describeLiveTrafficDomainLogWithOptions(request: $_model.DescribeLiveTrafficDomainLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveTrafficDomainLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveTrafficDomainLog",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveTrafficDomainLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveTrafficDomainLogResponse({}));
  }

  /**
   * 获取直播指定域名的原始访问日志的下载地址
   * 
   * @param request - DescribeLiveTrafficDomainLogRequest
   * @returns DescribeLiveTrafficDomainLogResponse
   */
  async describeLiveTrafficDomainLog(request: $_model.DescribeLiveTrafficDomainLogRequest): Promise<$_model.DescribeLiveTrafficDomainLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveTrafficDomainLogWithOptions(request, runtime);
  }

  /**
   * Queries the audio and video data of an ingested stream within a specific period of time.
   * 
   * @remarks
   * ### Usage notes
   * - The maximum time range for a query is 24 hours. 
   * - The minimum time range for a query is 1 hour. 
   * - You can query data in the last 31 days. 
   * ### QPS limit
   * You can call this operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveUpVideoAudioInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveUpVideoAudioInfoResponse
   */
  async describeLiveUpVideoAudioInfoWithOptions(request: $_model.DescribeLiveUpVideoAudioInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveUpVideoAudioInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveUpVideoAudioInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveUpVideoAudioInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveUpVideoAudioInfoResponse({}));
  }

  /**
   * Queries the audio and video data of an ingested stream within a specific period of time.
   * 
   * @remarks
   * ### Usage notes
   * - The maximum time range for a query is 24 hours. 
   * - The minimum time range for a query is 1 hour. 
   * - You can query data in the last 31 days. 
   * ### QPS limit
   * You can call this operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveUpVideoAudioInfoRequest
   * @returns DescribeLiveUpVideoAudioInfoResponse
   */
  async describeLiveUpVideoAudioInfo(request: $_model.DescribeLiveUpVideoAudioInfoRequest): Promise<$_model.DescribeLiveUpVideoAudioInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveUpVideoAudioInfoWithOptions(request, runtime);
  }

  /**
   * Queries the estimated bills of ApsaraVideo Live in your Alibaba Cloud account.
   * 
   * @remarks
   * You can call this operation to estimate resource usage of the current month based on the metering method that is specified on the first day of the month. You can call this operation to estimate resource usage of only the current month within your Alibaba Cloud account. The time range used for the estimation starts at 00:00 on the first day of the month and ends 2 hours earlier than the current time.
   * *   Pay by monthly 95th percentile bandwidth: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
   * *   Pay by average daily peak bandwidth per month: Estimated value = Sum of daily peak bandwidth values/Number of days. The current day is excluded.
   * *   Pay by 4th peak bandwidth per month: The estimated value is the 4th peak bandwidth value between the start time and end time. If the time range is less than four days, the estimated value is 0.
   * *   Pay by average daily 95th percentile bandwidth per month: Estimated value = Sum of daily 95th percentile bandwidth values/Number of days. The current day is excluded.
   * *   Pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
   * ## [](#qps-)QPS limit
   * You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveUserBillPredictionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveUserBillPredictionResponse
   */
  async describeLiveUserBillPredictionWithOptions(request: $_model.DescribeLiveUserBillPredictionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveUserBillPredictionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveUserBillPrediction",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveUserBillPredictionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveUserBillPredictionResponse({}));
  }

  /**
   * Queries the estimated bills of ApsaraVideo Live in your Alibaba Cloud account.
   * 
   * @remarks
   * You can call this operation to estimate resource usage of the current month based on the metering method that is specified on the first day of the month. You can call this operation to estimate resource usage of only the current month within your Alibaba Cloud account. The time range used for the estimation starts at 00:00 on the first day of the month and ends 2 hours earlier than the current time.
   * *   Pay by monthly 95th percentile bandwidth: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
   * *   Pay by average daily peak bandwidth per month: Estimated value = Sum of daily peak bandwidth values/Number of days. The current day is excluded.
   * *   Pay by 4th peak bandwidth per month: The estimated value is the 4th peak bandwidth value between the start time and end time. If the time range is less than four days, the estimated value is 0.
   * *   Pay by average daily 95th percentile bandwidth per month: Estimated value = Sum of daily 95th percentile bandwidth values/Number of days. The current day is excluded.
   * *   Pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
   * ## [](#qps-)QPS limit
   * You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveUserBillPredictionRequest
   * @returns DescribeLiveUserBillPredictionResponse
   */
  async describeLiveUserBillPrediction(request: $_model.DescribeLiveUserBillPredictionRequest): Promise<$_model.DescribeLiveUserBillPredictionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveUserBillPredictionWithOptions(request, runtime);
  }

  /**
   * Queries domain names of ApsaraVideo Live in your Alibaba Cloud account.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to query all domain names of ApsaraVideo Live within your Alibaba Cloud account. The supported types of domain names are streaming domains and edge ingest domains.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveUserDomainsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveUserDomainsResponse
   */
  async describeLiveUserDomainsWithOptions(request: $_model.DescribeLiveUserDomainsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveUserDomainsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainSearchType)) {
      query["DomainSearchType"] = request.domainSearchType;
    }

    if (!$dara.isNull(request.domainStatus)) {
      query["DomainStatus"] = request.domainStatus;
    }

    if (!$dara.isNull(request.liveDomainType)) {
      query["LiveDomainType"] = request.liveDomainType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionName)) {
      query["RegionName"] = request.regionName;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveUserDomains",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveUserDomainsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveUserDomainsResponse({}));
  }

  /**
   * Queries domain names of ApsaraVideo Live in your Alibaba Cloud account.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to query all domain names of ApsaraVideo Live within your Alibaba Cloud account. The supported types of domain names are streaming domains and edge ingest domains.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeLiveUserDomainsRequest
   * @returns DescribeLiveUserDomainsResponse
   */
  async describeLiveUserDomains(request: $_model.DescribeLiveUserDomainsRequest): Promise<$_model.DescribeLiveUserDomainsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveUserDomainsWithOptions(request, runtime);
  }

  /**
   * 查询指定域名流粒度批量数据
   * 
   * @param request - DescribeLiveUserStreamMetricDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveUserStreamMetricDataResponse
   */
  async describeLiveUserStreamMetricDataWithOptions(request: $_model.DescribeLiveUserStreamMetricDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveUserStreamMetricDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.protocol)) {
      query["Protocol"] = request.protocol;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveUserStreamMetricData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveUserStreamMetricDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveUserStreamMetricDataResponse({}));
  }

  /**
   * 查询指定域名流粒度批量数据
   * 
   * @param request - DescribeLiveUserStreamMetricDataRequest
   * @returns DescribeLiveUserStreamMetricDataResponse
   */
  async describeLiveUserStreamMetricData(request: $_model.DescribeLiveUserStreamMetricDataRequest): Promise<$_model.DescribeLiveUserStreamMetricDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveUserStreamMetricDataWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeLiveUserTagsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveUserTagsResponse
   */
  async describeLiveUserTagsWithOptions(request: $_model.DescribeLiveUserTagsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveUserTagsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveUserTags",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveUserTagsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveUserTagsResponse({}));
  }

  /**
   * @param request - DescribeLiveUserTagsRequest
   * @returns DescribeLiveUserTagsResponse
   */
  async describeLiveUserTags(request: $_model.DescribeLiveUserTagsRequest): Promise<$_model.DescribeLiveUserTagsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveUserTagsWithOptions(request, runtime);
  }

  /**
   * 获取直播指定域名的原始访问日志的下载地址
   * 
   * @param request - DescribeLiveUserTrafficLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveUserTrafficLogResponse
   */
  async describeLiveUserTrafficLogWithOptions(request: $_model.DescribeLiveUserTrafficLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveUserTrafficLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveUserTrafficLog",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveUserTrafficLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveUserTrafficLogResponse({}));
  }

  /**
   * 获取直播指定域名的原始访问日志的下载地址
   * 
   * @param request - DescribeLiveUserTrafficLogRequest
   * @returns DescribeLiveUserTrafficLogResponse
   */
  async describeLiveUserTrafficLog(request: $_model.DescribeLiveUserTrafficLogRequest): Promise<$_model.DescribeLiveUserTrafficLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveUserTrafficLogWithOptions(request, runtime);
  }

  /**
   * Queries the ownership verification content of a domain name.
   * 
   * @remarks
   * ## [](#)Usage notes
   * *   You can call this operation to query the ownership verification content of a single domain name.
   * *   You can call this operation up to 30 times per second per account.
   * *   When you call this operation, you need to specify a domain name as a request parameter.
   * *   After a successful call, the verification content and request ID are returned, which can be used for subsequent operations.
   * 
   * @param request - DescribeLiveVerifyContentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLiveVerifyContentResponse
   */
  async describeLiveVerifyContentWithOptions(request: $_model.DescribeLiveVerifyContentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLiveVerifyContentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLiveVerifyContent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLiveVerifyContentResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLiveVerifyContentResponse({}));
  }

  /**
   * Queries the ownership verification content of a domain name.
   * 
   * @remarks
   * ## [](#)Usage notes
   * *   You can call this operation to query the ownership verification content of a single domain name.
   * *   You can call this operation up to 30 times per second per account.
   * *   When you call this operation, you need to specify a domain name as a request parameter.
   * *   After a successful call, the verification content and request ID are returned, which can be used for subsequent operations.
   * 
   * @param request - DescribeLiveVerifyContentRequest
   * @returns DescribeLiveVerifyContentResponse
   */
  async describeLiveVerifyContent(request: $_model.DescribeLiveVerifyContentRequest): Promise<$_model.DescribeLiveVerifyContentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLiveVerifyContentWithOptions(request, runtime);
  }

  /**
   * DescribeMeterLiveBypassDuration
   * 
   * @remarks
   * ## [](#)Usage notes
   * *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 5 minutes.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeMeterLiveBypassDurationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMeterLiveBypassDurationResponse
   */
  async describeMeterLiveBypassDurationWithOptions(request: $_model.DescribeMeterLiveBypassDurationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMeterLiveBypassDurationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMeterLiveBypassDuration",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMeterLiveBypassDurationResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMeterLiveBypassDurationResponse({}));
  }

  /**
   * DescribeMeterLiveBypassDuration
   * 
   * @remarks
   * ## [](#)Usage notes
   * *   The maximum time range for a query is 31 days.
   * *   The minimum time granularity for a query is 5 minutes.
   * *   You can query the data in the last 90 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeMeterLiveBypassDurationRequest
   * @returns DescribeMeterLiveBypassDurationResponse
   */
  async describeMeterLiveBypassDuration(request: $_model.DescribeMeterLiveBypassDurationRequest): Promise<$_model.DescribeMeterLiveBypassDurationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMeterLiveBypassDurationWithOptions(request, runtime);
  }

  /**
   * Queries stream mixing tasks.
   * 
   * @remarks
   * You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create stream mixing tasks and then call this operation to query the list of stream mixing tasks.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeMixStreamListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMixStreamListResponse
   */
  async describeMixStreamListWithOptions(request: $_model.DescribeMixStreamListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMixStreamListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.mixStreamId)) {
      query["MixStreamId"] = request.mixStreamId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMixStreamList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMixStreamListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMixStreamListResponse({}));
  }

  /**
   * Queries stream mixing tasks.
   * 
   * @remarks
   * You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create stream mixing tasks and then call this operation to query the list of stream mixing tasks.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeMixStreamListRequest
   * @returns DescribeMixStreamListResponse
   */
  async describeMixStreamList(request: $_model.DescribeMixStreamListRequest): Promise<$_model.DescribeMixStreamListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMixStreamListWithOptions(request, runtime);
  }

  /**
   * Queries the information about the factors that cause latency of first frames within a specified period of time.
   * 
   * @remarks
   * You can call this operation to query the information about the factors that cause latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param tmpReq - DescribeRTSNativeSDKFirstFrameCostRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRTSNativeSDKFirstFrameCostResponse
   */
  async describeRTSNativeSDKFirstFrameCostWithOptions(tmpReq: $_model.DescribeRTSNativeSDKFirstFrameCostRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRTSNativeSDKFirstFrameCostResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeRTSNativeSDKFirstFrameCostShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.domainNameList)) {
      request.domainNameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.domainNameList, "DomainNameList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dataInterval)) {
      query["DataInterval"] = request.dataInterval;
    }

    if (!$dara.isNull(request.domainNameListShrink)) {
      query["DomainNameList"] = request.domainNameListShrink;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRTSNativeSDKFirstFrameCost",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRTSNativeSDKFirstFrameCostResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRTSNativeSDKFirstFrameCostResponse({}));
  }

  /**
   * Queries the information about the factors that cause latency of first frames within a specified period of time.
   * 
   * @remarks
   * You can call this operation to query the information about the factors that cause latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param request - DescribeRTSNativeSDKFirstFrameCostRequest
   * @returns DescribeRTSNativeSDKFirstFrameCostResponse
   */
  async describeRTSNativeSDKFirstFrameCost(request: $_model.DescribeRTSNativeSDKFirstFrameCostRequest): Promise<$_model.DescribeRTSNativeSDKFirstFrameCostResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRTSNativeSDKFirstFrameCostWithOptions(request, runtime);
  }

  /**
   * Queries the average latency of first frames within a specified period of time.
   * 
   * @remarks
   * You can call this operation to query the average latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param tmpReq - DescribeRTSNativeSDKFirstFrameDelayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRTSNativeSDKFirstFrameDelayResponse
   */
  async describeRTSNativeSDKFirstFrameDelayWithOptions(tmpReq: $_model.DescribeRTSNativeSDKFirstFrameDelayRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRTSNativeSDKFirstFrameDelayResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeRTSNativeSDKFirstFrameDelayShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.domainNameList)) {
      request.domainNameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.domainNameList, "DomainNameList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dataInterval)) {
      query["DataInterval"] = request.dataInterval;
    }

    if (!$dara.isNull(request.domainNameListShrink)) {
      query["DomainNameList"] = request.domainNameListShrink;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRTSNativeSDKFirstFrameDelay",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRTSNativeSDKFirstFrameDelayResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRTSNativeSDKFirstFrameDelayResponse({}));
  }

  /**
   * Queries the average latency of first frames within a specified period of time.
   * 
   * @remarks
   * You can call this operation to query the average latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param request - DescribeRTSNativeSDKFirstFrameDelayRequest
   * @returns DescribeRTSNativeSDKFirstFrameDelayResponse
   */
  async describeRTSNativeSDKFirstFrameDelay(request: $_model.DescribeRTSNativeSDKFirstFrameDelayRequest): Promise<$_model.DescribeRTSNativeSDKFirstFrameDelayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRTSNativeSDKFirstFrameDelayWithOptions(request, runtime);
  }

  /**
   * Queries the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes.
   * 
   * @remarks
   * You can call this operation to query the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param tmpReq - DescribeRTSNativeSDKPlayFailStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRTSNativeSDKPlayFailStatusResponse
   */
  async describeRTSNativeSDKPlayFailStatusWithOptions(tmpReq: $_model.DescribeRTSNativeSDKPlayFailStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRTSNativeSDKPlayFailStatusResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeRTSNativeSDKPlayFailStatusShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.domainNameList)) {
      request.domainNameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.domainNameList, "DomainNameList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dataInterval)) {
      query["DataInterval"] = request.dataInterval;
    }

    if (!$dara.isNull(request.domainNameListShrink)) {
      query["DomainNameList"] = request.domainNameListShrink;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRTSNativeSDKPlayFailStatus",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRTSNativeSDKPlayFailStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRTSNativeSDKPlayFailStatusResponse({}));
  }

  /**
   * Queries the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes.
   * 
   * @remarks
   * You can call this operation to query the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param request - DescribeRTSNativeSDKPlayFailStatusRequest
   * @returns DescribeRTSNativeSDKPlayFailStatusResponse
   */
  async describeRTSNativeSDKPlayFailStatus(request: $_model.DescribeRTSNativeSDKPlayFailStatusRequest): Promise<$_model.DescribeRTSNativeSDKPlayFailStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRTSNativeSDKPlayFailStatusWithOptions(request, runtime);
  }

  /**
   * Queries the playback duration within a specified period of time.
   * 
   * @remarks
   * You can query the playback duration within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param tmpReq - DescribeRTSNativeSDKPlayTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRTSNativeSDKPlayTimeResponse
   */
  async describeRTSNativeSDKPlayTimeWithOptions(tmpReq: $_model.DescribeRTSNativeSDKPlayTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRTSNativeSDKPlayTimeResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeRTSNativeSDKPlayTimeShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.domainNameList)) {
      request.domainNameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.domainNameList, "DomainNameList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dataInterval)) {
      query["DataInterval"] = request.dataInterval;
    }

    if (!$dara.isNull(request.domainNameListShrink)) {
      query["DomainNameList"] = request.domainNameListShrink;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRTSNativeSDKPlayTime",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRTSNativeSDKPlayTimeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRTSNativeSDKPlayTimeResponse({}));
  }

  /**
   * Queries the playback duration within a specified period of time.
   * 
   * @remarks
   * You can query the playback duration within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param request - DescribeRTSNativeSDKPlayTimeRequest
   * @returns DescribeRTSNativeSDKPlayTimeResponse
   */
  async describeRTSNativeSDKPlayTime(request: $_model.DescribeRTSNativeSDKPlayTimeRequest): Promise<$_model.DescribeRTSNativeSDKPlayTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRTSNativeSDKPlayTimeWithOptions(request, runtime);
  }

  /**
   * Queries the total number of playbacks and the number of successful playbacks within a specified period of time.
   * 
   * @remarks
   * QPS limit You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param tmpReq - DescribeRTSNativeSDKVvDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRTSNativeSDKVvDataResponse
   */
  async describeRTSNativeSDKVvDataWithOptions(tmpReq: $_model.DescribeRTSNativeSDKVvDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRTSNativeSDKVvDataResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeRTSNativeSDKVvDataShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.domainNameList)) {
      request.domainNameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.domainNameList, "DomainNameList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dataInterval)) {
      query["DataInterval"] = request.dataInterval;
    }

    if (!$dara.isNull(request.domainNameListShrink)) {
      query["DomainNameList"] = request.domainNameListShrink;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRTSNativeSDKVvData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRTSNativeSDKVvDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRTSNativeSDKVvDataResponse({}));
  }

  /**
   * Queries the total number of playbacks and the number of successful playbacks within a specified period of time.
   * 
   * @remarks
   * QPS limit You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
   * 
   * @param request - DescribeRTSNativeSDKVvDataRequest
   * @returns DescribeRTSNativeSDKVvDataResponse
   */
  async describeRTSNativeSDKVvData(request: $_model.DescribeRTSNativeSDKVvDataRequest): Promise<$_model.DescribeRTSNativeSDKVvDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRTSNativeSDKVvDataWithOptions(request, runtime);
  }

  /**
   * 查询rtc云端录制文件与任务信息
   * 
   * @param request - DescribeRtcCloudRecordingFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRtcCloudRecordingFilesResponse
   */
  async describeRtcCloudRecordingFilesWithOptions(request: $_model.DescribeRtcCloudRecordingFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRtcCloudRecordingFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRtcCloudRecordingFiles",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRtcCloudRecordingFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRtcCloudRecordingFilesResponse({}));
  }

  /**
   * 查询rtc云端录制文件与任务信息
   * 
   * @param request - DescribeRtcCloudRecordingFilesRequest
   * @returns DescribeRtcCloudRecordingFilesResponse
   */
  async describeRtcCloudRecordingFiles(request: $_model.DescribeRtcCloudRecordingFilesRequest): Promise<$_model.DescribeRtcCloudRecordingFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRtcCloudRecordingFilesWithOptions(request, runtime);
  }

  /**
   * Queries information about a subscription to mixed-stream relay events.
   * 
   * @remarks
   * ### Usage notes
   * - You can call this operation to query information about a subscription to mixed-stream relay events. 
   * - Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription. 
   * ### QPS limit
   * - You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeRtcMPUEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRtcMPUEventSubResponse
   */
  async describeRtcMPUEventSubWithOptions(request: $_model.DescribeRtcMPUEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRtcMPUEventSubResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRtcMPUEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRtcMPUEventSubResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRtcMPUEventSubResponse({}));
  }

  /**
   * Queries information about a subscription to mixed-stream relay events.
   * 
   * @remarks
   * ### Usage notes
   * - You can call this operation to query information about a subscription to mixed-stream relay events. 
   * - Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription. 
   * ### QPS limit
   * - You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeRtcMPUEventSubRequest
   * @returns DescribeRtcMPUEventSubResponse
   */
  async describeRtcMPUEventSub(request: $_model.DescribeRtcMPUEventSubRequest): Promise<$_model.DescribeRtcMPUEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRtcMPUEventSubWithOptions(request, runtime);
  }

  /**
   * Queries the details of the episode list.
   * 
   * @remarks
   * You cannot call this operation if the episode list is empty. For information about how to add episodes to the episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeShowListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeShowListResponse
   */
  async describeShowListWithOptions(request: $_model.DescribeShowListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeShowListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeShowList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeShowListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeShowListResponse({}));
  }

  /**
   * Queries the details of the episode list.
   * 
   * @remarks
   * You cannot call this operation if the episode list is empty. For information about how to add episodes to the episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeShowListRequest
   * @returns DescribeShowListResponse
   */
  async describeShowList(request: $_model.DescribeShowListRequest): Promise<$_model.DescribeShowListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeShowListWithOptions(request, runtime);
  }

  /**
   * Queries configurations of stream-level region blocking.
   * 
   * @remarks
   * Queries configurations of stream-level region blocking.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeStreamLocationBlockRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeStreamLocationBlockResponse
   */
  async describeStreamLocationBlockWithOptions(request: $_model.DescribeStreamLocationBlockRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeStreamLocationBlockResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.blockType)) {
      query["BlockType"] = request.blockType;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeStreamLocationBlock",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeStreamLocationBlockResponse>(await this.callApi(params, req, runtime), new $_model.DescribeStreamLocationBlockResponse({}));
  }

  /**
   * Queries configurations of stream-level region blocking.
   * 
   * @remarks
   * Queries configurations of stream-level region blocking.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeStreamLocationBlockRequest
   * @returns DescribeStreamLocationBlockResponse
   */
  async describeStreamLocationBlock(request: $_model.DescribeStreamLocationBlockRequest): Promise<$_model.DescribeStreamLocationBlockResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeStreamLocationBlockWithOptions(request, runtime);
  }

  /**
   * Queries one or more layouts of a virtual studio.
   * 
   * @remarks
   * You must call the [AddStudioLayout](https://help.aliyun.com/document_detail/215388.html) operation to configure layouts for a virtual studio before you call this operation to query layouts.
   * ## QPS limits
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - DescribeStudioLayoutsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeStudioLayoutsResponse
   */
  async describeStudioLayoutsWithOptions(request: $_model.DescribeStudioLayoutsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeStudioLayoutsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeStudioLayouts",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeStudioLayoutsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeStudioLayoutsResponse({}));
  }

  /**
   * Queries one or more layouts of a virtual studio.
   * 
   * @remarks
   * You must call the [AddStudioLayout](https://help.aliyun.com/document_detail/215388.html) operation to configure layouts for a virtual studio before you call this operation to query layouts.
   * ## QPS limits
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - DescribeStudioLayoutsRequest
   * @returns DescribeStudioLayoutsResponse
   */
  async describeStudioLayouts(request: $_model.DescribeStudioLayoutsRequest): Promise<$_model.DescribeStudioLayoutsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeStudioLayoutsWithOptions(request, runtime);
  }

  /**
   * Queries the stream pulling information about a live stream of a headline.
   * 
   * @remarks
   * You can call this operation to query the stream pulling information about a live stream of a headline.
   * ## [](#qps-)QPS limits
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeToutiaoLivePlayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeToutiaoLivePlayResponse
   */
  async describeToutiaoLivePlayWithOptions(request: $_model.DescribeToutiaoLivePlayRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeToutiaoLivePlayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeToutiaoLivePlay",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeToutiaoLivePlayResponse>(await this.callApi(params, req, runtime), new $_model.DescribeToutiaoLivePlayResponse({}));
  }

  /**
   * Queries the stream pulling information about a live stream of a headline.
   * 
   * @remarks
   * You can call this operation to query the stream pulling information about a live stream of a headline.
   * ## [](#qps-)QPS limits
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeToutiaoLivePlayRequest
   * @returns DescribeToutiaoLivePlayResponse
   */
  async describeToutiaoLivePlay(request: $_model.DescribeToutiaoLivePlayRequest): Promise<$_model.DescribeToutiaoLivePlayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeToutiaoLivePlayWithOptions(request, runtime);
  }

  /**
   * Queries the ingest information of a specified live stream that is ingested to Toutiao.
   * 
   * @remarks
   * You can call this operation to query the ingest information of a specified live stream that is ingested to Toutiao.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeToutiaoLivePublishRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeToutiaoLivePublishResponse
   */
  async describeToutiaoLivePublishWithOptions(request: $_model.DescribeToutiaoLivePublishRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeToutiaoLivePublishResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeToutiaoLivePublish",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeToutiaoLivePublishResponse>(await this.callApi(params, req, runtime), new $_model.DescribeToutiaoLivePublishResponse({}));
  }

  /**
   * Queries the ingest information of a specified live stream that is ingested to Toutiao.
   * 
   * @remarks
   * You can call this operation to query the ingest information of a specified live stream that is ingested to Toutiao.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeToutiaoLivePublishRequest
   * @returns DescribeToutiaoLivePublishResponse
   */
  async describeToutiaoLivePublish(request: $_model.DescribeToutiaoLivePublishRequest): Promise<$_model.DescribeToutiaoLivePublishResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeToutiaoLivePublishWithOptions(request, runtime);
  }

  /**
   * 新增查询 uid 级别或域名app级别在线流
   * 
   * @param request - DescribeUidOnlineStreamsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUidOnlineStreamsResponse
   */
  async describeUidOnlineStreamsWithOptions(request: $_model.DescribeUidOnlineStreamsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUidOnlineStreamsResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUidOnlineStreams",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUidOnlineStreamsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUidOnlineStreamsResponse({}));
  }

  /**
   * 新增查询 uid 级别或域名app级别在线流
   * 
   * @param request - DescribeUidOnlineStreamsRequest
   * @returns DescribeUidOnlineStreamsResponse
   */
  async describeUidOnlineStreams(request: $_model.DescribeUidOnlineStreamsRequest): Promise<$_model.DescribeUidOnlineStreamsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUidOnlineStreamsWithOptions(request, runtime);
  }

  /**
   * Queries the daily peak inbound bandwidth.
   * 
   * @remarks
   * You can call this operation to query the daily peak inbound bandwidth.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeUpBpsPeakDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUpBpsPeakDataResponse
   */
  async describeUpBpsPeakDataWithOptions(request: $_model.DescribeUpBpsPeakDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUpBpsPeakDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainSwitch)) {
      query["DomainSwitch"] = request.domainSwitch;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUpBpsPeakData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUpBpsPeakDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUpBpsPeakDataResponse({}));
  }

  /**
   * Queries the daily peak inbound bandwidth.
   * 
   * @remarks
   * You can call this operation to query the daily peak inbound bandwidth.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeUpBpsPeakDataRequest
   * @returns DescribeUpBpsPeakDataResponse
   */
  async describeUpBpsPeakData(request: $_model.DescribeUpBpsPeakDataRequest): Promise<$_model.DescribeUpBpsPeakDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUpBpsPeakDataWithOptions(request, runtime);
  }

  /**
   * Queries the daily peak inbound bandwidth of a leased line.
   * 
   * @remarks
   * You can call this operation to query the daily peak inbound bandwidth of a leased line.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeUpBpsPeakOfLineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUpBpsPeakOfLineResponse
   */
  async describeUpBpsPeakOfLineWithOptions(request: $_model.DescribeUpBpsPeakOfLineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUpBpsPeakOfLineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainSwitch)) {
      query["DomainSwitch"] = request.domainSwitch;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.line)) {
      query["Line"] = request.line;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUpBpsPeakOfLine",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUpBpsPeakOfLineResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUpBpsPeakOfLineResponse({}));
  }

  /**
   * Queries the daily peak inbound bandwidth of a leased line.
   * 
   * @remarks
   * You can call this operation to query the daily peak inbound bandwidth of a leased line.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeUpBpsPeakOfLineRequest
   * @returns DescribeUpBpsPeakOfLineResponse
   */
  async describeUpBpsPeakOfLine(request: $_model.DescribeUpBpsPeakOfLineRequest): Promise<$_model.DescribeUpBpsPeakOfLineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUpBpsPeakOfLineWithOptions(request, runtime);
  }

  /**
   * Queries the daily peak number of concurrently ingested streams.
   * 
   * @remarks
   * You can call this operation to query the daily peak number of concurrently ingested streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeUpPeakPublishStreamDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUpPeakPublishStreamDataResponse
   */
  async describeUpPeakPublishStreamDataWithOptions(request: $_model.DescribeUpPeakPublishStreamDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUpPeakPublishStreamDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainSwitch)) {
      query["DomainSwitch"] = request.domainSwitch;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUpPeakPublishStreamData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUpPeakPublishStreamDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUpPeakPublishStreamDataResponse({}));
  }

  /**
   * Queries the daily peak number of concurrently ingested streams.
   * 
   * @remarks
   * You can call this operation to query the daily peak number of concurrently ingested streams.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - DescribeUpPeakPublishStreamDataRequest
   * @returns DescribeUpPeakPublishStreamDataResponse
   */
  async describeUpPeakPublishStreamData(request: $_model.DescribeUpPeakPublishStreamDataRequest): Promise<$_model.DescribeUpPeakPublishStreamDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUpPeakPublishStreamDataWithOptions(request, runtime);
  }

  /**
   * Suspends real-time log delivery for one or more domain names.
   * 
   * @remarks
   * Obtain a domain name for which real-time log delivery is enabled, and then call this operation to suspend real-time log delivery for the domain name.
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DisableLiveRealtimeLogDeliveryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableLiveRealtimeLogDeliveryResponse
   */
  async disableLiveRealtimeLogDeliveryWithOptions(request: $_model.DisableLiveRealtimeLogDeliveryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DisableLiveRealtimeLogDeliveryResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DisableLiveRealtimeLogDelivery",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DisableLiveRealtimeLogDeliveryResponse>(await this.callApi(params, req, runtime), new $_model.DisableLiveRealtimeLogDeliveryResponse({}));
  }

  /**
   * Suspends real-time log delivery for one or more domain names.
   * 
   * @remarks
   * Obtain a domain name for which real-time log delivery is enabled, and then call this operation to suspend real-time log delivery for the domain name.
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DisableLiveRealtimeLogDeliveryRequest
   * @returns DisableLiveRealtimeLogDeliveryResponse
   */
  async disableLiveRealtimeLogDelivery(request: $_model.DisableLiveRealtimeLogDeliveryRequest): Promise<$_model.DisableLiveRealtimeLogDeliveryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.disableLiveRealtimeLogDeliveryWithOptions(request, runtime);
  }

  /**
   * Dynamically updates a watermark.
   * 
   * @remarks
   * Dynamically updating a watermark means replacing the watermark template ID during live streaming. Before you call this operation to update a watermark, you must prepare the watermark template ID that is used for replacement. The watermark template ID is specified by the **TemplateId** parameter of this operation. You can call the [DescribeLiveStreamWatermarks](https://help.aliyun.com/document_detail/2848102.html) operation to obtain available watermark template IDs.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DynamicUpdateWaterMarkStreamRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DynamicUpdateWaterMarkStreamRuleResponse
   */
  async dynamicUpdateWaterMarkStreamRuleWithOptions(request: $_model.DynamicUpdateWaterMarkStreamRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DynamicUpdateWaterMarkStreamRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DynamicUpdateWaterMarkStreamRule",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DynamicUpdateWaterMarkStreamRuleResponse>(await this.callApi(params, req, runtime), new $_model.DynamicUpdateWaterMarkStreamRuleResponse({}));
  }

  /**
   * Dynamically updates a watermark.
   * 
   * @remarks
   * Dynamically updating a watermark means replacing the watermark template ID during live streaming. Before you call this operation to update a watermark, you must prepare the watermark template ID that is used for replacement. The watermark template ID is specified by the **TemplateId** parameter of this operation. You can call the [DescribeLiveStreamWatermarks](https://help.aliyun.com/document_detail/2848102.html) operation to obtain available watermark template IDs.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DynamicUpdateWaterMarkStreamRuleRequest
   * @returns DynamicUpdateWaterMarkStreamRuleResponse
   */
  async dynamicUpdateWaterMarkStreamRule(request: $_model.DynamicUpdateWaterMarkStreamRuleRequest): Promise<$_model.DynamicUpdateWaterMarkStreamRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.dynamicUpdateWaterMarkStreamRuleWithOptions(request, runtime);
  }

  /**
   * Edits an episode list.
   * 
   * @remarks
   * You can call this operation to update all configurations of episodes in an episode list or replace the episodes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EditPlaylistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EditPlaylistResponse
   */
  async editPlaylistWithOptions(request: $_model.EditPlaylistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EditPlaylistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programConfig)) {
      query["ProgramConfig"] = request.programConfig;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.programItems)) {
      query["ProgramItems"] = request.programItems;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EditPlaylist",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EditPlaylistResponse>(await this.callApi(params, req, runtime), new $_model.EditPlaylistResponse({}));
  }

  /**
   * Edits an episode list.
   * 
   * @remarks
   * You can call this operation to update all configurations of episodes in an episode list or replace the episodes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EditPlaylistRequest
   * @returns EditPlaylistResponse
   */
  async editPlaylist(request: $_model.EditPlaylistRequest): Promise<$_model.EditPlaylistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.editPlaylistWithOptions(request, runtime);
  }

  /**
   * Creates an editing task.
   * 
   * @remarks
   * You can call this operation to create an editing task by specifying the production studio ID and the episode ID. You will not receive a notification after the editing task is created. You can call the [GetEditingJobInfo](https://help.aliyun.com/document_detail/2848059.html) operation to query the status of the editing task.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EditShowAndReplaceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EditShowAndReplaceResponse
   */
  async editShowAndReplaceWithOptions(request: $_model.EditShowAndReplaceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EditShowAndReplaceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.showId)) {
      query["ShowId"] = request.showId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.storageInfo)) {
      query["StorageInfo"] = request.storageInfo;
    }

    if (!$dara.isNull(request.userData)) {
      query["UserData"] = request.userData;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EditShowAndReplace",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EditShowAndReplaceResponse>(await this.callApi(params, req, runtime), new $_model.EditShowAndReplaceResponse({}));
  }

  /**
   * Creates an editing task.
   * 
   * @remarks
   * You can call this operation to create an editing task by specifying the production studio ID and the episode ID. You will not receive a notification after the editing task is created. You can call the [GetEditingJobInfo](https://help.aliyun.com/document_detail/2848059.html) operation to query the status of the editing task.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EditShowAndReplaceRequest
   * @returns EditShowAndReplaceResponse
   */
  async editShowAndReplace(request: $_model.EditShowAndReplaceRequest): Promise<$_model.EditShowAndReplaceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.editShowAndReplaceWithOptions(request, runtime);
  }

  /**
   * Switches a scene to the standby resource in a production studio.
   * 
   * @remarks
   * You can call this operation to switch a specified scene to the standby resource. Only a PGM scene is supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EffectCasterUrgentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EffectCasterUrgentResponse
   */
  async effectCasterUrgentWithOptions(request: $_model.EffectCasterUrgentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EffectCasterUrgentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EffectCasterUrgent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EffectCasterUrgentResponse>(await this.callApi(params, req, runtime), new $_model.EffectCasterUrgentResponse({}));
  }

  /**
   * Switches a scene to the standby resource in a production studio.
   * 
   * @remarks
   * You can call this operation to switch a specified scene to the standby resource. Only a PGM scene is supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EffectCasterUrgentRequest
   * @returns EffectCasterUrgentResponse
   */
  async effectCasterUrgent(request: $_model.EffectCasterUrgentRequest): Promise<$_model.EffectCasterUrgentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.effectCasterUrgentWithOptions(request, runtime);
  }

  /**
   * Updates the standby resource in a specified scene.
   * 
   * @remarks
   * Make sure that the resource is referenced by the scene.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EffectCasterVideoResourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EffectCasterVideoResourceResponse
   */
  async effectCasterVideoResourceWithOptions(request: $_model.EffectCasterVideoResourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EffectCasterVideoResourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EffectCasterVideoResource",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EffectCasterVideoResourceResponse>(await this.callApi(params, req, runtime), new $_model.EffectCasterVideoResourceResponse({}));
  }

  /**
   * Updates the standby resource in a specified scene.
   * 
   * @remarks
   * Make sure that the resource is referenced by the scene.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - EffectCasterVideoResourceRequest
   * @returns EffectCasterVideoResourceResponse
   */
  async effectCasterVideoResource(request: $_model.EffectCasterVideoResourceRequest): Promise<$_model.EffectCasterVideoResourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.effectCasterVideoResourceWithOptions(request, runtime);
  }

  /**
   * Enables real-time log delivery for one or more domain names.
   * 
   * @remarks
   * ##
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * ## QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - EnableLiveRealtimeLogDeliveryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableLiveRealtimeLogDeliveryResponse
   */
  async enableLiveRealtimeLogDeliveryWithOptions(request: $_model.EnableLiveRealtimeLogDeliveryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EnableLiveRealtimeLogDeliveryResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EnableLiveRealtimeLogDelivery",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EnableLiveRealtimeLogDeliveryResponse>(await this.callApi(params, req, runtime), new $_model.EnableLiveRealtimeLogDeliveryResponse({}));
  }

  /**
   * Enables real-time log delivery for one or more domain names.
   * 
   * @remarks
   * ##
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * ## QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - EnableLiveRealtimeLogDeliveryRequest
   * @returns EnableLiveRealtimeLogDeliveryResponse
   */
  async enableLiveRealtimeLogDelivery(request: $_model.EnableLiveRealtimeLogDeliveryRequest): Promise<$_model.EnableLiveRealtimeLogDeliveryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.enableLiveRealtimeLogDeliveryWithOptions(request, runtime);
  }

  /**
   * Disables a live stream. You can specify the time when the live stream is resumed.
   * 
   * @remarks
   * You can call this operation to disable a live stream and specify the time when the live stream is resumed. If the time is not specified, you can call the [ResumeLiveStream](https://help.aliyun.com/document_detail/2847831.html) operation to resume the live stream. This operation supports only the live streams ingested by streamers.
   * > 
   * *   This operation disables a live stream by adding the stream to the blacklist. You can disable up to 10,000 live streams. If the limit is reached, you cannot disable any more live streams. Pay attention to the number of live streams that are disabled. You can call the [DescribeLiveStreamsBlockList](https://help.aliyun.com/document_detail/2847825.html) operation to query the number of live streams that are disabled.
   * *   An interrupted live stream is not added to the blacklist and does not occupy the quota.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ForbidLiveStreamRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ForbidLiveStreamResponse
   */
  async forbidLiveStreamWithOptions(request: $_model.ForbidLiveStreamRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ForbidLiveStreamResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.liveStreamType)) {
      query["LiveStreamType"] = request.liveStreamType;
    }

    if (!$dara.isNull(request.oneshot)) {
      query["Oneshot"] = request.oneshot;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resumeTime)) {
      query["ResumeTime"] = request.resumeTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ForbidLiveStream",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ForbidLiveStreamResponse>(await this.callApi(params, req, runtime), new $_model.ForbidLiveStreamResponse({}));
  }

  /**
   * Disables a live stream. You can specify the time when the live stream is resumed.
   * 
   * @remarks
   * You can call this operation to disable a live stream and specify the time when the live stream is resumed. If the time is not specified, you can call the [ResumeLiveStream](https://help.aliyun.com/document_detail/2847831.html) operation to resume the live stream. This operation supports only the live streams ingested by streamers.
   * > 
   * *   This operation disables a live stream by adding the stream to the blacklist. You can disable up to 10,000 live streams. If the limit is reached, you cannot disable any more live streams. Pay attention to the number of live streams that are disabled. You can call the [DescribeLiveStreamsBlockList](https://help.aliyun.com/document_detail/2847825.html) operation to query the number of live streams that are disabled.
   * *   An interrupted live stream is not added to the blacklist and does not occupy the quota.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ForbidLiveStreamRequest
   * @returns ForbidLiveStreamResponse
   */
  async forbidLiveStream(request: $_model.ForbidLiveStreamRequest): Promise<$_model.ForbidLiveStreamResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.forbidLiveStreamWithOptions(request, runtime);
  }

  /**
   * Queries all custom stream mixing templates.
   * 
   * @remarks
   * You can call this operation to query all custom stream mixing templates. A list of template names and template configurations is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetAllCustomTemplatesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAllCustomTemplatesResponse
   */
  async getAllCustomTemplatesWithOptions(request: $_model.GetAllCustomTemplatesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAllCustomTemplatesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAllCustomTemplates",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAllCustomTemplatesResponse>(await this.callApi(params, req, runtime), new $_model.GetAllCustomTemplatesResponse({}));
  }

  /**
   * Queries all custom stream mixing templates.
   * 
   * @remarks
   * You can call this operation to query all custom stream mixing templates. A list of template names and template configurations is returned.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetAllCustomTemplatesRequest
   * @returns GetAllCustomTemplatesResponse
   */
  async getAllCustomTemplates(request: $_model.GetAllCustomTemplatesRequest): Promise<$_model.GetAllCustomTemplatesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAllCustomTemplatesWithOptions(request, runtime);
  }

  /**
   * Queries the information about a custom stream mixing template.
   * 
   * @remarks
   * Obtain the name of the custom stream mixing template, and then call this operation to query the information about the template.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetCustomTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCustomTemplateResponse
   */
  async getCustomTemplateWithOptions(request: $_model.GetCustomTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCustomTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCustomTemplate",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCustomTemplateResponse>(await this.callApi(params, req, runtime), new $_model.GetCustomTemplateResponse({}));
  }

  /**
   * Queries the information about a custom stream mixing template.
   * 
   * @remarks
   * Obtain the name of the custom stream mixing template, and then call this operation to query the information about the template.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetCustomTemplateRequest
   * @returns GetCustomTemplateResponse
   */
  async getCustomTemplate(request: $_model.GetCustomTemplateRequest): Promise<$_model.GetCustomTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCustomTemplateWithOptions(request, runtime);
  }

  /**
   * Queries the details of an edge transcoding task.
   * 
   * @remarks
   * To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetEdgeTranscodeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetEdgeTranscodeJobResponse
   */
  async getEdgeTranscodeJobWithOptions(request: $_model.GetEdgeTranscodeJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetEdgeTranscodeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetEdgeTranscodeJob",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetEdgeTranscodeJobResponse>(await this.callApi(params, req, runtime), new $_model.GetEdgeTranscodeJobResponse({}));
  }

  /**
   * Queries the details of an edge transcoding task.
   * 
   * @remarks
   * To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetEdgeTranscodeJobRequest
   * @returns GetEdgeTranscodeJobResponse
   */
  async getEdgeTranscodeJob(request: $_model.GetEdgeTranscodeJobRequest): Promise<$_model.GetEdgeTranscodeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getEdgeTranscodeJobWithOptions(request, runtime);
  }

  /**
   * Queries the details of an edge transcoding template.
   * 
   * @remarks
   *   You can call this operation to query the details of an edge transcoding template.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetEdgeTranscodeTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetEdgeTranscodeTemplateResponse
   */
  async getEdgeTranscodeTemplateWithOptions(request: $_model.GetEdgeTranscodeTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetEdgeTranscodeTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetEdgeTranscodeTemplate",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetEdgeTranscodeTemplateResponse>(await this.callApi(params, req, runtime), new $_model.GetEdgeTranscodeTemplateResponse({}));
  }

  /**
   * Queries the details of an edge transcoding template.
   * 
   * @remarks
   *   You can call this operation to query the details of an edge transcoding template.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetEdgeTranscodeTemplateRequest
   * @returns GetEdgeTranscodeTemplateResponse
   */
  async getEdgeTranscodeTemplate(request: $_model.GetEdgeTranscodeTemplateRequest): Promise<$_model.GetEdgeTranscodeTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getEdgeTranscodeTemplateWithOptions(request, runtime);
  }

  /**
   * Queries the information about editing tasks.
   * 
   * @remarks
   *   When you call this operation, you can specify the CasterId and ShowId parameters to query the information about specific editing tasks. Make sure that the parameter settings meet the requirements.
   * *   If you specify the ShowId parameter in the request, the information about the editing tasks for the specified episode is returned.
   * *   If you do not specify the ShowId parameter in the request, the information about the editing tasks for the entire episode list is returned.
   * ### [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetEditingJobInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetEditingJobInfoResponse
   */
  async getEditingJobInfoWithOptions(request: $_model.GetEditingJobInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetEditingJobInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.showId)) {
      query["ShowId"] = request.showId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetEditingJobInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetEditingJobInfoResponse>(await this.callApi(params, req, runtime), new $_model.GetEditingJobInfoResponse({}));
  }

  /**
   * Queries the information about editing tasks.
   * 
   * @remarks
   *   When you call this operation, you can specify the CasterId and ShowId parameters to query the information about specific editing tasks. Make sure that the parameter settings meet the requirements.
   * *   If you specify the ShowId parameter in the request, the information about the editing tasks for the specified episode is returned.
   * *   If you do not specify the ShowId parameter in the request, the information about the editing tasks for the entire episode list is returned.
   * ### [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - GetEditingJobInfoRequest
   * @returns GetEditingJobInfoResponse
   */
  async getEditingJobInfo(request: $_model.GetEditingJobInfoRequest): Promise<$_model.GetEditingJobInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getEditingJobInfoWithOptions(request, runtime);
  }

  /**
   * Queries the information about a specified interactive messaging application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - GetMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMessageAppResponse
   */
  async getMessageAppWithOptions(request: $_model.GetMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetMessageAppResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.GetMessageAppResponse({}));
  }

  /**
   * Queries the information about a specified interactive messaging application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - GetMessageAppRequest
   * @returns GetMessageAppResponse
   */
  async getMessageApp(request: $_model.GetMessageAppRequest): Promise<$_model.GetMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getMessageAppWithOptions(request, runtime);
  }

  /**
   * Queries the information about a message group.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - GetMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMessageGroupResponse
   */
  async getMessageGroupWithOptions(request: $_model.GetMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetMessageGroupResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.GetMessageGroupResponse({}));
  }

  /**
   * Queries the information about a message group.
   * 
   * @remarks
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - GetMessageGroupRequest
   * @returns GetMessageGroupResponse
   */
  async getMessageGroup(request: $_model.GetMessageGroupRequest): Promise<$_model.GetMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getMessageGroupWithOptions(request, runtime);
  }

  /**
   * Obtains a token that the client can use to establish a persistent connection over the LWP protocol and based on atomic capabilities.
   * 
   * @remarks
   * ##
   * Obtain the user ID, device ID, and device type of the client, and then pass the information to the server. When you call this operation, the server obtains a token and returns the token to the client. Different users have different user IDs, and different devices have different device IDs.
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - GetMessageTokenRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMessageTokenResponse
   */
  async getMessageTokenWithOptions(request: $_model.GetMessageTokenRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetMessageTokenResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.deviceId)) {
      body["DeviceId"] = request.deviceId;
    }

    if (!$dara.isNull(request.deviceType)) {
      body["DeviceType"] = request.deviceType;
    }

    if (!$dara.isNull(request.userId)) {
      body["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetMessageToken",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetMessageTokenResponse>(await this.callApi(params, req, runtime), new $_model.GetMessageTokenResponse({}));
  }

  /**
   * Obtains a token that the client can use to establish a persistent connection over the LWP protocol and based on atomic capabilities.
   * 
   * @remarks
   * ##
   * Obtain the user ID, device ID, and device type of the client, and then pass the information to the server. When you call this operation, the server obtains a token and returns the token to the client. Different users have different user IDs, and different devices have different device IDs.
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - GetMessageTokenRequest
   * @returns GetMessageTokenResponse
   */
  async getMessageToken(request: $_model.GetMessageTokenRequest): Promise<$_model.GetMessageTokenResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getMessageTokenWithOptions(request, runtime);
  }

  /**
   * @param request - GetTranscodeTaskStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTranscodeTaskStatusResponse
   */
  async getTranscodeTaskStatusWithOptions(request: $_model.GetTranscodeTaskStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetTranscodeTaskStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.pushDomain)) {
      query["PushDomain"] = request.pushDomain;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.transcodingTemplate)) {
      query["TranscodingTemplate"] = request.transcodingTemplate;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTranscodeTaskStatus",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetTranscodeTaskStatusResponse>(await this.callApi(params, req, runtime), new $_model.GetTranscodeTaskStatusResponse({}));
  }

  /**
   * @param request - GetTranscodeTaskStatusRequest
   * @returns GetTranscodeTaskStatusResponse
   */
  async getTranscodeTaskStatus(request: $_model.GetTranscodeTaskStatusRequest): Promise<$_model.GetTranscodeTaskStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTranscodeTaskStatusWithOptions(request, runtime);
  }

  /**
   * Configures prefetch for a live stream that is ingested based on Real-Time Communication (RTC).
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - HotLiveRtcStreamRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HotLiveRtcStreamResponse
   */
  async hotLiveRtcStreamWithOptions(request: $_model.HotLiveRtcStreamRequest, runtime: $dara.RuntimeOptions): Promise<$_model.HotLiveRtcStreamResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.audioMsid)) {
      query["AudioMsid"] = request.audioMsid;
    }

    if (!$dara.isNull(request.connectionTimeout)) {
      query["ConnectionTimeout"] = request.connectionTimeout;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.mediaTimeout)) {
      query["MediaTimeout"] = request.mediaTimeout;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionCode)) {
      query["RegionCode"] = request.regionCode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.videoMsid)) {
      query["VideoMsid"] = request.videoMsid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "HotLiveRtcStream",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.HotLiveRtcStreamResponse>(await this.callApi(params, req, runtime), new $_model.HotLiveRtcStreamResponse({}));
  }

  /**
   * Configures prefetch for a live stream that is ingested based on Real-Time Communication (RTC).
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - HotLiveRtcStreamRequest
   * @returns HotLiveRtcStreamResponse
   */
  async hotLiveRtcStream(request: $_model.HotLiveRtcStreamRequest): Promise<$_model.HotLiveRtcStreamResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.hotLiveRtcStreamWithOptions(request, runtime);
  }

  /**
   * Creates a scheduled task to start and stop the playback of a playlist at specified points in time.
   * 
   * @remarks
   * You can call this operation to create a scheduled task to start and stop the playback of an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - InitializeAutoShowListTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InitializeAutoShowListTaskResponse
   */
  async initializeAutoShowListTaskWithOptions(request: $_model.InitializeAutoShowListTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.InitializeAutoShowListTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callBackUrl)) {
      query["CallBackUrl"] = request.callBackUrl;
    }

    if (!$dara.isNull(request.casterConfig)) {
      query["CasterConfig"] = request.casterConfig;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceIds)) {
      query["ResourceIds"] = request.resourceIds;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InitializeAutoShowListTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.InitializeAutoShowListTaskResponse>(await this.callApi(params, req, runtime), new $_model.InitializeAutoShowListTaskResponse({}));
  }

  /**
   * Creates a scheduled task to start and stop the playback of a playlist at specified points in time.
   * 
   * @remarks
   * You can call this operation to create a scheduled task to start and stop the playback of an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - InitializeAutoShowListTaskRequest
   * @returns InitializeAutoShowListTaskResponse
   */
  async initializeAutoShowListTask(request: $_model.InitializeAutoShowListTaskRequest): Promise<$_model.InitializeAutoShowListTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.initializeAutoShowListTaskWithOptions(request, runtime);
  }

  /**
   * Joins a message group.
   * 
   * @remarks
   * You can call this operation up to 200 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - JoinMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns JoinMessageGroupResponse
   */
  async joinMessageGroupWithOptions(request: $_model.JoinMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.JoinMessageGroupResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.broadCastStatistics)) {
      body["BroadCastStatistics"] = request.broadCastStatistics;
    }

    if (!$dara.isNull(request.broadCastType)) {
      body["BroadCastType"] = request.broadCastType;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.userId)) {
      body["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "JoinMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.JoinMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.JoinMessageGroupResponse({}));
  }

  /**
   * Joins a message group.
   * 
   * @remarks
   * You can call this operation up to 200 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - JoinMessageGroupRequest
   * @returns JoinMessageGroupResponse
   */
  async joinMessageGroup(request: $_model.JoinMessageGroupRequest): Promise<$_model.JoinMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.joinMessageGroupWithOptions(request, runtime);
  }

  /**
   * Removes a user from an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - KickLiveMessageGroupUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns KickLiveMessageGroupUserResponse
   */
  async kickLiveMessageGroupUserWithOptions(request: $_model.KickLiveMessageGroupUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.KickLiveMessageGroupUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.kickoffUser)) {
      query["KickoffUser"] = request.kickoffUser;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "KickLiveMessageGroupUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.KickLiveMessageGroupUserResponse>(await this.callApi(params, req, runtime), new $_model.KickLiveMessageGroupUserResponse({}));
  }

  /**
   * Removes a user from an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - KickLiveMessageGroupUserRequest
   * @returns KickLiveMessageGroupUserResponse
   */
  async kickLiveMessageGroupUser(request: $_model.KickLiveMessageGroupUserRequest): Promise<$_model.KickLiveMessageGroupUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.kickLiveMessageGroupUserWithOptions(request, runtime);
  }

  /**
   * Leaves a message group.
   * 
   * @remarks
   * ##
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - LeaveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns LeaveMessageGroupResponse
   */
  async leaveMessageGroupWithOptions(request: $_model.LeaveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.LeaveMessageGroupResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.broadCastStatistics)) {
      body["BroadCastStatistics"] = request.broadCastStatistics;
    }

    if (!$dara.isNull(request.broadCastType)) {
      body["BroadCastType"] = request.broadCastType;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.userId)) {
      body["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "LeaveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.LeaveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.LeaveMessageGroupResponse({}));
  }

  /**
   * Leaves a message group.
   * 
   * @remarks
   * ##
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - LeaveMessageGroupRequest
   * @returns LeaveMessageGroupResponse
   */
  async leaveMessageGroup(request: $_model.LeaveMessageGroupRequest): Promise<$_model.LeaveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.leaveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Queries edge transcoding tasks.
   * 
   * @remarks
   *   You can call this operation to query edge transcoding tasks.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * *   You can query only tasks created or modified in the last 180 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEdgeTranscodeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListEdgeTranscodeJobResponse
   */
  async listEdgeTranscodeJobWithOptions(request: $_model.ListEdgeTranscodeJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListEdgeTranscodeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.keyword)) {
      query["Keyword"] = request.keyword;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sortBy)) {
      query["SortBy"] = request.sortBy;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListEdgeTranscodeJob",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListEdgeTranscodeJobResponse>(await this.callApi(params, req, runtime), new $_model.ListEdgeTranscodeJobResponse({}));
  }

  /**
   * Queries edge transcoding tasks.
   * 
   * @remarks
   *   You can call this operation to query edge transcoding tasks.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * *   You can query only tasks created or modified in the last 180 days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEdgeTranscodeJobRequest
   * @returns ListEdgeTranscodeJobResponse
   */
  async listEdgeTranscodeJob(request: $_model.ListEdgeTranscodeJobRequest): Promise<$_model.ListEdgeTranscodeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listEdgeTranscodeJobWithOptions(request, runtime);
  }

  /**
   * Queries the list of edge transcoding templates.
   * 
   * @remarks
   *   You can call this operation to query the list of edge transcoding templates.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEdgeTranscodeTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListEdgeTranscodeTemplateResponse
   */
  async listEdgeTranscodeTemplateWithOptions(request: $_model.ListEdgeTranscodeTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListEdgeTranscodeTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.keyword)) {
      query["Keyword"] = request.keyword;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sortBy)) {
      query["SortBy"] = request.sortBy;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.videoCodec)) {
      query["VideoCodec"] = request.videoCodec;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListEdgeTranscodeTemplate",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListEdgeTranscodeTemplateResponse>(await this.callApi(params, req, runtime), new $_model.ListEdgeTranscodeTemplateResponse({}));
  }

  /**
   * Queries the list of edge transcoding templates.
   * 
   * @remarks
   *   You can call this operation to query the list of edge transcoding templates.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEdgeTranscodeTemplateRequest
   * @returns ListEdgeTranscodeTemplateResponse
   */
  async listEdgeTranscodeTemplate(request: $_model.ListEdgeTranscodeTemplateRequest): Promise<$_model.ListEdgeTranscodeTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listEdgeTranscodeTemplateWithOptions(request, runtime);
  }

  /**
   * Queries the events generated in channels to which you subscribe.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListEventSubResponse
   */
  async listEventSubWithOptions(request: $_model.ListEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListEventSubResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListEventSubResponse>(await this.callApi(params, req, runtime), new $_model.ListEventSubResponse({}));
  }

  /**
   * Queries the events generated in channels to which you subscribe.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEventSubRequest
   * @returns ListEventSubResponse
   */
  async listEventSub(request: $_model.ListEventSubRequest): Promise<$_model.ListEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listEventSubWithOptions(request, runtime);
  }

  /**
   * Queries callback records.
   * 
   * @remarks
   *   The maximum time range to query is seven days.
   * *   The minimum time granularity to query is 1 minute.
   * *   You can query data in the last seven days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEventSubEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListEventSubEventResponse
   */
  async listEventSubEventWithOptions(request: $_model.ListEventSubEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListEventSubEventResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListEventSubEvent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListEventSubEventResponse>(await this.callApi(params, req, runtime), new $_model.ListEventSubEventResponse({}));
  }

  /**
   * Queries callback records.
   * 
   * @remarks
   *   The maximum time range to query is seven days.
   * *   The minimum time granularity to query is 1 minute.
   * *   You can query data in the last seven days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListEventSubEventRequest
   * @returns ListEventSubEventResponse
   */
  async listEventSubEvent(request: $_model.ListEventSubEventRequest): Promise<$_model.ListEventSubEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listEventSubEventWithOptions(request, runtime);
  }

  /**
   * Queries stream delay configurations.
   * 
   * @remarks
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveDelayConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveDelayConfigResponse
   */
  async listLiveDelayConfigWithOptions(request: $_model.ListLiveDelayConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveDelayConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNum)) {
      query["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveDelayConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveDelayConfigResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveDelayConfigResponse({}));
  }

  /**
   * Queries stream delay configurations.
   * 
   * @remarks
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveDelayConfigRequest
   * @returns ListLiveDelayConfigResponse
   */
  async listLiveDelayConfig(request: $_model.ListLiveDelayConfigRequest): Promise<$_model.ListLiveDelayConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveDelayConfigWithOptions(request, runtime);
  }

  /**
   * Queries interactive messaging applications.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageAppsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveMessageAppsResponse
   */
  async listLiveMessageAppsWithOptions(request: $_model.ListLiveMessageAppsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveMessageAppsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.nextPageToken)) {
      query["NextPageToken"] = request.nextPageToken;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveMessageApps",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveMessageAppsResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveMessageAppsResponse({}));
  }

  /**
   * Queries interactive messaging applications.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageAppsRequest
   * @returns ListLiveMessageAppsResponse
   */
  async listLiveMessageApps(request: $_model.ListLiveMessageAppsRequest): Promise<$_model.ListLiveMessageAppsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveMessageAppsWithOptions(request, runtime);
  }

  /**
   * Queries interactive messaging groups by page.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupByPageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveMessageGroupByPageResponse
   */
  async listLiveMessageGroupByPageWithOptions(request: $_model.ListLiveMessageGroupByPageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveMessageGroupByPageResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveMessageGroupByPage",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveMessageGroupByPageResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveMessageGroupByPageResponse({}));
  }

  /**
   * Queries interactive messaging groups by page.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupByPageRequest
   * @returns ListLiveMessageGroupByPageResponse
   */
  async listLiveMessageGroupByPage(request: $_model.ListLiveMessageGroupByPageRequest): Promise<$_model.ListLiveMessageGroupByPageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveMessageGroupByPageWithOptions(request, runtime);
  }

  /**
   * Queries the messages sent in a group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupMessagesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveMessageGroupMessagesResponse
   */
  async listLiveMessageGroupMessagesWithOptions(request: $_model.ListLiveMessageGroupMessagesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveMessageGroupMessagesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.beginTime)) {
      query["BeginTime"] = request.beginTime;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.msgType)) {
      query["MsgType"] = request.msgType;
    }

    if (!$dara.isNull(request.nextPageToken)) {
      query["NextPageToken"] = request.nextPageToken;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveMessageGroupMessages",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveMessageGroupMessagesResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveMessageGroupMessagesResponse({}));
  }

  /**
   * Queries the messages sent in a group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupMessagesRequest
   * @returns ListLiveMessageGroupMessagesResponse
   */
  async listLiveMessageGroupMessages(request: $_model.ListLiveMessageGroupMessagesRequest): Promise<$_model.ListLiveMessageGroupMessagesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveMessageGroupMessagesWithOptions(request, runtime);
  }

  /**
   * Queries the users in an interactive messaging group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * *   For a super group, which has more than 2,000 users, the user list cannot be queried. In addition, the notifications about users entering or leaving the group are sent at an interval of at least of 5 seconds. These notifications display the accurate number of users in the group for the time being, but do not display the list of all users entering or leaving the group. Once a group is upgraded to a super group, the user list of the group is immediately cleared. The super group cannot be restored to a normal group until all users in the group leave the group (that is, the group is closed). After you reopen the group, it is restored to a normal group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveMessageGroupUsersResponse
   */
  async listLiveMessageGroupUsersWithOptions(request: $_model.ListLiveMessageGroupUsersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveMessageGroupUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.nextPageToken)) {
      query["NextPageToken"] = request.nextPageToken;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveMessageGroupUsers",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveMessageGroupUsersResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveMessageGroupUsersResponse({}));
  }

  /**
   * Queries the users in an interactive messaging group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * *   For a super group, which has more than 2,000 users, the user list cannot be queried. In addition, the notifications about users entering or leaving the group are sent at an interval of at least of 5 seconds. These notifications display the accurate number of users in the group for the time being, but do not display the list of all users entering or leaving the group. Once a group is upgraded to a super group, the user list of the group is immediately cleared. The super group cannot be restored to a normal group until all users in the group leave the group (that is, the group is closed). After you reopen the group, it is restored to a normal group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupUsersRequest
   * @returns ListLiveMessageGroupUsersResponse
   */
  async listLiveMessageGroupUsers(request: $_model.ListLiveMessageGroupUsersRequest): Promise<$_model.ListLiveMessageGroupUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveMessageGroupUsersWithOptions(request, runtime);
  }

  /**
   * Queries the interactive messaging groups in an interactive messaging application.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveMessageGroupsResponse
   */
  async listLiveMessageGroupsWithOptions(request: $_model.ListLiveMessageGroupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveMessageGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupStatus)) {
      query["GroupStatus"] = request.groupStatus;
    }

    if (!$dara.isNull(request.nextPageToken)) {
      query["NextPageToken"] = request.nextPageToken;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveMessageGroups",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveMessageGroupsResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveMessageGroupsResponse({}));
  }

  /**
   * Queries the interactive messaging groups in an interactive messaging application.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveMessageGroupsRequest
   * @returns ListLiveMessageGroupsResponse
   */
  async listLiveMessageGroups(request: $_model.ListLiveMessageGroupsRequest): Promise<$_model.ListLiveMessageGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveMessageGroupsWithOptions(request, runtime);
  }

  /**
   * Queries all configurations of real-time log delivery under an Alibaba Cloud account.
   * 
   * @remarks
   * You can call this operation to query all configurations of real-time log delivery under an account. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveRealtimeLogDeliveryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveRealtimeLogDeliveryResponse
   */
  async listLiveRealtimeLogDeliveryWithOptions(request: $_model.ListLiveRealtimeLogDeliveryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveRealtimeLogDeliveryResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveRealtimeLogDelivery",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveRealtimeLogDeliveryResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveRealtimeLogDeliveryResponse({}));
  }

  /**
   * Queries all configurations of real-time log delivery under an Alibaba Cloud account.
   * 
   * @remarks
   * You can call this operation to query all configurations of real-time log delivery under an account. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveRealtimeLogDeliveryRequest
   * @returns ListLiveRealtimeLogDeliveryResponse
   */
  async listLiveRealtimeLogDelivery(request: $_model.ListLiveRealtimeLogDeliveryRequest): Promise<$_model.ListLiveRealtimeLogDeliveryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveRealtimeLogDeliveryWithOptions(request, runtime);
  }

  /**
   * Queries all domain names that are associated with a specific configuration of real-time log delivery.
   * 
   * @remarks
   *   You can call this operation to query all domain names that are associated with a specific configuration of real-time log delivery. The returned results indicate whether real-time log delivery is enabled or disabled for the domain names.
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveRealtimeLogDeliveryDomainsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveRealtimeLogDeliveryDomainsResponse
   */
  async listLiveRealtimeLogDeliveryDomainsWithOptions(request: $_model.ListLiveRealtimeLogDeliveryDomainsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveRealtimeLogDeliveryDomainsResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveRealtimeLogDeliveryDomains",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveRealtimeLogDeliveryDomainsResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveRealtimeLogDeliveryDomainsResponse({}));
  }

  /**
   * Queries all domain names that are associated with a specific configuration of real-time log delivery.
   * 
   * @remarks
   *   You can call this operation to query all domain names that are associated with a specific configuration of real-time log delivery. The returned results indicate whether real-time log delivery is enabled or disabled for the domain names.
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveRealtimeLogDeliveryDomainsRequest
   * @returns ListLiveRealtimeLogDeliveryDomainsResponse
   */
  async listLiveRealtimeLogDeliveryDomains(request: $_model.ListLiveRealtimeLogDeliveryDomainsRequest): Promise<$_model.ListLiveRealtimeLogDeliveryDomainsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveRealtimeLogDeliveryDomainsWithOptions(request, runtime);
  }

  /**
   * Queries all configurations of real-time log delivery.
   * 
   * @remarks
   * You can call this operation to query all configurations of real-time log delivery. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveRealtimeLogDeliveryInfosRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLiveRealtimeLogDeliveryInfosResponse
   */
  async listLiveRealtimeLogDeliveryInfosWithOptions(request: $_model.ListLiveRealtimeLogDeliveryInfosRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListLiveRealtimeLogDeliveryInfosResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLiveRealtimeLogDeliveryInfos",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLiveRealtimeLogDeliveryInfosResponse>(await this.callApi(params, req, runtime), new $_model.ListLiveRealtimeLogDeliveryInfosResponse({}));
  }

  /**
   * Queries all configurations of real-time log delivery.
   * 
   * @remarks
   * You can call this operation to query all configurations of real-time log delivery. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListLiveRealtimeLogDeliveryInfosRequest
   * @returns ListLiveRealtimeLogDeliveryInfosResponse
   */
  async listLiveRealtimeLogDeliveryInfos(request: $_model.ListLiveRealtimeLogDeliveryInfosRequest): Promise<$_model.ListLiveRealtimeLogDeliveryInfosResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLiveRealtimeLogDeliveryInfosWithOptions(request, runtime);
  }

  /**
   * Queries messages.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMessageResponse
   */
  async listMessageWithOptions(request: $_model.ListMessageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMessageResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.pageNum)) {
      body["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sortType)) {
      body["SortType"] = request.sortType;
    }

    if (!$dara.isNull(request.type)) {
      body["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMessage",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMessageResponse>(await this.callApi(params, req, runtime), new $_model.ListMessageResponse({}));
  }

  /**
   * Queries messages.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageRequest
   * @returns ListMessageResponse
   */
  async listMessage(request: $_model.ListMessageRequest): Promise<$_model.ListMessageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMessageWithOptions(request, runtime);
  }

  /**
   * Queries interactive messaging applications.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMessageAppResponse
   */
  async listMessageAppWithOptions(request: $_model.ListMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMessageAppResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.pageNum)) {
      body["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sortType)) {
      body["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.ListMessageAppResponse({}));
  }

  /**
   * Queries interactive messaging applications.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageAppRequest
   * @returns ListMessageAppResponse
   */
  async listMessageApp(request: $_model.ListMessageAppRequest): Promise<$_model.ListMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMessageAppWithOptions(request, runtime);
  }

  /**
   * Queries the message groups of a specified user.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMessageGroupResponse
   */
  async listMessageGroupWithOptions(request: $_model.ListMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMessageGroupResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.pageNum)) {
      body["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sortType)) {
      body["SortType"] = request.sortType;
    }

    if (!$dara.isNull(request.userId)) {
      body["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.ListMessageGroupResponse({}));
  }

  /**
   * Queries the message groups of a specified user.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageGroupRequest
   * @returns ListMessageGroupResponse
   */
  async listMessageGroup(request: $_model.ListMessageGroupRequest): Promise<$_model.ListMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMessageGroupWithOptions(request, runtime);
  }

  /**
   * Queries the members of a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageGroupUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMessageGroupUserResponse
   */
  async listMessageGroupUserWithOptions(request: $_model.ListMessageGroupUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMessageGroupUserResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.pageNum)) {
      body["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sortType)) {
      body["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMessageGroupUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMessageGroupUserResponse>(await this.callApi(params, req, runtime), new $_model.ListMessageGroupUserResponse({}));
  }

  /**
   * Queries the members of a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageGroupUserRequest
   * @returns ListMessageGroupUserResponse
   */
  async listMessageGroupUser(request: $_model.ListMessageGroupUserRequest): Promise<$_model.ListMessageGroupUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMessageGroupUserWithOptions(request, runtime);
  }

  /**
   * Queries user information by user ID.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - ListMessageGroupUserByIdRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMessageGroupUserByIdResponse
   */
  async listMessageGroupUserByIdWithOptions(tmpReq: $_model.ListMessageGroupUserByIdRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMessageGroupUserByIdResponse> {
    tmpReq.validate();
    let request = new $_model.ListMessageGroupUserByIdShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.userIdList)) {
      request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, "UserIdList", "simple");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.userIdListShrink)) {
      body["UserIdList"] = request.userIdListShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMessageGroupUserById",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMessageGroupUserByIdResponse>(await this.callApi(params, req, runtime), new $_model.ListMessageGroupUserByIdResponse({}));
  }

  /**
   * Queries user information by user ID.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMessageGroupUserByIdRequest
   * @returns ListMessageGroupUserByIdResponse
   */
  async listMessageGroupUserById(request: $_model.ListMessageGroupUserByIdRequest): Promise<$_model.ListMessageGroupUserByIdResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMessageGroupUserByIdWithOptions(request, runtime);
  }

  /**
   * Queries muted members in a messaging group.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMuteGroupUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMuteGroupUserResponse
   */
  async listMuteGroupUserWithOptions(request: $_model.ListMuteGroupUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMuteGroupUserResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    if (!$dara.isNull(request.pageNum)) {
      body["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMuteGroupUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMuteGroupUserResponse>(await this.callApi(params, req, runtime), new $_model.ListMuteGroupUserResponse({}));
  }

  /**
   * Queries muted members in a messaging group.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ListMuteGroupUserRequest
   * @returns ListMuteGroupUserResponse
   */
  async listMuteGroupUser(request: $_model.ListMuteGroupUserRequest): Promise<$_model.ListMuteGroupUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMuteGroupUserWithOptions(request, runtime);
  }

  /**
   * Queries the information about one or more episode lists.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episode lists and then call this operation to query the episode lists.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListPlaylistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPlaylistResponse
   */
  async listPlaylistWithOptions(request: $_model.ListPlaylistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListPlaylistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.page)) {
      query["Page"] = request.page;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListPlaylist",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPlaylistResponse>(await this.callApi(params, req, runtime), new $_model.ListPlaylistResponse({}));
  }

  /**
   * Queries the information about one or more episode lists.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episode lists and then call this operation to query the episode lists.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListPlaylistRequest
   * @returns ListPlaylistResponse
   */
  async listPlaylist(request: $_model.ListPlaylistRequest): Promise<$_model.ListPlaylistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPlaylistWithOptions(request, runtime);
  }

  /**
   * Queries the information about episodes in an episode list.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to query the episodes in the episode list
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListPlaylistItemsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPlaylistItemsResponse
   */
  async listPlaylistItemsWithOptions(request: $_model.ListPlaylistItemsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListPlaylistItemsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.programItemIds)) {
      query["ProgramItemIds"] = request.programItemIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListPlaylistItems",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPlaylistItemsResponse>(await this.callApi(params, req, runtime), new $_model.ListPlaylistItemsResponse({}));
  }

  /**
   * Queries the information about episodes in an episode list.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to query the episodes in the episode list
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListPlaylistItemsRequest
   * @returns ListPlaylistItemsResponse
   */
  async listPlaylistItems(request: $_model.ListPlaylistItemsRequest): Promise<$_model.ListPlaylistItemsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPlaylistItemsWithOptions(request, runtime);
  }

  /**
   * Queries the callback records of a subscription to mixed-stream relay events.
   * 
   * @remarks
   * You can call this operation to query the callback records of a subscription to mixed-stream relay events in the last seven days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListRtcMPUEventSubRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListRtcMPUEventSubRecordResponse
   */
  async listRtcMPUEventSubRecordWithOptions(request: $_model.ListRtcMPUEventSubRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListRtcMPUEventSubRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.subId)) {
      query["SubId"] = request.subId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListRtcMPUEventSubRecord",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListRtcMPUEventSubRecordResponse>(await this.callApi(params, req, runtime), new $_model.ListRtcMPUEventSubRecordResponse({}));
  }

  /**
   * Queries the callback records of a subscription to mixed-stream relay events.
   * 
   * @remarks
   * You can call this operation to query the callback records of a subscription to mixed-stream relay events in the last seven days.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListRtcMPUEventSubRecordRequest
   * @returns ListRtcMPUEventSubRecordResponse
   */
  async listRtcMPUEventSubRecord(request: $_model.ListRtcMPUEventSubRecordRequest): Promise<$_model.ListRtcMPUEventSubRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listRtcMPUEventSubRecordWithOptions(request, runtime);
  }

  /**
   * Queries the parameters of mixed-stream relay tasks.
   * 
   * @remarks
   *   You can call the ListRtcMPUTaskDetail operation to query the parameters of mixed-stream relay tasks that were created by calling the StartLiveMPUTask operation.
   * *   By default, the query results are sorted in reverse chronological order based on the task update time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListRtcMPUTaskDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListRtcMPUTaskDetailResponse
   */
  async listRtcMPUTaskDetailWithOptions(request: $_model.ListRtcMPUTaskDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListRtcMPUTaskDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.pageNo)) {
      query["PageNo"] = request.pageNo;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListRtcMPUTaskDetail",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListRtcMPUTaskDetailResponse>(await this.callApi(params, req, runtime), new $_model.ListRtcMPUTaskDetailResponse({}));
  }

  /**
   * Queries the parameters of mixed-stream relay tasks.
   * 
   * @remarks
   *   You can call the ListRtcMPUTaskDetail operation to query the parameters of mixed-stream relay tasks that were created by calling the StartLiveMPUTask operation.
   * *   By default, the query results are sorted in reverse chronological order based on the task update time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ListRtcMPUTaskDetailRequest
   * @returns ListRtcMPUTaskDetailResponse
   */
  async listRtcMPUTaskDetail(request: $_model.ListRtcMPUTaskDetailRequest): Promise<$_model.ListRtcMPUTaskDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listRtcMPUTaskDetailWithOptions(request, runtime);
  }

  /**
   * 直播回源监控数据
   * 
   * @param tmpReq - LiveUpstreamQosDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns LiveUpstreamQosDataResponse
   */
  async liveUpstreamQosDataWithOptions(tmpReq: $_model.LiveUpstreamQosDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.LiveUpstreamQosDataResponse> {
    tmpReq.validate();
    let request = new $_model.LiveUpstreamQosDataShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.cdnDomains)) {
      request.cdnDomainsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cdnDomains, "CdnDomains", "json");
    }

    if (!$dara.isNull(tmpReq.cdnIsps)) {
      request.cdnIspsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cdnIsps, "CdnIsps", "json");
    }

    if (!$dara.isNull(tmpReq.cdnProvinces)) {
      request.cdnProvincesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cdnProvinces, "CdnProvinces", "json");
    }

    if (!$dara.isNull(tmpReq.kwaiSidcs)) {
      request.kwaiSidcsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kwaiSidcs, "KwaiSidcs", "json");
    }

    if (!$dara.isNull(tmpReq.kwaiTsc)) {
      request.kwaiTscShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kwaiTsc, "KwaiTsc", "json");
    }

    if (!$dara.isNull(tmpReq.upstreamDomains)) {
      request.upstreamDomainsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.upstreamDomains, "UpstreamDomains", "json");
    }

    let query = { };
    if (!$dara.isNull(request.cdnDomainsShrink)) {
      query["CdnDomains"] = request.cdnDomainsShrink;
    }

    if (!$dara.isNull(request.cdnIspsShrink)) {
      query["CdnIsps"] = request.cdnIspsShrink;
    }

    if (!$dara.isNull(request.cdnProvincesShrink)) {
      query["CdnProvinces"] = request.cdnProvincesShrink;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.kwaiSidcsShrink)) {
      query["KwaiSidcs"] = request.kwaiSidcsShrink;
    }

    if (!$dara.isNull(request.kwaiTscShrink)) {
      query["KwaiTsc"] = request.kwaiTscShrink;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.upstreamDomainsShrink)) {
      query["UpstreamDomains"] = request.upstreamDomainsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "LiveUpstreamQosData",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.LiveUpstreamQosDataResponse>(await this.callApi(params, req, runtime), new $_model.LiveUpstreamQosDataResponse({}));
  }

  /**
   * 直播回源监控数据
   * 
   * @param request - LiveUpstreamQosDataRequest
   * @returns LiveUpstreamQosDataResponse
   */
  async liveUpstreamQosData(request: $_model.LiveUpstreamQosDataRequest): Promise<$_model.LiveUpstreamQosDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.liveUpstreamQosDataWithOptions(request, runtime);
  }

  /**
   * 咪咕定制直播拉转推启动接口
   * 
   * @param request - MiguLivePullToPushStartRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MiguLivePullToPushStartResponse
   */
  async miguLivePullToPushStartWithOptions(request: $_model.MiguLivePullToPushStartRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MiguLivePullToPushStartResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.miguData)) {
      query["MiguData"] = request.miguData;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MiguLivePullToPushStart",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MiguLivePullToPushStartResponse>(await this.callApi(params, req, runtime), new $_model.MiguLivePullToPushStartResponse({}));
  }

  /**
   * 咪咕定制直播拉转推启动接口
   * 
   * @param request - MiguLivePullToPushStartRequest
   * @returns MiguLivePullToPushStartResponse
   */
  async miguLivePullToPushStart(request: $_model.MiguLivePullToPushStartRequest): Promise<$_model.MiguLivePullToPushStartResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.miguLivePullToPushStartWithOptions(request, runtime);
  }

  /**
   * 咪咕定制直播拉转推启动接口
   * 
   * @param request - MiguLivePullToPushStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MiguLivePullToPushStatusResponse
   */
  async miguLivePullToPushStatusWithOptions(request: $_model.MiguLivePullToPushStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MiguLivePullToPushStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.miguData)) {
      query["MiguData"] = request.miguData;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MiguLivePullToPushStatus",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MiguLivePullToPushStatusResponse>(await this.callApi(params, req, runtime), new $_model.MiguLivePullToPushStatusResponse({}));
  }

  /**
   * 咪咕定制直播拉转推启动接口
   * 
   * @param request - MiguLivePullToPushStatusRequest
   * @returns MiguLivePullToPushStatusResponse
   */
  async miguLivePullToPushStatus(request: $_model.MiguLivePullToPushStatusRequest): Promise<$_model.MiguLivePullToPushStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.miguLivePullToPushStatusWithOptions(request, runtime);
  }

  /**
   * Modifies a component of a production studio.
   * 
   * @remarks
   * You can call this operation to modify a text, image, or subtitle component.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterComponentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCasterComponentResponse
   */
  async modifyCasterComponentWithOptions(request: $_model.ModifyCasterComponentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCasterComponentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.captionLayerContent)) {
      query["CaptionLayerContent"] = request.captionLayerContent;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentId)) {
      query["ComponentId"] = request.componentId;
    }

    if (!$dara.isNull(request.componentLayer)) {
      query["ComponentLayer"] = request.componentLayer;
    }

    if (!$dara.isNull(request.componentName)) {
      query["ComponentName"] = request.componentName;
    }

    if (!$dara.isNull(request.componentType)) {
      query["ComponentType"] = request.componentType;
    }

    if (!$dara.isNull(request.effect)) {
      query["Effect"] = request.effect;
    }

    if (!$dara.isNull(request.imageLayerContent)) {
      query["ImageLayerContent"] = request.imageLayerContent;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.textLayerContent)) {
      query["TextLayerContent"] = request.textLayerContent;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCasterComponent",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCasterComponentResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCasterComponentResponse({}));
  }

  /**
   * Modifies a component of a production studio.
   * 
   * @remarks
   * You can call this operation to modify a text, image, or subtitle component.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterComponentRequest
   * @returns ModifyCasterComponentResponse
   */
  async modifyCasterComponent(request: $_model.ModifyCasterComponentRequest): Promise<$_model.ModifyCasterComponentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCasterComponentWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of an episode in a production studio. You cannot change the episode type.
   * 
   * @remarks
   * You can call this operation to modify the configurations of an episode in a production studio. You cannot change the episode type.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterEpisodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCasterEpisodeResponse
   */
  async modifyCasterEpisodeWithOptions(request: $_model.ModifyCasterEpisodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCasterEpisodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentId)) {
      query["ComponentId"] = request.componentId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.episodeId)) {
      query["EpisodeId"] = request.episodeId;
    }

    if (!$dara.isNull(request.episodeName)) {
      query["EpisodeName"] = request.episodeName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.switchType)) {
      query["SwitchType"] = request.switchType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCasterEpisode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCasterEpisodeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCasterEpisodeResponse({}));
  }

  /**
   * Modifies the configurations of an episode in a production studio. You cannot change the episode type.
   * 
   * @remarks
   * You can call this operation to modify the configurations of an episode in a production studio. You cannot change the episode type.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterEpisodeRequest
   * @returns ModifyCasterEpisodeResponse
   */
  async modifyCasterEpisode(request: $_model.ModifyCasterEpisodeRequest): Promise<$_model.ModifyCasterEpisodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCasterEpisodeWithOptions(request, runtime);
  }

  /**
   * Modifies the layout configurations pf a production studio. You need to pass only parameters that you want to modify.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify a layout of the production studio. This operation supports the default and adaptive scaling modes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterLayoutRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCasterLayoutResponse
   */
  async modifyCasterLayoutWithOptions(request: $_model.ModifyCasterLayoutRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCasterLayoutResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.audioLayer)) {
      query["AudioLayer"] = request.audioLayer;
    }

    if (!$dara.isNull(request.blendList)) {
      query["BlendList"] = request.blendList;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.mixList)) {
      query["MixList"] = request.mixList;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.videoLayer)) {
      query["VideoLayer"] = request.videoLayer;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCasterLayout",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCasterLayoutResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCasterLayoutResponse({}));
  }

  /**
   * Modifies the layout configurations pf a production studio. You need to pass only parameters that you want to modify.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify a layout of the production studio. This operation supports the default and adaptive scaling modes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterLayoutRequest
   * @returns ModifyCasterLayoutResponse
   */
  async modifyCasterLayout(request: $_model.ModifyCasterLayoutRequest): Promise<$_model.ModifyCasterLayoutResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCasterLayoutWithOptions(request, runtime);
  }

  /**
   * Modifies the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * You can call the [AddCasterProgram](https://help.aliyun.com/document_detail/2848074.html) operation to add the episode list for carousel playback in a production studio and then call this operation to modify the episode list. The supported types of episodes include video resource and component.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterProgramRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCasterProgramResponse
   */
  async modifyCasterProgramWithOptions(request: $_model.ModifyCasterProgramRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCasterProgramResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.episode)) {
      query["Episode"] = request.episode;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCasterProgram",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCasterProgramResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCasterProgramResponse({}));
  }

  /**
   * Modifies the episode list for carousel playback in a production studio.
   * 
   * @remarks
   * You can call the [AddCasterProgram](https://help.aliyun.com/document_detail/2848074.html) operation to add the episode list for carousel playback in a production studio and then call this operation to modify the episode list. The supported types of episodes include video resource and component.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyCasterProgramRequest
   * @returns ModifyCasterProgramResponse
   */
  async modifyCasterProgram(request: $_model.ModifyCasterProgramRequest): Promise<$_model.ModifyCasterProgramResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCasterProgramWithOptions(request, runtime);
  }

  /**
   * Changes the video source for a production studio.
   * 
   * @remarks
   * ## Usage notes
   * You must call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio before you call this operation to modify input sources of the production studio.
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ModifyCasterVideoResourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCasterVideoResourceResponse
   */
  async modifyCasterVideoResourceWithOptions(request: $_model.ModifyCasterVideoResourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCasterVideoResourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.beginOffset)) {
      query["BeginOffset"] = request.beginOffset;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.endOffset)) {
      query["EndOffset"] = request.endOffset;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.imageUrl)) {
      query["ImageUrl"] = request.imageUrl;
    }

    if (!$dara.isNull(request.liveStreamUrl)) {
      query["LiveStreamUrl"] = request.liveStreamUrl;
    }

    if (!$dara.isNull(request.materialId)) {
      query["MaterialId"] = request.materialId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.ptsCallbackInterval)) {
      query["PtsCallbackInterval"] = request.ptsCallbackInterval;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repeatNum)) {
      query["RepeatNum"] = request.repeatNum;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceName)) {
      query["ResourceName"] = request.resourceName;
    }

    if (!$dara.isNull(request.vodUrl)) {
      query["VodUrl"] = request.vodUrl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCasterVideoResource",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCasterVideoResourceResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCasterVideoResourceResponse({}));
  }

  /**
   * Changes the video source for a production studio.
   * 
   * @remarks
   * ## Usage notes
   * You must call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio before you call this operation to modify input sources of the production studio.
   * ## QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - ModifyCasterVideoResourceRequest
   * @returns ModifyCasterVideoResourceResponse
   */
  async modifyCasterVideoResource(request: $_model.ModifyCasterVideoResourceRequest): Promise<$_model.ModifyCasterVideoResourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCasterVideoResourceWithOptions(request, runtime);
  }

  /**
   * Modifies a virtual studio template.
   * 
   * @param tmpReq - ModifyLiveAIStudioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveAIStudioResponse
   */
  async modifyLiveAIStudioWithOptions(tmpReq: $_model.ModifyLiveAIStudioRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveAIStudioResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyLiveAIStudioShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.mattingLayout)) {
      request.mattingLayoutShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mattingLayout, "MattingLayout", "json");
    }

    if (!$dara.isNull(tmpReq.mediaLayout)) {
      request.mediaLayoutShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mediaLayout, "MediaLayout", "json");
    }

    let query = { };
    if (!$dara.isNull(request.backgroundResourceId)) {
      query["BackgroundResourceId"] = request.backgroundResourceId;
    }

    if (!$dara.isNull(request.backgroundResourceUrl)) {
      query["BackgroundResourceUrl"] = request.backgroundResourceUrl;
    }

    if (!$dara.isNull(request.backgroundType)) {
      query["BackgroundType"] = request.backgroundType;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.mattingLayoutShrink)) {
      query["MattingLayout"] = request.mattingLayoutShrink;
    }

    if (!$dara.isNull(request.mattingType)) {
      query["MattingType"] = request.mattingType;
    }

    if (!$dara.isNull(request.mediaLayoutShrink)) {
      query["MediaLayout"] = request.mediaLayoutShrink;
    }

    if (!$dara.isNull(request.mediaResourceId)) {
      query["MediaResourceId"] = request.mediaResourceId;
    }

    if (!$dara.isNull(request.mediaResourceUrl)) {
      query["MediaResourceUrl"] = request.mediaResourceUrl;
    }

    if (!$dara.isNull(request.mediaType)) {
      query["MediaType"] = request.mediaType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.studioName)) {
      query["StudioName"] = request.studioName;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveAIStudio",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveAIStudioResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveAIStudioResponse({}));
  }

  /**
   * Modifies a virtual studio template.
   * 
   * @param request - ModifyLiveAIStudioRequest
   * @returns ModifyLiveAIStudioResponse
   */
  async modifyLiveAIStudio(request: $_model.ModifyLiveAIStudioRequest): Promise<$_model.ModifyLiveAIStudioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveAIStudioWithOptions(request, runtime);
  }

  /**
   * Modifies the acceleration region of a domain name.
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveDomainSchdmByPropertyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveDomainSchdmByPropertyResponse
   */
  async modifyLiveDomainSchdmByPropertyWithOptions(request: $_model.ModifyLiveDomainSchdmByPropertyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveDomainSchdmByPropertyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.property)) {
      query["Property"] = request.property;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveDomainSchdmByProperty",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveDomainSchdmByPropertyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveDomainSchdmByPropertyResponse({}));
  }

  /**
   * Modifies the acceleration region of a domain name.
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveDomainSchdmByPropertyRequest
   * @returns ModifyLiveDomainSchdmByPropertyResponse
   */
  async modifyLiveDomainSchdmByProperty(request: $_model.ModifyLiveDomainSchdmByPropertyRequest): Promise<$_model.ModifyLiveDomainSchdmByPropertyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveDomainSchdmByPropertyWithOptions(request, runtime);
  }

  /**
   * Modifies the content moderation settings of an interactive messaging application.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageAppAuditRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveMessageAppAuditResponse
   */
  async modifyLiveMessageAppAuditWithOptions(request: $_model.ModifyLiveMessageAppAuditRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveMessageAppAuditResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.auditType)) {
      query["AuditType"] = request.auditType;
    }

    if (!$dara.isNull(request.auditUrl)) {
      query["AuditUrl"] = request.auditUrl;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveMessageAppAudit",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveMessageAppAuditResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveMessageAppAuditResponse({}));
  }

  /**
   * Modifies the content moderation settings of an interactive messaging application.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageAppAuditRequest
   * @returns ModifyLiveMessageAppAuditResponse
   */
  async modifyLiveMessageAppAudit(request: $_model.ModifyLiveMessageAppAuditRequest): Promise<$_model.ModifyLiveMessageAppAuditResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveMessageAppAuditWithOptions(request, runtime);
  }

  /**
   * Modifies the callback settings of an interactive messaging application.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageAppCallbackRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveMessageAppCallbackResponse
   */
  async modifyLiveMessageAppCallbackWithOptions(request: $_model.ModifyLiveMessageAppCallbackRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveMessageAppCallbackResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.eventCallbackUrl)) {
      query["EventCallbackUrl"] = request.eventCallbackUrl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveMessageAppCallback",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveMessageAppCallbackResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveMessageAppCallbackResponse({}));
  }

  /**
   * Modifies the callback settings of an interactive messaging application.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageAppCallbackRequest
   * @returns ModifyLiveMessageAppCallbackResponse
   */
  async modifyLiveMessageAppCallback(request: $_model.ModifyLiveMessageAppCallbackRequest): Promise<$_model.ModifyLiveMessageAppCallbackResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveMessageAppCallbackWithOptions(request, runtime);
  }

  /**
   * Disables or enables an interactive messaging application.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageAppDisableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveMessageAppDisableResponse
   */
  async modifyLiveMessageAppDisableWithOptions(request: $_model.ModifyLiveMessageAppDisableRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveMessageAppDisableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.disable)) {
      query["Disable"] = request.disable;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveMessageAppDisable",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveMessageAppDisableResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveMessageAppDisableResponse({}));
  }

  /**
   * Disables or enables an interactive messaging application.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageAppDisableRequest
   * @returns ModifyLiveMessageAppDisableResponse
   */
  async modifyLiveMessageAppDisable(request: $_model.ModifyLiveMessageAppDisableRequest): Promise<$_model.ModifyLiveMessageAppDisableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveMessageAppDisableWithOptions(request, runtime);
  }

  /**
   * Modifies the information about an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - ModifyLiveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveMessageGroupResponse
   */
  async modifyLiveMessageGroupWithOptions(tmpReq: $_model.ModifyLiveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveMessageGroupResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyLiveMessageGroupShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.adminList)) {
      request.adminListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adminList, "AdminList", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.adminListShrink)) {
      query["AdminList"] = request.adminListShrink;
    }

    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.groupInfo)) {
      query["GroupInfo"] = request.groupInfo;
    }

    if (!$dara.isNull(request.modifyAdmin)) {
      query["ModifyAdmin"] = request.modifyAdmin;
    }

    if (!$dara.isNull(request.modifyInfo)) {
      query["ModifyInfo"] = request.modifyInfo;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveMessageGroupResponse({}));
  }

  /**
   * Modifies the information about an interactive messaging group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageGroupRequest
   * @returns ModifyLiveMessageGroupResponse
   */
  async modifyLiveMessageGroup(request: $_model.ModifyLiveMessageGroupRequest): Promise<$_model.ModifyLiveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Modifies the mute status of users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - ModifyLiveMessageGroupBandRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveMessageGroupBandResponse
   */
  async modifyLiveMessageGroupBandWithOptions(tmpReq: $_model.ModifyLiveMessageGroupBandRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveMessageGroupBandResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyLiveMessageGroupBandShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.bannnedUsers)) {
      request.bannnedUsersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bannnedUsers, "BannnedUsers", "simple");
    }

    if (!$dara.isNull(tmpReq.exceptUsers)) {
      request.exceptUsersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.exceptUsers, "ExceptUsers", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.bannedAll)) {
      query["BannedAll"] = request.bannedAll;
    }

    if (!$dara.isNull(request.bannnedUsersShrink)) {
      query["BannnedUsers"] = request.bannnedUsersShrink;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.exceptUsersShrink)) {
      query["ExceptUsers"] = request.exceptUsersShrink;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveMessageGroupBand",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveMessageGroupBandResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveMessageGroupBandResponse({}));
  }

  /**
   * Modifies the mute status of users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveMessageGroupBandRequest
   * @returns ModifyLiveMessageGroupBandResponse
   */
  async modifyLiveMessageGroupBand(request: $_model.ModifyLiveMessageGroupBandRequest): Promise<$_model.ModifyLiveMessageGroupBandResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveMessageGroupBandWithOptions(request, runtime);
  }

  /**
   * Modifies the information about a user.
   * 
   * @param request - ModifyLiveMessageUserInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveMessageUserInfoResponse
   */
  async modifyLiveMessageUserInfoWithOptions(request: $_model.ModifyLiveMessageUserInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveMessageUserInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    if (!$dara.isNull(request.userMetaInfo)) {
      query["UserMetaInfo"] = request.userMetaInfo;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveMessageUserInfo",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveMessageUserInfoResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveMessageUserInfoResponse({}));
  }

  /**
   * Modifies the information about a user.
   * 
   * @param request - ModifyLiveMessageUserInfoRequest
   * @returns ModifyLiveMessageUserInfoResponse
   */
  async modifyLiveMessageUserInfo(request: $_model.ModifyLiveMessageUserInfoRequest): Promise<$_model.ModifyLiveMessageUserInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveMessageUserInfoWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of real-time log delivery for a domain name.
   * 
   * @remarks
   *   You can call this operation to modify the configuration of real-time log delivery for a domain name. Logs for a domain name can be delivered to only one Logstore.
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveRealtimeLogDeliveryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLiveRealtimeLogDeliveryResponse
   */
  async modifyLiveRealtimeLogDeliveryWithOptions(request: $_model.ModifyLiveRealtimeLogDeliveryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLiveRealtimeLogDeliveryResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLiveRealtimeLogDelivery",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLiveRealtimeLogDeliveryResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLiveRealtimeLogDeliveryResponse({}));
  }

  /**
   * Modifies the configuration of real-time log delivery for a domain name.
   * 
   * @remarks
   *   You can call this operation to modify the configuration of real-time log delivery for a domain name. Logs for a domain name can be delivered to only one Logstore.
   * This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
   * *   You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyLiveRealtimeLogDeliveryRequest
   * @returns ModifyLiveRealtimeLogDeliveryResponse
   */
  async modifyLiveRealtimeLogDelivery(request: $_model.ModifyLiveRealtimeLogDeliveryRequest): Promise<$_model.ModifyLiveRealtimeLogDeliveryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLiveRealtimeLogDeliveryWithOptions(request, runtime);
  }

  /**
   * Modifies the attributes of an episode list.
   * 
   * @remarks
   * This operation allows you to change the position of an episode in an episode list, how many times an episode list is played, and the specific point in time at which the episode of the highest priority in an episode list is played.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyShowListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyShowListResponse
   */
  async modifyShowListWithOptions(request: $_model.ModifyShowListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyShowListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.highPriorityShowId)) {
      query["HighPriorityShowId"] = request.highPriorityShowId;
    }

    if (!$dara.isNull(request.highPriorityShowStartTime)) {
      query["HighPriorityShowStartTime"] = request.highPriorityShowStartTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repeatTimes)) {
      query["RepeatTimes"] = request.repeatTimes;
    }

    if (!$dara.isNull(request.showId)) {
      query["ShowId"] = request.showId;
    }

    if (!$dara.isNull(request.spot)) {
      query["Spot"] = request.spot;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyShowList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyShowListResponse>(await this.callApi(params, req, runtime), new $_model.ModifyShowListResponse({}));
  }

  /**
   * Modifies the attributes of an episode list.
   * 
   * @remarks
   * This operation allows you to change the position of an episode in an episode list, how many times an episode list is played, and the specific point in time at which the episode of the highest priority in an episode list is played.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyShowListRequest
   * @returns ModifyShowListResponse
   */
  async modifyShowList(request: $_model.ModifyShowListRequest): Promise<$_model.ModifyShowListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyShowListWithOptions(request, runtime);
  }

  /**
   * Modifies a layout of a virtual studio.
   * 
   * @remarks
   * You can call this operation to modify a layout of a virtual studio. When you call this operation, specify only the parameters that you want to modify.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyStudioLayoutRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyStudioLayoutResponse
   */
  async modifyStudioLayoutWithOptions(request: $_model.ModifyStudioLayoutRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyStudioLayoutResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bgImageConfig)) {
      query["BgImageConfig"] = request.bgImageConfig;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.commonConfig)) {
      query["CommonConfig"] = request.commonConfig;
    }

    if (!$dara.isNull(request.layerOrderConfigList)) {
      query["LayerOrderConfigList"] = request.layerOrderConfigList;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.layoutName)) {
      query["LayoutName"] = request.layoutName;
    }

    if (!$dara.isNull(request.mediaInputConfigList)) {
      query["MediaInputConfigList"] = request.mediaInputConfigList;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.screenInputConfigList)) {
      query["ScreenInputConfigList"] = request.screenInputConfigList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyStudioLayout",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyStudioLayoutResponse>(await this.callApi(params, req, runtime), new $_model.ModifyStudioLayoutResponse({}));
  }

  /**
   * Modifies a layout of a virtual studio.
   * 
   * @remarks
   * You can call this operation to modify a layout of a virtual studio. When you call this operation, specify only the parameters that you want to modify.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ModifyStudioLayoutRequest
   * @returns ModifyStudioLayoutResponse
   */
  async modifyStudioLayout(request: $_model.ModifyStudioLayoutRequest): Promise<$_model.ModifyStudioLayoutResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyStudioLayoutWithOptions(request, runtime);
  }

  /**
   * Mutes a message group. In this case, all members of the message group are muted.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - MuteAllGroupUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MuteAllGroupUserResponse
   */
  async muteAllGroupUserWithOptions(request: $_model.MuteAllGroupUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MuteAllGroupUserResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.broadCastType)) {
      body["BroadCastType"] = request.broadCastType;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "MuteAllGroupUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MuteAllGroupUserResponse>(await this.callApi(params, req, runtime), new $_model.MuteAllGroupUserResponse({}));
  }

  /**
   * Mutes a message group. In this case, all members of the message group are muted.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - MuteAllGroupUserRequest
   * @returns MuteAllGroupUserResponse
   */
  async muteAllGroupUser(request: $_model.MuteAllGroupUserRequest): Promise<$_model.MuteAllGroupUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.muteAllGroupUserWithOptions(request, runtime);
  }

  /**
   * Mutes members in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - MuteGroupUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MuteGroupUserResponse
   */
  async muteGroupUserWithOptions(tmpReq: $_model.MuteGroupUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MuteGroupUserResponse> {
    tmpReq.validate();
    let request = new $_model.MuteGroupUserShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.muteUserList)) {
      request.muteUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.muteUserList, "MuteUserList", "simple");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.broadCastType)) {
      body["BroadCastType"] = request.broadCastType;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.muteTime)) {
      body["MuteTime"] = request.muteTime;
    }

    if (!$dara.isNull(request.muteUserListShrink)) {
      body["MuteUserList"] = request.muteUserListShrink;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "MuteGroupUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MuteGroupUserResponse>(await this.callApi(params, req, runtime), new $_model.MuteGroupUserResponse({}));
  }

  /**
   * Mutes members in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - MuteGroupUserRequest
   * @returns MuteGroupUserResponse
   */
  async muteGroupUser(request: $_model.MuteGroupUserRequest): Promise<$_model.MuteGroupUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.muteGroupUserWithOptions(request, runtime);
  }

  /**
   * Enables time shifting for a domain name, or an application or a live stream under the domain name.
   * 
   * @remarks
   * You cannot configure time shifting and delayed transcoding at the same time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - OpenLiveShiftRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OpenLiveShiftResponse
   */
  async openLiveShiftWithOptions(request: $_model.OpenLiveShiftRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OpenLiveShiftResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.duration)) {
      query["Duration"] = request.duration;
    }

    if (!$dara.isNull(request.ignoreTranscode)) {
      query["IgnoreTranscode"] = request.ignoreTranscode;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.vision)) {
      query["Vision"] = request.vision;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OpenLiveShift",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OpenLiveShiftResponse>(await this.callApi(params, req, runtime), new $_model.OpenLiveShiftResponse({}));
  }

  /**
   * Enables time shifting for a domain name, or an application or a live stream under the domain name.
   * 
   * @remarks
   * You cannot configure time shifting and delayed transcoding at the same time.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - OpenLiveShiftRequest
   * @returns OpenLiveShiftResponse
   */
  async openLiveShift(request: $_model.OpenLiveShiftRequest): Promise<$_model.OpenLiveShiftResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.openLiveShiftWithOptions(request, runtime);
  }

  /**
   * Switches to a specified episode.
   * 
   * @remarks
   * After you add episodes to an episode list and start live streaming, you can call this operation to switch among episodes. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - PlayChoosenShowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PlayChoosenShowResponse
   */
  async playChoosenShowWithOptions(request: $_model.PlayChoosenShowRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PlayChoosenShowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.showId)) {
      query["ShowId"] = request.showId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PlayChoosenShow",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PlayChoosenShowResponse>(await this.callApi(params, req, runtime), new $_model.PlayChoosenShowResponse({}));
  }

  /**
   * Switches to a specified episode.
   * 
   * @remarks
   * After you add episodes to an episode list and start live streaming, you can call this operation to switch among episodes. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - PlayChoosenShowRequest
   * @returns PlayChoosenShowResponse
   */
  async playChoosenShow(request: $_model.PlayChoosenShowRequest): Promise<$_model.PlayChoosenShowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.playChoosenShowWithOptions(request, runtime);
  }

  /**
   * Publishes the configurations of an accelerated domain name from the canary release environment to the production environment.
   * 
   * @remarks
   * Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
   * ## QPS limit
   * A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - PublishLiveStagingConfigToProductionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PublishLiveStagingConfigToProductionResponse
   */
  async publishLiveStagingConfigToProductionWithOptions(request: $_model.PublishLiveStagingConfigToProductionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PublishLiveStagingConfigToProductionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.functionName)) {
      query["FunctionName"] = request.functionName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PublishLiveStagingConfigToProduction",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PublishLiveStagingConfigToProductionResponse>(await this.callApi(params, req, runtime), new $_model.PublishLiveStagingConfigToProductionResponse({}));
  }

  /**
   * Publishes the configurations of an accelerated domain name from the canary release environment to the production environment.
   * 
   * @remarks
   * Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
   * ## QPS limit
   * A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - PublishLiveStagingConfigToProductionRequest
   * @returns PublishLiveStagingConfigToProductionResponse
   */
  async publishLiveStagingConfigToProduction(request: $_model.PublishLiveStagingConfigToProductionRequest): Promise<$_model.PublishLiveStagingConfigToProductionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.publishLiveStagingConfigToProductionWithOptions(request, runtime);
  }

  /**
   * Queries the dual-stream disaster recovery records of online streams.
   * 
   * @param request - QueryLiveDomainMultiStreamListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryLiveDomainMultiStreamListResponse
   */
  async queryLiveDomainMultiStreamListWithOptions(request: $_model.QueryLiveDomainMultiStreamListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryLiveDomainMultiStreamListResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryLiveDomainMultiStreamList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryLiveDomainMultiStreamListResponse>(await this.callApi(params, req, runtime), new $_model.QueryLiveDomainMultiStreamListResponse({}));
  }

  /**
   * Queries the dual-stream disaster recovery records of online streams.
   * 
   * @param request - QueryLiveDomainMultiStreamListRequest
   * @returns QueryLiveDomainMultiStreamListResponse
   */
  async queryLiveDomainMultiStreamList(request: $_model.QueryLiveDomainMultiStreamListRequest): Promise<$_model.QueryLiveDomainMultiStreamListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryLiveDomainMultiStreamListWithOptions(request, runtime);
  }

  /**
   * Queries interactive messaging applications based on specified conditions.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - QueryMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryMessageAppResponse
   */
  async queryMessageAppWithOptions(request: $_model.QueryMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryMessageAppResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.appName)) {
      body["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.pageNum)) {
      body["PageNum"] = request.pageNum;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sortType)) {
      body["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.QueryMessageAppResponse({}));
  }

  /**
   * Queries interactive messaging applications based on specified conditions.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - QueryMessageAppRequest
   * @returns QueryMessageAppResponse
   */
  async queryMessageApp(request: $_model.QueryMessageAppRequest): Promise<$_model.QueryMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryMessageAppWithOptions(request, runtime);
  }

  /**
   * Queries the status of a speech-to-text or translation task.
   * 
   * @remarks
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - QueryRtcAsrTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryRtcAsrTasksResponse
   */
  async queryRtcAsrTasksWithOptions(request: $_model.QueryRtcAsrTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryRtcAsrTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryRtcAsrTasks",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryRtcAsrTasksResponse>(await this.callApi(params, req, runtime), new $_model.QueryRtcAsrTasksResponse({}));
  }

  /**
   * Queries the status of a speech-to-text or translation task.
   * 
   * @remarks
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - QueryRtcAsrTasksRequest
   * @returns QueryRtcAsrTasksResponse
   */
  async queryRtcAsrTasks(request: $_model.QueryRtcAsrTasksRequest): Promise<$_model.QueryRtcAsrTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryRtcAsrTasksWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of authentication for snapshot callbacks.
   * 
   * @remarks
   * Before you call this operation, make sure that you have configured authentication for snapshot callbacks. For more information, see [SetSnapshotCallbackAuth](https://help.aliyun.com/document_detail/2847907.html). You can call this operation to query the configuration of authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - QuerySnapshotCallbackAuthRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QuerySnapshotCallbackAuthResponse
   */
  async querySnapshotCallbackAuthWithOptions(request: $_model.QuerySnapshotCallbackAuthRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QuerySnapshotCallbackAuthResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QuerySnapshotCallbackAuth",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QuerySnapshotCallbackAuthResponse>(await this.callApi(params, req, runtime), new $_model.QuerySnapshotCallbackAuthResponse({}));
  }

  /**
   * Queries the configuration of authentication for snapshot callbacks.
   * 
   * @remarks
   * Before you call this operation, make sure that you have configured authentication for snapshot callbacks. For more information, see [SetSnapshotCallbackAuth](https://help.aliyun.com/document_detail/2847907.html). You can call this operation to query the configuration of authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - QuerySnapshotCallbackAuthRequest
   * @returns QuerySnapshotCallbackAuthResponse
   */
  async querySnapshotCallbackAuth(request: $_model.QuerySnapshotCallbackAuthRequest): Promise<$_model.QuerySnapshotCallbackAuthResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.querySnapshotCallbackAuthWithOptions(request, runtime);
  }

  /**
   * Controls recordings manually on demand. For example, you can call this operation to start or stop recording at a specific point in time.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing method and pricing of live stream recording in ApsaraVideo Live. For more information, see [Billing of live stream recording](https://help.aliyun.com/document_detail/195287.html).
   * *   If a live stream is being automatically or manually recorded, you can call this operation to stop recording the live stream.
   * *   If you call this operation to start recording a live stream while it is being recorded, a TaskAlreadyStarted error is returned, indicating that the task has been started.
   * *   If a live stream that you manually record is interrupted, the recording stops.
   * *   If automatic recording is not configured for the live stream, ApsaraVideo Live does not automatically record the live stream after it is resumed.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RealTimeRecordCommandRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RealTimeRecordCommandResponse
   */
  async realTimeRecordCommandWithOptions(request: $_model.RealTimeRecordCommandRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RealTimeRecordCommandResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.command)) {
      query["Command"] = request.command;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RealTimeRecordCommand",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RealTimeRecordCommandResponse>(await this.callApi(params, req, runtime), new $_model.RealTimeRecordCommandResponse({}));
  }

  /**
   * Controls recordings manually on demand. For example, you can call this operation to start or stop recording at a specific point in time.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing method and pricing of live stream recording in ApsaraVideo Live. For more information, see [Billing of live stream recording](https://help.aliyun.com/document_detail/195287.html).
   * *   If a live stream is being automatically or manually recorded, you can call this operation to stop recording the live stream.
   * *   If you call this operation to start recording a live stream while it is being recorded, a TaskAlreadyStarted error is returned, indicating that the task has been started.
   * *   If a live stream that you manually record is interrupted, the recording stops.
   * *   If automatic recording is not configured for the live stream, ApsaraVideo Live does not automatically record the live stream after it is resumed.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RealTimeRecordCommandRequest
   * @returns RealTimeRecordCommandResponse
   */
  async realTimeRecordCommand(request: $_model.RealTimeRecordCommandRequest): Promise<$_model.RealTimeRecordCommandResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.realTimeRecordCommandWithOptions(request, runtime);
  }

  /**
   * Restores a deleted interactive messaging group.
   * 
   * @remarks
   *   You can call this operation to restore a deleted interactive messaging group within 30 days after you call the [DeleteLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) to delete the group.
   * *   After you restore a group, the messages that were stored in the group before it was deleted can still be queried.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RecoverLiveMessageDeletedGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RecoverLiveMessageDeletedGroupResponse
   */
  async recoverLiveMessageDeletedGroupWithOptions(request: $_model.RecoverLiveMessageDeletedGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RecoverLiveMessageDeletedGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RecoverLiveMessageDeletedGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RecoverLiveMessageDeletedGroupResponse>(await this.callApi(params, req, runtime), new $_model.RecoverLiveMessageDeletedGroupResponse({}));
  }

  /**
   * Restores a deleted interactive messaging group.
   * 
   * @remarks
   *   You can call this operation to restore a deleted interactive messaging group within 30 days after you call the [DeleteLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) to delete the group.
   * *   After you restore a group, the messages that were stored in the group before it was deleted can still be queried.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RecoverLiveMessageDeletedGroupRequest
   * @returns RecoverLiveMessageDeletedGroupResponse
   */
  async recoverLiveMessageDeletedGroup(request: $_model.RecoverLiveMessageDeletedGroupRequest): Promise<$_model.RecoverLiveMessageDeletedGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.recoverLiveMessageDeletedGroupWithOptions(request, runtime);
  }

  /**
   * Unmutes one or more users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - RemoveLiveMessageGroupBandRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveLiveMessageGroupBandResponse
   */
  async removeLiveMessageGroupBandWithOptions(tmpReq: $_model.RemoveLiveMessageGroupBandRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RemoveLiveMessageGroupBandResponse> {
    tmpReq.validate();
    let request = new $_model.RemoveLiveMessageGroupBandShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.unbannedUsers)) {
      request.unbannedUsersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.unbannedUsers, "UnbannedUsers", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.unbannedUsersShrink)) {
      query["UnbannedUsers"] = request.unbannedUsersShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveLiveMessageGroupBand",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RemoveLiveMessageGroupBandResponse>(await this.callApi(params, req, runtime), new $_model.RemoveLiveMessageGroupBandResponse({}));
  }

  /**
   * Unmutes one or more users.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RemoveLiveMessageGroupBandRequest
   * @returns RemoveLiveMessageGroupBandResponse
   */
  async removeLiveMessageGroupBand(request: $_model.RemoveLiveMessageGroupBandRequest): Promise<$_model.RemoveLiveMessageGroupBandResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeLiveMessageGroupBandWithOptions(request, runtime);
  }

  /**
   * Removes a specified episode from an episode list.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You cannot use this operation on empty episode lists. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/370861.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - RemoveShowFromShowListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveShowFromShowListResponse
   */
  async removeShowFromShowListWithOptions(request: $_model.RemoveShowFromShowListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RemoveShowFromShowListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.showId)) {
      query["ShowId"] = request.showId;
    }

    if (!$dara.isNull(request.isBatchMode)) {
      query["isBatchMode"] = request.isBatchMode;
    }

    if (!$dara.isNull(request.showIdList)) {
      query["showIdList"] = request.showIdList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveShowFromShowList",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RemoveShowFromShowListResponse>(await this.callApi(params, req, runtime), new $_model.RemoveShowFromShowListResponse({}));
  }

  /**
   * Removes a specified episode from an episode list.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You cannot use this operation on empty episode lists. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/370861.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - RemoveShowFromShowListRequest
   * @returns RemoveShowFromShowListResponse
   */
  async removeShowFromShowList(request: $_model.RemoveShowFromShowListRequest): Promise<$_model.RemoveShowFromShowListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeShowFromShowListWithOptions(request, runtime);
  }

  /**
   * Removes users from a channel.
   * 
   * @remarks
   * You can call this operation to remove one or more users from a channel.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RemoveTerminalsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveTerminalsResponse
   */
  async removeTerminalsWithOptions(request: $_model.RemoveTerminalsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RemoveTerminalsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.terminalIds)) {
      query["TerminalIds"] = request.terminalIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveTerminals",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RemoveTerminalsResponse>(await this.callApi(params, req, runtime), new $_model.RemoveTerminalsResponse({}));
  }

  /**
   * Removes users from a channel.
   * 
   * @remarks
   * You can call this operation to remove one or more users from a channel.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RemoveTerminalsRequest
   * @returns RemoveTerminalsResponse
   */
  async removeTerminals(request: $_model.RemoveTerminalsRequest): Promise<$_model.RemoveTerminalsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeTerminalsWithOptions(request, runtime);
  }

  /**
   * Restarts a production studio.
   * 
   * @remarks
   *   Only product studios in playlist mode and general mode are supported. Virtual studios are not supported.
   * *   After you restart a production studio, the current settings such as the resolution and screen orientation are reloaded to restore the previous playback status.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RestartCasterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestartCasterResponse
   */
  async restartCasterWithOptions(request: $_model.RestartCasterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RestartCasterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestartCaster",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RestartCasterResponse>(await this.callApi(params, req, runtime), new $_model.RestartCasterResponse({}));
  }

  /**
   * Restarts a production studio.
   * 
   * @remarks
   *   Only product studios in playlist mode and general mode are supported. Virtual studios are not supported.
   * *   After you restart a production studio, the current settings such as the resolution and screen orientation are reloaded to restore the previous playback status.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RestartCasterRequest
   * @returns RestartCasterResponse
   */
  async restartCaster(request: $_model.RestartCasterRequest): Promise<$_model.RestartCasterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restartCasterWithOptions(request, runtime);
  }

  /**
   * Restarts a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to restart a pulled-stream relay task.
   * *   You can restart a task that is running (even if the task is in an abnormal retry state) or a task that is stopped. For a task that is running, this operation stops and then restarts it. For a task that is stopped, this operation directly starts it.
   * *   You cannot restart a task if the start time specified for the task has not been reached.
   * *   If a task is restarted, the task runs based on the latest configuration of the task. This interrupts stream ingest.
   * *   If a task for a list of ApsaraVideo VOD resources is restarted, the list plays from the beginning based on the latest configuration. You can call an operation to update the video index and playback progress to achieve successive playback.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RestartLivePullToPushRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestartLivePullToPushResponse
   */
  async restartLivePullToPushWithOptions(request: $_model.RestartLivePullToPushRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RestartLivePullToPushResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestartLivePullToPush",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RestartLivePullToPushResponse>(await this.callApi(params, req, runtime), new $_model.RestartLivePullToPushResponse({}));
  }

  /**
   * Restarts a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to restart a pulled-stream relay task.
   * *   You can restart a task that is running (even if the task is in an abnormal retry state) or a task that is stopped. For a task that is running, this operation stops and then restarts it. For a task that is stopped, this operation directly starts it.
   * *   You cannot restart a task if the start time specified for the task has not been reached.
   * *   If a task is restarted, the task runs based on the latest configuration of the task. This interrupts stream ingest.
   * *   If a task for a list of ApsaraVideo VOD resources is restarted, the list plays from the beginning based on the latest configuration. You can call an operation to update the video index and playback progress to achieve successive playback.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - RestartLivePullToPushRequest
   * @returns RestartLivePullToPushResponse
   */
  async restartLivePullToPush(request: $_model.RestartLivePullToPushRequest): Promise<$_model.RestartLivePullToPushResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restartLivePullToPushWithOptions(request, runtime);
  }

  /**
   * @param request - RestartTranscodeTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestartTranscodeTaskResponse
   */
  async restartTranscodeTaskWithOptions(request: $_model.RestartTranscodeTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RestartTranscodeTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.pushDomain)) {
      query["PushDomain"] = request.pushDomain;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.transcodingTemplate)) {
      query["TranscodingTemplate"] = request.transcodingTemplate;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestartTranscodeTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RestartTranscodeTaskResponse>(await this.callApi(params, req, runtime), new $_model.RestartTranscodeTaskResponse({}));
  }

  /**
   * @param request - RestartTranscodeTaskRequest
   * @returns RestartTranscodeTaskResponse
   */
  async restartTranscodeTask(request: $_model.RestartTranscodeTaskRequest): Promise<$_model.RestartTranscodeTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restartTranscodeTaskWithOptions(request, runtime);
  }

  /**
   * Resumes the ingest of a live stream.
   * 
   * @remarks
   * You can call this operation to resume the ingest of a stream. This operation supports only the live streams ingested by streamers.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ResumeLiveStreamRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResumeLiveStreamResponse
   */
  async resumeLiveStreamWithOptions(request: $_model.ResumeLiveStreamRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ResumeLiveStreamResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.liveStreamType)) {
      query["LiveStreamType"] = request.liveStreamType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResumeLiveStream",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ResumeLiveStreamResponse>(await this.callApi(params, req, runtime), new $_model.ResumeLiveStreamResponse({}));
  }

  /**
   * Resumes the ingest of a live stream.
   * 
   * @remarks
   * You can call this operation to resume the ingest of a stream. This operation supports only the live streams ingested by streamers.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - ResumeLiveStreamRequest
   * @returns ResumeLiveStreamResponse
   */
  async resumeLiveStream(request: $_model.ResumeLiveStreamRequest): Promise<$_model.ResumeLiveStreamResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resumeLiveStreamWithOptions(request, runtime);
  }

  /**
   * Rolls back the configurations of an accelerated domain name in the canary release environment.
   * 
   * @remarks
   * Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
   * ## QPS limit
   * A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - RollbackLiveStagingConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RollbackLiveStagingConfigResponse
   */
  async rollbackLiveStagingConfigWithOptions(request: $_model.RollbackLiveStagingConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RollbackLiveStagingConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.functionName)) {
      query["FunctionName"] = request.functionName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RollbackLiveStagingConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RollbackLiveStagingConfigResponse>(await this.callApi(params, req, runtime), new $_model.RollbackLiveStagingConfigResponse({}));
  }

  /**
   * Rolls back the configurations of an accelerated domain name in the canary release environment.
   * 
   * @remarks
   * Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
   * ## QPS limit
   * A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
   * 
   * @param request - RollbackLiveStagingConfigRequest
   * @returns RollbackLiveStagingConfigResponse
   */
  async rollbackLiveStagingConfig(request: $_model.RollbackLiveStagingConfigRequest): Promise<$_model.RollbackLiveStagingConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rollbackLiveStagingConfigWithOptions(request, runtime);
  }

  /**
   * Configures likes in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SendLikeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SendLikeResponse
   */
  async sendLikeWithOptions(request: $_model.SendLikeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SendLikeResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.broadCastType)) {
      body["BroadCastType"] = request.broadCastType;
    }

    if (!$dara.isNull(request.count)) {
      body["Count"] = request.count;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "SendLike",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SendLikeResponse>(await this.callApi(params, req, runtime), new $_model.SendLikeResponse({}));
  }

  /**
   * Configures likes in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SendLikeRequest
   * @returns SendLikeResponse
   */
  async sendLike(request: $_model.SendLikeRequest): Promise<$_model.SendLikeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sendLikeWithOptions(request, runtime);
  }

  /**
   * Sends a message to a group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group. You can send messages to a group only if the group is active, which requires that one or more users have joined the group. Offline messages are not supported. If you fail to send a message, check whether users exist in the group. If you want to send a message when all users are offline, we recommend that you store the message locally and send it after users get online.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SendLiveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SendLiveMessageGroupResponse
   */
  async sendLiveMessageGroupWithOptions(request: $_model.SendLiveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SendLiveMessageGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.body)) {
      query["Body"] = request.body;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.msgTid)) {
      query["MsgTid"] = request.msgTid;
    }

    if (!$dara.isNull(request.msgType)) {
      query["MsgType"] = request.msgType;
    }

    if (!$dara.isNull(request.noCache)) {
      query["NoCache"] = request.noCache;
    }

    if (!$dara.isNull(request.noStorage)) {
      query["NoStorage"] = request.noStorage;
    }

    if (!$dara.isNull(request.senderId)) {
      query["SenderId"] = request.senderId;
    }

    if (!$dara.isNull(request.senderMetaInfo)) {
      query["SenderMetaInfo"] = request.senderMetaInfo;
    }

    if (!$dara.isNull(request.staticsIncrease)) {
      query["StaticsIncrease"] = request.staticsIncrease;
    }

    if (!$dara.isNull(request.weight)) {
      query["Weight"] = request.weight;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SendLiveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SendLiveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.SendLiveMessageGroupResponse({}));
  }

  /**
   * Sends a message to a group.
   * 
   * @remarks
   * Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group. You can send messages to a group only if the group is active, which requires that one or more users have joined the group. Offline messages are not supported. If you fail to send a message, check whether users exist in the group. If you want to send a message when all users are offline, we recommend that you store the message locally and send it after users get online.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SendLiveMessageGroupRequest
   * @returns SendLiveMessageGroupResponse
   */
  async sendLiveMessageGroup(request: $_model.SendLiveMessageGroupRequest): Promise<$_model.SendLiveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sendLiveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Sends a message to a specified user. The user is identified by ReceiverId.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SendLiveMessageUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SendLiveMessageUserResponse
   */
  async sendLiveMessageUserWithOptions(request: $_model.SendLiveMessageUserRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SendLiveMessageUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.body)) {
      query["Body"] = request.body;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.highReliability)) {
      query["HighReliability"] = request.highReliability;
    }

    if (!$dara.isNull(request.msgTid)) {
      query["MsgTid"] = request.msgTid;
    }

    if (!$dara.isNull(request.msgType)) {
      query["MsgType"] = request.msgType;
    }

    if (!$dara.isNull(request.receiverId)) {
      query["ReceiverId"] = request.receiverId;
    }

    if (!$dara.isNull(request.senderId)) {
      query["SenderId"] = request.senderId;
    }

    if (!$dara.isNull(request.senderInfo)) {
      query["SenderInfo"] = request.senderInfo;
    }

    if (!$dara.isNull(request.storage)) {
      query["Storage"] = request.storage;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SendLiveMessageUser",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SendLiveMessageUserResponse>(await this.callApi(params, req, runtime), new $_model.SendLiveMessageUserResponse({}));
  }

  /**
   * Sends a message to a specified user. The user is identified by ReceiverId.
   * 
   * @remarks
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SendLiveMessageUserRequest
   * @returns SendLiveMessageUserResponse
   */
  async sendLiveMessageUser(request: $_model.SendLiveMessageUserRequest): Promise<$_model.SendLiveMessageUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sendLiveMessageUserWithOptions(request, runtime);
  }

  /**
   * Sends a message to all members in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SendMessageToGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SendMessageToGroupResponse
   */
  async sendMessageToGroupWithOptions(request: $_model.SendMessageToGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SendMessageToGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.skipAudit)) {
      query["SkipAudit"] = request.skipAudit;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.data)) {
      body["Data"] = request.data;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    if (!$dara.isNull(request.type)) {
      body["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "SendMessageToGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SendMessageToGroupResponse>(await this.callApi(params, req, runtime), new $_model.SendMessageToGroupResponse({}));
  }

  /**
   * Sends a message to all members in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SendMessageToGroupRequest
   * @returns SendMessageToGroupResponse
   */
  async sendMessageToGroup(request: $_model.SendMessageToGroupRequest): Promise<$_model.SendMessageToGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sendMessageToGroupWithOptions(request, runtime);
  }

  /**
   * Sends a message to specified users in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - SendMessageToGroupUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SendMessageToGroupUsersResponse
   */
  async sendMessageToGroupUsersWithOptions(tmpReq: $_model.SendMessageToGroupUsersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SendMessageToGroupUsersResponse> {
    tmpReq.validate();
    let request = new $_model.SendMessageToGroupUsersShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.receiverIdList)) {
      request.receiverIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.receiverIdList, "ReceiverIdList", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.skipAudit)) {
      query["SkipAudit"] = request.skipAudit;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.data)) {
      body["Data"] = request.data;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.operatorUserId)) {
      body["OperatorUserId"] = request.operatorUserId;
    }

    if (!$dara.isNull(request.receiverIdListShrink)) {
      body["ReceiverIdList"] = request.receiverIdListShrink;
    }

    if (!$dara.isNull(request.type)) {
      body["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "SendMessageToGroupUsers",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SendMessageToGroupUsersResponse>(await this.callApi(params, req, runtime), new $_model.SendMessageToGroupUsersResponse({}));
  }

  /**
   * Sends a message to specified users in a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SendMessageToGroupUsersRequest
   * @returns SendMessageToGroupUsersResponse
   */
  async sendMessageToGroupUsers(request: $_model.SendMessageToGroupUsersRequest): Promise<$_model.SendMessageToGroupUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sendMessageToGroupUsersWithOptions(request, runtime);
  }

  /**
   * Configures a channel of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure a channel for the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetCasterChannelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetCasterChannelResponse
   */
  async setCasterChannelWithOptions(request: $_model.SetCasterChannelRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetCasterChannelResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.faceBeauty)) {
      query["FaceBeauty"] = request.faceBeauty;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.playStatus)) {
      query["PlayStatus"] = request.playStatus;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.seekOffset)) {
      query["SeekOffset"] = request.seekOffset;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetCasterChannel",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetCasterChannelResponse>(await this.callApi(params, req, runtime), new $_model.SetCasterChannelResponse({}));
  }

  /**
   * Configures a channel of a production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure a channel for the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetCasterChannelRequest
   * @returns SetCasterChannelResponse
   */
  async setCasterChannel(request: $_model.SetCasterChannelRequest): Promise<$_model.SetCasterChannelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setCasterChannelWithOptions(request, runtime);
  }

  /**
   * Configures a production studio. For example, you can specify the name of the production studio, configure the transcoding settings, and configure the recording settings.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure the production studio. This operation completely replaces existing configurations. If you leave a parameter empty, the corresponding configuration is cleared for the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetCasterConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetCasterConfigResponse
   */
  async setCasterConfigWithOptions(request: $_model.SetCasterConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetCasterConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoSwitchUrgentConfig)) {
      query["AutoSwitchUrgentConfig"] = request.autoSwitchUrgentConfig;
    }

    if (!$dara.isNull(request.autoSwitchUrgentOn)) {
      query["AutoSwitchUrgentOn"] = request.autoSwitchUrgentOn;
    }

    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.casterName)) {
      query["CasterName"] = request.casterName;
    }

    if (!$dara.isNull(request.channelEnable)) {
      query["ChannelEnable"] = request.channelEnable;
    }

    if (!$dara.isNull(request.delay)) {
      query["Delay"] = request.delay;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programEffect)) {
      query["ProgramEffect"] = request.programEffect;
    }

    if (!$dara.isNull(request.programName)) {
      query["ProgramName"] = request.programName;
    }

    if (!$dara.isNull(request.recordConfig)) {
      query["RecordConfig"] = request.recordConfig;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sideOutputUrl)) {
      query["SideOutputUrl"] = request.sideOutputUrl;
    }

    if (!$dara.isNull(request.sideOutputUrlList)) {
      query["SideOutputUrlList"] = request.sideOutputUrlList;
    }

    if (!$dara.isNull(request.syncGroupsConfig)) {
      query["SyncGroupsConfig"] = request.syncGroupsConfig;
    }

    if (!$dara.isNull(request.transcodeConfig)) {
      query["TranscodeConfig"] = request.transcodeConfig;
    }

    if (!$dara.isNull(request.urgentImageId)) {
      query["UrgentImageId"] = request.urgentImageId;
    }

    if (!$dara.isNull(request.urgentImageUrl)) {
      query["UrgentImageUrl"] = request.urgentImageUrl;
    }

    if (!$dara.isNull(request.urgentLiveStreamUrl)) {
      query["UrgentLiveStreamUrl"] = request.urgentLiveStreamUrl;
    }

    if (!$dara.isNull(request.urgentMaterialId)) {
      query["UrgentMaterialId"] = request.urgentMaterialId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetCasterConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetCasterConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetCasterConfigResponse({}));
  }

  /**
   * Configures a production studio. For example, you can specify the name of the production studio, configure the transcoding settings, and configure the recording settings.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure the production studio. This operation completely replaces existing configurations. If you leave a parameter empty, the corresponding configuration is cleared for the production studio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetCasterConfigRequest
   * @returns SetCasterConfigResponse
   */
  async setCasterConfig(request: $_model.SetCasterConfigRequest): Promise<$_model.SetCasterConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setCasterConfigWithOptions(request, runtime);
  }

  /**
   * Configures all settings of a scene. This is done by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
   * 
   * @remarks
   * ## [](#)Usage notes
   * This operation configures a scene by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SetCasterSceneConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetCasterSceneConfigResponse
   */
  async setCasterSceneConfigWithOptions(request: $_model.SetCasterSceneConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetCasterSceneConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentId)) {
      query["ComponentId"] = request.componentId;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetCasterSceneConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetCasterSceneConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetCasterSceneConfigResponse({}));
  }

  /**
   * Configures all settings of a scene. This is done by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
   * 
   * @remarks
   * ## [](#)Usage notes
   * This operation configures a scene by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SetCasterSceneConfigRequest
   * @returns SetCasterSceneConfigResponse
   */
  async setCasterSceneConfig(request: $_model.SetCasterSceneConfigRequest): Promise<$_model.SetCasterSceneConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setCasterSceneConfigWithOptions(request, runtime);
  }

  /**
   * Enables or disables the certificate of a domain name, and modifies the certificate information.
   * 
   * @remarks
   * Obtain the domain name, and then call this operation to enable or disable the certificate of a domain name and modify the certificate information.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveDomainCertificateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveDomainCertificateResponse
   */
  async setLiveDomainCertificateWithOptions(request: $_model.SetLiveDomainCertificateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveDomainCertificateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.certName)) {
      query["CertName"] = request.certName;
    }

    if (!$dara.isNull(request.certType)) {
      query["CertType"] = request.certType;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.forceSet)) {
      query["ForceSet"] = request.forceSet;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.SSLPri)) {
      query["SSLPri"] = request.SSLPri;
    }

    if (!$dara.isNull(request.SSLProtocol)) {
      query["SSLProtocol"] = request.SSLProtocol;
    }

    if (!$dara.isNull(request.SSLPub)) {
      query["SSLPub"] = request.SSLPub;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveDomainCertificate",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveDomainCertificateResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveDomainCertificateResponse({}));
  }

  /**
   * Enables or disables the certificate of a domain name, and modifies the certificate information.
   * 
   * @remarks
   * Obtain the domain name, and then call this operation to enable or disable the certificate of a domain name and modify the certificate information.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveDomainCertificateRequest
   * @returns SetLiveDomainCertificateResponse
   */
  async setLiveDomainCertificate(request: $_model.SetLiveDomainCertificateRequest): Promise<$_model.SetLiveDomainCertificateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveDomainCertificateWithOptions(request, runtime);
  }

  /**
   * Configures dual-stream disaster recovery for a streaming domain.
   * 
   * @remarks
   * You can call this operation to configure dual-stream disaster recovery for a streaming domain, which allows you to ingest two streams that have the same name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveDomainMultiStreamConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveDomainMultiStreamConfigResponse
   */
  async setLiveDomainMultiStreamConfigWithOptions(request: $_model.SetLiveDomainMultiStreamConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveDomainMultiStreamConfigResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveDomainMultiStreamConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveDomainMultiStreamConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveDomainMultiStreamConfigResponse({}));
  }

  /**
   * Configures dual-stream disaster recovery for a streaming domain.
   * 
   * @remarks
   * You can call this operation to configure dual-stream disaster recovery for a streaming domain, which allows you to ingest two streams that have the same name.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveDomainMultiStreamConfigRequest
   * @returns SetLiveDomainMultiStreamConfigResponse
   */
  async setLiveDomainMultiStreamConfig(request: $_model.SetLiveDomainMultiStreamConfigRequest): Promise<$_model.SetLiveDomainMultiStreamConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveDomainMultiStreamConfigWithOptions(request, runtime);
  }

  /**
   * Manually switches between the active stream and standby stream.
   * 
   * @param request - SetLiveDomainMultiStreamMasterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveDomainMultiStreamMasterResponse
   */
  async setLiveDomainMultiStreamMasterWithOptions(request: $_model.SetLiveDomainMultiStreamMasterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveDomainMultiStreamMasterResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveDomainMultiStreamMaster",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveDomainMultiStreamMasterResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveDomainMultiStreamMasterResponse({}));
  }

  /**
   * Manually switches between the active stream and standby stream.
   * 
   * @param request - SetLiveDomainMultiStreamMasterRequest
   * @returns SetLiveDomainMultiStreamMasterResponse
   */
  async setLiveDomainMultiStreamMaster(request: $_model.SetLiveDomainMultiStreamMasterRequest): Promise<$_model.SetLiveDomainMultiStreamMasterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveDomainMultiStreamMasterWithOptions(request, runtime);
  }

  /**
   * Configures the auto mode of dual-stream disaster recovery.
   * 
   * @param request - SetLiveDomainMultiStreamOptimalModeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveDomainMultiStreamOptimalModeResponse
   */
  async setLiveDomainMultiStreamOptimalModeWithOptions(request: $_model.SetLiveDomainMultiStreamOptimalModeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveDomainMultiStreamOptimalModeResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveDomainMultiStreamOptimalMode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveDomainMultiStreamOptimalModeResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveDomainMultiStreamOptimalModeResponse({}));
  }

  /**
   * Configures the auto mode of dual-stream disaster recovery.
   * 
   * @param request - SetLiveDomainMultiStreamOptimalModeRequest
   * @returns SetLiveDomainMultiStreamOptimalModeResponse
   */
  async setLiveDomainMultiStreamOptimalMode(request: $_model.SetLiveDomainMultiStreamOptimalModeRequest): Promise<$_model.SetLiveDomainMultiStreamOptimalModeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveDomainMultiStreamOptimalModeWithOptions(request, runtime);
  }

  /**
   * Sets or modifies domain name configurations in the canary release environment.
   * 
   * @remarks
   * ## [](#)Usage notes
   * Obtain the accelerated domain name, and then call this operation to set or modify the domain name configurations in the canary release environment. For more information, see **Format of the Functions parameter**.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SetLiveDomainStagingConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveDomainStagingConfigResponse
   */
  async setLiveDomainStagingConfigWithOptions(request: $_model.SetLiveDomainStagingConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveDomainStagingConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.functions)) {
      query["Functions"] = request.functions;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveDomainStagingConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveDomainStagingConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveDomainStagingConfigResponse({}));
  }

  /**
   * Sets or modifies domain name configurations in the canary release environment.
   * 
   * @remarks
   * ## [](#)Usage notes
   * Obtain the accelerated domain name, and then call this operation to set or modify the domain name configurations in the canary release environment. For more information, see **Format of the Functions parameter**.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - SetLiveDomainStagingConfigRequest
   * @returns SetLiveDomainStagingConfigResponse
   */
  async setLiveDomainStagingConfig(request: $_model.SetLiveDomainStagingConfigRequest): Promise<$_model.SetLiveDomainStagingConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveDomainStagingConfigWithOptions(request, runtime);
  }

  /**
   * Sets the configuration of edge stream relay.
   * 
   * @remarks
   * You can call the SetLiveEdgeTransfer operation to configure edge stream relay. The configuration takes effect for ingested streams that start after edge stream relay is configured. The following table describes the scenarios in which edge stream relay takes effect or not.
   * |Scenario|Analysis|Result|
   * |---|---|---|
   * |1\\. You ingest a stream before you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is not available.|The ingested stream is not affected by your call of the SetLiveEdgeTransfer operation. Edge stream relay does not take effect.|
   * |2\\. You disconnect an ingested stream that started before you called the SetLiveEdgeTransfer operation, and then resume the ingested stream.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the resumed ingested stream based on the configuration.|
   * |3\\. You ingest a stream after you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the ingested stream based on the configuration.|
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveEdgeTransferRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveEdgeTransferResponse
   */
  async setLiveEdgeTransferWithOptions(request: $_model.SetLiveEdgeTransferRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveEdgeTransferResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.httpDns)) {
      query["HttpDns"] = request.httpDns;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.targetDomainList)) {
      query["TargetDomainList"] = request.targetDomainList;
    }

    if (!$dara.isNull(request.transferArgs)) {
      query["TransferArgs"] = request.transferArgs;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveEdgeTransfer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveEdgeTransferResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveEdgeTransferResponse({}));
  }

  /**
   * Sets the configuration of edge stream relay.
   * 
   * @remarks
   * You can call the SetLiveEdgeTransfer operation to configure edge stream relay. The configuration takes effect for ingested streams that start after edge stream relay is configured. The following table describes the scenarios in which edge stream relay takes effect or not.
   * |Scenario|Analysis|Result|
   * |---|---|---|
   * |1\\. You ingest a stream before you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is not available.|The ingested stream is not affected by your call of the SetLiveEdgeTransfer operation. Edge stream relay does not take effect.|
   * |2\\. You disconnect an ingested stream that started before you called the SetLiveEdgeTransfer operation, and then resume the ingested stream.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the resumed ingested stream based on the configuration.|
   * |3\\. You ingest a stream after you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the ingested stream based on the configuration.|
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveEdgeTransferRequest
   * @returns SetLiveEdgeTransferResponse
   */
  async setLiveEdgeTransfer(request: $_model.SetLiveEdgeTransferRequest): Promise<$_model.SetLiveEdgeTransferResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveEdgeTransferWithOptions(request, runtime);
  }

  /**
   * Creates a configuration of triggered stream pulling.
   * 
   * @remarks
   * You can call this operation to configure triggered stream pulling. The configuration lets ApsaraVideo Live automatically pull live streams from the origin server when the origin server starts to play live streams.
   * >  The IPv6 protocol is not supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveLazyPullStreamInfoConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveLazyPullStreamInfoConfigResponse
   */
  async setLiveLazyPullStreamInfoConfigWithOptions(request: $_model.SetLiveLazyPullStreamInfoConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveLazyPullStreamInfoConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pullAppName)) {
      query["PullAppName"] = request.pullAppName;
    }

    if (!$dara.isNull(request.pullDomainName)) {
      query["PullDomainName"] = request.pullDomainName;
    }

    if (!$dara.isNull(request.pullProtocol)) {
      query["PullProtocol"] = request.pullProtocol;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.transcodeLazy)) {
      query["TranscodeLazy"] = request.transcodeLazy;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveLazyPullStreamInfoConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveLazyPullStreamInfoConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveLazyPullStreamInfoConfigResponse({}));
  }

  /**
   * Creates a configuration of triggered stream pulling.
   * 
   * @remarks
   * You can call this operation to configure triggered stream pulling. The configuration lets ApsaraVideo Live automatically pull live streams from the origin server when the origin server starts to play live streams.
   * >  The IPv6 protocol is not supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveLazyPullStreamInfoConfigRequest
   * @returns SetLiveLazyPullStreamInfoConfigResponse
   */
  async setLiveLazyPullStreamInfoConfig(request: $_model.SetLiveLazyPullStreamInfoConfigRequest): Promise<$_model.SetLiveLazyPullStreamInfoConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveLazyPullStreamInfoConfigWithOptions(request, runtime);
  }

  /**
   * Configures custom supplemental enhancement information (SEI) for co-streaming.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to configure custom SEI for a mixed-stream relay task.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveMpuTaskSeiRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveMpuTaskSeiResponse
   */
  async setLiveMpuTaskSeiWithOptions(request: $_model.SetLiveMpuTaskSeiRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveMpuTaskSeiResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.customSei)) {
      query["CustomSei"] = request.customSei;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveMpuTaskSei",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveMpuTaskSeiResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveMpuTaskSeiResponse({}));
  }

  /**
   * Configures custom supplemental enhancement information (SEI) for co-streaming.
   * 
   * @remarks
   * ## [](#)Usage notes
   * You can call this operation to configure custom SEI for a mixed-stream relay task.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveMpuTaskSeiRequest
   * @returns SetLiveMpuTaskSeiResponse
   */
  async setLiveMpuTaskSei(request: $_model.SetLiveMpuTaskSeiRequest): Promise<$_model.SetLiveMpuTaskSeiResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveMpuTaskSeiWithOptions(request, runtime);
  }

  /**
   * Configures stream-level region blocking.
   * 
   * @remarks
   * You can configure up to 200 stream-level region blocking rules for a domain name. If there are rules in which the same application name and the same stream name are specified, the rule that is updated the most recently takes effect.
   * ### [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamBlockRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveStreamBlockResponse
   */
  async setLiveStreamBlockWithOptions(request: $_model.SetLiveStreamBlockRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveStreamBlockResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.blockType)) {
      query["BlockType"] = request.blockType;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.locationList)) {
      query["LocationList"] = request.locationList;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.releaseTime)) {
      query["ReleaseTime"] = request.releaseTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveStreamBlock",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveStreamBlockResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveStreamBlockResponse({}));
  }

  /**
   * Configures stream-level region blocking.
   * 
   * @remarks
   * You can configure up to 200 stream-level region blocking rules for a domain name. If there are rules in which the same application name and the same stream name are specified, the rule that is updated the most recently takes effect.
   * ### [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamBlockRequest
   * @returns SetLiveStreamBlockResponse
   */
  async setLiveStreamBlock(request: $_model.SetLiveStreamBlockRequest): Promise<$_model.SetLiveStreamBlockResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveStreamBlockWithOptions(request, runtime);
  }

  /**
   * Configures the live streaming latency.
   * 
   * @remarks
   *   You can call this operation to configure the latency of a streaming domain.
   * *   Because an integer number of groups of pictures (GOPs) are cached, the latency is not less than the GOP size. The actual latency is calculated based on the GOP size. For example, if RtmpDelay is set to 4 seconds and the GOP size is 2 seconds, the minimum latency is 2 seconds (4 seconds minus 2 seconds) and the maximum latency is 6 seconds (4 seconds plus 2 seconds). If the GOP size is greater than the value of RtmpDelay, for example, the GOP size is 5 seconds and RtmpDelay is set to 4 seconds, the latency ranges from 0 to 9 seconds.
   * *   Configuration for the latency of an audio-only stream is invalid. By default, the latency is close to 0.
   * *   For HTTP Live Streaming (HLS)-based playback, the segment size equals the latency divided by 3. Round the value down to the nearest integer. The value cannot be less than 1 second. Then, calculate the maximum number of segments. If the segment size is greater than or equal to 3 seconds, the maximum number of segments is 4. Otherwise, the maximum number of segments is 6.
   * *   The actual HLS segment size is not smaller than the GOP size.
   * *   The latency of HLS-based playback equals the configured segment size times 3.
   * *   If you do not call this operation, the default latency is 2 seconds for Real-Time Messaging Protocol (RTMP)-based playback and 4 seconds for Flash Video (FLV)-based playback. By default, the size of an HLS segment is 5 seconds. In this case, the latency is 15 seconds and the maximum number of segments is 6.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamDelayConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveStreamDelayConfigResponse
   */
  async setLiveStreamDelayConfigWithOptions(request: $_model.SetLiveStreamDelayConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveStreamDelayConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.flvDelay)) {
      query["FlvDelay"] = request.flvDelay;
    }

    if (!$dara.isNull(request.flvLevel)) {
      query["FlvLevel"] = request.flvLevel;
    }

    if (!$dara.isNull(request.hlsDelay)) {
      query["HlsDelay"] = request.hlsDelay;
    }

    if (!$dara.isNull(request.hlsLevel)) {
      query["HlsLevel"] = request.hlsLevel;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.rtmpDelay)) {
      query["RtmpDelay"] = request.rtmpDelay;
    }

    if (!$dara.isNull(request.rtmpLevel)) {
      query["RtmpLevel"] = request.rtmpLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveStreamDelayConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveStreamDelayConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveStreamDelayConfigResponse({}));
  }

  /**
   * Configures the live streaming latency.
   * 
   * @remarks
   *   You can call this operation to configure the latency of a streaming domain.
   * *   Because an integer number of groups of pictures (GOPs) are cached, the latency is not less than the GOP size. The actual latency is calculated based on the GOP size. For example, if RtmpDelay is set to 4 seconds and the GOP size is 2 seconds, the minimum latency is 2 seconds (4 seconds minus 2 seconds) and the maximum latency is 6 seconds (4 seconds plus 2 seconds). If the GOP size is greater than the value of RtmpDelay, for example, the GOP size is 5 seconds and RtmpDelay is set to 4 seconds, the latency ranges from 0 to 9 seconds.
   * *   Configuration for the latency of an audio-only stream is invalid. By default, the latency is close to 0.
   * *   For HTTP Live Streaming (HLS)-based playback, the segment size equals the latency divided by 3. Round the value down to the nearest integer. The value cannot be less than 1 second. Then, calculate the maximum number of segments. If the segment size is greater than or equal to 3 seconds, the maximum number of segments is 4. Otherwise, the maximum number of segments is 6.
   * *   The actual HLS segment size is not smaller than the GOP size.
   * *   The latency of HLS-based playback equals the configured segment size times 3.
   * *   If you do not call this operation, the default latency is 2 seconds for Real-Time Messaging Protocol (RTMP)-based playback and 4 seconds for Flash Video (FLV)-based playback. By default, the size of an HLS segment is 5 seconds. In this case, the latency is 15 seconds and the maximum number of segments is 6.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamDelayConfigRequest
   * @returns SetLiveStreamDelayConfigResponse
   */
  async setLiveStreamDelayConfig(request: $_model.SetLiveStreamDelayConfigRequest): Promise<$_model.SetLiveStreamDelayConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveStreamDelayConfigWithOptions(request, runtime);
  }

  /**
   * Configures a prefetch task. You can specify multiple URLs to prefetch at a time.
   * 
   * @remarks
   *   You can call this operation to specify multiple URLs to prefetch at a time. You can specify up to 100 URLs in a request.
   * *   URLs in the HTTP Live Steaming (HLS) format are not supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamPreloadTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveStreamPreloadTasksResponse
   */
  async setLiveStreamPreloadTasksWithOptions(request: $_model.SetLiveStreamPreloadTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveStreamPreloadTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.area)) {
      query["Area"] = request.area;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.playUrl)) {
      query["PlayUrl"] = request.playUrl;
    }

    if (!$dara.isNull(request.preloadedEndTime)) {
      query["PreloadedEndTime"] = request.preloadedEndTime;
    }

    if (!$dara.isNull(request.preloadedStartTime)) {
      query["PreloadedStartTime"] = request.preloadedStartTime;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveStreamPreloadTasks",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveStreamPreloadTasksResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveStreamPreloadTasksResponse({}));
  }

  /**
   * Configures a prefetch task. You can specify multiple URLs to prefetch at a time.
   * 
   * @remarks
   *   You can call this operation to specify multiple URLs to prefetch at a time. You can specify up to 100 URLs in a request.
   * *   URLs in the HTTP Live Steaming (HLS) format are not supported.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamPreloadTasksRequest
   * @returns SetLiveStreamPreloadTasksResponse
   */
  async setLiveStreamPreloadTasks(request: $_model.SetLiveStreamPreloadTasksRequest): Promise<$_model.SetLiveStreamPreloadTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveStreamPreloadTasksWithOptions(request, runtime);
  }

  /**
   * Configures stream ingest callbacks under an ingest domain.
   * 
   * @remarks
   *   You can call this operation to configure the callback URL and authentication information of an ingest domain.
   * *   If you configure callbacks for stream ingest status, you can receive callback notifications about successful or interrupted stream ingest in a timely manner. For more information, see [Format of stream ingest callbacks](https://help.aliyun.com/document_detail/54787.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamsNotifyUrlConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetLiveStreamsNotifyUrlConfigResponse
   */
  async setLiveStreamsNotifyUrlConfigWithOptions(request: $_model.SetLiveStreamsNotifyUrlConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetLiveStreamsNotifyUrlConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.exceptionNotifyUrl)) {
      query["ExceptionNotifyUrl"] = request.exceptionNotifyUrl;
    }

    if (!$dara.isNull(request.notifyAuthKey)) {
      query["NotifyAuthKey"] = request.notifyAuthKey;
    }

    if (!$dara.isNull(request.notifyReqAuth)) {
      query["NotifyReqAuth"] = request.notifyReqAuth;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.switchNotifyUrl)) {
      query["SwitchNotifyUrl"] = request.switchNotifyUrl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetLiveStreamsNotifyUrlConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetLiveStreamsNotifyUrlConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetLiveStreamsNotifyUrlConfigResponse({}));
  }

  /**
   * Configures stream ingest callbacks under an ingest domain.
   * 
   * @remarks
   *   You can call this operation to configure the callback URL and authentication information of an ingest domain.
   * *   If you configure callbacks for stream ingest status, you can receive callback notifications about successful or interrupted stream ingest in a timely manner. For more information, see [Format of stream ingest callbacks](https://help.aliyun.com/document_detail/54787.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetLiveStreamsNotifyUrlConfigRequest
   * @returns SetLiveStreamsNotifyUrlConfigResponse
   */
  async setLiveStreamsNotifyUrlConfig(request: $_model.SetLiveStreamsNotifyUrlConfigRequest): Promise<$_model.SetLiveStreamsNotifyUrlConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
  }

  /**
   * Configures the background of the episode list.
   * 
   * @remarks
   *   Create a production studio in playlist mode, and then call this operation to add the background material. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * *   You can call this operation to create, update, or delete the background of the episode list. To delete the background, leave the ResourceType, ResourceUrl, and MaterialId parameters empty.
   * > 
   * *   When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
   * *   When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetShowListBackgroundRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetShowListBackgroundResponse
   */
  async setShowListBackgroundWithOptions(request: $_model.SetShowListBackgroundRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetShowListBackgroundResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.materialId)) {
      query["MaterialId"] = request.materialId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.resourceUrl)) {
      query["ResourceUrl"] = request.resourceUrl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetShowListBackground",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetShowListBackgroundResponse>(await this.callApi(params, req, runtime), new $_model.SetShowListBackgroundResponse({}));
  }

  /**
   * Configures the background of the episode list.
   * 
   * @remarks
   *   Create a production studio in playlist mode, and then call this operation to add the background material. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
   * *   You can call this operation to create, update, or delete the background of the episode list. To delete the background, leave the ResourceType, ResourceUrl, and MaterialId parameters empty.
   * > 
   * *   When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
   * *   When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetShowListBackgroundRequest
   * @returns SetShowListBackgroundResponse
   */
  async setShowListBackground(request: $_model.SetShowListBackgroundRequest): Promise<$_model.SetShowListBackgroundResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setShowListBackgroundWithOptions(request, runtime);
  }

  /**
   * Configures authentication for snapshot callbacks.
   * 
   * @remarks
   *   Before you configure authentication for snapshot callbacks, you need to specify the callback URL. For more information, see [AddLiveAppSnapshotConfig](https://help.aliyun.com/document_detail/2847897.html).
   * *   You can call this operation to configure authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
   * *   ApsaraVideo Live allows you to add a specific signature header to each HTTP or HTTPS callback request. This way, the server that receives callback messages can authenticate the signature to prevent illegal or invalid requests. For more information, see [Usage notes for callback authentication](https://help.aliyun.com/document_detail/417349.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetSnapshotCallbackAuthRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetSnapshotCallbackAuthResponse
   */
  async setSnapshotCallbackAuthWithOptions(request: $_model.SetSnapshotCallbackAuthRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetSnapshotCallbackAuthResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callbackAuthKey)) {
      query["CallbackAuthKey"] = request.callbackAuthKey;
    }

    if (!$dara.isNull(request.callbackReqAuth)) {
      query["CallbackReqAuth"] = request.callbackReqAuth;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetSnapshotCallbackAuth",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetSnapshotCallbackAuthResponse>(await this.callApi(params, req, runtime), new $_model.SetSnapshotCallbackAuthResponse({}));
  }

  /**
   * Configures authentication for snapshot callbacks.
   * 
   * @remarks
   *   Before you configure authentication for snapshot callbacks, you need to specify the callback URL. For more information, see [AddLiveAppSnapshotConfig](https://help.aliyun.com/document_detail/2847897.html).
   * *   You can call this operation to configure authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
   * *   ApsaraVideo Live allows you to add a specific signature header to each HTTP or HTTPS callback request. This way, the server that receives callback messages can authenticate the signature to prevent illegal or invalid requests. For more information, see [Usage notes for callback authentication](https://help.aliyun.com/document_detail/417349.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - SetSnapshotCallbackAuthRequest
   * @returns SetSnapshotCallbackAuthResponse
   */
  async setSnapshotCallbackAuth(request: $_model.SetSnapshotCallbackAuthRequest): Promise<$_model.SetSnapshotCallbackAuthResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setSnapshotCallbackAuthWithOptions(request, runtime);
  }

  /**
   * Starts a production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to start the production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartCasterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartCasterResponse
   */
  async startCasterWithOptions(request: $_model.StartCasterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartCasterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartCaster",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartCasterResponse>(await this.callApi(params, req, runtime), new $_model.StartCasterResponse({}));
  }

  /**
   * Starts a production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to start the production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartCasterRequest
   * @returns StartCasterResponse
   */
  async startCaster(request: $_model.StartCasterRequest): Promise<$_model.StartCasterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startCasterWithOptions(request, runtime);
  }

  /**
   * Starts a specified preview (PVW) scene.
   * 
   * @remarks
   * You can call this operation to start a specified PVW scene.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartCasterSceneRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartCasterSceneResponse
   */
  async startCasterSceneWithOptions(request: $_model.StartCasterSceneRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartCasterSceneResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartCasterScene",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartCasterSceneResponse>(await this.callApi(params, req, runtime), new $_model.StartCasterSceneResponse({}));
  }

  /**
   * Starts a specified preview (PVW) scene.
   * 
   * @remarks
   * You can call this operation to start a specified PVW scene.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartCasterSceneRequest
   * @returns StartCasterSceneResponse
   */
  async startCasterScene(request: $_model.StartCasterSceneRequest): Promise<$_model.StartCasterSceneResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startCasterSceneWithOptions(request, runtime);
  }

  /**
   * Starts an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to start an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartEdgeTranscodeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartEdgeTranscodeJobResponse
   */
  async startEdgeTranscodeJobWithOptions(request: $_model.StartEdgeTranscodeJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartEdgeTranscodeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartEdgeTranscodeJob",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartEdgeTranscodeJobResponse>(await this.callApi(params, req, runtime), new $_model.StartEdgeTranscodeJobResponse({}));
  }

  /**
   * Starts an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to start an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartEdgeTranscodeJobRequest
   * @returns StartEdgeTranscodeJobResponse
   */
  async startEdgeTranscodeJob(request: $_model.StartEdgeTranscodeJobRequest): Promise<$_model.StartEdgeTranscodeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startEdgeTranscodeJobWithOptions(request, runtime);
  }

  /**
   * Enables a disabled domain name. After the domain name is enabled, its status changes to online.
   * 
   * @remarks
   * This operation does not work if the Alibaba Cloud account to which the domain name belongs has overdue payments or the domain name is invalid.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartLiveDomainRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartLiveDomainResponse
   */
  async startLiveDomainWithOptions(request: $_model.StartLiveDomainRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartLiveDomainResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartLiveDomain",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartLiveDomainResponse>(await this.callApi(params, req, runtime), new $_model.StartLiveDomainResponse({}));
  }

  /**
   * Enables a disabled domain name. After the domain name is enabled, its status changes to online.
   * 
   * @remarks
   * This operation does not work if the Alibaba Cloud account to which the domain name belongs has overdue payments or the domain name is invalid.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartLiveDomainRequest
   * @returns StartLiveDomainResponse
   */
  async startLiveDomain(request: $_model.StartLiveDomainRequest): Promise<$_model.StartLiveDomainResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startLiveDomainWithOptions(request, runtime);
  }

  /**
   * Creates a mixed-stream relay task.
   * 
   * @remarks
   * By default, you can create up to 200 single-stream relay tasks and up to 40 mixed-stream relay tasks for an application. To increase the quota, [submit a ticket](https://smartservice.console.aliyun.com/service/create-ticket).
   * ### [](#)Lifecycle of a stream relay task
   * **Start**
   * *   Call the StartLiveMPUTask operation to create a task.
   *     *   If no user joins the channel, an error indicating that the channel does not exist is returned.
   *     *   Stream relay is not performed if no stream is ingested. In this case, no relayed stream is available for playback.
   *     *   If the task is in the mixed-stream relay mode, make sure that at least one user is ingesting a stream, which can be relayed for playback. A black screen is displayed in the pane of a user who is not ingesting a stream.
   * *   We recommend that you record the task status, task mode, and task parameters on your business server.
   *     *   Task status: started or stopped.
   *     *   Task mode: single-stream relay or mixed-stream relay.
   *     *   Task parameters: the latest input parameters. For example, after your call of the UpdateLiveMPUTask operation is successful, record the task parameters, which are the latest.
   * *   In co-streaming or battle scenarios, the task is in the mixed-stream relay mode. If the streamer leaves the channel due to exceptions and re-joins the channel, you can directly call the StartLiveMPUTask operation on your business server to start stream relay based on the recorded task parameters.
   *     *   If the task has not been automatically cleared by the system, the task is directly started.
   *     *   If the task has not been automatically cleared by the system, a message indicating that **the task already exists** is returned.
   * **End**
   * *   After the streamer leaves the channel, you need to call the [StopLiveMPUTask](https://help.aliyun.com/document_detail/2362742.html) operation to stop the task.
   * *   If all users specified in the task have left the channel, but you do not call the StopLiveMPUTask operation, the system stops the task in 2 minutes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - StartLiveMPUTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartLiveMPUTaskResponse
   */
  async startLiveMPUTaskWithOptions(tmpReq: $_model.StartLiveMPUTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartLiveMPUTaskResponse> {
    tmpReq.validate();
    let request = new $_model.StartLiveMPUTaskShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.multiStreamURL)) {
      request.multiStreamURLShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.multiStreamURL, "MultiStreamURL", "json");
    }

    if (!$dara.isNull(tmpReq.seiParams)) {
      request.seiParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.seiParams, "SeiParams", "json");
    }

    if (!$dara.isNull(tmpReq.singleSubParams)) {
      request.singleSubParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.singleSubParams, "SingleSubParams", "json");
    }

    if (!$dara.isNull(tmpReq.transcodeParams)) {
      request.transcodeParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transcodeParams, "TranscodeParams", "json");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.maxIdleTime)) {
      query["MaxIdleTime"] = request.maxIdleTime;
    }

    if (!$dara.isNull(request.mixMode)) {
      query["MixMode"] = request.mixMode;
    }

    if (!$dara.isNull(request.multiStreamURLShrink)) {
      query["MultiStreamURL"] = request.multiStreamURLShrink;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.seiParamsShrink)) {
      query["SeiParams"] = request.seiParamsShrink;
    }

    if (!$dara.isNull(request.singleSubParamsShrink)) {
      query["SingleSubParams"] = request.singleSubParamsShrink;
    }

    if (!$dara.isNull(request.streamURL)) {
      query["StreamURL"] = request.streamURL;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.transcodeParamsShrink)) {
      query["TranscodeParams"] = request.transcodeParamsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartLiveMPUTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartLiveMPUTaskResponse>(await this.callApi(params, req, runtime), new $_model.StartLiveMPUTaskResponse({}));
  }

  /**
   * Creates a mixed-stream relay task.
   * 
   * @remarks
   * By default, you can create up to 200 single-stream relay tasks and up to 40 mixed-stream relay tasks for an application. To increase the quota, [submit a ticket](https://smartservice.console.aliyun.com/service/create-ticket).
   * ### [](#)Lifecycle of a stream relay task
   * **Start**
   * *   Call the StartLiveMPUTask operation to create a task.
   *     *   If no user joins the channel, an error indicating that the channel does not exist is returned.
   *     *   Stream relay is not performed if no stream is ingested. In this case, no relayed stream is available for playback.
   *     *   If the task is in the mixed-stream relay mode, make sure that at least one user is ingesting a stream, which can be relayed for playback. A black screen is displayed in the pane of a user who is not ingesting a stream.
   * *   We recommend that you record the task status, task mode, and task parameters on your business server.
   *     *   Task status: started or stopped.
   *     *   Task mode: single-stream relay or mixed-stream relay.
   *     *   Task parameters: the latest input parameters. For example, after your call of the UpdateLiveMPUTask operation is successful, record the task parameters, which are the latest.
   * *   In co-streaming or battle scenarios, the task is in the mixed-stream relay mode. If the streamer leaves the channel due to exceptions and re-joins the channel, you can directly call the StartLiveMPUTask operation on your business server to start stream relay based on the recorded task parameters.
   *     *   If the task has not been automatically cleared by the system, the task is directly started.
   *     *   If the task has not been automatically cleared by the system, a message indicating that **the task already exists** is returned.
   * **End**
   * *   After the streamer leaves the channel, you need to call the [StopLiveMPUTask](https://help.aliyun.com/document_detail/2362742.html) operation to stop the task.
   * *   If all users specified in the task have left the channel, but you do not call the StopLiveMPUTask operation, the system stops the task in 2 minutes.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartLiveMPUTaskRequest
   * @returns StartLiveMPUTaskResponse
   */
  async startLiveMPUTask(request: $_model.StartLiveMPUTaskRequest): Promise<$_model.StartLiveMPUTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startLiveMPUTaskWithOptions(request, runtime);
  }

  /**
   * Starts live monitoring.
   * 
   * @remarks
   * You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartLiveStreamMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartLiveStreamMonitorResponse
   */
  async startLiveStreamMonitorWithOptions(request: $_model.StartLiveStreamMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartLiveStreamMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.monitorId)) {
      query["MonitorId"] = request.monitorId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartLiveStreamMonitor",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartLiveStreamMonitorResponse>(await this.callApi(params, req, runtime), new $_model.StartLiveStreamMonitorResponse({}));
  }

  /**
   * Starts live monitoring.
   * 
   * @remarks
   * You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartLiveStreamMonitorRequest
   * @returns StartLiveStreamMonitorResponse
   */
  async startLiveStreamMonitor(request: $_model.StartLiveStreamMonitorRequest): Promise<$_model.StartLiveStreamMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startLiveStreamMonitorWithOptions(request, runtime);
  }

  /**
   * Starts playing an episode list.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to start playing the episode list.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartPlaylistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartPlaylistResponse
   */
  async startPlaylistWithOptions(request: $_model.StartPlaylistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartPlaylistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.offset)) {
      query["Offset"] = request.offset;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resumeMode)) {
      query["ResumeMode"] = request.resumeMode;
    }

    if (!$dara.isNull(request.startItemId)) {
      query["StartItemId"] = request.startItemId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartPlaylist",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartPlaylistResponse>(await this.callApi(params, req, runtime), new $_model.StartPlaylistResponse({}));
  }

  /**
   * Starts playing an episode list.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to start playing the episode list.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StartPlaylistRequest
   * @returns StartPlaylistResponse
   */
  async startPlaylist(request: $_model.StartPlaylistRequest): Promise<$_model.StartPlaylistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startPlaylistWithOptions(request, runtime);
  }

  /**
   * 启动rtc云端录制任务
   * 
   * @param tmpReq - StartRtcCloudRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartRtcCloudRecordingResponse
   */
  async startRtcCloudRecordingWithOptions(tmpReq: $_model.StartRtcCloudRecordingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartRtcCloudRecordingResponse> {
    tmpReq.validate();
    let request = new $_model.StartRtcCloudRecordingShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.mixLayoutParams)) {
      request.mixLayoutParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mixLayoutParams, "MixLayoutParams", "json");
    }

    if (!$dara.isNull(tmpReq.mixTranscodeParams)) {
      request.mixTranscodeParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mixTranscodeParams, "MixTranscodeParams", "json");
    }

    if (!$dara.isNull(tmpReq.recordParams)) {
      request.recordParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordParams, "RecordParams", "json");
    }

    if (!$dara.isNull(tmpReq.storageParams)) {
      request.storageParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.storageParams, "StorageParams", "json");
    }

    if (!$dara.isNull(tmpReq.subscribeParams)) {
      request.subscribeParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subscribeParams, "SubscribeParams", "json");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.mixLayoutParamsShrink)) {
      query["MixLayoutParams"] = request.mixLayoutParamsShrink;
    }

    if (!$dara.isNull(request.mixTranscodeParamsShrink)) {
      query["MixTranscodeParams"] = request.mixTranscodeParamsShrink;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.recordParamsShrink)) {
      query["RecordParams"] = request.recordParamsShrink;
    }

    if (!$dara.isNull(request.storageParamsShrink)) {
      query["StorageParams"] = request.storageParamsShrink;
    }

    if (!$dara.isNull(request.subscribeParamsShrink)) {
      query["SubscribeParams"] = request.subscribeParamsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartRtcCloudRecording",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartRtcCloudRecordingResponse>(await this.callApi(params, req, runtime), new $_model.StartRtcCloudRecordingResponse({}));
  }

  /**
   * 启动rtc云端录制任务
   * 
   * @param request - StartRtcCloudRecordingRequest
   * @returns StartRtcCloudRecordingResponse
   */
  async startRtcCloudRecording(request: $_model.StartRtcCloudRecordingRequest): Promise<$_model.StartRtcCloudRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startRtcCloudRecordingWithOptions(request, runtime);
  }

  /**
   * Stops a production studio. This stops the PVW and PGM scenes of the production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and call this operation to stop the production studio. When a production studio is stopped, its PVW and PGM scenes are stopped.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopCasterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopCasterResponse
   */
  async stopCasterWithOptions(request: $_model.StopCasterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopCasterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopCaster",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopCasterResponse>(await this.callApi(params, req, runtime), new $_model.StopCasterResponse({}));
  }

  /**
   * Stops a production studio. This stops the PVW and PGM scenes of the production studio.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and call this operation to stop the production studio. When a production studio is stopped, its PVW and PGM scenes are stopped.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopCasterRequest
   * @returns StopCasterResponse
   */
  async stopCaster(request: $_model.StopCasterRequest): Promise<$_model.StopCasterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopCasterWithOptions(request, runtime);
  }

  /**
   * Stops a specified preview scene.
   * 
   * @remarks
   * ## Usage note
   * This operation is only applicable to the PVW scenes.
   * 
   * @param request - StopCasterSceneRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopCasterSceneResponse
   */
  async stopCasterSceneWithOptions(request: $_model.StopCasterSceneRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopCasterSceneResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopCasterScene",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopCasterSceneResponse>(await this.callApi(params, req, runtime), new $_model.StopCasterSceneResponse({}));
  }

  /**
   * Stops a specified preview scene.
   * 
   * @remarks
   * ## Usage note
   * This operation is only applicable to the PVW scenes.
   * 
   * @param request - StopCasterSceneRequest
   * @returns StopCasterSceneResponse
   */
  async stopCasterScene(request: $_model.StopCasterSceneRequest): Promise<$_model.StopCasterSceneResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopCasterSceneWithOptions(request, runtime);
  }

  /**
   * Stops an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to stop an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is running.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopEdgeTranscodeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopEdgeTranscodeJobResponse
   */
  async stopEdgeTranscodeJobWithOptions(request: $_model.StopEdgeTranscodeJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopEdgeTranscodeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopEdgeTranscodeJob",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopEdgeTranscodeJobResponse>(await this.callApi(params, req, runtime), new $_model.StopEdgeTranscodeJobResponse({}));
  }

  /**
   * Stops an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to stop an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is running.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopEdgeTranscodeJobRequest
   * @returns StopEdgeTranscodeJobResponse
   */
  async stopEdgeTranscodeJob(request: $_model.StopEdgeTranscodeJobRequest): Promise<$_model.StopEdgeTranscodeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopEdgeTranscodeJobWithOptions(request, runtime);
  }

  /**
   * Disables an enabled domain name. After the domain name is disabled, its status changes to offline.
   * 
   * @remarks
   * After you disable a domain name, the information about the domain name is retained. ApsaraVideo Live automatically reroutes all requests that are destined for the domain name to the origin.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLiveDomainRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopLiveDomainResponse
   */
  async stopLiveDomainWithOptions(request: $_model.StopLiveDomainRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopLiveDomainResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopLiveDomain",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopLiveDomainResponse>(await this.callApi(params, req, runtime), new $_model.StopLiveDomainResponse({}));
  }

  /**
   * Disables an enabled domain name. After the domain name is disabled, its status changes to offline.
   * 
   * @remarks
   * After you disable a domain name, the information about the domain name is retained. ApsaraVideo Live automatically reroutes all requests that are destined for the domain name to the origin.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLiveDomainRequest
   * @returns StopLiveDomainResponse
   */
  async stopLiveDomain(request: $_model.StopLiveDomainRequest): Promise<$_model.StopLiveDomainResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopLiveDomainWithOptions(request, runtime);
  }

  /**
   * Stops a mixed-stream relay task.
   * 
   * @remarks
   *   Make sure that a mixed-stream relay task is started before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to start a mixed-stream relay task.
   * *   If a mixed-stream relay task becomes abnormal, the task is automatically stopped 2 minutes after the last person leaves the channel. In this case, you do not need to call the StopLiveMPUTask operation. If you need to resume a mixed-stream relay task that is stopped, call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation again.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLiveMPUTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopLiveMPUTaskResponse
   */
  async stopLiveMPUTaskWithOptions(request: $_model.StopLiveMPUTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopLiveMPUTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopLiveMPUTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopLiveMPUTaskResponse>(await this.callApi(params, req, runtime), new $_model.StopLiveMPUTaskResponse({}));
  }

  /**
   * Stops a mixed-stream relay task.
   * 
   * @remarks
   *   Make sure that a mixed-stream relay task is started before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to start a mixed-stream relay task.
   * *   If a mixed-stream relay task becomes abnormal, the task is automatically stopped 2 minutes after the last person leaves the channel. In this case, you do not need to call the StopLiveMPUTask operation. If you need to resume a mixed-stream relay task that is stopped, call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation again.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLiveMPUTaskRequest
   * @returns StopLiveMPUTaskResponse
   */
  async stopLiveMPUTask(request: $_model.StopLiveMPUTaskRequest): Promise<$_model.StopLiveMPUTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopLiveMPUTaskWithOptions(request, runtime);
  }

  /**
   * Stops a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to stop a pulled-stream relay task.
   * *   You can stop a task that is running (even if the task is in an abnormal retry state). You cannot stop a task that is not running.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLivePullToPushRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopLivePullToPushResponse
   */
  async stopLivePullToPushWithOptions(request: $_model.StopLivePullToPushRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopLivePullToPushResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopLivePullToPush",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopLivePullToPushResponse>(await this.callApi(params, req, runtime), new $_model.StopLivePullToPushResponse({}));
  }

  /**
   * Stops a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to stop a pulled-stream relay task.
   * *   You can stop a task that is running (even if the task is in an abnormal retry state). You cannot stop a task that is not running.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLivePullToPushRequest
   * @returns StopLivePullToPushResponse
   */
  async stopLivePullToPush(request: $_model.StopLivePullToPushRequest): Promise<$_model.StopLivePullToPushResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopLivePullToPushWithOptions(request, runtime);
  }

  /**
   * Stops live monitoring.
   * 
   * @remarks
   * Before you call this operation to stop live monitoring, make sure that live monitoring is started. You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLiveStreamMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopLiveStreamMonitorResponse
   */
  async stopLiveStreamMonitorWithOptions(request: $_model.StopLiveStreamMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopLiveStreamMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.monitorId)) {
      query["MonitorId"] = request.monitorId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopLiveStreamMonitor",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopLiveStreamMonitorResponse>(await this.callApi(params, req, runtime), new $_model.StopLiveStreamMonitorResponse({}));
  }

  /**
   * Stops live monitoring.
   * 
   * @remarks
   * Before you call this operation to stop live monitoring, make sure that live monitoring is started. You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopLiveStreamMonitorRequest
   * @returns StopLiveStreamMonitorResponse
   */
  async stopLiveStreamMonitor(request: $_model.StopLiveStreamMonitorRequest): Promise<$_model.StopLiveStreamMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopLiveStreamMonitorWithOptions(request, runtime);
  }

  /**
   * Stops playing an episode list.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to stop playing the episode list.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopPlaylistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopPlaylistResponse
   */
  async stopPlaylistWithOptions(request: $_model.StopPlaylistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopPlaylistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.programId)) {
      query["ProgramId"] = request.programId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopPlaylist",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopPlaylistResponse>(await this.callApi(params, req, runtime), new $_model.StopPlaylistResponse({}));
  }

  /**
   * Stops playing an episode list.
   * 
   * @remarks
   * You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to stop playing the episode list.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopPlaylistRequest
   * @returns StopPlaylistResponse
   */
  async stopPlaylist(request: $_model.StopPlaylistRequest): Promise<$_model.StopPlaylistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopPlaylistWithOptions(request, runtime);
  }

  /**
   * Stops a live subtitle task.
   * 
   * @remarks
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopRtcAsrTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopRtcAsrTaskResponse
   */
  async stopRtcAsrTaskWithOptions(request: $_model.StopRtcAsrTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopRtcAsrTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopRtcAsrTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopRtcAsrTaskResponse>(await this.callApi(params, req, runtime), new $_model.StopRtcAsrTaskResponse({}));
  }

  /**
   * Stops a live subtitle task.
   * 
   * @remarks
   * You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - StopRtcAsrTaskRequest
   * @returns StopRtcAsrTaskResponse
   */
  async stopRtcAsrTask(request: $_model.StopRtcAsrTaskRequest): Promise<$_model.StopRtcAsrTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopRtcAsrTaskWithOptions(request, runtime);
  }

  /**
   * 停止rtc云端录制任务
   * 
   * @param request - StopRtcCloudRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopRtcCloudRecordingResponse
   */
  async stopRtcCloudRecordingWithOptions(request: $_model.StopRtcCloudRecordingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopRtcCloudRecordingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopRtcCloudRecording",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopRtcCloudRecordingResponse>(await this.callApi(params, req, runtime), new $_model.StopRtcCloudRecordingResponse({}));
  }

  /**
   * 停止rtc云端录制任务
   * 
   * @param request - StopRtcCloudRecordingRequest
   * @returns StopRtcCloudRecordingResponse
   */
  async stopRtcCloudRecording(request: $_model.StopRtcCloudRecordingRequest): Promise<$_model.StopRtcCloudRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopRtcCloudRecordingWithOptions(request, runtime);
  }

  /**
   * The N tags that you want to add for the resource.
   * 
   * @remarks
   * The key of the tag. Valid values of N: **1 to 20**.
   * 
   * @param request - TagLiveResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TagLiveResourcesResponse
   */
  async tagLiveResourcesWithOptions(request: $_model.TagLiveResourcesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.TagLiveResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TagLiveResources",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.TagLiveResourcesResponse>(await this.callApi(params, req, runtime), new $_model.TagLiveResourcesResponse({}));
  }

  /**
   * The N tags that you want to add for the resource.
   * 
   * @remarks
   * The key of the tag. Valid values of N: **1 to 20**.
   * 
   * @param request - TagLiveResourcesRequest
   * @returns TagLiveResourcesResponse
   */
  async tagLiveResources(request: $_model.TagLiveResourcesRequest): Promise<$_model.TagLiveResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.tagLiveResourcesWithOptions(request, runtime);
  }

  /**
   * @param request - UnTagLiveResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnTagLiveResourcesResponse
   */
  async unTagLiveResourcesWithOptions(request: $_model.UnTagLiveResourcesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UnTagLiveResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.all)) {
      query["All"] = request.all;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tagKey)) {
      query["TagKey"] = request.tagKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnTagLiveResources",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UnTagLiveResourcesResponse>(await this.callApi(params, req, runtime), new $_model.UnTagLiveResourcesResponse({}));
  }

  /**
   * @param request - UnTagLiveResourcesRequest
   * @returns UnTagLiveResourcesResponse
   */
  async unTagLiveResources(request: $_model.UnTagLiveResourcesRequest): Promise<$_model.UnTagLiveResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unTagLiveResourcesWithOptions(request, runtime);
  }

  /**
   * Unmutes a group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * *   If a user was muted by calling the AddLiveMessageGroupBand operation, the user remains muted even after you call the UnbanLiveMessageGroup operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UnbanLiveMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnbanLiveMessageGroupResponse
   */
  async unbanLiveMessageGroupWithOptions(request: $_model.UnbanLiveMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UnbanLiveMessageGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.dataCenter)) {
      query["DataCenter"] = request.dataCenter;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnbanLiveMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UnbanLiveMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.UnbanLiveMessageGroupResponse({}));
  }

  /**
   * Unmutes a group.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
   * *   If a user was muted by calling the AddLiveMessageGroupBand operation, the user remains muted even after you call the UnbanLiveMessageGroup operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UnbanLiveMessageGroupRequest
   * @returns UnbanLiveMessageGroupResponse
   */
  async unbanLiveMessageGroup(request: $_model.UnbanLiveMessageGroupRequest): Promise<$_model.UnbanLiveMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unbanLiveMessageGroupWithOptions(request, runtime);
  }

  /**
   * Changes the resource group to which a production studio belongs.
   * 
   * @remarks
   * ## [](#)Usage notes
   * To call this operation to change the resource group to which a production studio belongs, you must have access permissions on the original resource group and the destination resource group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - UpdateCasterResourceGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateCasterResourceGroupResponse
   */
  async updateCasterResourceGroupWithOptions(request: $_model.UpdateCasterResourceGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateCasterResourceGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.newResourceGroupId)) {
      query["NewResourceGroupId"] = request.newResourceGroupId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateCasterResourceGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateCasterResourceGroupResponse>(await this.callApi(params, req, runtime), new $_model.UpdateCasterResourceGroupResponse({}));
  }

  /**
   * Changes the resource group to which a production studio belongs.
   * 
   * @remarks
   * ## [](#)Usage notes
   * To call this operation to change the resource group to which a production studio belongs, you must have access permissions on the original resource group and the destination resource group.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - UpdateCasterResourceGroupRequest
   * @returns UpdateCasterResourceGroupResponse
   */
  async updateCasterResourceGroup(request: $_model.UpdateCasterResourceGroupRequest): Promise<$_model.UpdateCasterResourceGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateCasterResourceGroupWithOptions(request, runtime);
  }

  /**
   * Modifies the audio configurations of a scene. This operation also allows you to add an audio configuration or apply an existing audio configuration to a new scene.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify the audio configurations of a scene in the production studio. This operation supports the audio mixing mode and the audio follows video (AFV) mode.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateCasterSceneAudioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateCasterSceneAudioResponse
   */
  async updateCasterSceneAudioWithOptions(request: $_model.UpdateCasterSceneAudioRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateCasterSceneAudioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.audioLayer)) {
      query["AudioLayer"] = request.audioLayer;
    }

    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.followEnable)) {
      query["FollowEnable"] = request.followEnable;
    }

    if (!$dara.isNull(request.mixList)) {
      query["MixList"] = request.mixList;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateCasterSceneAudio",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateCasterSceneAudioResponse>(await this.callApi(params, req, runtime), new $_model.UpdateCasterSceneAudioResponse({}));
  }

  /**
   * Modifies the audio configurations of a scene. This operation also allows you to add an audio configuration or apply an existing audio configuration to a new scene.
   * 
   * @remarks
   * You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify the audio configurations of a scene in the production studio. This operation supports the audio mixing mode and the audio follows video (AFV) mode.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateCasterSceneAudioRequest
   * @returns UpdateCasterSceneAudioResponse
   */
  async updateCasterSceneAudio(request: $_model.UpdateCasterSceneAudioRequest): Promise<$_model.UpdateCasterSceneAudioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateCasterSceneAudioWithOptions(request, runtime);
  }

  /**
   * Modifies a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
   * 
   * @remarks
   * You can call this operation to modify a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateCasterSceneConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateCasterSceneConfigResponse
   */
  async updateCasterSceneConfigWithOptions(request: $_model.UpdateCasterSceneConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateCasterSceneConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.casterId)) {
      query["CasterId"] = request.casterId;
    }

    if (!$dara.isNull(request.componentId)) {
      query["ComponentId"] = request.componentId;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sceneId)) {
      query["SceneId"] = request.sceneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateCasterSceneConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateCasterSceneConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateCasterSceneConfigResponse({}));
  }

  /**
   * Modifies a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
   * 
   * @remarks
   * You can call this operation to modify a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateCasterSceneConfigRequest
   * @returns UpdateCasterSceneConfigResponse
   */
  async updateCasterSceneConfig(request: $_model.UpdateCasterSceneConfigRequest): Promise<$_model.UpdateCasterSceneConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateCasterSceneConfigWithOptions(request, runtime);
  }

  /**
   * Updates a custom transcoding configuration.
   * 
   * @remarks
   * This operation supports the following types of custom transcoding templates:
   * *   h264: custom H.264 standard transcoding.
   * *   h264-nbhd: custom H.264 Narrowband HD™ transcoding.
   * *   h265: custom H.265 standard transcoding.
   * *   h265-nbhd: custom H.265 Narrowband HD™ transcoding.
   * *   audio: audio-only transcoding.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account.
   * 
   * @param request - UpdateCustomLiveStreamTranscodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateCustomLiveStreamTranscodeResponse
   */
  async updateCustomLiveStreamTranscodeWithOptions(request: $_model.UpdateCustomLiveStreamTranscodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateCustomLiveStreamTranscodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.audioBitrate)) {
      query["AudioBitrate"] = request.audioBitrate;
    }

    if (!$dara.isNull(request.audioChannelNum)) {
      query["AudioChannelNum"] = request.audioChannelNum;
    }

    if (!$dara.isNull(request.audioCodec)) {
      query["AudioCodec"] = request.audioCodec;
    }

    if (!$dara.isNull(request.audioProfile)) {
      query["AudioProfile"] = request.audioProfile;
    }

    if (!$dara.isNull(request.audioRate)) {
      query["AudioRate"] = request.audioRate;
    }

    if (!$dara.isNull(request.bitrateWithSource)) {
      query["BitrateWithSource"] = request.bitrateWithSource;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.encryptParameters)) {
      query["EncryptParameters"] = request.encryptParameters;
    }

    if (!$dara.isNull(request.extWithSource)) {
      query["ExtWithSource"] = request.extWithSource;
    }

    if (!$dara.isNull(request.FPS)) {
      query["FPS"] = request.FPS;
    }

    if (!$dara.isNull(request.fpsWithSource)) {
      query["FpsWithSource"] = request.fpsWithSource;
    }

    if (!$dara.isNull(request.gop)) {
      query["Gop"] = request.gop;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.lazy)) {
      query["Lazy"] = request.lazy;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.profile)) {
      query["Profile"] = request.profile;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resWithSource)) {
      query["ResWithSource"] = request.resWithSource;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.videoBitrate)) {
      query["VideoBitrate"] = request.videoBitrate;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateCustomLiveStreamTranscode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateCustomLiveStreamTranscodeResponse>(await this.callApi(params, req, runtime), new $_model.UpdateCustomLiveStreamTranscodeResponse({}));
  }

  /**
   * Updates a custom transcoding configuration.
   * 
   * @remarks
   * This operation supports the following types of custom transcoding templates:
   * *   h264: custom H.264 standard transcoding.
   * *   h264-nbhd: custom H.264 Narrowband HD™ transcoding.
   * *   h265: custom H.265 standard transcoding.
   * *   h265-nbhd: custom H.265 Narrowband HD™ transcoding.
   * *   audio: audio-only transcoding.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account.
   * 
   * @param request - UpdateCustomLiveStreamTranscodeRequest
   * @returns UpdateCustomLiveStreamTranscodeResponse
   */
  async updateCustomLiveStreamTranscode(request: $_model.UpdateCustomLiveStreamTranscodeRequest): Promise<$_model.UpdateCustomLiveStreamTranscodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateCustomLiveStreamTranscodeWithOptions(request, runtime);
  }

  /**
   * Updates an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to update an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateEdgeTranscodeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateEdgeTranscodeJobResponse
   */
  async updateEdgeTranscodeJobWithOptions(request: $_model.UpdateEdgeTranscodeJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateEdgeTranscodeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamInput)) {
      query["StreamInput"] = request.streamInput;
    }

    if (!$dara.isNull(request.streamOutput)) {
      query["StreamOutput"] = request.streamOutput;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateEdgeTranscodeJob",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateEdgeTranscodeJobResponse>(await this.callApi(params, req, runtime), new $_model.UpdateEdgeTranscodeJobResponse({}));
  }

  /**
   * Updates an edge transcoding task.
   * 
   * @remarks
   *   You can call this operation to update an edge transcoding task.
   * *   To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateEdgeTranscodeJobRequest
   * @returns UpdateEdgeTranscodeJobResponse
   */
  async updateEdgeTranscodeJob(request: $_model.UpdateEdgeTranscodeJobRequest): Promise<$_model.UpdateEdgeTranscodeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateEdgeTranscodeJobWithOptions(request, runtime);
  }

  /**
   * Updates a callback that is used to subscribe to channel or user events.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateEventSub](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
   * *   An existing channel that you specify in this operation still uses its original callback configuration. The updated configuration can apply to the channel only if you restart the channel after it is closed for longer than 20 minutes.
   * *   If you only want to update specific parameters, you must also specify the other required parameters with their original values.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateEventSubResponse
   */
  async updateEventSubWithOptions(request: $_model.UpdateEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateEventSubResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.events)) {
      query["Events"] = request.events;
    }

    if (!$dara.isNull(request.subscribeId)) {
      query["SubscribeId"] = request.subscribeId;
    }

    if (!$dara.isNull(request.users)) {
      query["Users"] = request.users;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateEventSubResponse>(await this.callApi(params, req, runtime), new $_model.UpdateEventSubResponse({}));
  }

  /**
   * Updates a callback that is used to subscribe to channel or user events.
   * 
   * @remarks
   *   Before you call this operation, make sure that you have called the [CreateEventSub](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
   * *   An existing channel that you specify in this operation still uses its original callback configuration. The updated configuration can apply to the channel only if you restart the channel after it is closed for longer than 20 minutes.
   * *   If you only want to update specific parameters, you must also specify the other required parameters with their original values.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateEventSubRequest
   * @returns UpdateEventSubResponse
   */
  async updateEventSub(request: $_model.UpdateEventSubRequest): Promise<$_model.UpdateEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateEventSubWithOptions(request, runtime);
  }

  /**
   * Updates a subtitle rule.
   * 
   * @remarks
   * You can call this operation to modify the parameters of a specified subtitle rule.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAIProduceRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveAIProduceRulesResponse
   */
  async updateLiveAIProduceRulesWithOptions(request: $_model.UpdateLiveAIProduceRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveAIProduceRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.isLazy)) {
      query["IsLazy"] = request.isLazy;
    }

    if (!$dara.isNull(request.liveTemplate)) {
      query["LiveTemplate"] = request.liveTemplate;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.rulesId)) {
      query["RulesId"] = request.rulesId;
    }

    if (!$dara.isNull(request.studioName)) {
      query["StudioName"] = request.studioName;
    }

    if (!$dara.isNull(request.subtitleId)) {
      query["SubtitleId"] = request.subtitleId;
    }

    if (!$dara.isNull(request.subtitleName)) {
      query["SubtitleName"] = request.subtitleName;
    }

    if (!$dara.isNull(request.suffix)) {
      query["Suffix"] = request.suffix;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveAIProduceRules",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveAIProduceRulesResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveAIProduceRulesResponse({}));
  }

  /**
   * Updates a subtitle rule.
   * 
   * @remarks
   * You can call this operation to modify the parameters of a specified subtitle rule.
   * >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAIProduceRulesRequest
   * @returns UpdateLiveAIProduceRulesResponse
   */
  async updateLiveAIProduceRules(request: $_model.UpdateLiveAIProduceRulesRequest): Promise<$_model.UpdateLiveAIProduceRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveAIProduceRulesWithOptions(request, runtime);
  }

  /**
   * Updates a subtitle template.
   * 
   * @param tmpReq - UpdateLiveAISubtitleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveAISubtitleResponse
   */
  async updateLiveAISubtitleWithOptions(tmpReq: $_model.UpdateLiveAISubtitleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveAISubtitleResponse> {
    tmpReq.validate();
    let request = new $_model.UpdateLiveAISubtitleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.positionNormalized)) {
      request.positionNormalizedShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.positionNormalized, "PositionNormalized", "json");
    }

    let query = { };
    if (!$dara.isNull(request.bgColor)) {
      query["BgColor"] = request.bgColor;
    }

    if (!$dara.isNull(request.bgWidthNormalized)) {
      query["BgWidthNormalized"] = request.bgWidthNormalized;
    }

    if (!$dara.isNull(request.borderWidthNormalized)) {
      query["BorderWidthNormalized"] = request.borderWidthNormalized;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.dstLanguage)) {
      query["DstLanguage"] = request.dstLanguage;
    }

    if (!$dara.isNull(request.fontColor)) {
      query["FontColor"] = request.fontColor;
    }

    if (!$dara.isNull(request.fontName)) {
      query["FontName"] = request.fontName;
    }

    if (!$dara.isNull(request.fontSizeNormalized)) {
      query["FontSizeNormalized"] = request.fontSizeNormalized;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.maxLines)) {
      query["MaxLines"] = request.maxLines;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.positionNormalizedShrink)) {
      query["PositionNormalized"] = request.positionNormalizedShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.showSourceLan)) {
      query["ShowSourceLan"] = request.showSourceLan;
    }

    if (!$dara.isNull(request.srcLanguage)) {
      query["SrcLanguage"] = request.srcLanguage;
    }

    if (!$dara.isNull(request.subtitleId)) {
      query["SubtitleId"] = request.subtitleId;
    }

    if (!$dara.isNull(request.subtitleName)) {
      query["SubtitleName"] = request.subtitleName;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    if (!$dara.isNull(request.wordPerLine)) {
      query["WordPerLine"] = request.wordPerLine;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveAISubtitle",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveAISubtitleResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveAISubtitleResponse({}));
  }

  /**
   * Updates a subtitle template.
   * 
   * @param request - UpdateLiveAISubtitleRequest
   * @returns UpdateLiveAISubtitleResponse
   */
  async updateLiveAISubtitle(request: $_model.UpdateLiveAISubtitleRequest): Promise<$_model.UpdateLiveAISubtitleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveAISubtitleWithOptions(request, runtime);
  }

  /**
   * Updates a recording configuration for an application. The recordings are stored in Object Storage Service (OSS).
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to update a recording configuration.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAppRecordConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveAppRecordConfigResponse
   */
  async updateLiveAppRecordConfigWithOptions(request: $_model.UpdateLiveAppRecordConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveAppRecordConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.delayTime)) {
      query["DelayTime"] = request.delayTime;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.onDemand)) {
      query["OnDemand"] = request.onDemand;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.recordFormat)) {
      query["RecordFormat"] = request.recordFormat;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.transcodeRecordFormat)) {
      query["TranscodeRecordFormat"] = request.transcodeRecordFormat;
    }

    if (!$dara.isNull(request.transcodeTemplates)) {
      query["TranscodeTemplates"] = request.transcodeTemplates;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveAppRecordConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveAppRecordConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveAppRecordConfigResponse({}));
  }

  /**
   * Updates a recording configuration for an application. The recordings are stored in Object Storage Service (OSS).
   * 
   * @remarks
   * Obtain the main streaming domain, and then call this operation to update a recording configuration.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAppRecordConfigRequest
   * @returns UpdateLiveAppRecordConfigResponse
   */
  async updateLiveAppRecordConfig(request: $_model.UpdateLiveAppRecordConfigRequest): Promise<$_model.UpdateLiveAppRecordConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveAppRecordConfigWithOptions(request, runtime);
  }

  /**
   * Modifies a snapshot configuration of a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The modification takes effect after you restart stream ingest.
   * 
   * @remarks
   * You can call this operation to modify a snapshot configuration of a streaming domain. The captured snapshots are stored in OSS. The modification takes effect after you restart stream ingest.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAppSnapshotConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveAppSnapshotConfigResponse
   */
  async updateLiveAppSnapshotConfigWithOptions(request: $_model.UpdateLiveAppSnapshotConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveAppSnapshotConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.callback)) {
      query["Callback"] = request.callback;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.overwriteOssObject)) {
      query["OverwriteOssObject"] = request.overwriteOssObject;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.sequenceOssObject)) {
      query["SequenceOssObject"] = request.sequenceOssObject;
    }

    if (!$dara.isNull(request.timeInterval)) {
      query["TimeInterval"] = request.timeInterval;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveAppSnapshotConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveAppSnapshotConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveAppSnapshotConfigResponse({}));
  }

  /**
   * Modifies a snapshot configuration of a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The modification takes effect after you restart stream ingest.
   * 
   * @remarks
   * You can call this operation to modify a snapshot configuration of a streaming domain. The captured snapshots are stored in OSS. The modification takes effect after you restart stream ingest.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAppSnapshotConfigRequest
   * @returns UpdateLiveAppSnapshotConfigResponse
   */
  async updateLiveAppSnapshotConfig(request: $_model.UpdateLiveAppSnapshotConfigRequest): Promise<$_model.UpdateLiveAppSnapshotConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveAppSnapshotConfigWithOptions(request, runtime);
  }

  /**
   * Modifies an audio moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to modify an audio moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAudioAuditConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveAudioAuditConfigResponse
   */
  async updateLiveAudioAuditConfigWithOptions(request: $_model.UpdateLiveAudioAuditConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveAudioAuditConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.bizType)) {
      query["BizType"] = request.bizType;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.ossObject)) {
      query["OssObject"] = request.ossObject;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveAudioAuditConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveAudioAuditConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveAudioAuditConfigResponse({}));
  }

  /**
   * Modifies an audio moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to modify an audio moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveAudioAuditConfigRequest
   * @returns UpdateLiveAudioAuditConfigResponse
   */
  async updateLiveAudioAuditConfig(request: $_model.UpdateLiveAudioAuditConfigRequest): Promise<$_model.UpdateLiveAudioAuditConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveAudioAuditConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of callbacks for audio moderation results.
   * 
   * @param request - UpdateLiveAudioAuditNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveAudioAuditNotifyConfigResponse
   */
  async updateLiveAudioAuditNotifyConfigWithOptions(request: $_model.UpdateLiveAudioAuditNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveAudioAuditNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callback)) {
      query["Callback"] = request.callback;
    }

    if (!$dara.isNull(request.callbackTemplate)) {
      query["CallbackTemplate"] = request.callbackTemplate;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveAudioAuditNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveAudioAuditNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveAudioAuditNotifyConfigResponse({}));
  }

  /**
   * Modifies the configuration of callbacks for audio moderation results.
   * 
   * @param request - UpdateLiveAudioAuditNotifyConfigRequest
   * @returns UpdateLiveAudioAuditNotifyConfigResponse
   */
  async updateLiveAudioAuditNotifyConfig(request: $_model.UpdateLiveAudioAuditNotifyConfigRequest): Promise<$_model.UpdateLiveAudioAuditNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveAudioAuditNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of live center stream relay.
   * 
   * @remarks
   * You can call this operation to modify only the **time-related** parameters, including TransferArgs, StartTime, and EndTime.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveCenterTransferRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveCenterTransferResponse
   */
  async updateLiveCenterTransferWithOptions(request: $_model.UpdateLiveCenterTransferRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveCenterTransferResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.dstUrl)) {
      query["DstUrl"] = request.dstUrl;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.transferArgs)) {
      query["TransferArgs"] = request.transferArgs;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveCenterTransfer",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveCenterTransferResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveCenterTransferResponse({}));
  }

  /**
   * Modifies the configurations of live center stream relay.
   * 
   * @remarks
   * You can call this operation to modify only the **time-related** parameters, including TransferArgs, StartTime, and EndTime.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveCenterTransferRequest
   * @returns UpdateLiveCenterTransferResponse
   */
  async updateLiveCenterTransfer(request: $_model.UpdateLiveCenterTransferRequest): Promise<$_model.UpdateLiveCenterTransferResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveCenterTransferWithOptions(request, runtime);
  }

  /**
   * Updates a stream delay configuration.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - UpdateLiveDelayConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveDelayConfigResponse
   */
  async updateLiveDelayConfigWithOptions(request: $_model.UpdateLiveDelayConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveDelayConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.delayTime)) {
      query["DelayTime"] = request.delayTime;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    if (!$dara.isNull(request.taskTriggerMode)) {
      query["TaskTriggerMode"] = request.taskTriggerMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveDelayConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveDelayConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveDelayConfigResponse({}));
  }

  /**
   * Updates a stream delay configuration.
   * 
   * @remarks
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - UpdateLiveDelayConfigRequest
   * @returns UpdateLiveDelayConfigResponse
   */
  async updateLiveDelayConfig(request: $_model.UpdateLiveDelayConfigRequest): Promise<$_model.UpdateLiveDelayConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveDelayConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of callbacks for video moderation results. As a result, the callback URL that is used to receive the callback notifications is changed.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to modify the configuration of callbacks for video moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveDetectNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveDetectNotifyConfigResponse
   */
  async updateLiveDetectNotifyConfigWithOptions(request: $_model.UpdateLiveDetectNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveDetectNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveDetectNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveDetectNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveDetectNotifyConfigResponse({}));
  }

  /**
   * Modifies the configuration of callbacks for video moderation results. As a result, the callback URL that is used to receive the callback notifications is changed.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to modify the configuration of callbacks for video moderation results.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveDetectNotifyConfigRequest
   * @returns UpdateLiveDetectNotifyConfigResponse
   */
  async updateLiveDetectNotifyConfig(request: $_model.UpdateLiveDetectNotifyConfigRequest): Promise<$_model.UpdateLiveDetectNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveDetectNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Updates a mixed-stream relay task.
   * 
   * @remarks
   * Make sure that a mixed-stream relay task is created before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to create a mixed-stream relay task.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - UpdateLiveMPUTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveMPUTaskResponse
   */
  async updateLiveMPUTaskWithOptions(tmpReq: $_model.UpdateLiveMPUTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveMPUTaskResponse> {
    tmpReq.validate();
    let request = new $_model.UpdateLiveMPUTaskShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.multiStreamURL)) {
      request.multiStreamURLShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.multiStreamURL, "MultiStreamURL", "json");
    }

    if (!$dara.isNull(tmpReq.seiParams)) {
      request.seiParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.seiParams, "SeiParams", "json");
    }

    if (!$dara.isNull(tmpReq.singleSubParams)) {
      request.singleSubParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.singleSubParams, "SingleSubParams", "json");
    }

    if (!$dara.isNull(tmpReq.transcodeParams)) {
      request.transcodeParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transcodeParams, "TranscodeParams", "json");
    }

    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.channelId)) {
      query["ChannelId"] = request.channelId;
    }

    if (!$dara.isNull(request.mixMode)) {
      query["MixMode"] = request.mixMode;
    }

    if (!$dara.isNull(request.multiStreamURLShrink)) {
      query["MultiStreamURL"] = request.multiStreamURLShrink;
    }

    if (!$dara.isNull(request.seiParamsShrink)) {
      query["SeiParams"] = request.seiParamsShrink;
    }

    if (!$dara.isNull(request.singleSubParamsShrink)) {
      query["SingleSubParams"] = request.singleSubParamsShrink;
    }

    if (!$dara.isNull(request.streamURL)) {
      query["StreamURL"] = request.streamURL;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.transcodeParamsShrink)) {
      query["TranscodeParams"] = request.transcodeParamsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveMPUTask",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveMPUTaskResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveMPUTaskResponse({}));
  }

  /**
   * Updates a mixed-stream relay task.
   * 
   * @remarks
   * Make sure that a mixed-stream relay task is created before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to create a mixed-stream relay task.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveMPUTaskRequest
   * @returns UpdateLiveMPUTaskResponse
   */
  async updateLiveMPUTask(request: $_model.UpdateLiveMPUTaskRequest): Promise<$_model.UpdateLiveMPUTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveMPUTaskWithOptions(request, runtime);
  }

  /**
   * Updates a live stream encapsulation configuration.
   * 
   * @remarks
   * You can call this operation to update a live stream encapsulation configuration. The update takes effect only after you re-ingest the stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLivePackageConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLivePackageConfigResponse
   */
  async updateLivePackageConfigWithOptions(request: $_model.UpdateLivePackageConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLivePackageConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ignoreTranscode)) {
      query["IgnoreTranscode"] = request.ignoreTranscode;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.partDuration)) {
      query["PartDuration"] = request.partDuration;
    }

    if (!$dara.isNull(request.protocol)) {
      query["Protocol"] = request.protocol;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.segmentDuration)) {
      query["SegmentDuration"] = request.segmentDuration;
    }

    if (!$dara.isNull(request.segmentNum)) {
      query["SegmentNum"] = request.segmentNum;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLivePackageConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLivePackageConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLivePackageConfigResponse({}));
  }

  /**
   * Updates a live stream encapsulation configuration.
   * 
   * @remarks
   * You can call this operation to update a live stream encapsulation configuration. The update takes effect only after you re-ingest the stream.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLivePackageConfigRequest
   * @returns UpdateLivePackageConfigResponse
   */
  async updateLivePackageConfig(request: $_model.UpdateLivePackageConfigRequest): Promise<$_model.UpdateLivePackageConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLivePackageConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the stream pulling settings of a live stream, including the origin URL, start time, and end time.
   * 
   * @remarks
   * This operation is applicable to regular stream pulling. You can call this operation to modify the stream pulling settings of a live stream, including the origin URL, start time, and end time.
   * >  After this operation is complete, ApsaraVideo Live uses the updated settings for regular stream pulling. Make sure that the modification does not affect your business.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLivePullStreamInfoConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLivePullStreamInfoConfigResponse
   */
  async updateLivePullStreamInfoConfigWithOptions(request: $_model.UpdateLivePullStreamInfoConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLivePullStreamInfoConfigResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLivePullStreamInfoConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLivePullStreamInfoConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLivePullStreamInfoConfigResponse({}));
  }

  /**
   * Modifies the stream pulling settings of a live stream, including the origin URL, start time, and end time.
   * 
   * @remarks
   * This operation is applicable to regular stream pulling. You can call this operation to modify the stream pulling settings of a live stream, including the origin URL, start time, and end time.
   * >  After this operation is complete, ApsaraVideo Live uses the updated settings for regular stream pulling. Make sure that the modification does not affect your business.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLivePullStreamInfoConfigRequest
   * @returns UpdateLivePullStreamInfoConfigResponse
   */
  async updateLivePullStreamInfoConfig(request: $_model.UpdateLivePullStreamInfoConfigRequest): Promise<$_model.UpdateLivePullStreamInfoConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLivePullStreamInfoConfigWithOptions(request, runtime);
  }

  /**
   * Updates a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to update a pulled-stream relay task.
   * *   As long as the specified start time of a task has not been reached, you can modify the SourceType, Region, and DstUrl parameters of the task.
   * *   If a task is running (even if the task is in an abnormal retry state), you can modify only the CallbackUrl and RepeatTime parameters of the task. The update takes effect immediately.
   * *   If a task is stopped, you can modify all parameters of the task except SourceType, Region, and DstUrl.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param tmpReq - UpdateLivePullToPushRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLivePullToPushResponse
   */
  async updateLivePullToPushWithOptions(tmpReq: $_model.UpdateLivePullToPushRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLivePullToPushResponse> {
    tmpReq.validate();
    let request = new $_model.UpdateLivePullToPushShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.sourceUrls)) {
      request.sourceUrlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceUrls, "SourceUrls", "json");
    }

    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLivePullToPush",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLivePullToPushResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLivePullToPushResponse({}));
  }

  /**
   * Updates a pulled-stream relay task.
   * 
   * @remarks
   *   You can call this operation to update a pulled-stream relay task.
   * *   As long as the specified start time of a task has not been reached, you can modify the SourceType, Region, and DstUrl parameters of the task.
   * *   If a task is running (even if the task is in an abnormal retry state), you can modify only the CallbackUrl and RepeatTime parameters of the task. The update takes effect immediately.
   * *   If a task is stopped, you can modify all parameters of the task except SourceType, Region, and DstUrl.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLivePullToPushRequest
   * @returns UpdateLivePullToPushResponse
   */
  async updateLivePullToPush(request: $_model.UpdateLivePullToPushRequest): Promise<$_model.UpdateLivePullToPushResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLivePullToPushWithOptions(request, runtime);
  }

  /**
   * Modifies the recording callback configuration of a streaming domain.
   * 
   * @remarks
   * You can call this operation to modify the following settings:
   * *   The callback URL that is used to receive notifications about recording events and status. For more information, see [Recording event callbacks](https://help.aliyun.com/document_detail/55016.html).
   * *   The callback URL for on-demand recordings. For more information, see [On-demand recording callbacks](https://help.aliyun.com/document_detail/85910.html).
   * *   The setting that specifies whether to enable callbacks for recording status.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveRecordNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveRecordNotifyConfigResponse
   */
  async updateLiveRecordNotifyConfigWithOptions(request: $_model.UpdateLiveRecordNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveRecordNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.needStatusNotify)) {
      query["NeedStatusNotify"] = request.needStatusNotify;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.onDemandUrl)) {
      query["OnDemandUrl"] = request.onDemandUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveRecordNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveRecordNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveRecordNotifyConfigResponse({}));
  }

  /**
   * Modifies the recording callback configuration of a streaming domain.
   * 
   * @remarks
   * You can call this operation to modify the following settings:
   * *   The callback URL that is used to receive notifications about recording events and status. For more information, see [Recording event callbacks](https://help.aliyun.com/document_detail/55016.html).
   * *   The callback URL for on-demand recordings. For more information, see [On-demand recording callbacks](https://help.aliyun.com/document_detail/85910.html).
   * *   The setting that specifies whether to enable callbacks for recording status.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveRecordNotifyConfigRequest
   * @returns UpdateLiveRecordNotifyConfigResponse
   */
  async updateLiveRecordNotifyConfig(request: $_model.UpdateLiveRecordNotifyConfigRequest): Promise<$_model.UpdateLiveRecordNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveRecordNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Updates a Live-to-VOD configuration.
   * 
   * @remarks
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveRecordVodConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveRecordVodConfigResponse
   */
  async updateLiveRecordVodConfigWithOptions(request: $_model.UpdateLiveRecordVodConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveRecordVodConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.autoCompose)) {
      query["AutoCompose"] = request.autoCompose;
    }

    if (!$dara.isNull(request.composeVodTranscodeGroupId)) {
      query["ComposeVodTranscodeGroupId"] = request.composeVodTranscodeGroupId;
    }

    if (!$dara.isNull(request.cycleDuration)) {
      query["CycleDuration"] = request.cycleDuration;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.onDemand)) {
      query["OnDemand"] = request.onDemand;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.streamName)) {
      query["StreamName"] = request.streamName;
    }

    if (!$dara.isNull(request.vodTranscodeGroupId)) {
      query["VodTranscodeGroupId"] = request.vodTranscodeGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveRecordVodConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveRecordVodConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveRecordVodConfigResponse({}));
  }

  /**
   * Updates a Live-to-VOD configuration.
   * 
   * @remarks
   * You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveRecordVodConfigRequest
   * @returns UpdateLiveRecordVodConfigResponse
   */
  async updateLiveRecordVodConfig(request: $_model.UpdateLiveRecordVodConfigRequest): Promise<$_model.UpdateLiveRecordVodConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveRecordVodConfigWithOptions(request, runtime);
  }

  /**
   * Modifies a video moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to modify a video moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveSnapshotDetectPornConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveSnapshotDetectPornConfigResponse
   */
  async updateLiveSnapshotDetectPornConfigWithOptions(request: $_model.UpdateLiveSnapshotDetectPornConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveSnapshotDetectPornConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.ossBucket)) {
      query["OssBucket"] = request.ossBucket;
    }

    if (!$dara.isNull(request.ossEndpoint)) {
      query["OssEndpoint"] = request.ossEndpoint;
    }

    if (!$dara.isNull(request.ossObject)) {
      query["OssObject"] = request.ossObject;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.scene)) {
      query["Scene"] = request.scene;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveSnapshotDetectPornConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveSnapshotDetectPornConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveSnapshotDetectPornConfigResponse({}));
  }

  /**
   * Modifies a video moderation configuration.
   * 
   * @remarks
   *   Obtain the main streaming domain, and then call this operation to modify a video moderation configuration.
   * *   Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveSnapshotDetectPornConfigRequest
   * @returns UpdateLiveSnapshotDetectPornConfigResponse
   */
  async updateLiveSnapshotDetectPornConfig(request: $_model.UpdateLiveSnapshotDetectPornConfigRequest): Promise<$_model.UpdateLiveSnapshotDetectPornConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveSnapshotDetectPornConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of snapshot callbacks.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveSnapshotNotifyConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveSnapshotNotifyConfigResponse
   */
  async updateLiveSnapshotNotifyConfigWithOptions(request: $_model.UpdateLiveSnapshotNotifyConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveSnapshotNotifyConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.notifyAuthKey)) {
      query["NotifyAuthKey"] = request.notifyAuthKey;
    }

    if (!$dara.isNull(request.notifyReqAuth)) {
      query["NotifyReqAuth"] = request.notifyReqAuth;
    }

    if (!$dara.isNull(request.notifyUrl)) {
      query["NotifyUrl"] = request.notifyUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveSnapshotNotifyConfig",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveSnapshotNotifyConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveSnapshotNotifyConfigResponse({}));
  }

  /**
   * Modifies the configuration of snapshot callbacks.
   * 
   * @remarks
   * You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveSnapshotNotifyConfigRequest
   * @returns UpdateLiveSnapshotNotifyConfigResponse
   */
  async updateLiveSnapshotNotifyConfig(request: $_model.UpdateLiveSnapshotNotifyConfigRequest): Promise<$_model.UpdateLiveSnapshotNotifyConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveSnapshotNotifyConfigWithOptions(request, runtime);
  }

  /**
   * Updates the configurations of a monitoring session.
   * 
   * @remarks
   * You can call this operation to update the configurations of a monitoring session. The updates that you make to the input source configurations when the monitoring session is in the Running state immediately take effect.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveStreamMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveStreamMonitorResponse
   */
  async updateLiveStreamMonitorWithOptions(request: $_model.UpdateLiveStreamMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveStreamMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.dingTalkWebHookUrl)) {
      query["DingTalkWebHookUrl"] = request.dingTalkWebHookUrl;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.inputList)) {
      query["InputList"] = request.inputList;
    }

    if (!$dara.isNull(request.monitorConfig)) {
      query["MonitorConfig"] = request.monitorConfig;
    }

    if (!$dara.isNull(request.monitorId)) {
      query["MonitorId"] = request.monitorId;
    }

    if (!$dara.isNull(request.monitorName)) {
      query["MonitorName"] = request.monitorName;
    }

    if (!$dara.isNull(request.outputTemplate)) {
      query["OutputTemplate"] = request.outputTemplate;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stream)) {
      query["Stream"] = request.stream;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveStreamMonitor",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveStreamMonitorResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveStreamMonitorResponse({}));
  }

  /**
   * Updates the configurations of a monitoring session.
   * 
   * @remarks
   * You can call this operation to update the configurations of a monitoring session. The updates that you make to the input source configurations when the monitoring session is in the Running state immediately take effect.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveStreamMonitorRequest
   * @returns UpdateLiveStreamMonitorResponse
   */
  async updateLiveStreamMonitor(request: $_model.UpdateLiveStreamMonitorRequest): Promise<$_model.UpdateLiveStreamMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveStreamMonitorWithOptions(request, runtime);
  }

  /**
   * Updates a default transcoding configuration.
   * 
   * @remarks
   * You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to update a transcoding configuration. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account.
   * 
   * @param request - UpdateLiveStreamTranscodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveStreamTranscodeResponse
   */
  async updateLiveStreamTranscodeWithOptions(request: $_model.UpdateLiveStreamTranscodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveStreamTranscodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.encryptParameters)) {
      query["EncryptParameters"] = request.encryptParameters;
    }

    if (!$dara.isNull(request.lazy)) {
      query["Lazy"] = request.lazy;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveStreamTranscode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveStreamTranscodeResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveStreamTranscodeResponse({}));
  }

  /**
   * Updates a default transcoding configuration.
   * 
   * @remarks
   * You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to update a transcoding configuration. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 30 times per second per account.
   * 
   * @param request - UpdateLiveStreamTranscodeRequest
   * @returns UpdateLiveStreamTranscodeResponse
   */
  async updateLiveStreamTranscode(request: $_model.UpdateLiveStreamTranscodeRequest): Promise<$_model.UpdateLiveStreamTranscodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveStreamTranscodeWithOptions(request, runtime);
  }

  /**
   * Updates a watermark template.
   * 
   * @remarks
   * This operation allows you to modify the parameters of a watermark template with a specified ID.
   * ## QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - UpdateLiveStreamWatermarkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveStreamWatermarkResponse
   */
  async updateLiveStreamWatermarkWithOptions(request: $_model.UpdateLiveStreamWatermarkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveStreamWatermarkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.offsetCorner)) {
      query["OffsetCorner"] = request.offsetCorner;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pictureUrl)) {
      query["PictureUrl"] = request.pictureUrl;
    }

    if (!$dara.isNull(request.refHeight)) {
      query["RefHeight"] = request.refHeight;
    }

    if (!$dara.isNull(request.refWidth)) {
      query["RefWidth"] = request.refWidth;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.transparency)) {
      query["Transparency"] = request.transparency;
    }

    if (!$dara.isNull(request.XOffset)) {
      query["XOffset"] = request.XOffset;
    }

    if (!$dara.isNull(request.YOffset)) {
      query["YOffset"] = request.YOffset;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveStreamWatermark",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveStreamWatermarkResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveStreamWatermarkResponse({}));
  }

  /**
   * Updates a watermark template.
   * 
   * @remarks
   * This operation allows you to modify the parameters of a watermark template with a specified ID.
   * ## QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
   * 
   * @param request - UpdateLiveStreamWatermarkRequest
   * @returns UpdateLiveStreamWatermarkResponse
   */
  async updateLiveStreamWatermark(request: $_model.UpdateLiveStreamWatermarkRequest): Promise<$_model.UpdateLiveStreamWatermarkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveStreamWatermarkWithOptions(request, runtime);
  }

  /**
   * Updates a watermark rule.
   * 
   * @remarks
   * This operation allows you to modify the parameters of a watermark rule with a specified ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveStreamWatermarkRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateLiveStreamWatermarkRuleResponse
   */
  async updateLiveStreamWatermarkRuleWithOptions(request: $_model.UpdateLiveStreamWatermarkRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateLiveStreamWatermarkRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateLiveStreamWatermarkRule",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateLiveStreamWatermarkRuleResponse>(await this.callApi(params, req, runtime), new $_model.UpdateLiveStreamWatermarkRuleResponse({}));
  }

  /**
   * Updates a watermark rule.
   * 
   * @remarks
   * This operation allows you to modify the parameters of a watermark rule with a specified ID.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateLiveStreamWatermarkRuleRequest
   * @returns UpdateLiveStreamWatermarkRuleResponse
   */
  async updateLiveStreamWatermarkRule(request: $_model.UpdateLiveStreamWatermarkRuleRequest): Promise<$_model.UpdateLiveStreamWatermarkRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateLiveStreamWatermarkRuleWithOptions(request, runtime);
  }

  /**
   * Updates the configurations of an interactive message application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - UpdateMessageAppRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateMessageAppResponse
   */
  async updateMessageAppWithOptions(tmpReq: $_model.UpdateMessageAppRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateMessageAppResponse> {
    tmpReq.validate();
    let request = new $_model.UpdateMessageAppShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.appConfig)) {
      request.appConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.appConfig, "AppConfig", "json");
    }

    if (!$dara.isNull(tmpReq.extension)) {
      request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, "Extension", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appConfigShrink)) {
      body["AppConfig"] = request.appConfigShrink;
    }

    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.appName)) {
      body["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.extensionShrink)) {
      body["Extension"] = request.extensionShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateMessageApp",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateMessageAppResponse>(await this.callApi(params, req, runtime), new $_model.UpdateMessageAppResponse({}));
  }

  /**
   * Updates the configurations of an interactive message application.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - UpdateMessageAppRequest
   * @returns UpdateMessageAppResponse
   */
  async updateMessageApp(request: $_model.UpdateMessageAppRequest): Promise<$_model.UpdateMessageAppResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateMessageAppWithOptions(request, runtime);
  }

  /**
   * Updates the information about a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param tmpReq - UpdateMessageGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateMessageGroupResponse
   */
  async updateMessageGroupWithOptions(tmpReq: $_model.UpdateMessageGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateMessageGroupResponse> {
    tmpReq.validate();
    let request = new $_model.UpdateMessageGroupShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.extension)) {
      request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, "Extension", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appId)) {
      body["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.extensionShrink)) {
      body["Extension"] = request.extensionShrink;
    }

    if (!$dara.isNull(request.groupId)) {
      body["GroupId"] = request.groupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateMessageGroup",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateMessageGroupResponse>(await this.callApi(params, req, runtime), new $_model.UpdateMessageGroupResponse({}));
  }

  /**
   * Updates the information about a message group.
   * 
   * @remarks
   * ## QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - UpdateMessageGroupRequest
   * @returns UpdateMessageGroupResponse
   */
  async updateMessageGroup(request: $_model.UpdateMessageGroupRequest): Promise<$_model.UpdateMessageGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateMessageGroupWithOptions(request, runtime);
  }

  /**
   * Updates a stream mixing task.
   * 
   * @remarks
   * You can call this operation to update a stream mixing task. This operation allows you to modify the input sources and layout, but not other parameters such as the output resolution.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateMixStreamRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateMixStreamResponse
   */
  async updateMixStreamWithOptions(request: $_model.UpdateMixStreamRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateMixStreamResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.inputStreamList)) {
      query["InputStreamList"] = request.inputStreamList;
    }

    if (!$dara.isNull(request.layoutId)) {
      query["LayoutId"] = request.layoutId;
    }

    if (!$dara.isNull(request.mixStreamId)) {
      query["MixStreamId"] = request.mixStreamId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateMixStream",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateMixStreamResponse>(await this.callApi(params, req, runtime), new $_model.UpdateMixStreamResponse({}));
  }

  /**
   * Updates a stream mixing task.
   * 
   * @remarks
   * You can call this operation to update a stream mixing task. This operation allows you to modify the input sources and layout, but not other parameters such as the output resolution.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateMixStreamRequest
   * @returns UpdateMixStreamResponse
   */
  async updateMixStream(request: $_model.UpdateMixStreamRequest): Promise<$_model.UpdateMixStreamResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateMixStreamWithOptions(request, runtime);
  }

  /**
   * 更新rtc云端录制任务
   * 
   * @param tmpReq - UpdateRtcCloudRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateRtcCloudRecordingResponse
   */
  async updateRtcCloudRecordingWithOptions(tmpReq: $_model.UpdateRtcCloudRecordingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateRtcCloudRecordingResponse> {
    tmpReq.validate();
    let request = new $_model.UpdateRtcCloudRecordingShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.mixLayoutParams)) {
      request.mixLayoutParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mixLayoutParams, "MixLayoutParams", "json");
    }

    if (!$dara.isNull(tmpReq.subscribeParams)) {
      request.subscribeParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subscribeParams, "SubscribeParams", "json");
    }

    let query = { };
    if (!$dara.isNull(request.mixLayoutParamsShrink)) {
      query["MixLayoutParams"] = request.mixLayoutParamsShrink;
    }

    if (!$dara.isNull(request.subscribeParamsShrink)) {
      query["SubscribeParams"] = request.subscribeParamsShrink;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateRtcCloudRecording",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateRtcCloudRecordingResponse>(await this.callApi(params, req, runtime), new $_model.UpdateRtcCloudRecordingResponse({}));
  }

  /**
   * 更新rtc云端录制任务
   * 
   * @param request - UpdateRtcCloudRecordingRequest
   * @returns UpdateRtcCloudRecordingResponse
   */
  async updateRtcCloudRecording(request: $_model.UpdateRtcCloudRecordingRequest): Promise<$_model.UpdateRtcCloudRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateRtcCloudRecordingWithOptions(request, runtime);
  }

  /**
   * Updates a subscription to mixed-stream relay events.
   * 
   * @remarks
   *   You can call this operation to update a subscription to mixed-stream relay events. You can modify parameters such as the callback URL and channel IDs.
   * *   Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateRtcMPUEventSubRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateRtcMPUEventSubResponse
   */
  async updateRtcMPUEventSubWithOptions(request: $_model.UpdateRtcMPUEventSubRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateRtcMPUEventSubResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.callbackUrl)) {
      query["CallbackUrl"] = request.callbackUrl;
    }

    if (!$dara.isNull(request.channelIds)) {
      query["ChannelIds"] = request.channelIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateRtcMPUEventSub",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateRtcMPUEventSubResponse>(await this.callApi(params, req, runtime), new $_model.UpdateRtcMPUEventSubResponse({}));
  }

  /**
   * Updates a subscription to mixed-stream relay events.
   * 
   * @remarks
   *   You can call this operation to update a subscription to mixed-stream relay events. You can modify parameters such as the callback URL and channel IDs.
   * *   Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - UpdateRtcMPUEventSubRequest
   * @returns UpdateRtcMPUEventSubResponse
   */
  async updateRtcMPUEventSub(request: $_model.UpdateRtcMPUEventSubRequest): Promise<$_model.UpdateRtcMPUEventSubResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateRtcMPUEventSubWithOptions(request, runtime);
  }

  /**
   * Updates a custom Real-Time Streaming (RTS) transcoding configuration.
   * 
   * @remarks
   * This operation supports the following types of custom transcoding templates: h264, h264-nbhd, h264-origin, and audio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account.
   * 
   * @param request - UpdateRtsLiveStreamTranscodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateRtsLiveStreamTranscodeResponse
   */
  async updateRtsLiveStreamTranscodeWithOptions(request: $_model.UpdateRtsLiveStreamTranscodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateRtsLiveStreamTranscodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.app)) {
      query["App"] = request.app;
    }

    if (!$dara.isNull(request.audioBitrate)) {
      query["AudioBitrate"] = request.audioBitrate;
    }

    if (!$dara.isNull(request.audioChannelNum)) {
      query["AudioChannelNum"] = request.audioChannelNum;
    }

    if (!$dara.isNull(request.audioCodec)) {
      query["AudioCodec"] = request.audioCodec;
    }

    if (!$dara.isNull(request.audioProfile)) {
      query["AudioProfile"] = request.audioProfile;
    }

    if (!$dara.isNull(request.audioRate)) {
      query["AudioRate"] = request.audioRate;
    }

    if (!$dara.isNull(request.deleteBframes)) {
      query["DeleteBframes"] = request.deleteBframes;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.FPS)) {
      query["FPS"] = request.FPS;
    }

    if (!$dara.isNull(request.gop)) {
      query["Gop"] = request.gop;
    }

    if (!$dara.isNull(request.height)) {
      query["Height"] = request.height;
    }

    if (!$dara.isNull(request.lazy)) {
      query["Lazy"] = request.lazy;
    }

    if (!$dara.isNull(request.opus)) {
      query["Opus"] = request.opus;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.profile)) {
      query["Profile"] = request.profile;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.template)) {
      query["Template"] = request.template;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.videoBitrate)) {
      query["VideoBitrate"] = request.videoBitrate;
    }

    if (!$dara.isNull(request.width)) {
      query["Width"] = request.width;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateRtsLiveStreamTranscode",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateRtsLiveStreamTranscodeResponse>(await this.callApi(params, req, runtime), new $_model.UpdateRtsLiveStreamTranscodeResponse({}));
  }

  /**
   * Updates a custom Real-Time Streaming (RTS) transcoding configuration.
   * 
   * @remarks
   * This operation supports the following types of custom transcoding templates: h264, h264-nbhd, h264-origin, and audio.
   * ## [](#qps-)QPS limit
   * You can call this operation up to 10 times per second per account.
   * 
   * @param request - UpdateRtsLiveStreamTranscodeRequest
   * @returns UpdateRtsLiveStreamTranscodeResponse
   */
  async updateRtsLiveStreamTranscode(request: $_model.UpdateRtsLiveStreamTranscodeRequest): Promise<$_model.UpdateRtsLiveStreamTranscodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateRtsLiveStreamTranscodeWithOptions(request, runtime);
  }

  /**
   * Verifies the ownership of a domain name.
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - VerifyLiveDomainOwnerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns VerifyLiveDomainOwnerResponse
   */
  async verifyLiveDomainOwnerWithOptions(request: $_model.VerifyLiveDomainOwnerRequest, runtime: $dara.RuntimeOptions): Promise<$_model.VerifyLiveDomainOwnerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.verifyType)) {
      query["VerifyType"] = request.verifyType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "VerifyLiveDomainOwner",
      version: "2016-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.VerifyLiveDomainOwnerResponse>(await this.callApi(params, req, runtime), new $_model.VerifyLiveDomainOwnerResponse({}));
  }

  /**
   * Verifies the ownership of a domain name.
   * 
   * @remarks
   * ### [](#qps-)QPS limit
   * You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
   * 
   * @param request - VerifyLiveDomainOwnerRequest
   * @returns VerifyLiveDomainOwnerResponse
   */
  async verifyLiveDomainOwner(request: $_model.VerifyLiveDomainOwnerRequest): Promise<$_model.VerifyLiveDomainOwnerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.verifyLiveDomainOwnerWithOptions(request, runtime);
  }

}
