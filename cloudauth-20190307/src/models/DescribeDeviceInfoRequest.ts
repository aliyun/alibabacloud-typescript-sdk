// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeDeviceInfoRequest extends $dara.Model {
  /**
   * @remarks
   * Business type. No more than 64 characters.
   * 
   * @example
   * FACE_TEST
   */
  bizType?: string;
  /**
   * @remarks
   * The current page number being queried.
   * 
   * @example
   * 1
   */
  currentPage?: number;
  /**
   * @remarks
   * A unique ID generated by the real-person authentication server for the access party\\"s device. This ID is only generated after the device has been successfully activated and can be obtained through the getLicenseExtraInfo function in the offline facial recognition SDK.
   * 
   * @example
   * wd.6ziUffspAeW5FVYbaqmexR-1qwNjM
   */
  deviceId?: string;
  /**
   * @remarks
   * The end time of the query, i.e., querying authorizations that will expire between ExpiredStartDay and ExpiredEndDay.
   * 
   * @example
   * 20200330
   */
  expiredEndDay?: string;
  /**
   * @remarks
   * The start time of the query, i.e., querying authorizations that will expire between ExpiredStartDay and ExpiredEndDay.
   * 
   * @example
   * 20190401
   */
  expiredStartDay?: string;
  /**
   * @remarks
   * Number of items per page in the query.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * No more than 64 characters, defined by the access party, which can be used to identify a specific device.
   * 
   * @example
   * 3iJ1AY$oHcu7mC69
   */
  userDeviceId?: string;
  static names(): { [key: string]: string } {
    return {
      bizType: 'BizType',
      currentPage: 'CurrentPage',
      deviceId: 'DeviceId',
      expiredEndDay: 'ExpiredEndDay',
      expiredStartDay: 'ExpiredStartDay',
      pageSize: 'PageSize',
      userDeviceId: 'UserDeviceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizType: 'string',
      currentPage: 'number',
      deviceId: 'string',
      expiredEndDay: 'string',
      expiredStartDay: 'string',
      pageSize: 'number',
      userDeviceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

